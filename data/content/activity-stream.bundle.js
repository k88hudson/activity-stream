/*! THIS FILE IS AUTO-GENERATED: webpack.system-addon.config.js */
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(global) {/* harmony import */ var common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var content_src_components_Base_Base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3);
/* harmony import */ var content_src_lib_detect_user_session_start__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(51);
/* harmony import */ var content_src_lib_init_store__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(6);
/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(27);
/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react_redux__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(9);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(12);
/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var common_Reducers_jsm__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(56);
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */








const store = Object(content_src_lib_init_store__WEBPACK_IMPORTED_MODULE_3__["initStore"])(common_Reducers_jsm__WEBPACK_IMPORTED_MODULE_7__["reducers"]);
new content_src_lib_detect_user_session_start__WEBPACK_IMPORTED_MODULE_2__["DetectUserSessionStart"](store).sendEventOrAddListener();
store.dispatch(common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionCreators"].AlsoToMain({
  type: common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionTypes"].NEW_TAB_STATE_REQUEST
}));
react_dom__WEBPACK_IMPORTED_MODULE_6___default.a.hydrate(react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement(react_redux__WEBPACK_IMPORTED_MODULE_4__["Provider"], {
  store: store
}, react__WEBPACK_IMPORTED_MODULE_5___default.a.createElement(content_src_components_Base_Base__WEBPACK_IMPORTED_MODULE_1__["Base"], {
  isFirstrun: global.document.location.href === "about:welcome",
  locale: global.document.documentElement.lang,
  strings: global.gActivityStreamStrings
})), document.getElementById("root"));
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1)))

/***/ }),
/* 1 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAIN_MESSAGE_TYPE", function() { return MAIN_MESSAGE_TYPE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CONTENT_MESSAGE_TYPE", function() { return CONTENT_MESSAGE_TYPE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PRELOAD_MESSAGE_TYPE", function() { return PRELOAD_MESSAGE_TYPE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UI_CODE", function() { return UI_CODE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BACKGROUND_PROCESS", function() { return BACKGROUND_PROCESS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "globalImportContext", function() { return globalImportContext; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "actionTypes", function() { return actionTypes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ASRouterActions", function() { return ASRouterActions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "actionCreators", function() { return actionCreators; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "actionUtils", function() { return actionUtils; });
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */


var MAIN_MESSAGE_TYPE = "ActivityStream:Main";
var CONTENT_MESSAGE_TYPE = "ActivityStream:Content";
var PRELOAD_MESSAGE_TYPE = "ActivityStream:PreloadedBrowser";
var UI_CODE = 1;
var BACKGROUND_PROCESS = 2;
/**
 * globalImportContext - Are we in UI code (i.e. react, a dom) or some kind of background process?
 *                       Use this in action creators if you need different logic
 *                       for ui/background processes.
 */

const globalImportContext = typeof Window === "undefined" ? BACKGROUND_PROCESS : UI_CODE; // Export for tests

// Create an object that avoids accidental differing key/value pairs:
// {
//   INIT: "INIT",
//   UNINIT: "UNINIT"
// }
const actionTypes = {};

for (const type of ["ADDONS_INFO_REQUEST", "ADDONS_INFO_RESPONSE", "ARCHIVE_FROM_POCKET", "AS_ROUTER_INITIALIZED", "AS_ROUTER_PREF_CHANGED", "AS_ROUTER_TARGETING_UPDATE", "AS_ROUTER_TELEMETRY_USER_EVENT", "BLOCK_URL", "BOOKMARK_URL", "COPY_DOWNLOAD_LINK", "DELETE_BOOKMARK_BY_ID", "DELETE_FROM_POCKET", "DELETE_HISTORY_URL", "DIALOG_CANCEL", "DIALOG_OPEN", "DISCOVERY_STREAM_CONFIG_CHANGE", "DISCOVERY_STREAM_CONFIG_SETUP", "DISCOVERY_STREAM_CONFIG_SET_VALUE", "DISCOVERY_STREAM_FEEDS_UPDATE", "DISCOVERY_STREAM_FEED_UPDATE", "DISCOVERY_STREAM_IMPRESSION_STATS", "DISCOVERY_STREAM_LAYOUT_RESET", "DISCOVERY_STREAM_LAYOUT_UPDATE", "DISCOVERY_STREAM_LINK_BLOCKED", "DISCOVERY_STREAM_LOADED_CONTENT", "DISCOVERY_STREAM_RETRY_FEED", "DISCOVERY_STREAM_SPOCS_CAPS", "DISCOVERY_STREAM_SPOCS_ENDPOINT", "DISCOVERY_STREAM_SPOCS_FILL", "DISCOVERY_STREAM_SPOCS_UPDATE", "DISCOVERY_STREAM_SPOC_BLOCKED", "DISCOVERY_STREAM_SPOC_IMPRESSION", "DOWNLOAD_CHANGED", "FAKE_FOCUS_SEARCH", "FILL_SEARCH_TERM", "HANDOFF_SEARCH_TO_AWESOMEBAR", "HIDE_SEARCH", "INIT", "NEW_TAB_INIT", "NEW_TAB_INITIAL_STATE", "NEW_TAB_LOAD", "NEW_TAB_REHYDRATED", "NEW_TAB_STATE_REQUEST", "NEW_TAB_UNLOAD", "OPEN_DOWNLOAD_FILE", "OPEN_LINK", "OPEN_NEW_WINDOW", "OPEN_PRIVATE_WINDOW", "OPEN_WEBEXT_SETTINGS", "PLACES_BOOKMARK_ADDED", "PLACES_BOOKMARK_REMOVED", "PLACES_HISTORY_CLEARED", "PLACES_LINKS_CHANGED", "PLACES_LINK_BLOCKED", "PLACES_LINK_DELETED", "PLACES_SAVED_TO_POCKET", "POCKET_CTA", "POCKET_LINK_DELETED_OR_ARCHIVED", "POCKET_LOGGED_IN", "POCKET_WAITING_FOR_SPOC", "PREFS_INITIAL_VALUES", "PREF_CHANGED", "PREVIEW_REQUEST", "PREVIEW_REQUEST_CANCEL", "PREVIEW_RESPONSE", "REMOVE_DOWNLOAD_FILE", "RICH_ICON_MISSING", "SAVE_SESSION_PERF_DATA", "SAVE_TO_POCKET", "SCREENSHOT_UPDATED", "SECTION_DEREGISTER", "SECTION_DISABLE", "SECTION_ENABLE", "SECTION_MOVE", "SECTION_OPTIONS_CHANGED", "SECTION_REGISTER", "SECTION_UPDATE", "SECTION_UPDATE_CARD", "SETTINGS_CLOSE", "SETTINGS_OPEN", "SET_PREF", "SHOW_DOWNLOAD_FILE", "SHOW_FIREFOX_ACCOUNTS", "SHOW_SEARCH", "SKIPPED_SIGNIN", "SNIPPETS_BLOCKLIST_CLEARED", "SNIPPETS_BLOCKLIST_UPDATED", "SNIPPETS_DATA", "SNIPPETS_PREVIEW_MODE", "SNIPPETS_RESET", "SNIPPET_BLOCKED", "SUBMIT_EMAIL", "SYSTEM_TICK", "TELEMETRY_IMPRESSION_STATS", "TELEMETRY_PERFORMANCE_EVENT", "TELEMETRY_UNDESIRED_EVENT", "TELEMETRY_USER_EVENT", "TOP_SITES_CANCEL_EDIT", "TOP_SITES_CLOSE_SEARCH_SHORTCUTS_MODAL", "TOP_SITES_EDIT", "TOP_SITES_INSERT", "TOP_SITES_OPEN_SEARCH_SHORTCUTS_MODAL", "TOP_SITES_PIN", "TOP_SITES_PREFS_UPDATED", "TOP_SITES_UNPIN", "TOP_SITES_UPDATED", "TOTAL_BOOKMARKS_REQUEST", "TOTAL_BOOKMARKS_RESPONSE", "TRAILHEAD_ENROLL_EVENT", "UNINIT", "UPDATE_PINNED_SEARCH_SHORTCUTS", "UPDATE_SEARCH_SHORTCUTS", "UPDATE_SECTION_PREFS", "WEBEXT_CLICK", "WEBEXT_DISMISS"]) {
  actionTypes[type] = type;
} // These are acceptable actions for AS Router messages to have. They can show up
// as call-to-action buttons in snippets, onboarding tour, etc.


const ASRouterActions = {};

for (const type of ["INSTALL_ADDON_FROM_URL", "OPEN_APPLICATIONS_MENU", "OPEN_PRIVATE_BROWSER_WINDOW", "OPEN_URL", "OPEN_ABOUT_PAGE", "OPEN_PREFERENCES_PAGE", "SHOW_FIREFOX_ACCOUNTS", "PIN_CURRENT_TAB"]) {
  ASRouterActions[type] = type;
} // Helper function for creating routed actions between content and main
// Not intended to be used by consumers


function _RouteMessage(action, options) {
  const meta = action.meta ? { ...action.meta
  } : {};

  if (!options || !options.from || !options.to) {
    throw new Error("Routed Messages must have options as the second parameter, and must at least include a .from and .to property.");
  } // For each of these fields, if they are passed as an option,
  // add them to the action. If they are not defined, remove them.


  ["from", "to", "toTarget", "fromTarget", "skipMain", "skipLocal"].forEach(o => {
    if (typeof options[o] !== "undefined") {
      meta[o] = options[o];
    } else if (meta[o]) {
      delete meta[o];
    }
  });
  return { ...action,
    meta
  };
}
/**
 * AlsoToMain - Creates a message that will be dispatched locally and also sent to the Main process.
 *
 * @param  {object} action Any redux action (required)
 * @param  {object} options
 * @param  {bool}   skipLocal Used by OnlyToMain to skip the main reducer
 * @param  {string} fromTarget The id of the content port from which the action originated. (optional)
 * @return {object} An action with added .meta properties
 */


function AlsoToMain(action, fromTarget, skipLocal) {
  return _RouteMessage(action, {
    from: CONTENT_MESSAGE_TYPE,
    to: MAIN_MESSAGE_TYPE,
    fromTarget,
    skipLocal
  });
}
/**
 * OnlyToMain - Creates a message that will be sent to the Main process and skip the local reducer.
 *
 * @param  {object} action Any redux action (required)
 * @param  {object} options
 * @param  {string} fromTarget The id of the content port from which the action originated. (optional)
 * @return {object} An action with added .meta properties
 */


function OnlyToMain(action, fromTarget) {
  return AlsoToMain(action, fromTarget, true);
}
/**
 * BroadcastToContent - Creates a message that will be dispatched to main and sent to ALL content processes.
 *
 * @param  {object} action Any redux action (required)
 * @return {object} An action with added .meta properties
 */


function BroadcastToContent(action) {
  return _RouteMessage(action, {
    from: MAIN_MESSAGE_TYPE,
    to: CONTENT_MESSAGE_TYPE
  });
}
/**
 * AlsoToOneContent - Creates a message that will be will be dispatched to the main store
 *                    and also sent to a particular Content process.
 *
 * @param  {object} action Any redux action (required)
 * @param  {string} target The id of a content port
 * @param  {bool} skipMain Used by OnlyToOneContent to skip the main process
 * @return {object} An action with added .meta properties
 */


function AlsoToOneContent(action, target, skipMain) {
  if (!target) {
    throw new Error("You must provide a target ID as the second parameter of AlsoToOneContent. If you want to send to all content processes, use BroadcastToContent");
  }

  return _RouteMessage(action, {
    from: MAIN_MESSAGE_TYPE,
    to: CONTENT_MESSAGE_TYPE,
    toTarget: target,
    skipMain
  });
}
/**
 * OnlyToOneContent - Creates a message that will be sent to a particular Content process
 *                    and skip the main reducer.
 *
 * @param  {object} action Any redux action (required)
 * @param  {string} target The id of a content port
 * @return {object} An action with added .meta properties
 */


function OnlyToOneContent(action, target) {
  return AlsoToOneContent(action, target, true);
}
/**
 * AlsoToPreloaded - Creates a message that dispatched to the main reducer and also sent to the preloaded tab.
 *
 * @param  {object} action Any redux action (required)
 * @return {object} An action with added .meta properties
 */


function AlsoToPreloaded(action) {
  return _RouteMessage(action, {
    from: MAIN_MESSAGE_TYPE,
    to: PRELOAD_MESSAGE_TYPE
  });
}
/**
 * UserEvent - A telemetry ping indicating a user action. This should only
 *                   be sent from the UI during a user session.
 *
 * @param  {object} data Fields to include in the ping (source, etc.)
 * @return {object} An AlsoToMain action
 */


function UserEvent(data) {
  return AlsoToMain({
    type: actionTypes.TELEMETRY_USER_EVENT,
    data
  });
}
/**
 * ASRouterUserEvent - A telemetry ping indicating a user action from AS router. This should only
 *                     be sent from the UI during a user session.
 *
 * @param  {object} data Fields to include in the ping (source, etc.)
 * @return {object} An AlsoToMain action
 */


function ASRouterUserEvent(data) {
  return AlsoToMain({
    type: actionTypes.AS_ROUTER_TELEMETRY_USER_EVENT,
    data
  });
}
/**
 * DiscoveryStreamSpocsFill - A telemetry ping indicating a SPOCS Fill event.
 *
 * @param  {object} data Fields to include in the ping (spoc_fills, etc.)
 * @param  {int} importContext (For testing) Override the import context for testing.
 * @return {object} An AlsoToMain action
 */


function DiscoveryStreamSpocsFill(data, importContext = globalImportContext) {
  const action = {
    type: actionTypes.DISCOVERY_STREAM_SPOCS_FILL,
    data
  };
  return importContext === UI_CODE ? AlsoToMain(action) : action;
}
/**
 * UndesiredEvent - A telemetry ping indicating an undesired state.
 *
 * @param  {object} data Fields to include in the ping (value, etc.)
 * @param  {int} importContext (For testing) Override the import context for testing.
 * @return {object} An action. For UI code, a AlsoToMain action.
 */


function UndesiredEvent(data, importContext = globalImportContext) {
  const action = {
    type: actionTypes.TELEMETRY_UNDESIRED_EVENT,
    data
  };
  return importContext === UI_CODE ? AlsoToMain(action) : action;
}
/**
 * PerfEvent - A telemetry ping indicating a performance-related event.
 *
 * @param  {object} data Fields to include in the ping (value, etc.)
 * @param  {int} importContext (For testing) Override the import context for testing.
 * @return {object} An action. For UI code, a AlsoToMain action.
 */


function PerfEvent(data, importContext = globalImportContext) {
  const action = {
    type: actionTypes.TELEMETRY_PERFORMANCE_EVENT,
    data
  };
  return importContext === UI_CODE ? AlsoToMain(action) : action;
}
/**
 * ImpressionStats - A telemetry ping indicating an impression stats.
 *
 * @param  {object} data Fields to include in the ping
 * @param  {int} importContext (For testing) Override the import context for testing.
 * #return {object} An action. For UI code, a AlsoToMain action.
 */


function ImpressionStats(data, importContext = globalImportContext) {
  const action = {
    type: actionTypes.TELEMETRY_IMPRESSION_STATS,
    data
  };
  return importContext === UI_CODE ? AlsoToMain(action) : action;
}
/**
 * DiscoveryStreamImpressionStats - A telemetry ping indicating an impression stats in Discovery Stream.
 *
 * @param  {object} data Fields to include in the ping
 * @param  {int} importContext (For testing) Override the import context for testing.
 * #return {object} An action. For UI code, a AlsoToMain action.
 */


function DiscoveryStreamImpressionStats(data, importContext = globalImportContext) {
  const action = {
    type: actionTypes.DISCOVERY_STREAM_IMPRESSION_STATS,
    data
  };
  return importContext === UI_CODE ? AlsoToMain(action) : action;
}
/**
 * DiscoveryStreamLoadedContent - A telemetry ping indicating a content gets loaded in Discovery Stream.
 *
 * @param  {object} data Fields to include in the ping
 * @param  {int} importContext (For testing) Override the import context for testing.
 * #return {object} An action. For UI code, a AlsoToMain action.
 */


function DiscoveryStreamLoadedContent(data, importContext = globalImportContext) {
  const action = {
    type: actionTypes.DISCOVERY_STREAM_LOADED_CONTENT,
    data
  };
  return importContext === UI_CODE ? AlsoToMain(action) : action;
}

function SetPref(name, value, importContext = globalImportContext) {
  const action = {
    type: actionTypes.SET_PREF,
    data: {
      name,
      value
    }
  };
  return importContext === UI_CODE ? AlsoToMain(action) : action;
}

function WebExtEvent(type, data, importContext = globalImportContext) {
  if (!data || !data.source) {
    throw new Error('WebExtEvent actions should include a property "source", the id of the webextension that should receive the event.');
  }

  const action = {
    type,
    data
  };
  return importContext === UI_CODE ? AlsoToMain(action) : action;
}

var actionCreators = {
  BroadcastToContent,
  UserEvent,
  ASRouterUserEvent,
  UndesiredEvent,
  PerfEvent,
  ImpressionStats,
  AlsoToOneContent,
  OnlyToOneContent,
  AlsoToMain,
  OnlyToMain,
  AlsoToPreloaded,
  SetPref,
  WebExtEvent,
  DiscoveryStreamImpressionStats,
  DiscoveryStreamLoadedContent,
  DiscoveryStreamSpocsFill
}; // These are helpers to test for certain kinds of actions

var actionUtils = {
  isSendToMain(action) {
    if (!action.meta) {
      return false;
    }

    return action.meta.to === MAIN_MESSAGE_TYPE && action.meta.from === CONTENT_MESSAGE_TYPE;
  },

  isBroadcastToContent(action) {
    if (!action.meta) {
      return false;
    }

    if (action.meta.to === CONTENT_MESSAGE_TYPE && !action.meta.toTarget) {
      return true;
    }

    return false;
  },

  isSendToOneContent(action) {
    if (!action.meta) {
      return false;
    }

    if (action.meta.to === CONTENT_MESSAGE_TYPE && action.meta.toTarget) {
      return true;
    }

    return false;
  },

  isSendToPreloaded(action) {
    if (!action.meta) {
      return false;
    }

    return action.meta.to === PRELOAD_MESSAGE_TYPE && action.meta.from === MAIN_MESSAGE_TYPE;
  },

  isFromMain(action) {
    if (!action.meta) {
      return false;
    }

    return action.meta.from === MAIN_MESSAGE_TYPE && action.meta.to === CONTENT_MESSAGE_TYPE;
  },

  getPortIdOfSender(action) {
    return action.meta && action.meta.fromTarget || null;
  },

  _RouteMessage
};

/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_Base", function() { return _Base; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BaseContent", function() { return BaseContent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Base", function() { return Base; });
/* harmony import */ var common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var content_src_components_ASRouterAdmin_ASRouterAdmin__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4);
/* harmony import */ var _asrouter_asrouter_content__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5);
/* harmony import */ var content_src_components_ConfirmDialog_ConfirmDialog__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(29);
/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(27);
/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react_redux__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var content_src_components_DiscoveryStreamBase_DiscoveryStreamBase__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(64);
/* harmony import */ var content_src_components_ErrorBoundary_ErrorBoundary__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(34);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(9);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var content_src_components_Search_Search__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(50);
/* harmony import */ var content_src_components_Sections_Sections__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(39);
function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */











const PrefsButton = props => react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement("div", {
  className: "prefs-button"
}, react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement("button", {
  className: "icon icon-settings",
  onClick: props.onClick,
  "data-l10n-id": "newtab-settings-button"
})); // Returns a function will not be continuously triggered when called. The
// function will be triggered if called again after `wait` milliseconds.


function debounce(func, wait) {
  let timer;
  return (...args) => {
    if (timer) {
      return;
    }

    let wakeUp = () => {
      timer = null;
    };

    timer = setTimeout(wakeUp, wait);
    func.apply(this, args);
  };
}

class _Base extends react__WEBPACK_IMPORTED_MODULE_7___default.a.PureComponent {
  componentWillMount() {
    if (this.props.isFirstrun) {
      global.document.body.classList.add("welcome", "hide-main");
    }
  }

  componentWillUnmount() {
    this.updateTheme();
  }

  componentWillUpdate() {
    this.updateTheme();
  }

  updateTheme() {
    const bodyClassName = ["activity-stream", // If we skipped the about:welcome overlay and removed the CSS classes
    // we don't want to add them back to the Activity Stream view
    document.body.classList.contains("welcome") ? "welcome" : "", document.body.classList.contains("hide-main") ? "hide-main" : "", document.body.classList.contains("inline-onboarding") ? "inline-onboarding" : ""].filter(v => v).join(" ");
    global.document.body.className = bodyClassName;
  }

  render() {
    const {
      props
    } = this;
    const {
      App
    } = props;
    const isDevtoolsEnabled = props.Prefs.values["asrouter.devtoolsEnabled"];

    if (!App.initialized) {
      return null;
    }

    return react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement(content_src_components_ErrorBoundary_ErrorBoundary__WEBPACK_IMPORTED_MODULE_6__["ErrorBoundary"], {
      className: "base-content-fallback"
    }, react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_7___default.a.Fragment, null, react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement(BaseContent, this.props), isDevtoolsEnabled ? react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement(content_src_components_ASRouterAdmin_ASRouterAdmin__WEBPACK_IMPORTED_MODULE_1__["ASRouterAdmin"], null) : null));
  }

}
class BaseContent extends react__WEBPACK_IMPORTED_MODULE_7___default.a.PureComponent {
  constructor(props) {
    super(props);
    this.openPreferences = this.openPreferences.bind(this);
    this.onWindowScroll = debounce(this.onWindowScroll.bind(this), 5);
    this.state = {
      fixedSearch: false
    };
  }

  componentDidMount() {
    global.addEventListener("scroll", this.onWindowScroll);
  }

  componentWillUnmount() {
    global.removeEventListener("scroll", this.onWindowScroll);
  }

  onWindowScroll() {
    const SCROLL_THRESHOLD = 34;

    if (global.scrollY > SCROLL_THRESHOLD && !this.state.fixedSearch) {
      this.setState({
        fixedSearch: true
      });
    } else if (global.scrollY <= SCROLL_THRESHOLD && this.state.fixedSearch) {
      this.setState({
        fixedSearch: false
      });
    }
  }

  openPreferences() {
    this.props.dispatch(common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionCreators"].OnlyToMain({
      type: common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionTypes"].SETTINGS_OPEN
    }));
    this.props.dispatch(common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionCreators"].UserEvent({
      event: "OPEN_NEWTAB_PREFS"
    }));
  }

  render() {
    const {
      props
    } = this;
    const {
      App
    } = props;
    const {
      initialized
    } = App;
    const prefs = props.Prefs.values;
    const isDiscoveryStream = props.DiscoveryStream.config && props.DiscoveryStream.config.enabled;
    let filteredSections = props.Sections; // Filter out highlights for DS

    if (isDiscoveryStream) {
      filteredSections = filteredSections.filter(section => section.id !== "highlights");
    }

    const noSectionsEnabled = !prefs["feeds.topsites"] && filteredSections.filter(section => section.enabled).length === 0;
    const searchHandoffEnabled = prefs["improvesearch.handoffToAwesomebar"];
    const outerClassName = ["outer-wrapper", isDiscoveryStream && "ds-outer-wrapper-search-alignment", isDiscoveryStream && "ds-outer-wrapper-breakpoint-override", prefs.showSearch && this.state.fixedSearch && !noSectionsEnabled && "fixed-search", prefs.showSearch && noSectionsEnabled && "only-search"].filter(v => v).join(" ");
    return react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement("div", {
      className: outerClassName
    }, react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement("main", null, prefs.showSearch && react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement("div", {
      className: "non-collapsible-section"
    }, react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement(content_src_components_ErrorBoundary_ErrorBoundary__WEBPACK_IMPORTED_MODULE_6__["ErrorBoundary"], null, react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement(content_src_components_Search_Search__WEBPACK_IMPORTED_MODULE_8__["Search"], _extends({
      showLogo: noSectionsEnabled,
      handoffEnabled: searchHandoffEnabled
    }, props.Search)))), react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement(_asrouter_asrouter_content__WEBPACK_IMPORTED_MODULE_2__["ASRouterUISurface"], {
      fxaEndpoint: this.props.Prefs.values.fxa_endpoint,
      dispatch: this.props.dispatch
    }), react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement("div", {
      className: `body-wrapper${initialized ? " on" : ""}`
    }, isDiscoveryStream ? react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement(content_src_components_ErrorBoundary_ErrorBoundary__WEBPACK_IMPORTED_MODULE_6__["ErrorBoundary"], {
      className: "borderless-error"
    }, react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement(content_src_components_DiscoveryStreamBase_DiscoveryStreamBase__WEBPACK_IMPORTED_MODULE_5__["DiscoveryStreamBase"], null)) : react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement(content_src_components_Sections_Sections__WEBPACK_IMPORTED_MODULE_9__["Sections"], null), react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement(PrefsButton, {
      onClick: this.openPreferences
    })), react__WEBPACK_IMPORTED_MODULE_7___default.a.createElement(content_src_components_ConfirmDialog_ConfirmDialog__WEBPACK_IMPORTED_MODULE_3__["ConfirmDialog"], null))));
  }

}
const Base = Object(react_redux__WEBPACK_IMPORTED_MODULE_4__["connect"])(state => ({
  App: state.App,
  Prefs: state.Prefs,
  Sections: state.Sections,
  DiscoveryStream: state.DiscoveryStream,
  Search: state.Search
}))(_Base);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1)))

/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ToggleStoryButton", function() { return ToggleStoryButton; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DiscoveryStreamAdmin", function() { return DiscoveryStreamAdmin; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ASRouterAdminInner", function() { return ASRouterAdminInner; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CollapseToggle", function() { return CollapseToggle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ASRouterAdmin", function() { return ASRouterAdmin; });
/* harmony import */ var common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var _asrouter_asrouter_content__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5);
/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(27);
/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_redux__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _asrouter_components_ModalOverlay_ModalOverlay__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(21);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(9);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _SimpleHashRouter__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(28);
function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */







const Row = props => react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("tr", _extends({
  className: "message-item"
}, props), props.children);

function relativeTime(timestamp) {
  if (!timestamp) {
    return "";
  }

  const seconds = Math.floor((Date.now() - timestamp) / 1000);
  const minutes = Math.floor((Date.now() - timestamp) / 60000);

  if (seconds < 2) {
    return "just now";
  } else if (seconds < 60) {
    return `${seconds} seconds ago`;
  } else if (minutes === 1) {
    return "1 minute ago";
  } else if (minutes < 600) {
    return `${minutes} minutes ago`;
  }

  return new Date(timestamp).toLocaleString();
}

const LAYOUT_VARIANTS = {
  basic: "Basic default layout (on by default in nightly)",
  "dev-test-all": "A little bit of everything. Good layout for testing all components",
  "dev-test-feeds": "Stress testing for slow feeds"
};
class ToggleStoryButton extends react__WEBPACK_IMPORTED_MODULE_4___default.a.PureComponent {
  constructor(props) {
    super(props);
    this.handleClick = this.handleClick.bind(this);
  }

  handleClick() {
    this.props.onClick(this.props.story);
  }

  render() {
    return react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("button", {
      onClick: this.handleClick
    }, "collapse/open");
  }

}
class DiscoveryStreamAdmin extends react__WEBPACK_IMPORTED_MODULE_4___default.a.PureComponent {
  constructor(props) {
    super(props);
    this.onEnableToggle = this.onEnableToggle.bind(this);
    this.changeEndpointVariant = this.changeEndpointVariant.bind(this);
    this.onStoryToggle = this.onStoryToggle.bind(this);
    this.state = {
      toggledStories: {}
    };
  }

  setConfigValue(name, value) {
    this.props.dispatch(common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionCreators"].OnlyToMain({
      type: common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionTypes"].DISCOVERY_STREAM_CONFIG_SET_VALUE,
      data: {
        name,
        value
      }
    }));
  }

  onEnableToggle(event) {
    this.setConfigValue("enabled", event.target.checked);
  }

  changeEndpointVariant(event) {
    const endpoint = this.props.state.config.layout_endpoint;

    if (endpoint) {
      this.setConfigValue("layout_endpoint", endpoint.replace(/layout_variant=.+/, `layout_variant=${event.target.value}`));
    }
  }

  renderComponent(width, component) {
    return react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("table", null, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("tbody", null, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(Row, null, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("td", {
      className: "min"
    }, "Type"), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("td", null, component.type)), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(Row, null, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("td", {
      className: "min"
    }, "Width"), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("td", null, width)), component.feed && this.renderFeed(component.feed)));
  }

  isCurrentVariant(id) {
    const endpoint = this.props.state.config.layout_endpoint;
    const isMatch = endpoint && !!endpoint.match(`layout_variant=${id}`);
    return isMatch;
  }

  renderFeedData(url) {
    const {
      feeds
    } = this.props.state;
    const feed = feeds.data[url].data;
    return react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_4___default.a.Fragment, null, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("h4", null, "Feed url: ", url), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("table", null, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("tbody", null, feed.recommendations.map(story => this.renderStoryData(story)))));
  }

  renderFeedsData() {
    const {
      feeds
    } = this.props.state;
    return react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_4___default.a.Fragment, null, Object.keys(feeds.data).map(url => this.renderFeedData(url)));
  }

  renderSpocs() {
    const {
      spocs
    } = this.props.state;
    let spocsData = [];

    if (spocs.data && spocs.data.spocs && spocs.data.spocs.length) {
      spocsData = spocs.data.spocs;
    }

    return react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_4___default.a.Fragment, null, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("table", null, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("tbody", null, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(Row, null, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("td", {
      className: "min"
    }, "spocs_endpoint"), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("td", null, spocs.spocs_endpoint)), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(Row, null, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("td", {
      className: "min"
    }, "Data last fetched"), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("td", null, relativeTime(spocs.lastUpdated))))), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("h4", null, "Spoc data"), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("table", null, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("tbody", null, spocsData.map(spoc => this.renderStoryData(spoc)))), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("h4", null, "Spoc frequency caps"), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("table", null, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("tbody", null, spocs.frequency_caps.map(spoc => this.renderStoryData(spoc)))));
  }

  onStoryToggle(story) {
    const {
      toggledStories
    } = this.state;
    this.setState({
      toggledStories: { ...toggledStories,
        [story.id]: !toggledStories[story.id]
      }
    });
  }

  renderStoryData(story) {
    let storyData = "";

    if (this.state.toggledStories[story.id]) {
      storyData = JSON.stringify(story, null, 2);
    }

    return react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("tr", {
      className: "message-item",
      key: story.id
    }, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("td", {
      className: "message-id"
    }, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("span", null, story.id, " ", react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("br", null)), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(ToggleStoryButton, {
      story: story,
      onClick: this.onStoryToggle
    })), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("td", {
      className: "message-summary"
    }, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("pre", null, storyData)));
  }

  renderFeed(feed) {
    const {
      feeds
    } = this.props.state;

    if (!feed.url) {
      return null;
    }

    return react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_4___default.a.Fragment, null, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(Row, null, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("td", {
      className: "min"
    }, "Feed url"), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("td", null, feed.url)), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(Row, null, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("td", {
      className: "min"
    }, "Data last fetched"), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("td", null, relativeTime(feeds.data[feed.url] ? feeds.data[feed.url].lastUpdated : null) || "(no data)")));
  }

  render() {
    const {
      config,
      lastUpdated,
      layout
    } = this.props.state;
    return react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("div", {
      className: "dsEnabled"
    }, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("input", {
      type: "checkbox",
      checked: config.enabled,
      onChange: this.onEnableToggle
    }), " ", "enabled", " "), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("h3", null, "Endpoint variant"), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("p", null, "You can also change this manually by changing this pref:", " ", react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("code", null, "browser.newtabpage.activity-stream.discoverystream.config")), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("table", {
      style: config.enabled ? null : {
        opacity: 0.5
      }
    }, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("tbody", null, Object.keys(LAYOUT_VARIANTS).map(id => react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(Row, {
      key: id
    }, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("td", {
      className: "min"
    }, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("input", {
      type: "radio",
      value: id,
      checked: this.isCurrentVariant(id),
      onChange: this.changeEndpointVariant
    })), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("td", {
      className: "min"
    }, id), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("td", null, LAYOUT_VARIANTS[id]))))), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("h3", null, "Caching info"), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("table", {
      style: config.enabled ? null : {
        opacity: 0.5
      }
    }, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("tbody", null, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(Row, null, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("td", {
      className: "min"
    }, "Data last fetched"), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("td", null, relativeTime(lastUpdated) || "(no data)")))), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("h3", null, "Layout"), layout.map((row, rowIndex) => react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("div", {
      key: `row-${rowIndex}`
    }, row.components.map((component, componentIndex) => react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("div", {
      key: `component-${componentIndex}`,
      className: "ds-component"
    }, this.renderComponent(row.width, component))))), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("h3", null, "Feeds Data"), this.renderFeedsData(), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("h3", null, "Spocs"), this.renderSpocs());
  }

}
class ASRouterAdminInner extends react__WEBPACK_IMPORTED_MODULE_4___default.a.PureComponent {
  constructor(props) {
    super(props);
    this.onMessage = this.onMessage.bind(this);
    this.handleEnabledToggle = this.handleEnabledToggle.bind(this);
    this.handleUserPrefToggle = this.handleUserPrefToggle.bind(this);
    this.onChangeMessageFilter = this.onChangeMessageFilter.bind(this);
    this.findOtherBundledMessagesOfSameTemplate = this.findOtherBundledMessagesOfSameTemplate.bind(this);
    this.handleExpressionEval = this.handleExpressionEval.bind(this);
    this.onChangeTargetingParameters = this.onChangeTargetingParameters.bind(this);
    this.onChangeAttributionParameters = this.onChangeAttributionParameters.bind(this);
    this.setAttribution = this.setAttribution.bind(this);
    this.onCopyTargetingParams = this.onCopyTargetingParams.bind(this);
    this.onPasteTargetingParams = this.onPasteTargetingParams.bind(this);
    this.onNewTargetingParams = this.onNewTargetingParams.bind(this);
    this.state = {
      messageFilter: "all",
      evaluationStatus: {},
      stringTargetingParameters: null,
      newStringTargetingParameters: null,
      copiedToClipboard: false,
      pasteFromClipboard: false,
      attributionParameters: {
        source: "addons.mozilla.org",
        campaign: "non-fx-button",
        content: "iridium@particlecore.github.io"
      }
    };
  }

  onMessage({
    data: action
  }) {
    if (action.type === "ADMIN_SET_STATE") {
      this.setState(action.data);

      if (!this.state.stringTargetingParameters) {
        const stringTargetingParameters = {};

        for (const param of Object.keys(action.data.targetingParameters)) {
          stringTargetingParameters[param] = JSON.stringify(action.data.targetingParameters[param], null, 2);
        }

        this.setState({
          stringTargetingParameters
        });
      }
    }
  }

  componentWillMount() {
    const endpoint = _asrouter_asrouter_content__WEBPACK_IMPORTED_MODULE_1__["ASRouterUtils"].getPreviewEndpoint();
    _asrouter_asrouter_content__WEBPACK_IMPORTED_MODULE_1__["ASRouterUtils"].sendMessage({
      type: "ADMIN_CONNECT_STATE",
      data: {
        endpoint
      }
    });
    _asrouter_asrouter_content__WEBPACK_IMPORTED_MODULE_1__["ASRouterUtils"].addListener(this.onMessage);
  }

  componentWillUnmount() {
    _asrouter_asrouter_content__WEBPACK_IMPORTED_MODULE_1__["ASRouterUtils"].removeListener(this.onMessage);
  }

  findOtherBundledMessagesOfSameTemplate(template) {
    return this.state.messages.filter(msg => msg.template === template && msg.bundled);
  }

  handleBlock(msg) {
    if (msg.bundled) {
      // If we are blocking a message that belongs to a bundle, block all other messages that are bundled of that same template
      let bundle = this.findOtherBundledMessagesOfSameTemplate(msg.template);
      return () => _asrouter_asrouter_content__WEBPACK_IMPORTED_MODULE_1__["ASRouterUtils"].blockBundle(bundle);
    }

    return () => _asrouter_asrouter_content__WEBPACK_IMPORTED_MODULE_1__["ASRouterUtils"].blockById(msg.id);
  }

  handleUnblock(msg) {
    if (msg.bundled) {
      // If we are unblocking a message that belongs to a bundle, unblock all other messages that are bundled of that same template
      let bundle = this.findOtherBundledMessagesOfSameTemplate(msg.template);
      return () => _asrouter_asrouter_content__WEBPACK_IMPORTED_MODULE_1__["ASRouterUtils"].unblockBundle(bundle);
    }

    return () => _asrouter_asrouter_content__WEBPACK_IMPORTED_MODULE_1__["ASRouterUtils"].unblockById(msg.id);
  }

  handleOverride(id) {
    return () => _asrouter_asrouter_content__WEBPACK_IMPORTED_MODULE_1__["ASRouterUtils"].overrideMessage(id);
  }

  expireCache() {
    _asrouter_asrouter_content__WEBPACK_IMPORTED_MODULE_1__["ASRouterUtils"].sendMessage({
      type: "EXPIRE_QUERY_CACHE"
    });
  }

  resetPref() {
    _asrouter_asrouter_content__WEBPACK_IMPORTED_MODULE_1__["ASRouterUtils"].sendMessage({
      type: "RESET_PROVIDER_PREF"
    });
  }

  handleExpressionEval() {
    const context = {};

    for (const param of Object.keys(this.state.stringTargetingParameters)) {
      const value = this.state.stringTargetingParameters[param];
      context[param] = value ? JSON.parse(value) : null;
    }

    _asrouter_asrouter_content__WEBPACK_IMPORTED_MODULE_1__["ASRouterUtils"].sendMessage({
      type: "EVALUATE_JEXL_EXPRESSION",
      data: {
        expression: this.refs.expressionInput.value,
        context
      }
    });
  }

  onChangeTargetingParameters(event) {
    const {
      name
    } = event.target;
    const {
      value
    } = event.target;
    this.setState(({
      stringTargetingParameters
    }) => {
      let targetingParametersError = null;
      const updatedParameters = { ...stringTargetingParameters
      };
      updatedParameters[name] = value;

      try {
        JSON.parse(value);
      } catch (e) {
        console.log(`Error parsing value of parameter ${name}`); // eslint-disable-line no-console

        targetingParametersError = {
          id: name
        };
      }

      return {
        copiedToClipboard: false,
        evaluationStatus: {},
        stringTargetingParameters: updatedParameters,
        targetingParametersError
      };
    });
  }

  handleEnabledToggle(event) {
    const provider = this.state.providerPrefs.find(p => p.id === event.target.dataset.provider);
    const userPrefInfo = this.state.userPrefs;
    const isUserEnabled = provider.id in userPrefInfo ? userPrefInfo[provider.id] : true;
    const isSystemEnabled = provider.enabled;
    const isEnabling = event.target.checked;

    if (isEnabling) {
      if (!isUserEnabled) {
        _asrouter_asrouter_content__WEBPACK_IMPORTED_MODULE_1__["ASRouterUtils"].sendMessage({
          type: "SET_PROVIDER_USER_PREF",
          data: {
            id: provider.id,
            value: true
          }
        });
      }

      if (!isSystemEnabled) {
        _asrouter_asrouter_content__WEBPACK_IMPORTED_MODULE_1__["ASRouterUtils"].sendMessage({
          type: "ENABLE_PROVIDER",
          data: provider.id
        });
      }
    } else {
      _asrouter_asrouter_content__WEBPACK_IMPORTED_MODULE_1__["ASRouterUtils"].sendMessage({
        type: "DISABLE_PROVIDER",
        data: provider.id
      });
    }

    this.setState({
      messageFilter: "all"
    });
  }

  handleUserPrefToggle(event) {
    const action = {
      type: "SET_PROVIDER_USER_PREF",
      data: {
        id: event.target.dataset.provider,
        value: event.target.checked
      }
    };
    _asrouter_asrouter_content__WEBPACK_IMPORTED_MODULE_1__["ASRouterUtils"].sendMessage(action);
    this.setState({
      messageFilter: "all"
    });
  }

  onChangeMessageFilter(event) {
    this.setState({
      messageFilter: event.target.value
    });
  } // Simulate a copy event that sets to clipboard all targeting paramters and values


  onCopyTargetingParams(event) {
    const stringTargetingParameters = { ...this.state.stringTargetingParameters
    };

    for (const key of Object.keys(stringTargetingParameters)) {
      // If the value is not set the parameter will be lost when we stringify
      if (stringTargetingParameters[key] === undefined) {
        stringTargetingParameters[key] = null;
      }
    }

    const setClipboardData = e => {
      e.preventDefault();
      e.clipboardData.setData("text", JSON.stringify(stringTargetingParameters, null, 2));
      document.removeEventListener("copy", setClipboardData);
      this.setState({
        copiedToClipboard: true
      });
    };

    document.addEventListener("copy", setClipboardData);
    document.execCommand("copy");
  } // Copy all clipboard data to targeting parameters


  onPasteTargetingParams(event) {
    this.setState(({
      pasteFromClipboard
    }) => ({
      pasteFromClipboard: !pasteFromClipboard,
      newStringTargetingParameters: ""
    }));
  }

  onNewTargetingParams(event) {
    this.setState({
      newStringTargetingParameters: event.target.value
    });
    event.target.classList.remove("errorState");
    this.refs.targetingParamsEval.innerText = "";

    try {
      const stringTargetingParameters = JSON.parse(event.target.value);
      this.setState({
        stringTargetingParameters
      });
    } catch (e) {
      event.target.classList.add("errorState");
      this.refs.targetingParamsEval.innerText = e.message;
    }
  }

  renderMessageItem(msg) {
    const isCurrent = msg.id === this.state.lastMessageId;
    const isBlocked = this.state.messageBlockList.includes(msg.id) || this.state.messageBlockList.includes(msg.campaign);
    const impressions = this.state.messageImpressions[msg.id] ? this.state.messageImpressions[msg.id].length : 0;
    let itemClassName = "message-item";

    if (isCurrent) {
      itemClassName += " current";
    }

    if (isBlocked) {
      itemClassName += " blocked";
    }

    return react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("tr", {
      className: itemClassName,
      key: msg.id
    }, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("td", {
      className: "message-id"
    }, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("span", null, msg.id, " ", react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("br", null))), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("td", null, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("button", {
      className: `button ${isBlocked ? "" : " primary"}`,
      onClick: isBlocked ? this.handleUnblock(msg) : this.handleBlock(msg)
    }, isBlocked ? "Unblock" : "Block"), isBlocked ? null : react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("button", {
      className: "button",
      onClick: this.handleOverride(msg.id)
    }, "Show"), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("br", null), "(", impressions, " impressions)"), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("td", {
      className: "message-summary"
    }, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("pre", null, JSON.stringify(msg, null, 2))));
  }

  renderMessages() {
    if (!this.state.messages) {
      return null;
    }

    const messagesToShow = this.state.messageFilter === "all" ? this.state.messages : this.state.messages.filter(message => message.provider === this.state.messageFilter);
    return react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("table", null, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("tbody", null, messagesToShow.map(msg => this.renderMessageItem(msg))));
  }

  renderMessageFilter() {
    if (!this.state.providers) {
      return null;
    }

    return react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("p", null, "Show messages from", " ", react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("select", {
      value: this.state.messageFilter,
      onChange: this.onChangeMessageFilter
    }, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("option", {
      value: "all"
    }, "all providers"), this.state.providers.map(provider => react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("option", {
      key: provider.id,
      value: provider.id
    }, provider.id))));
  }

  renderTableHead() {
    return react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("thead", null, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("tr", {
      className: "message-item"
    }, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("td", {
      className: "min"
    }), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("td", {
      className: "min"
    }, "Provider ID"), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("td", null, "Source"), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("td", {
      className: "min"
    }, "Cohort"), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("td", {
      className: "min"
    }, "Last Updated")));
  }

  renderProviders() {
    const providersConfig = this.state.providerPrefs;
    const providerInfo = this.state.providers;
    const userPrefInfo = this.state.userPrefs;
    return react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("table", null, this.renderTableHead(), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("tbody", null, providersConfig.map((provider, i) => {
      const isTestProvider = provider.id.includes("_local_testing");
      const info = providerInfo.find(p => p.id === provider.id) || {};
      const isUserEnabled = provider.id in userPrefInfo ? userPrefInfo[provider.id] : true;
      const isSystemEnabled = isTestProvider || provider.enabled;
      let label = "local";

      if (provider.type === "remote") {
        label = react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("span", null, "endpoint (", react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("a", {
          className: "providerUrl",
          target: "_blank",
          href: info.url,
          rel: "noopener noreferrer"
        }, info.url), ")");
      } else if (provider.type === "remote-settings") {
        label = `remote settings (${provider.bucket})`;
      }

      let reasonsDisabled = [];

      if (!isSystemEnabled) {
        reasonsDisabled.push("system pref");
      }

      if (!isUserEnabled) {
        reasonsDisabled.push("user pref");
      }

      if (reasonsDisabled.length) {
        label = `disabled via ${reasonsDisabled.join(", ")}`;
      }

      return react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("tr", {
        className: "message-item",
        key: i
      }, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("td", null, isTestProvider ? react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("input", {
        type: "checkbox",
        disabled: true,
        readOnly: true,
        checked: true
      }) : react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("input", {
        type: "checkbox",
        "data-provider": provider.id,
        checked: isUserEnabled && isSystemEnabled,
        onChange: this.handleEnabledToggle
      })), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("td", null, provider.id), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("td", null, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("span", {
        className: `sourceLabel${isUserEnabled && isSystemEnabled ? "" : " isDisabled"}`
      }, label)), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("td", null, provider.cohort), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("td", {
        style: {
          whiteSpace: "nowrap"
        }
      }, info.lastUpdated ? new Date(info.lastUpdated).toLocaleString() : ""));
    })));
  }

  renderPasteModal() {
    if (!this.state.pasteFromClipboard) {
      return null;
    }

    const errors = this.refs.targetingParamsEval && this.refs.targetingParamsEval.innerText.length;
    return react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(_asrouter_components_ModalOverlay_ModalOverlay__WEBPACK_IMPORTED_MODULE_3__["ModalOverlay"], {
      innerStyle: "pasteModal",
      title: "New targeting parameters",
      button_label: errors ? "Cancel" : "Done",
      onDismissBundle: this.onPasteTargetingParams
    }, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("div", {
      className: "onboardingMessage"
    }, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("p", null, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("textarea", {
      onChange: this.onNewTargetingParams,
      value: this.state.newStringTargetingParameters,
      rows: "20",
      cols: "60"
    })), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("p", {
      ref: "targetingParamsEval"
    })));
  }

  renderTargetingParameters() {
    // There was no error and the result is truthy
    const success = this.state.evaluationStatus.success && !!this.state.evaluationStatus.result;
    const result = JSON.stringify(this.state.evaluationStatus.result, null, 2) || "(Empty result)";
    return react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("table", null, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("tbody", null, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("tr", null, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("td", null, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("h2", null, "Evaluate JEXL expression"))), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("tr", null, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("td", null, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("p", null, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("textarea", {
      ref: "expressionInput",
      rows: "10",
      cols: "60",
      placeholder: "Evaluate JEXL expressions and mock parameters by changing their values below"
    })), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("p", null, "Status:", " ", react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("span", {
      ref: "evaluationStatus"
    }, success ? "✅" : "❌", ", Result: ", result))), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("td", null, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("button", {
      className: "ASRouterButton secondary",
      onClick: this.handleExpressionEval
    }, "Evaluate"))), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("tr", null, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("td", null, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("h2", null, "Modify targeting parameters"))), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("tr", null, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("td", null, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("button", {
      className: "ASRouterButton secondary",
      onClick: this.onCopyTargetingParams,
      disabled: this.state.copiedToClipboard
    }, this.state.copiedToClipboard ? "Parameters copied!" : "Copy parameters"), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("button", {
      className: "ASRouterButton secondary",
      onClick: this.onPasteTargetingParams,
      disabled: this.state.pasteFromClipboard
    }, "Paste parameters"))), this.state.stringTargetingParameters && Object.keys(this.state.stringTargetingParameters).map((param, i) => {
      const value = this.state.stringTargetingParameters[param];
      const errorState = this.state.targetingParametersError && this.state.targetingParametersError.id === param;
      const className = errorState ? "errorState" : "";
      const inputComp = (value && value.length) > 30 ? react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("textarea", {
        name: param,
        className: className,
        value: value,
        rows: "10",
        cols: "60",
        onChange: this.onChangeTargetingParameters
      }) : react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("input", {
        name: param,
        className: className,
        value: value,
        onChange: this.onChangeTargetingParameters
      });
      return react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("tr", {
        key: i
      }, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("td", null, param), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("td", null, inputComp));
    })));
  }

  onChangeAttributionParameters(event) {
    const {
      name,
      value
    } = event.target;
    this.setState(({
      attributionParameters
    }) => {
      const updatedParameters = { ...attributionParameters
      };
      updatedParameters[name] = value;
      return {
        attributionParameters: updatedParameters
      };
    });
  }

  setAttribution(e) {
    _asrouter_asrouter_content__WEBPACK_IMPORTED_MODULE_1__["ASRouterUtils"].sendMessage({
      type: "FORCE_ATTRIBUTION",
      data: this.state.attributionParameters
    });
  }

  renderPocketStory(story) {
    return react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("tr", {
      className: "message-item",
      key: story.guid
    }, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("td", {
      className: "message-id"
    }, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("span", null, story.guid, " ", react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("br", null))), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("td", {
      className: "message-summary"
    }, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("pre", null, JSON.stringify(story, null, 2))));
  }

  renderPocketStories() {
    const {
      rows
    } = this.props.Sections.find(Section => Section.id === "topstories") || {};
    return react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("table", null, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("tbody", null, rows && rows.map(story => this.renderPocketStory(story))));
  }

  renderDiscoveryStream() {
    const {
      config
    } = this.props.DiscoveryStream;
    return react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("table", null, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("tbody", null, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("tr", {
      className: "message-item"
    }, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("td", {
      className: "min"
    }, "Enabled"), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("td", null, config.enabled ? "yes" : "no")), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("tr", {
      className: "message-item"
    }, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("td", {
      className: "min"
    }, "Endpoint"), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("td", null, config.endpoint || "(empty)")))));
  }

  renderAttributionParamers() {
    return react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("h2", null, " Attribution Parameters "), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("p", null, " ", "This forces the browser to set some attribution parameters, useful for testing the Return To AMO feature. Clicking on 'Force Attribution', with the default values in each field, will demo the Return To AMO flow with the addon called 'Iridium for Youtube'. If you wish to try different attribution parameters, enter them in the text boxes. If you wish to try a different addon with the Return To AMO flow, make sure the 'content' text box has the addon GUID, then click 'Force Attribution'."), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("table", null, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("tr", null, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("td", null, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("b", null, " Source ")), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("td", null, " ", react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("input", {
      type: "text",
      name: "source",
      placeholder: "addons.mozilla.org",
      value: this.state.attributionParameters.source,
      onChange: this.onChangeAttributionParameters
    }), " ")), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("tr", null, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("td", null, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("b", null, " Campaign ")), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("td", null, " ", react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("input", {
      type: "text",
      name: "campaign",
      placeholder: "non-fx-button",
      value: this.state.attributionParameters.campaign,
      onChange: this.onChangeAttributionParameters
    }), " ")), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("tr", null, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("td", null, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("b", null, " Content ")), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("td", null, " ", react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("input", {
      type: "text",
      name: "content",
      placeholder: "iridium@particlecore.github.io",
      value: this.state.attributionParameters.content,
      onChange: this.onChangeAttributionParameters
    }), " ")), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("tr", null, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("td", null, " ", react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("button", {
      className: "ASRouterButton primary button",
      onClick: this.setAttribution
    }, " ", "Force Attribution", " "), " "))));
  }

  renderErrorMessage({
    id,
    errors
  }) {
    const providerId = react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("td", {
      rowSpan: errors.length
    }, id); // .reverse() so that the last error (most recent) is first

    return errors.map(({
      error,
      timestamp
    }, cellKey) => react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("tr", {
      key: cellKey
    }, cellKey === errors.length - 1 ? providerId : null, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("td", null, error.message), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("td", null, relativeTime(timestamp)))).reverse();
  }

  renderErrors() {
    const providersWithErrors = this.state.providers && this.state.providers.filter(p => p.errors && p.errors.length);

    if (providersWithErrors && providersWithErrors.length) {
      return react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("table", {
        className: "errorReporting"
      }, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("thead", null, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("tr", null, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("th", null, "Provider ID"), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("th", null, "Message"), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("th", null, "Timestamp"))), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("tbody", null, providersWithErrors.map(this.renderErrorMessage)));
    }

    return react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("p", null, "No errors");
  }

  renderTrailheadInfo() {
    const {
      trailheadInterrupt,
      trailheadTriplet,
      trailheadInitialized
    } = this.state;
    return trailheadInitialized ? react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("table", {
      className: "minimal-table"
    }, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("tbody", null, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("tr", null, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("td", null, "Interrupt branch"), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("td", null, trailheadInterrupt)), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("tr", null, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("td", null, "Triplet branch"), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("td", null, trailheadTriplet)))) : react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("p", null, "Trailhead is not initialized. To update these values, load about:welcome.");
  }

  getSection() {
    const [section] = this.props.location.routes;

    switch (section) {
      case "targeting":
        return react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_4___default.a.Fragment, null, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("h2", null, "Targeting Utilities"), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("button", {
          className: "button",
          onClick: this.expireCache
        }, "Expire Cache"), " ", "(This expires the cache in ASR Targeting for bookmarks and top sites)", this.renderTargetingParameters(), this.renderAttributionParamers());

      case "pocket":
        return react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_4___default.a.Fragment, null, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("h2", null, "Pocket"), this.renderPocketStories());

      case "ds":
        return react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_4___default.a.Fragment, null, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("h2", null, "Discovery Stream"), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(DiscoveryStreamAdmin, {
          state: this.props.DiscoveryStream,
          otherPrefs: this.props.Prefs.values,
          dispatch: this.props.dispatch
        }));

      case "errors":
        return react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_4___default.a.Fragment, null, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("h2", null, "ASRouter Errors"), this.renderErrors());

      default:
        return react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_4___default.a.Fragment, null, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("h2", null, "Message Providers", " ", react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("button", {
          title: "Restore all provider settings that ship with Firefox",
          className: "button",
          onClick: this.resetPref
        }, "Restore default prefs")), this.state.providers ? this.renderProviders() : null, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("h2", null, "Trailhead"), this.renderTrailheadInfo(), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("h2", null, "Messages"), this.renderMessageFilter(), this.renderMessages(), this.renderPasteModal());
    }
  }

  render() {
    return react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("div", {
      className: `asrouter-admin ${this.props.collapsed ? "collapsed" : "expanded"}`
    }, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("aside", {
      className: "sidebar"
    }, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("ul", null, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("li", null, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("a", {
      href: "#devtools"
    }, "General")), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("li", null, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("a", {
      href: "#devtools-targeting"
    }, "Targeting")), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("li", null, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("a", {
      href: "#devtools-pocket"
    }, "Pocket")), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("li", null, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("a", {
      href: "#devtools-ds"
    }, "Discovery Stream")), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("li", null, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("a", {
      href: "#devtools-errors"
    }, "Errors")))), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("main", {
      className: "main-panel"
    }, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("h1", null, "AS Router Admin"), react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("p", {
      className: "helpLink"
    }, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("span", {
      className: "icon icon-small-spacer icon-info"
    }), " ", react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("span", null, "Need help using these tools? Check out our", " ", react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("a", {
      target: "blank",
      href: "https://github.com/mozilla/activity-stream/blob/master/content-src/asrouter/docs/debugging-docs.md"
    }, "documentation"))), this.getSection()));
  }

}
class CollapseToggle extends react__WEBPACK_IMPORTED_MODULE_4___default.a.PureComponent {
  constructor(props) {
    super(props);
    this.onCollapseToggle = this.onCollapseToggle.bind(this);
    this.state = {
      collapsed: false
    };
  }

  get renderAdmin() {
    const {
      props
    } = this;
    return props.location.hash && (props.location.hash.startsWith("#asrouter") || props.location.hash.startsWith("#devtools"));
  }

  onCollapseToggle(e) {
    e.preventDefault();
    this.setState(state => ({
      collapsed: !state.collapsed
    }));
  }

  setBodyClass() {
    if (this.renderAdmin && !this.state.collapsed) {
      global.document.body.classList.add("no-scroll");
    } else {
      global.document.body.classList.remove("no-scroll");
    }
  }

  componentDidMount() {
    this.setBodyClass();
  }

  componentDidUpdate() {
    this.setBodyClass();
  }

  componentWillUnmount() {
    global.document.body.classList.remove("no-scroll");
  }

  render() {
    const {
      props
    } = this;
    const {
      renderAdmin
    } = this;
    const isCollapsed = this.state.collapsed || !renderAdmin;
    const label = `${isCollapsed ? "Expand" : "Collapse"} devtools`;
    return react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_4___default.a.Fragment, null, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("a", {
      href: "#devtools",
      title: label,
      "aria-label": label,
      className: `asrouter-toggle ${isCollapsed ? "collapsed" : "expanded"}`,
      onClick: this.renderAdmin ? this.onCollapseToggle : null
    }, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("span", {
      className: "icon icon-devtools"
    })), renderAdmin ? react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(ASRouterAdminInner, _extends({}, props, {
      collapsed: this.state.collapsed
    })) : null);
  }

}

const _ASRouterAdmin = props => react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(_SimpleHashRouter__WEBPACK_IMPORTED_MODULE_5__["SimpleHashRouter"], null, react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement(CollapseToggle, props));

const ASRouterAdmin = Object(react_redux__WEBPACK_IMPORTED_MODULE_2__["connect"])(state => ({
  Sections: state.Sections,
  DiscoveryStream: state.DiscoveryStream,
  Prefs: state.Prefs
}))(_ASRouterAdmin);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1)))

/***/ }),
/* 5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ASRouterUtils", function() { return ASRouterUtils; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ASRouterUISurface", function() { return ASRouterUISurface; });
/* harmony import */ var common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var content_src_lib_init_store__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6);
/* harmony import */ var _rich_text_strings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(55);
/* harmony import */ var _components_ImpressionsWrapper_ImpressionsWrapper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(8);
/* harmony import */ var fluent_react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(53);
/* harmony import */ var content_src_lib_constants__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(11);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(9);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(12);
/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var _templates_template_manifest__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(54);
/* harmony import */ var _templates_FirstRun_FirstRun__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(58);
function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */










const INCOMING_MESSAGE_NAME = "ASRouter:parent-to-child";
const OUTGOING_MESSAGE_NAME = "ASRouter:child-to-parent";
const TEMPLATES_ABOVE_PAGE = ["trailhead", "fxa_overlay", "return_to_amo_overlay"];
const FIRST_RUN_TEMPLATES = TEMPLATES_ABOVE_PAGE;
const TEMPLATES_BELOW_SEARCH = ["simple_below_search_snippet"];
const ASRouterUtils = {
  addListener(listener) {
    if (global.RPMAddMessageListener) {
      global.RPMAddMessageListener(INCOMING_MESSAGE_NAME, listener);
    }
  },

  removeListener(listener) {
    if (global.RPMRemoveMessageListener) {
      global.RPMRemoveMessageListener(INCOMING_MESSAGE_NAME, listener);
    }
  },

  sendMessage(action) {
    if (global.RPMSendAsyncMessage) {
      global.RPMSendAsyncMessage(OUTGOING_MESSAGE_NAME, action);
    }
  },

  blockById(id, options) {
    ASRouterUtils.sendMessage({
      type: "BLOCK_MESSAGE_BY_ID",
      data: {
        id,
        ...options
      }
    });
  },

  dismissById(id) {
    ASRouterUtils.sendMessage({
      type: "DISMISS_MESSAGE_BY_ID",
      data: {
        id
      }
    });
  },

  executeAction(button_action) {
    ASRouterUtils.sendMessage({
      type: "USER_ACTION",
      data: button_action
    });
  },

  unblockById(id) {
    ASRouterUtils.sendMessage({
      type: "UNBLOCK_MESSAGE_BY_ID",
      data: {
        id
      }
    });
  },

  unblockBundle(bundle) {
    ASRouterUtils.sendMessage({
      type: "UNBLOCK_BUNDLE",
      data: {
        bundle
      }
    });
  },

  overrideMessage(id) {
    ASRouterUtils.sendMessage({
      type: "OVERRIDE_MESSAGE",
      data: {
        id
      }
    });
  },

  sendTelemetry(ping) {
    if (global.RPMSendAsyncMessage) {
      const payload = common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionCreators"].ASRouterUserEvent(ping);
      global.RPMSendAsyncMessage(content_src_lib_init_store__WEBPACK_IMPORTED_MODULE_1__["OUTGOING_MESSAGE_NAME"], payload);
    }
  },

  getPreviewEndpoint() {
    if (global.location && global.location.href.includes("endpoint")) {
      const params = new URLSearchParams(global.location.href.slice(global.location.href.indexOf("endpoint")));

      try {
        const endpoint = new URL(params.get("endpoint"));
        return {
          url: endpoint.href,
          snippetId: params.get("snippetId"),
          theme: this.getPreviewTheme()
        };
      } catch (e) {}
    }

    return null;
  },

  getPreviewTheme() {
    return new URLSearchParams(global.location.href.slice(global.location.href.indexOf("theme"))).get("theme");
  }

}; // Note: nextProps/prevProps refer to props passed to <ImpressionsWrapper />, not <ASRouterUISurface />

function shouldSendImpressionOnUpdate(nextProps, prevProps) {
  return nextProps.message.id && (!prevProps.message || prevProps.message.id !== nextProps.message.id);
}

class ASRouterUISurface extends react__WEBPACK_IMPORTED_MODULE_6___default.a.PureComponent {
  constructor(props) {
    super(props);
    this.onMessageFromParent = this.onMessageFromParent.bind(this);
    this.sendClick = this.sendClick.bind(this);
    this.sendImpression = this.sendImpression.bind(this);
    this.sendUserActionTelemetry = this.sendUserActionTelemetry.bind(this);
    this.state = {
      message: {}
    };

    if (props.document) {
      this.headerPortal = props.document.getElementById("header-asrouter-container");
      this.footerPortal = props.document.getElementById("footer-asrouter-container");
    }
  }

  sendUserActionTelemetry(extraProps = {}) {
    const {
      message
    } = this.state;
    const eventType = `${message.provider}_user_event`;
    ASRouterUtils.sendTelemetry({
      message_id: message.id,
      source: extraProps.id,
      action: eventType,
      ...extraProps
    });
  }

  sendImpression(extraProps) {
    if (this.state.message.provider === "preview") {
      return;
    }

    ASRouterUtils.sendMessage({
      type: "IMPRESSION",
      data: this.state.message
    });
    this.sendUserActionTelemetry({
      event: "IMPRESSION",
      ...extraProps
    });
  } // If link has a `metric` data attribute send it as part of the `value`
  // telemetry field which can have arbitrary values.
  // Used for router messages with links as part of the content.


  sendClick(event) {
    const metric = {
      value: event.target.dataset.metric,
      // Used for the `source` of the event. Needed to differentiate
      // from other snippet or onboarding events that may occur.
      id: "NEWTAB_FOOTER_BAR_CONTENT"
    };
    const action = {
      type: event.target.dataset.action,
      data: {
        args: event.target.dataset.args
      }
    };

    if (action.type) {
      ASRouterUtils.executeAction(action);
    }

    if (!this.state.message.content.do_not_autoblock && !event.target.dataset.do_not_autoblock) {
      ASRouterUtils.blockById(this.state.message.id);
    }

    if (this.state.message.provider !== "preview") {
      this.sendUserActionTelemetry({
        event: "CLICK_BUTTON",
        ...metric
      });
    }
  }

  onBlockById(id) {
    return options => ASRouterUtils.blockById(id, options);
  }

  onDismissById(id) {
    return () => ASRouterUtils.dismissById(id);
  }

  clearMessage(id) {
    if (id === this.state.message.id) {
      this.setState({
        message: {}
      }); // Remove any styles related to the RTAMO message

      document.body.classList.remove("welcome", "hide-main", "amo");
    }
  }

  onMessageFromParent({
    data: action
  }) {
    switch (action.type) {
      case "SET_MESSAGE":
        this.setState({
          message: action.data
        });
        break;

      case "CLEAR_MESSAGE":
        this.clearMessage(action.data.id);
        break;

      case "CLEAR_PROVIDER":
        if (action.data.id === this.state.message.provider) {
          this.setState({
            message: {}
          });
        }

        break;

      case "CLEAR_ALL":
        this.setState({
          message: {}
        });
        break;

      case "AS_ROUTER_TARGETING_UPDATE":
        action.data.forEach(id => this.clearMessage(id));
        break;
    }
  }

  componentWillMount() {
    const endpoint = ASRouterUtils.getPreviewEndpoint();

    if (endpoint && endpoint.theme === "dark") {
      global.window.dispatchEvent(new CustomEvent("LightweightTheme:Set", {
        detail: {
          data: content_src_lib_constants__WEBPACK_IMPORTED_MODULE_5__["NEWTAB_DARK_THEME"]
        }
      }));
    }

    ASRouterUtils.addListener(this.onMessageFromParent); // If we are loading about:welcome we want to trigger the onboarding messages

    if (this.props.document && this.props.document.location.href === "about:welcome") {
      ASRouterUtils.sendMessage({
        type: "TRIGGER",
        data: {
          trigger: {
            id: "firstRun"
          }
        }
      });
    } else {
      ASRouterUtils.sendMessage({
        type: "SNIPPETS_REQUEST",
        data: {
          endpoint
        }
      });
    }
  }

  componentWillUnmount() {
    ASRouterUtils.removeListener(this.onMessageFromParent);
  }

  renderSnippets() {
    const {
      message
    } = this.state;

    if (!_templates_template_manifest__WEBPACK_IMPORTED_MODULE_8__["SnippetsTemplates"][message.template]) {
      return null;
    }

    const SnippetComponent = _templates_template_manifest__WEBPACK_IMPORTED_MODULE_8__["SnippetsTemplates"][message.template];
    const {
      content
    } = this.state.message;
    return react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement(_components_ImpressionsWrapper_ImpressionsWrapper__WEBPACK_IMPORTED_MODULE_3__["ImpressionsWrapper"], {
      id: "NEWTAB_FOOTER_BAR",
      message: this.state.message,
      sendImpression: this.sendImpression,
      shouldSendImpressionOnUpdate: shouldSendImpressionOnUpdate // This helps with testing
      ,
      document: this.props.document
    }, react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement(fluent_react__WEBPACK_IMPORTED_MODULE_4__["LocalizationProvider"], {
      bundles: Object(_rich_text_strings__WEBPACK_IMPORTED_MODULE_2__["generateBundles"])(content)
    }, react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement(SnippetComponent, _extends({}, this.state.message, {
      UISurface: "NEWTAB_FOOTER_BAR",
      onBlock: this.onBlockById(this.state.message.id),
      onDismiss: this.onDismissById(this.state.message.id),
      onAction: ASRouterUtils.executeAction,
      sendClick: this.sendClick,
      sendUserActionTelemetry: this.sendUserActionTelemetry
    }))));
  }

  renderPreviewBanner() {
    if (this.state.message.provider !== "preview") {
      return null;
    }

    return react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement("div", {
      className: "snippets-preview-banner"
    }, react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement("span", {
      className: "icon icon-small-spacer icon-info"
    }), react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement("span", null, "Preview Purposes Only"));
  }

  renderFirstRun() {
    const {
      message
    } = this.state;

    if (FIRST_RUN_TEMPLATES.includes(message.template)) {
      return react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement(_templates_FirstRun_FirstRun__WEBPACK_IMPORTED_MODULE_9__["FirstRun"], {
        document: this.props.document,
        message: message,
        sendUserActionTelemetry: this.sendUserActionTelemetry,
        executeAction: ASRouterUtils.executeAction,
        dispatch: this.props.dispatch,
        onDismiss: this.onDismissById(this.state.message.id),
        fxaEndpoint: this.props.fxaEndpoint
      });
    }

    return null;
  }

  render() {
    const {
      message
    } = this.state;

    if (!message.id) {
      return null;
    }

    const shouldRenderBelowSearch = TEMPLATES_BELOW_SEARCH.includes(message.template);
    const shouldRenderInHeader = TEMPLATES_ABOVE_PAGE.includes(message.template);
    return shouldRenderBelowSearch ? // Render special below search snippets in place;
    react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement("div", {
      className: "below-search-snippet"
    }, this.renderSnippets()) : // For onboarding, regular snippets etc. we should render
    // everything in our footer container.
    react_dom__WEBPACK_IMPORTED_MODULE_7___default.a.createPortal(react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_6___default.a.Fragment, null, this.renderPreviewBanner(), this.renderFirstRun(), this.renderSnippets()), shouldRenderInHeader ? this.headerPortal : this.footerPortal);
  }

}
ASRouterUISurface.defaultProps = {
  document: global.document
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1)))

/***/ }),
/* 6 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MERGE_STORE_ACTION", function() { return MERGE_STORE_ACTION; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OUTGOING_MESSAGE_NAME", function() { return OUTGOING_MESSAGE_NAME; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "INCOMING_MESSAGE_NAME", function() { return INCOMING_MESSAGE_NAME; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EARLY_QUEUED_ACTIONS", function() { return EARLY_QUEUED_ACTIONS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rehydrationMiddleware", function() { return rehydrationMiddleware; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "queueEarlyMessageMiddleware", function() { return queueEarlyMessageMiddleware; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initStore", function() { return initStore; });
/* harmony import */ var common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var redux__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7);
/* harmony import */ var redux__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(redux__WEBPACK_IMPORTED_MODULE_1__);
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */

/* eslint-env mozilla/frame-script */


const MERGE_STORE_ACTION = "NEW_TAB_INITIAL_STATE";
const OUTGOING_MESSAGE_NAME = "ActivityStream:ContentToMain";
const INCOMING_MESSAGE_NAME = "ActivityStream:MainToContent";
const EARLY_QUEUED_ACTIONS = [common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionTypes"].SAVE_SESSION_PERF_DATA];
/**
 * A higher-order function which returns a reducer that, on MERGE_STORE action,
 * will return the action.data object merged into the previous state.
 *
 * For all other actions, it merely calls mainReducer.
 *
 * Because we want this to merge the entire state object, it's written as a
 * higher order function which takes the main reducer (itself often a call to
 * combineReducers) as a parameter.
 *
 * @param  {function} mainReducer reducer to call if action != MERGE_STORE_ACTION
 * @return {function}             a reducer that, on MERGE_STORE_ACTION action,
 *                                will return the action.data object merged
 *                                into the previous state, and the result
 *                                of calling mainReducer otherwise.
 */

function mergeStateReducer(mainReducer) {
  return (prevState, action) => {
    if (action.type === MERGE_STORE_ACTION) {
      return { ...prevState,
        ...action.data
      };
    }

    return mainReducer(prevState, action);
  };
}
/**
 * messageMiddleware - Middleware that looks for SentToMain type actions, and sends them if necessary
 */


const messageMiddleware = store => next => action => {
  const skipLocal = action.meta && action.meta.skipLocal;

  if (common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionUtils"].isSendToMain(action)) {
    RPMSendAsyncMessage(OUTGOING_MESSAGE_NAME, action);
  }

  if (!skipLocal) {
    next(action);
  }
};

const rehydrationMiddleware = store => next => action => {
  if (store._didRehydrate) {
    return next(action);
  }

  const isMergeStoreAction = action.type === MERGE_STORE_ACTION;
  const isRehydrationRequest = action.type === common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionTypes"].NEW_TAB_STATE_REQUEST;

  if (isRehydrationRequest) {
    store._didRequestInitialState = true;
    return next(action);
  }

  if (isMergeStoreAction) {
    store._didRehydrate = true;
    return next(action);
  } // If init happened after our request was made, we need to re-request


  if (store._didRequestInitialState && action.type === common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionTypes"].INIT) {
    return next(common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionCreators"].AlsoToMain({
      type: common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionTypes"].NEW_TAB_STATE_REQUEST
    }));
  }

  if (common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionUtils"].isBroadcastToContent(action) || common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionUtils"].isSendToOneContent(action) || common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionUtils"].isSendToPreloaded(action)) {
    // Note that actions received before didRehydrate will not be dispatched
    // because this could negatively affect preloading and the the state
    // will be replaced by rehydration anyway.
    return null;
  }

  return next(action);
};
/**
 * This middleware queues up all the EARLY_QUEUED_ACTIONS until it receives
 * the first action from main. This is useful for those actions for main which
 * require higher reliability, i.e. the action will not be lost in the case
 * that it gets sent before the main is ready to receive it. Conversely, any
 * actions allowed early are accepted to be ignorable or re-sendable.
 */

const queueEarlyMessageMiddleware = store => next => action => {
  if (store._receivedFromMain) {
    next(action);
  } else if (common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionUtils"].isFromMain(action)) {
    next(action);
    store._receivedFromMain = true; // Sending out all the early actions as main is ready now

    if (store._earlyActionQueue) {
      store._earlyActionQueue.forEach(next);

      store._earlyActionQueue = [];
    }
  } else if (EARLY_QUEUED_ACTIONS.includes(action.type)) {
    store._earlyActionQueue = store._earlyActionQueue || [];

    store._earlyActionQueue.push(action);
  } else {
    // Let any other type of action go through
    next(action);
  }
};
/**
 * initStore - Create a store and listen for incoming actions
 *
 * @param  {object} reducers An object containing Redux reducers
 * @param  {object} intialState (optional) The initial state of the store, if desired
 * @return {object}          A redux store
 */

function initStore(reducers) {
  const store = Object(redux__WEBPACK_IMPORTED_MODULE_1__["createStore"])(mergeStateReducer(Object(redux__WEBPACK_IMPORTED_MODULE_1__["combineReducers"])(reducers)), global.RPMAddMessageListener && Object(redux__WEBPACK_IMPORTED_MODULE_1__["applyMiddleware"])(rehydrationMiddleware, queueEarlyMessageMiddleware, messageMiddleware));
  store._didRehydrate = false;
  store._didRequestInitialState = false;

  if (global.RPMAddMessageListener) {
    global.RPMAddMessageListener(INCOMING_MESSAGE_NAME, msg => {
      try {
        store.dispatch(msg.data);
      } catch (ex) {
        console.error("Content msg:", msg, "Dispatch error: ", ex); // eslint-disable-line no-console

        dump(`Content msg: ${JSON.stringify(msg)}\nDispatch error: ${ex}\n${ex.stack}`);
      }
    });
  }

  return store;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1)))

/***/ }),
/* 7 */
/***/ (function(module, exports) {

module.exports = Redux;

/***/ }),
/* 8 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VISIBLE", function() { return VISIBLE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VISIBILITY_CHANGE_EVENT", function() { return VISIBILITY_CHANGE_EVENT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ImpressionsWrapper", function() { return ImpressionsWrapper; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */

const VISIBLE = "visible";
const VISIBILITY_CHANGE_EVENT = "visibilitychange";
/**
 * Component wrapper used to send telemetry pings on every impression.
 */

class ImpressionsWrapper extends react__WEBPACK_IMPORTED_MODULE_0___default.a.PureComponent {
  // This sends an event when a user sees a set of new content. If content
  // changes while the page is hidden (i.e. preloaded or on a hidden tab),
  // only send the event if the page becomes visible again.
  sendImpressionOrAddListener() {
    if (this.props.document.visibilityState === VISIBLE) {
      this.props.sendImpression({
        id: this.props.id
      });
    } else {
      // We should only ever send the latest impression stats ping, so remove any
      // older listeners.
      if (this._onVisibilityChange) {
        this.props.document.removeEventListener(VISIBILITY_CHANGE_EVENT, this._onVisibilityChange);
      } // When the page becomes visible, send the impression stats ping if the section isn't collapsed.


      this._onVisibilityChange = () => {
        if (this.props.document.visibilityState === VISIBLE) {
          this.props.sendImpression({
            id: this.props.id
          });
          this.props.document.removeEventListener(VISIBILITY_CHANGE_EVENT, this._onVisibilityChange);
        }
      };

      this.props.document.addEventListener(VISIBILITY_CHANGE_EVENT, this._onVisibilityChange);
    }
  }

  componentWillUnmount() {
    if (this._onVisibilityChange) {
      this.props.document.removeEventListener(VISIBILITY_CHANGE_EVENT, this._onVisibilityChange);
    }
  }

  componentDidMount() {
    if (this.props.sendOnMount) {
      this.sendImpressionOrAddListener();
    }
  }

  componentDidUpdate(prevProps) {
    if (this.props.shouldSendImpressionOnUpdate(this.props, prevProps)) {
      this.sendImpressionOrAddListener();
    }
  }

  render() {
    return this.props.children;
  }

}
ImpressionsWrapper.defaultProps = {
  document: global.document,
  sendOnMount: true
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1)))

/***/ }),
/* 9 */
/***/ (function(module, exports) {

module.exports = React;

/***/ }),
/* 10 */
/***/ (function(module, exports) {

module.exports = PropTypes;

/***/ }),
/* 11 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IS_NEWTAB", function() { return IS_NEWTAB; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NEWTAB_DARK_THEME", function() { return NEWTAB_DARK_THEME; });
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */
const IS_NEWTAB = global.document && global.document.documentURI === "about:newtab";
const NEWTAB_DARK_THEME = {
  ntp_background: {
    r: 42,
    g: 42,
    b: 46,
    a: 1
  },
  ntp_text: {
    r: 249,
    g: 249,
    b: 250,
    a: 1
  },
  sidebar: {
    r: 56,
    g: 56,
    b: 61,
    a: 1
  },
  sidebar_text: {
    r: 249,
    g: 249,
    b: 250,
    a: 1
  }
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1)))

/***/ }),
/* 12 */
/***/ (function(module, exports) {

module.exports = ReactDOM;

/***/ }),
/* 13 */
/***/ (function(module) {

module.exports = {"title":"EOYSnippet","description":"Fundraising Snippet","version":"1.1.0","type":"object","definitions":{"plainText":{"description":"Plain text (no HTML allowed)","type":"string"},"richText":{"description":"Text with HTML subset allowed: i, b, u, strong, em, br","type":"string"},"link_url":{"description":"Target for links or buttons","type":"string","format":"uri"}},"properties":{"donation_form_url":{"type":"string","description":"Url to the donation form."},"currency_code":{"type":"string","description":"The code for the currency. Examle gbp, cad, usd.","default":"usd"},"locale":{"type":"string","description":"String for the locale code.","default":"en-US"},"text":{"allOf":[{"$ref":"#/definitions/richText"},{"description":"Main body text of snippet. HTML subset allowed: i, b, u, strong, em, br"}]},"text_color":{"type":"string","description":"Modify the text message color"},"background_color":{"type":"string","description":"Snippet background color."},"highlight_color":{"type":"string","description":"Paragraph em highlight color."},"donation_amount_first":{"type":"number","description":"First button amount."},"donation_amount_second":{"type":"number","description":"Second button amount."},"donation_amount_third":{"type":"number","description":"Third button amount."},"donation_amount_fourth":{"type":"number","description":"Fourth button amount."},"selected_button":{"type":"string","description":"Default donation_amount_second. Donation amount button that's selected by default.","default":"donation_amount_second"},"icon":{"type":"string","description":"Snippet icon. 64x64px. SVG or PNG preferred."},"icon_dark_theme":{"type":"string","description":"Snippet icon. Dark theme variant. 64x64px. SVG or PNG preferred."},"icon_alt_text":{"type":"string","description":"Alt text for accessibility","default":""},"title":{"allOf":[{"$ref":"#/definitions/plainText"},{"description":"Snippet title displayed before snippet text"}]},"title_icon":{"type":"string","description":"Small icon that shows up before the title / text. 16x16px. SVG or PNG preferred. Grayscale."},"title_icon_dark_theme":{"type":"string","description":"Small icon that shows up before the title / text. Dark theme variant. 16x16px. SVG or PNG preferred. Grayscale."},"button_label":{"allOf":[{"$ref":"#/definitions/plainText"},{"description":"Text for a button next to main snippet text that links to button_url. Requires button_url."}]},"button_color":{"type":"string","description":"The text color of the button. Valid CSS color."},"button_background_color":{"type":"string","description":"The background color of the button. Valid CSS color."},"block_button_text":{"type":"string","description":"Tooltip text used for dismiss button."},"monthly_checkbox_label_text":{"type":"string","description":"Label text for monthly checkbox.","default":"Make my donation monthly"},"test":{"type":"string","description":"Different styles for the snippet. Options are bold and takeover."},"do_not_autoblock":{"type":"boolean","description":"Used to prevent blocking the snippet after the CTA (link or button) has been clicked"},"links":{"additionalProperties":{"url":{"allOf":[{"$ref":"#/definitions/link_url"},{"description":"The url where the link points to."}]},"metric":{"type":"string","description":"Custom event name sent with telemetry event."},"args":{"type":"string","description":"Additional parameters for link action, example which specific menu the button should open"}}}},"additionalProperties":false,"required":["text","donation_form_url","donation_amount_first","donation_amount_second","donation_amount_third","donation_amount_fourth","button_label","currency_code"],"dependencies":{"button_color":["button_label"],"button_background_color":["button_label"]}};

/***/ }),
/* 14 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "convertLinks", function() { return convertLinks; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RichText", function() { return RichText; });
/* harmony import */ var fluent_react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(53);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _rich_text_strings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(55);
/* harmony import */ var _template_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(15);
function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */



 // Elements allowed in snippet content

const ALLOWED_TAGS = {
  b: react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("b", null),
  i: react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("i", null),
  u: react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("u", null),
  strong: react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("strong", null),
  em: react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("em", null),
  br: react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("br", null)
};
/**
 * Transform an object (tag name: {url}) into (tag name: anchor) where the url
 * is used as href, in order to render links inside a Fluent.Localized component.
 */

function convertLinks(links, sendClick, doNotAutoBlock, openNewWindow = false) {
  if (links) {
    return Object.keys(links).reduce((acc, linkTag) => {
      const {
        action
      } = links[linkTag]; // Setting the value to false will not include the attribute in the anchor

      const url = action ? false : Object(_template_utils__WEBPACK_IMPORTED_MODULE_3__["safeURI"])(links[linkTag].url);
      acc[linkTag] = // eslint was getting a false positive caused by the dynamic injection
      // of content.
      // eslint-disable-next-line jsx-a11y/anchor-has-content
      react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("a", {
        href: url,
        target: openNewWindow ? "_blank" : "",
        "data-metric": links[linkTag].metric,
        "data-action": action,
        "data-args": links[linkTag].args,
        "data-do_not_autoblock": doNotAutoBlock,
        onClick: sendClick
      });
      return acc;
    }, {});
  }

  return null;
}
/**
 * Message wrapper used to sanitize markup and render HTML.
 */

function RichText(props) {
  if (!_rich_text_strings__WEBPACK_IMPORTED_MODULE_2__["RICH_TEXT_KEYS"].includes(props.localization_id)) {
    throw new Error(`ASRouter: ${props.localization_id} is not a valid rich text property. If you want it to be processed, you need to add it to asrouter/rich-text-strings.js`);
  }

  return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(fluent_react__WEBPACK_IMPORTED_MODULE_0__["Localized"], _extends({
    id: props.localization_id
  }, ALLOWED_TAGS, props.customElements, convertLinks(props.links, props.sendClick, props.doNotAutoBlock, props.openNewWindow)), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", null, props.text));
}

/***/ }),
/* 15 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "safeURI", function() { return safeURI; });
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */
function safeURI(url) {
  if (!url) {
    return "";
  }

  const {
    protocol
  } = new URL(url);
  const isAllowed = ["http:", "https:", "data:", "resource:", "chrome:"].includes(protocol);

  if (!isAllowed) {
    console.warn(`The protocol ${protocol} is not allowed for template URLs.`); // eslint-disable-line no-console
  }

  return isAllowed ? url : "";
}

/***/ }),
/* 16 */
/***/ (function(module) {

module.exports = {"title":"SimpleSnippet","description":"A simple template with an icon, text, and optional button.","version":"1.1.1","type":"object","definitions":{"plainText":{"description":"Plain text (no HTML allowed)","type":"string"},"richText":{"description":"Text with HTML subset allowed: i, b, u, strong, em, br","type":"string"},"link_url":{"description":"Target for links or buttons","type":"string","format":"uri"}},"properties":{"title":{"allOf":[{"$ref":"#/definitions/plainText"},{"description":"Snippet title displayed before snippet text"}]},"text":{"allOf":[{"$ref":"#/definitions/richText"},{"description":"Main body text of snippet. HTML subset allowed: i, b, u, strong, em, br"}]},"icon":{"type":"string","description":"Snippet icon. 64x64px. SVG or PNG preferred."},"icon_dark_theme":{"type":"string","description":"Snippet icon, dark theme variant. 64x64px. SVG or PNG preferred."},"icon_alt_text":{"type":"string","description":"Alt text describing icon for screen readers","default":""},"title_icon":{"type":"string","description":"Small icon that shows up before the title / text. 16x16px. SVG or PNG preferred. Grayscale."},"title_icon_dark_theme":{"type":"string","description":"Small icon that shows up before the title / text. Dark theme variant. 16x16px. SVG or PNG preferred. Grayscale."},"title_icon_alt_text":{"type":"string","description":"Alt text describing title icon for screen readers","default":""},"button_action":{"type":"string","description":"The type of action the button should trigger."},"button_url":{"allOf":[{"$ref":"#/definitions/link_url"},{"description":"A url, button_label links to this"}]},"button_action_args":{"type":"string","description":"Additional parameters for button action, example which specific menu the button should open"},"button_label":{"allOf":[{"$ref":"#/definitions/plainText"},{"description":"Text for a button next to main snippet text that links to button_url. Requires button_url."}]},"button_color":{"type":"string","description":"The text color of the button. Valid CSS color."},"button_background_color":{"type":"string","description":"The background color of the button. Valid CSS color."},"block_button_text":{"type":"string","description":"Tooltip text used for dismiss button.","default":"Remove this"},"tall":{"type":"boolean","description":"To be used by fundraising only, increases height to roughly 120px. Defaults to false."},"do_not_autoblock":{"type":"boolean","description":"Used to prevent blocking the snippet after the CTA (link or button) has been clicked"},"links":{"additionalProperties":{"url":{"allOf":[{"$ref":"#/definitions/link_url"},{"description":"The url where the link points to."}]},"metric":{"type":"string","description":"Custom event name sent with telemetry event."},"args":{"type":"string","description":"Additional parameters for link action, example which specific menu the button should open"}}},"section_title_icon":{"type":"string","description":"Section title icon. 16x16px. SVG or PNG preferred. section_title_text must also be specified to display."},"section_title_icon_dark_theme":{"type":"string","description":"Section title icon, dark theme variant. 16x16px. SVG or PNG preferred. section_title_text must also be specified to display."},"section_title_text":{"type":"string","description":"Section title text. section_title_icon must also be specified to display."},"section_title_url":{"allOf":[{"$ref":"#/definitions/link_url"},{"description":"A url, section_title_text links to this"}]}},"additionalProperties":false,"required":["text"],"dependencies":{"button_action":["button_label"],"button_url":["button_label"],"button_color":["button_label"],"button_background_color":["button_label"],"section_title_url":["section_title_text"]}};

/***/ }),
/* 17 */
/***/ (function(module) {

module.exports = {"title":"FXASignupSnippet","description":"A snippet template for FxA sign up/sign in","version":"1.1.0","type":"object","definitions":{"plainText":{"description":"Plain text (no HTML allowed)","type":"string"},"richText":{"description":"Text with HTML subset allowed: i, b, u, strong, em, br","type":"string"},"link_url":{"description":"Target for links or buttons","type":"string","format":"uri"}},"properties":{"scene1_title":{"allof":[{"$ref":"#/definitions/plainText"},{"description":"snippet title displayed before snippet text"}]},"scene1_text":{"allOf":[{"$ref":"#/definitions/richText"},{"description":"Main body text of snippet. HTML subset allowed: i, b, u, strong, em, br"}]},"scene2_title":{"allOf":[{"$ref":"#/definitions/plainText"},{"description":"Title displayed before text in scene 2. Should be plain text."}]},"scene2_text":{"allOf":[{"$ref":"#/definitions/richText"},{"description":"Main body text of snippet. HTML subset allowed: i, b, u, strong, em, br"}]},"scene1_icon":{"type":"string","description":"Snippet icon. 64x64px. SVG or PNG preferred."},"scene1_icon_dark_theme":{"type":"string","description":"Snippet icon. Dark theme variant. 64x64px. SVG or PNG preferred."},"scene1_title_icon":{"type":"string","description":"Small icon that shows up before the title / text. 16x16px. SVG or PNG preferred. Grayscale."},"scene1_title_icon_dark_theme":{"type":"string","description":"Small icon that shows up before the title / text. Dark theme variant. 16x16px. SVG or PNG preferred. Grayscale."},"scene2_email_placeholder_text":{"type":"string","description":"Value to show while input is empty.","default":"Your email here"},"scene2_button_label":{"type":"string","description":"Label for form submit button","default":"Sign me up"},"scene2_dismiss_button_text":{"type":"string","description":"Label for the dismiss button when the sign-up form is expanded.","default":"Dismiss"},"hidden_inputs":{"type":"object","description":"Each entry represents a hidden input, key is used as value for the name property.","properties":{"action":{"type":"string","enum":["email"]},"context":{"type":"string","enum":["fx_desktop_v3"]},"entrypoint":{"type":"string","enum":["snippets"]},"service":{"type":"string","enum":["sync"]},"utm_content":{"type":"number","description":"Firefox version number"},"utm_source":{"type":"string","enum":["snippet"]},"utm_campaign":{"type":"string","description":"(fxa) Value to pass through to GA as utm_campaign."},"utm_term":{"type":"string","description":"(fxa) Value to pass through to GA as utm_term."},"additionalProperties":false}},"scene1_button_label":{"allOf":[{"$ref":"#/definitions/plainText"},{"description":"Text for a button next to main snippet text that links to button_url. Requires button_url."}],"default":"Learn more"},"scene1_button_color":{"type":"string","description":"The text color of the button. Valid CSS color."},"scene1_button_background_color":{"type":"string","description":"The background color of the button. Valid CSS color."},"do_not_autoblock":{"type":"boolean","description":"Used to prevent blocking the snippet after the CTA (link or button) has been clicked","default":false},"utm_campaign":{"type":"string","description":"(fxa) Value to pass through to GA as utm_campaign."},"utm_term":{"type":"string","description":"(fxa) Value to pass through to GA as utm_term."},"links":{"additionalProperties":{"url":{"allOf":[{"$ref":"#/definitions/link_url"},{"description":"The url where the link points to."}]},"metric":{"type":"string","description":"Custom event name sent with telemetry event."}}}},"additionalProperties":false,"required":["scene1_text","scene2_text","scene1_button_label"],"dependencies":{"scene1_button_color":["scene1_button_label"],"scene1_button_background_color":["scene1_button_label"]}};

/***/ }),
/* 18 */
/***/ (function(module) {

module.exports = {"title":"NewsletterSnippet","description":"A snippet template for send to device mobile download","version":"1.1.0","type":"object","definitions":{"plainText":{"description":"Plain text (no HTML allowed)","type":"string"},"richText":{"description":"Text with HTML subset allowed: i, b, u, strong, em, br","type":"string"},"link_url":{"description":"Target for links or buttons","type":"string","format":"uri"}},"properties":{"locale":{"type":"string","description":"Two to five character string for the locale code","default":"en-US"},"scene1_title":{"allof":[{"$ref":"#/definitions/plainText"},{"description":"snippet title displayed before snippet text"}]},"scene1_text":{"allOf":[{"$ref":"#/definitions/richText"},{"description":"Main body text of snippet. HTML subset allowed: i, b, u, strong, em, br"}]},"scene2_title":{"allOf":[{"$ref":"#/definitions/plainText"},{"description":"Title displayed before text in scene 2. Should be plain text."}]},"scene2_text":{"allOf":[{"$ref":"#/definitions/richText"},{"description":"Main body text of snippet. HTML subset allowed: i, b, u, strong, em, br"}]},"scene1_icon":{"type":"string","description":"Snippet icon. 64x64px. SVG or PNG preferred."},"scene1_icon_dark_theme":{"type":"string","description":"Snippet icon. Dark theme variant. 64x64px. SVG or PNG preferred."},"scene1_title_icon":{"type":"string","description":"Small icon that shows up before the title / text. 16x16px. SVG or PNG preferred. Grayscale."},"scene1_title_icon_dark_theme":{"type":"string","description":"Small icon that shows up before the title / text. Dark theme variant. 16x16px. SVG or PNG preferred. Grayscale."},"scene2_email_placeholder_text":{"type":"string","description":"Value to show while input is empty.","default":"Your email here"},"scene2_button_label":{"type":"string","description":"Label for form submit button","default":"Sign me up"},"scene2_privacy_html":{"type":"string","description":"(send to device) Html for disclaimer and link underneath input box."},"scene2_dismiss_button_text":{"type":"string","description":"Label for the dismiss button when the sign-up form is expanded.","default":"Dismiss"},"hidden_inputs":{"type":"object","description":"Each entry represents a hidden input, key is used as value for the name property.","properties":{"fmt":{"type":"string","description":"","default":"H"}}},"scene1_button_label":{"allOf":[{"$ref":"#/definitions/plainText"},{"description":"Text for a button next to main snippet text that links to button_url. Requires button_url."}],"default":"Learn more"},"scene1_button_color":{"type":"string","description":"The text color of the button. Valid CSS color."},"scene1_button_background_color":{"type":"string","description":"The background color of the button. Valid CSS color."},"do_not_autoblock":{"type":"boolean","description":"Used to prevent blocking the snippet after the CTA (link or button) has been clicked","default":false},"success_text":{"type":"string","description":"Message shown on successful registration."},"error_text":{"type":"string","description":"Message shown if registration failed."},"scene2_newsletter":{"type":"string","description":"Newsletter/basket id user is subscribing to.","default":"mozilla-foundation"},"links":{"additionalProperties":{"url":{"allOf":[{"$ref":"#/definitions/link_url"},{"description":"The url where the link points to."}]},"metric":{"type":"string","description":"Custom event name sent with telemetry event."}}}},"additionalProperties":false,"required":["scene1_text","scene2_text","scene1_button_label"],"dependencies":{"scene1_button_color":["scene1_button_label"],"scene1_button_background_color":["scene1_button_label"]}};

/***/ }),
/* 19 */
/***/ (function(module) {

module.exports = {"title":"SendToDeviceSnippet","description":"A snippet template for send to device mobile download","version":"1.1.0","type":"object","definitions":{"plainText":{"description":"Plain text (no HTML allowed)","type":"string"},"richText":{"description":"Text with HTML subset allowed: i, b, u, strong, em, br","type":"string"},"link_url":{"description":"Target for links or buttons","type":"string","format":"uri"}},"properties":{"locale":{"type":"string","description":"Two to five character string for the locale code","default":"en-US"},"country":{"type":"string","description":"Two character string for the country code (used for SMS)","default":"us"},"scene1_title":{"allof":[{"$ref":"#/definitions/plainText"},{"description":"snippet title displayed before snippet text"}]},"scene1_text":{"allOf":[{"$ref":"#/definitions/richText"},{"description":"Main body text of snippet. HTML subset allowed: i, b, u, strong, em, br"}]},"scene2_title":{"allOf":[{"$ref":"#/definitions/plainText"},{"description":"Title displayed before text in scene 2. Should be plain text."}]},"scene2_text":{"allOf":[{"$ref":"#/definitions/richText"},{"description":"Main body text of snippet. HTML subset allowed: i, b, u, strong, em, br"}]},"scene1_icon":{"type":"string","description":"Snippet icon. 64x64px. SVG or PNG preferred."},"scene1_icon_dark_theme":{"type":"string","description":"Snippet icon. Dark theme variant. 64x64px. SVG or PNG preferred."},"scene2_icon":{"type":"string","description":"(send to device) Image to display above the form. Dark theme variant. 98x98px. SVG or PNG preferred."},"scene2_icon_dark_theme":{"type":"string","description":"(send to device) Image to display above the form. 98x98px. SVG or PNG preferred."},"scene1_title_icon":{"type":"string","description":"Small icon that shows up before the title / text. 16x16px. SVG or PNG preferred. Grayscale."},"scene1_title_icon_dark_theme":{"type":"string","description":"Small icon that shows up before the title / text. Dark theme variant. 16x16px. SVG or PNG preferred. Grayscale."},"scene2_button_label":{"type":"string","description":"Label for form submit button","default":"Send"},"scene2_input_placeholder":{"type":"string","description":"(send to device) Value to show while input is empty.","default":"Your email here"},"scene2_disclaimer_html":{"type":"string","description":"(send to device) Html for disclaimer and link underneath input box."},"scene2_dismiss_button_text":{"type":"string","description":"Label for the dismiss button when the sign-up form is expanded.","default":"Dismiss"},"hidden_inputs":{"type":"object","description":"Each entry represents a hidden input, key is used as value for the name property.","properties":{"action":{"type":"string","enum":["email"]},"context":{"type":"string","enum":["fx_desktop_v3"]},"entrypoint":{"type":"string","enum":["snippets"]},"service":{"type":"string","enum":["sync"]},"utm_content":{"type":"string","description":"Firefox version number"},"utm_source":{"type":"string","enum":["snippet"]},"utm_campaign":{"type":"string","description":"(fxa) Value to pass through to GA as utm_campaign."},"utm_term":{"type":"string","description":"(fxa) Value to pass through to GA as utm_term."},"additionalProperties":false}},"scene1_button_label":{"allOf":[{"$ref":"#/definitions/plainText"},{"description":"Text for a button next to main snippet text that links to button_url. Requires button_url."}],"default":"Learn more"},"scene1_button_color":{"type":"string","description":"The text color of the button. Valid CSS color."},"scene1_button_background_color":{"type":"string","description":"The background color of the button. Valid CSS color."},"do_not_autoblock":{"type":"boolean","description":"Used to prevent blocking the snippet after the CTA (link or button) has been clicked","default":false},"success_title":{"type":"string","description":"(send to device) Title shown before text on successful registration."},"success_text":{"type":"string","description":"Message shown on successful registration."},"error_text":{"type":"string","description":"Message shown if registration failed."},"include_sms":{"type":"boolean","description":"(send to device) Allow users to send an SMS message with the form?","default":false},"message_id_sms":{"type":"string","description":"(send to device) Newsletter/basket id representing the SMS message to be sent."},"message_id_email":{"type":"string","description":"(send to device) Newsletter/basket id representing the email message to be sent. Must be a value from the 'Slug' column here: https://basket.mozilla.org/news/."},"utm_campaign":{"type":"string","description":"(fxa) Value to pass through to GA as utm_campaign."},"utm_term":{"type":"string","description":"(fxa) Value to pass through to GA as utm_term."},"links":{"additionalProperties":{"url":{"allOf":[{"$ref":"#/definitions/link_url"},{"description":"The url where the link points to."}]},"metric":{"type":"string","description":"Custom event name sent with telemetry event."}}}},"additionalProperties":false,"required":["scene1_text","scene2_text","scene1_button_label"],"dependencies":{"scene1_button_color":["scene1_button_label"],"scene1_button_background_color":["scene1_button_label"]}};

/***/ }),
/* 20 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Trailhead", function() { return Trailhead; });
/* harmony import */ var common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var _components_ModalOverlay_ModalOverlay__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(21);
/* harmony import */ var _FirstRun_addUtmParams__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(22);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(9);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */



 // From resource://devtools/client/shared/focus.js

const FOCUSABLE_SELECTOR = ["a[href]:not([tabindex='-1'])", "button:not([disabled]):not([tabindex='-1'])", "iframe:not([tabindex='-1'])", "input:not([disabled]):not([tabindex='-1'])", "select:not([disabled]):not([tabindex='-1'])", "textarea:not([disabled]):not([tabindex='-1'])", "[tabindex]:not([tabindex='-1'])"].join(", ");
class Trailhead extends react__WEBPACK_IMPORTED_MODULE_3___default.a.PureComponent {
  constructor(props) {
    super(props);
    this.closeModal = this.closeModal.bind(this);
    this.onInputChange = this.onInputChange.bind(this);
    this.onStartBlur = this.onStartBlur.bind(this);
    this.onSubmit = this.onSubmit.bind(this);
    this.onInputInvalid = this.onInputInvalid.bind(this);
    this.state = {
      emailInput: ""
    };
  }

  get dialog() {
    return this.props.document.getElementById("trailheadDialog");
  }

  componentDidMount() {
    // We need to remove hide-main since we should show it underneath everything that has rendered
    this.props.document.body.classList.remove("hide-main"); // The rest of the page is "hidden" to screen readers when the modal is open

    this.props.document.getElementById("root").setAttribute("aria-hidden", "true"); // Start with focus in the email input box

    const input = this.dialog.querySelector("input[name=email]");

    if (input) {
      input.focus();
    }
  }

  onInputChange(e) {
    let error = e.target.previousSibling;
    this.setState({
      emailInput: e.target.value
    });
    error.classList.remove("active");
    e.target.classList.remove("invalid");
  }

  onStartBlur(event) {
    // Make sure focus stays within the dialog when tabbing from the button
    const {
      dialog
    } = this;

    if (event.relatedTarget && !(dialog.compareDocumentPosition(event.relatedTarget) & dialog.DOCUMENT_POSITION_CONTAINED_BY)) {
      dialog.querySelector(FOCUSABLE_SELECTOR).focus();
    }
  }

  onSubmit(event) {
    // Dynamically require the email on submission so screen readers don't read
    // out it's always required because there's also ways to skip the modal
    const {
      email
    } = event.target.elements;

    if (!email.value.length) {
      email.required = true;
      email.checkValidity();
      event.preventDefault();
      return;
    }

    this.props.dispatch(common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionCreators"].UserEvent({
      event: "SUBMIT_EMAIL",
      ...this._getFormInfo()
    }));
    global.addEventListener("visibilitychange", this.closeModal);
  }

  closeModal(ev) {
    global.removeEventListener("visibilitychange", this.closeModal);
    this.props.document.body.classList.remove("welcome");
    this.props.document.getElementById("root").removeAttribute("aria-hidden");
    this.props.onNextScene(); // If closeModal() was triggered by a visibilitychange event, the user actually
    // submitted the email form so we don't send a SKIPPED_SIGNIN ping.

    if (!ev || ev.type !== "visibilitychange") {
      this.props.dispatch(common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionCreators"].UserEvent({
        event: "SKIPPED_SIGNIN",
        ...this._getFormInfo()
      }));
    } // Bug 1190882 - Focus in a disappearing dialog confuses screen readers


    this.props.document.activeElement.blur();
  }
  /**
   * Report to telemetry additional information about the form submission.
   */


  _getFormInfo() {
    const value = {
      has_flow_params: this.props.flowParams.flowId.length > 0
    };
    return {
      value
    };
  }

  onInputInvalid(e) {
    let error = e.target.previousSibling;
    error.classList.add("active");
    e.target.classList.add("invalid");
    e.preventDefault(); // Override built-in form validation popup

    e.target.focus();
  }

  render() {
    const {
      props
    } = this;
    const {
      UTMTerm
    } = props;
    const {
      content
    } = props.message;
    const innerClassName = ["trailhead", content && content.className].filter(v => v).join(" ");
    return react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement(_components_ModalOverlay_ModalOverlay__WEBPACK_IMPORTED_MODULE_1__["ModalOverlayWrapper"], {
      innerClassName: innerClassName,
      onClose: this.closeModal,
      id: "trailheadDialog",
      headerId: "trailheadHeader"
    }, react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("div", {
      className: "trailheadInner"
    }, react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("div", {
      className: "trailheadContent"
    }, react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("h1", {
      "data-l10n-id": content.title.string_id,
      id: "trailheadHeader"
    }), content.subtitle && react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("p", {
      "data-l10n-id": content.subtitle.string_id
    }), react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("ul", {
      className: "trailheadBenefits"
    }, content.benefits.map(item => react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("li", {
      key: item.id,
      className: item.id
    }, react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("h3", {
      "data-l10n-id": item.title.string_id
    }), react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("p", {
      "data-l10n-id": item.text.string_id
    })))), react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("a", {
      className: "trailheadLearn",
      "data-l10n-id": content.learn.text.string_id,
      href: Object(_FirstRun_addUtmParams__WEBPACK_IMPORTED_MODULE_2__["addUtmParams"])(content.learn.url, UTMTerm),
      target: "_blank",
      rel: "noopener noreferrer"
    })), react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("div", {
      role: "group",
      "aria-labelledby": "joinFormHeader",
      "aria-describedby": "joinFormBody",
      className: "trailheadForm"
    }, react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("h3", {
      id: "joinFormHeader",
      "data-l10n-id": content.form.title.string_id
    }), react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("p", {
      id: "joinFormBody",
      "data-l10n-id": content.form.text.string_id
    }), react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("form", {
      method: "get",
      action: this.props.fxaEndpoint,
      target: "_blank",
      rel: "noopener noreferrer",
      onSubmit: this.onSubmit
    }, react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("input", {
      name: "service",
      type: "hidden",
      value: "sync"
    }), react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("input", {
      name: "action",
      type: "hidden",
      value: "email"
    }), react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("input", {
      name: "context",
      type: "hidden",
      value: "fx_desktop_v3"
    }), react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("input", {
      name: "entrypoint",
      type: "hidden",
      value: "activity-stream-firstrun"
    }), react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("input", {
      name: "utm_source",
      type: "hidden",
      value: "activity-stream"
    }), react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("input", {
      name: "utm_campaign",
      type: "hidden",
      value: "firstrun"
    }), react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("input", {
      name: "utm_term",
      type: "hidden",
      value: UTMTerm
    }), react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("input", {
      name: "device_id",
      type: "hidden",
      value: this.props.flowParams.deviceId
    }), react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("input", {
      name: "flow_id",
      type: "hidden",
      value: this.props.flowParams.flowId
    }), react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("input", {
      name: "flow_begin_time",
      type: "hidden",
      value: this.props.flowParams.flowBeginTime
    }), react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("input", {
      name: "style",
      type: "hidden",
      value: "trailhead"
    }), react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("p", {
      "data-l10n-id": "onboarding-join-form-email-error",
      className: "error"
    }), react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("input", {
      "data-l10n-id": content.form.email.string_id,
      name: "email",
      type: "email",
      onInvalid: this.onInputInvalid,
      onChange: this.onInputChange
    }), react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("p", {
      className: "trailheadTerms",
      "data-l10n-id": "onboarding-join-form-legal"
    }, react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("a", {
      "data-l10n-name": "terms",
      target: "_blank",
      rel: "noopener noreferrer",
      href: Object(_FirstRun_addUtmParams__WEBPACK_IMPORTED_MODULE_2__["addUtmParams"])("https://accounts.firefox.com/legal/terms", UTMTerm)
    }), react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("a", {
      "data-l10n-name": "privacy",
      target: "_blank",
      rel: "noopener noreferrer",
      href: Object(_FirstRun_addUtmParams__WEBPACK_IMPORTED_MODULE_2__["addUtmParams"])("https://accounts.firefox.com/legal/privacy", UTMTerm)
    })), react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("button", {
      "data-l10n-id": content.form.button.string_id,
      type: "submit"
    })))), react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("button", {
      className: "trailheadStart",
      "data-l10n-id": content.skipButton.string_id,
      onBlur: this.onStartBlur,
      onClick: this.closeModal
    }));
  }

}
Trailhead.defaultProps = {
  flowParams: {
    deviceId: "",
    flowId: "",
    flowBeginTime: ""
  }
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1)))

/***/ }),
/* 21 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ModalOverlayWrapper", function() { return ModalOverlayWrapper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ModalOverlay", function() { return ModalOverlay; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */

class ModalOverlayWrapper extends react__WEBPACK_IMPORTED_MODULE_0___default.a.PureComponent {
  constructor(props) {
    super(props);
    this.onKeyDown = this.onKeyDown.bind(this);
  }

  onKeyDown(event) {
    if (event.key === "Escape") {
      this.props.onClose(event);
    }
  }

  componentWillMount() {
    this.props.document.addEventListener("keydown", this.onKeyDown);
    this.props.document.body.classList.add("modal-open");
    this.header = this.props.document.getElementById("header-asrouter-container");

    if (this.header) {
      this.header.classList.add("modal-scroll");
      this.props.document.getElementById("root").classList.add("modal-height");
    }
  }

  componentWillUnmount() {
    this.props.document.removeEventListener("keydown", this.onKeyDown);
    this.props.document.body.classList.remove("modal-open");

    if (this.header) {
      this.header.classList.remove("modal-scroll");
      this.props.document.getElementById("root").classList.remove("modal-height");
    }
  }

  render() {
    const {
      props
    } = this;
    let className = props.unstyled ? "" : "modalOverlayInner active";

    if (props.innerClassName) {
      className += ` ${props.innerClassName}`;
    }

    return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
      className: "modalOverlayOuter active",
      onClick: props.onClose,
      onKeyDown: this.onKeyDown,
      role: "presentation"
    }), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
      className: className,
      "aria-labelledby": props.headerId,
      id: props.id,
      role: "dialog"
    }, props.children));
  }

}
ModalOverlayWrapper.defaultProps = {
  document: global.document
};
class ModalOverlay extends react__WEBPACK_IMPORTED_MODULE_0___default.a.PureComponent {
  render() {
    const {
      title,
      button_label
    } = this.props;
    return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(ModalOverlayWrapper, {
      onClose: this.props.onDismissBundle
    }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("h2", null, " ", title, " "), this.props.children, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
      className: "footer"
    }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("button", {
      className: "button primary modalButton",
      onClick: this.props.onDismissBundle
    }, " ", button_label, " ")));
  }

}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1)))

/***/ }),
/* 22 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addUtmParams", function() { return addUtmParams; });
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */
const BASE_PARAMS = {
  utm_source: "activity-stream",
  utm_campaign: "firstrun",
  utm_medium: "referral"
};
/**
 * Takes in a url as a string or URL object and returns a URL object with the
 * utm_* parameters added to it. If a URL object is passed in, the paraemeters
 * are added to it (the return value can be ignored in that case as it's the
 * same object).
 */

function addUtmParams(url, utmTerm) {
  let returnUrl = url;

  if (typeof returnUrl === "string") {
    returnUrl = new URL(url);
  }

  Object.keys(BASE_PARAMS).forEach(key => {
    returnUrl.searchParams.append(key, BASE_PARAMS[key]);
  });
  returnUrl.searchParams.append("utm_term", utmTerm);
  return returnUrl;
}

/***/ }),
/* 23 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReturnToAMO", function() { return ReturnToAMO; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _components_RichText_RichText__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(14);
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */

 // Alt text if available; in the future this should come from the server. See bug 1551711

const ICON_ALT_TEXT = "";
class ReturnToAMO extends react__WEBPACK_IMPORTED_MODULE_0___default.a.PureComponent {
  constructor(props) {
    super(props);
    this.onClickAddExtension = this.onClickAddExtension.bind(this);
    this.onBlockButton = this.onBlockButton.bind(this);
  }

  componentWillMount() {
    global.document.body.classList.add("amo");
  }

  componentDidMount() {
    this.props.sendUserActionTelemetry({
      event: "IMPRESSION",
      id: this.props.UISurface
    });
  }

  onClickAddExtension() {
    this.props.onAction(this.props.content.primary_button.action);
    this.props.sendUserActionTelemetry({
      event: "INSTALL",
      id: this.props.UISurface
    });
  }

  onBlockButton() {
    this.props.onBlock();
    document.body.classList.remove("welcome", "hide-main", "amo");
    this.props.sendUserActionTelemetry({
      event: "BLOCK",
      id: this.props.UISurface
    });
  }

  renderText() {
    const customElement = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("img", {
      src: this.props.content.addon_icon,
      width: "20px",
      height: "20px",
      alt: ICON_ALT_TEXT
    });
    return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_components_RichText_RichText__WEBPACK_IMPORTED_MODULE_1__["RichText"], {
      customElements: {
        icon: customElement
      },
      amo_html: this.props.content.text,
      localization_id: "amo_html"
    });
  }

  render() {
    const {
      content
    } = this.props;
    return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
      className: "ReturnToAMOOverlay"
    }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("h2", null, " ", content.header, " "), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
      className: "ReturnToAMOContainer"
    }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
      className: "ReturnToAMOAddonContents"
    }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("p", null, " ", content.title, " "), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
      className: "ReturnToAMOText"
    }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span", null, " ", this.renderText(), " ")), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("button", {
      onClick: this.onClickAddExtension,
      className: "puffy blue ReturnToAMOAddExtension"
    }, " ", react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span", {
      className: "icon icon-add"
    }), " ", content.primary_button.label, " ")), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
      className: "ReturnToAMOIcon"
    })), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("button", {
      onClick: this.onBlockButton,
      className: "default grey ReturnToAMOGetStarted"
    }, " ", content.secondary_button.label, " ")));
  }

}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1)))

/***/ }),
/* 24 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StartupOverlay", function() { return StartupOverlay; });
/* harmony import */ var common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */


class StartupOverlay extends react__WEBPACK_IMPORTED_MODULE_1___default.a.PureComponent {
  constructor(props) {
    super(props);
    this.onInputChange = this.onInputChange.bind(this);
    this.onSubmit = this.onSubmit.bind(this);
    this.clickSkip = this.clickSkip.bind(this);
    this.removeOverlay = this.removeOverlay.bind(this);
    this.onInputInvalid = this.onInputInvalid.bind(this);
    this.utmParams = "utm_source=activity-stream&utm_campaign=firstrun&utm_medium=referral&utm_term=trailhead-control";
    this.state = {
      show: false,
      emailInput: ""
    };
  }

  componentWillMount() {
    global.document.body.classList.add("fxa");
  }

  componentDidMount() {
    // Timeout to allow the scene to render once before attaching the attribute
    // to trigger the animation.
    setTimeout(() => {
      this.setState({
        show: true
      });
    }, 10);
  }

  removeOverlay() {
    window.removeEventListener("visibilitychange", this.removeOverlay);
    document.body.classList.remove("hide-main", "fxa");
    this.setState({
      show: false
    });
    setTimeout(() => {
      // Allow scrolling and fully remove overlay after animation finishes.
      this.props.onBlock();
      document.body.classList.remove("welcome");
    }, 400);
  }

  onInputChange(e) {
    let error = e.target.previousSibling;
    this.setState({
      emailInput: e.target.value
    });
    error.classList.remove("active");
    e.target.classList.remove("invalid");
  }

  onSubmit() {
    this.props.dispatch(common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionCreators"].UserEvent({
      event: "SUBMIT_EMAIL",
      ...this._getFormInfo()
    }));
    window.addEventListener("visibilitychange", this.removeOverlay);
  }

  clickSkip() {
    this.props.dispatch(common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionCreators"].UserEvent({
      event: "SKIPPED_SIGNIN",
      ...this._getFormInfo()
    }));
    this.removeOverlay();
  }
  /**
   * Report to telemetry additional information about the form submission.
   */


  _getFormInfo() {
    const value = {
      has_flow_params: this.props.flowParams.flowId.length > 0
    };
    return {
      value
    };
  }

  onInputInvalid(e) {
    let error = e.target.previousSibling;
    error.classList.add("active");
    e.target.classList.add("invalid");
    e.preventDefault(); // Override built-in form validation popup

    e.target.focus();
  }

  render() {
    return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      className: `overlay-wrapper ${this.state.show ? "show" : ""}`
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      className: "background"
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      className: "firstrun-scene"
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      className: "fxaccounts-container"
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      className: "firstrun-left-divider"
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("h1", {
      className: "firstrun-title",
      "data-l10n-id": "onboarding-sync-welcome-header"
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
      className: "firstrun-content",
      "data-l10n-id": "onboarding-sync-welcome-content"
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("a", {
      className: "firstrun-link",
      href: `https://www.mozilla.org/firefox/features/sync/?${this.utmParams}`,
      target: "_blank",
      rel: "noopener noreferrer",
      "data-l10n-id": "onboarding-sync-welcome-learn-more-link"
    })), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      className: "firstrun-sign-in"
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
      className: "form-header"
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
      "data-l10n-id": "onboarding-sync-form-header"
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
      className: "sub-header",
      "data-l10n-id": "onboarding-sync-form-sub-header"
    })), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("form", {
      method: "get",
      action: this.props.fxa_endpoint,
      target: "_blank",
      rel: "noopener noreferrer",
      onSubmit: this.onSubmit
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("input", {
      name: "service",
      type: "hidden",
      value: "sync"
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("input", {
      name: "action",
      type: "hidden",
      value: "email"
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("input", {
      name: "context",
      type: "hidden",
      value: "fx_desktop_v3"
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("input", {
      name: "entrypoint",
      type: "hidden",
      value: "activity-stream-firstrun"
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("input", {
      name: "utm_source",
      type: "hidden",
      value: "activity-stream"
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("input", {
      name: "utm_campaign",
      type: "hidden",
      value: "firstrun"
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("input", {
      name: "utm_medium",
      type: "hidden",
      value: "referral"
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("input", {
      name: "utm_term",
      type: "hidden",
      value: "trailhead-control"
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("input", {
      name: "device_id",
      type: "hidden",
      value: this.props.flowParams.deviceId
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("input", {
      name: "flow_id",
      type: "hidden",
      value: this.props.flowParams.flowId
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("input", {
      name: "flow_begin_time",
      type: "hidden",
      value: this.props.flowParams.flowBeginTime
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
      className: "error",
      "data-l10n-id": "onboarding-sync-form-invalid-input"
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("input", {
      className: "email-input",
      name: "email",
      type: "email",
      required: true,
      onInvalid: this.onInputInvalid,
      onChange: this.onInputChange,
      "data-l10n-id": "onboarding-sync-form-input"
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      className: "extra-links"
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
      "data-l10n-id": "onboarding-sync-legal-notice"
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("a", {
      "data-l10n-name": "terms",
      target: "_blank",
      rel: "noopener noreferrer",
      href: `${this.props.fxa_endpoint}/legal/terms?${this.utmParams}`
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("a", {
      "data-l10n-name": "privacy",
      target: "_blank",
      rel: "noopener noreferrer",
      href: `${this.props.fxa_endpoint}/legal/privacy?${this.utmParams}`
    }))), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("button", {
      className: "continue-button",
      type: "submit",
      "data-l10n-id": "onboarding-sync-form-continue-button"
    })), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("button", {
      className: "skip-button",
      disabled: !!this.state.emailInput,
      onClick: this.clickSkip,
      "data-l10n-id": "onboarding-sync-form-skip-login-button"
    })))));
  }

}
StartupOverlay.defaultProps = {
  flowParams: {
    deviceId: "",
    flowId: "",
    flowBeginTime: ""
  }
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1)))

/***/ }),
/* 25 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Triplets", function() { return Triplets; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _templates_OnboardingMessage_OnboardingMessage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(26);
/* harmony import */ var _addUtmParams__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(22);
function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */



class Triplets extends react__WEBPACK_IMPORTED_MODULE_0___default.a.PureComponent {
  constructor(props) {
    super(props);
    this.onCardAction = this.onCardAction.bind(this);
    this.onHideContainer = this.onHideContainer.bind(this);
  }

  componentWillMount() {
    global.document.body.classList.add("inline-onboarding");
  }

  componentWillUnmount() {
    this.props.document.body.classList.remove("inline-onboarding");
  }

  onCardAction(action) {
    let actionUpdates = {};
    const {
      flowParams,
      UTMTerm
    } = this.props;

    if (action.type === "OPEN_URL") {
      let url = new URL(action.data.args);
      Object(_addUtmParams__WEBPACK_IMPORTED_MODULE_2__["addUtmParams"])(url, UTMTerm);

      if (action.addFlowParams) {
        url.searchParams.append("device_id", flowParams.deviceId);
        url.searchParams.append("flow_id", flowParams.flowId);
        url.searchParams.append("flow_begin_time", flowParams.flowBeginTime);
      }

      actionUpdates = {
        data: { ...action.data,
          args: url.toString()
        }
      };
    }

    this.props.onAction({ ...action,
      ...actionUpdates
    });
  }

  onHideContainer() {
    const {
      sendUserActionTelemetry,
      cards,
      hideContainer
    } = this.props;
    hideContainer();
    sendUserActionTelemetry({
      event: "DISMISS",
      id: "onboarding-cards",
      message_id: cards.map(m => m.id).join(","),
      action: "onboarding_user_event"
    });
  }

  render() {
    const {
      cards,
      showCardPanel,
      showContent,
      sendUserActionTelemetry
    } = this.props;
    return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
      className: `trailheadCards ${showCardPanel ? "expanded" : "collapsed"}`
    }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
      className: "trailheadCardsInner",
      "aria-hidden": !showContent
    }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("h1", {
      "data-l10n-id": "onboarding-welcome-header"
    }), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
      className: `trailheadCardGrid${showContent ? " show" : ""}`
    }, cards.map(card => react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_templates_OnboardingMessage_OnboardingMessage__WEBPACK_IMPORTED_MODULE_1__["OnboardingCard"], _extends({
      key: card.id,
      className: "trailheadCard",
      sendUserActionTelemetry: sendUserActionTelemetry,
      onAction: this.onCardAction,
      UISurface: "TRAILHEAD"
    }, card)))), showCardPanel && react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("button", {
      className: "icon icon-dismiss",
      onClick: this.onHideContainer,
      "data-l10n-id": "onboarding-cards-dismiss"
    })));
  }

}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1)))

/***/ }),
/* 26 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OnboardingCard", function() { return OnboardingCard; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */

class OnboardingCard extends react__WEBPACK_IMPORTED_MODULE_0___default.a.PureComponent {
  constructor(props) {
    super(props);
    this.onClick = this.onClick.bind(this);
  }

  onClick() {
    const {
      props
    } = this;
    const ping = {
      event: "CLICK_BUTTON",
      message_id: props.id,
      id: props.UISurface
    };
    props.sendUserActionTelemetry(ping);
    props.onAction(props.content.primary_button.action);
  }

  render() {
    const {
      content
    } = this.props;
    const className = this.props.className || "onboardingMessage";
    return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
      className: className
    }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
      className: `onboardingMessageImage ${content.icon}`
    }), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
      className: "onboardingContent"
    }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span", null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("h3", {
      className: "onboardingTitle",
      "data-l10n-id": content.title.string_id
    }), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("p", {
      className: "onboardingText",
      "data-l10n-id": content.text.string_id
    })), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span", {
      className: "onboardingButtonContainer"
    }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("button", {
      "data-l10n-id": content.primary_button.label.string_id,
      className: "button onboardingButton",
      onClick: this.onClick
    }))));
  }

}

/***/ }),
/* 27 */
/***/ (function(module, exports) {

module.exports = ReactRedux;

/***/ }),
/* 28 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SimpleHashRouter", function() { return SimpleHashRouter; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */

class SimpleHashRouter extends react__WEBPACK_IMPORTED_MODULE_0___default.a.PureComponent {
  constructor(props) {
    super(props);
    this.onHashChange = this.onHashChange.bind(this);
    this.state = {
      hash: global.location.hash
    };
  }

  onHashChange() {
    this.setState({
      hash: global.location.hash
    });
  }

  componentWillMount() {
    global.addEventListener("hashchange", this.onHashChange);
  }

  componentWillUnmount() {
    global.removeEventListener("hashchange", this.onHashChange);
  }

  render() {
    const [, ...routes] = this.state.hash.split("-");
    return react__WEBPACK_IMPORTED_MODULE_0___default.a.cloneElement(this.props.children, {
      location: {
        hash: this.state.hash,
        routes
      }
    });
  }

}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1)))

/***/ }),
/* 29 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_ConfirmDialog", function() { return _ConfirmDialog; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConfirmDialog", function() { return ConfirmDialog; });
/* harmony import */ var common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(27);
/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_redux__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */



/**
 * ConfirmDialog component.
 * One primary action button, one cancel button.
 *
 * Content displayed is controlled by `data` prop the component receives.
 * Example:
 * data: {
 *   // Any sort of data needed to be passed around by actions.
 *   payload: site.url,
 *   // Primary button AlsoToMain action.
 *   action: "DELETE_HISTORY_URL",
 *   // Primary button USerEvent action.
 *   userEvent: "DELETE",
 *   // Array of locale ids to display.
 *   message_body: ["confirm_history_delete_p1", "confirm_history_delete_notice_p2"],
 *   // Text for primary button.
 *   confirm_button_string_id: "menu_action_delete"
 * },
 */

class _ConfirmDialog extends react__WEBPACK_IMPORTED_MODULE_2___default.a.PureComponent {
  constructor(props) {
    super(props);
    this._handleCancelBtn = this._handleCancelBtn.bind(this);
    this._handleConfirmBtn = this._handleConfirmBtn.bind(this);
  }

  _handleCancelBtn() {
    this.props.dispatch({
      type: common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionTypes"].DIALOG_CANCEL
    });
    this.props.dispatch(common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionCreators"].UserEvent({
      event: common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionTypes"].DIALOG_CANCEL,
      source: this.props.data.eventSource
    }));
  }

  _handleConfirmBtn() {
    this.props.data.onConfirm.forEach(this.props.dispatch);
  }

  _renderModalMessage() {
    const message_body = this.props.data.body_string_id;

    if (!message_body) {
      return null;
    }

    return react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement("span", null, message_body.map(msg => react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement("p", {
      key: msg,
      "data-l10n-id": msg
    })));
  }

  render() {
    if (!this.props.visible) {
      return null;
    }

    return react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement("div", {
      className: "confirmation-dialog"
    }, react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement("div", {
      className: "modal-overlay",
      onClick: this._handleCancelBtn,
      role: "presentation"
    }), react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement("div", {
      className: "modal"
    }, react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement("section", {
      className: "modal-message"
    }, this.props.data.icon && react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement("span", {
      className: `icon icon-spacer icon-${this.props.data.icon}`
    }), this._renderModalMessage()), react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement("section", {
      className: "actions"
    }, react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement("button", {
      onClick: this._handleCancelBtn,
      "data-l10n-id": this.props.data.cancel_button_string_id
    }), react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement("button", {
      className: "done",
      onClick: this._handleConfirmBtn,
      "data-l10n-id": this.props.data.confirm_button_string_id
    }))));
  }

}
const ConfirmDialog = Object(react_redux__WEBPACK_IMPORTED_MODULE_1__["connect"])(state => state.Dialog)(_ConfirmDialog);

/***/ }),
/* 30 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ContextMenu", function() { return ContextMenu; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ContextMenuItem", function() { return ContextMenuItem; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */

class ContextMenu extends react__WEBPACK_IMPORTED_MODULE_0___default.a.PureComponent {
  constructor(props) {
    super(props);
    this.hideContext = this.hideContext.bind(this);
    this.onShow = this.onShow.bind(this);
    this.onClick = this.onClick.bind(this);
  }

  hideContext() {
    this.props.onUpdate(false);
  }

  onShow() {
    if (this.props.onShow) {
      this.props.onShow();
    }
  }

  componentDidMount() {
    this.onShow();
    setTimeout(() => {
      global.addEventListener("click", this.hideContext);
    }, 0);
  }

  componentWillUnmount() {
    global.removeEventListener("click", this.hideContext);
  }

  onClick(event) {
    // Eat all clicks on the context menu so they don't bubble up to window.
    // This prevents the context menu from closing when clicking disabled items
    // or the separators.
    event.stopPropagation();
  }

  render() {
    // Disabling focus on the menu span allows the first tab to focus on the first menu item instead of the wrapper.
    return (// eslint-disable-next-line jsx-a11y/interactive-supports-focus
      react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span", {
        className: "context-menu"
      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("ul", {
        role: "menu",
        onClick: this.onClick,
        onKeyDown: this.onClick,
        className: "context-menu-list"
      }, this.props.options.map((option, i) => option.type === "separator" ? react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li", {
        key: i,
        className: "separator",
        role: "separator"
      }) : option.type !== "empty" && react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(ContextMenuItem, {
        key: i,
        option: option,
        hideContext: this.hideContext,
        keyboardAccess: this.props.keyboardAccess
      }))))
    );
  }

}
class ContextMenuItem extends react__WEBPACK_IMPORTED_MODULE_0___default.a.PureComponent {
  constructor(props) {
    super(props);
    this.onClick = this.onClick.bind(this);
    this.onKeyDown = this.onKeyDown.bind(this);
    this.onKeyUp = this.onKeyUp.bind(this);
    this.focusFirst = this.focusFirst.bind(this);
  }

  onClick() {
    this.props.hideContext();
    this.props.option.onClick();
  } // Focus the first menu item if the menu was accessed via the keyboard.


  focusFirst(button) {
    if (this.props.keyboardAccess && button) {
      button.focus();
    }
  } // This selects the correct node based on the key pressed


  focusSibling(target, key) {
    const parent = target.parentNode;
    const closestSiblingSelector = key === "ArrowUp" ? "previousSibling" : "nextSibling";

    if (!parent[closestSiblingSelector]) {
      return;
    }

    if (parent[closestSiblingSelector].firstElementChild) {
      parent[closestSiblingSelector].firstElementChild.focus();
    } else {
      parent[closestSiblingSelector][closestSiblingSelector].firstElementChild.focus();
    }
  }

  onKeyDown(event) {
    const {
      option
    } = this.props;

    switch (event.key) {
      case "Tab":
        // tab goes down in context menu, shift + tab goes up in context menu
        // if we're on the last item, one more tab will close the context menu
        // similarly, if we're on the first item, one more shift + tab will close it
        if (event.shiftKey && option.first || !event.shiftKey && option.last) {
          this.props.hideContext();
        }

        break;

      case "ArrowUp":
      case "ArrowDown":
        event.preventDefault();
        this.focusSibling(event.target, event.key);
        break;

      case "Enter":
      case " ":
        event.preventDefault();
        this.props.hideContext();
        option.onClick();
        break;

      case "Escape":
        this.props.hideContext();
        break;
    }
  } // Prevents the default behavior of spacebar
  // scrolling the page & auto-triggering buttons.


  onKeyUp(event) {
    if (event.key === " ") {
      event.preventDefault();
    }
  }

  render() {
    const {
      option
    } = this.props;
    return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li", {
      role: "presentation",
      className: "context-menu-item"
    }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("button", {
      className: option.disabled ? "disabled" : "",
      role: "menuitem",
      onClick: this.onClick,
      onKeyDown: this.onKeyDown,
      onKeyUp: this.onKeyUp,
      ref: option.first ? this.focusFirst : null
    }, option.icon && react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span", {
      className: `icon icon-spacer icon-${option.icon}`
    }), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span", {
      "data-l10n-id": option.string_id || option.id
    })));
  }

}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1)))

/***/ }),
/* 31 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ContextMenuButton", function() { return ContextMenuButton; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */

class ContextMenuButton extends react__WEBPACK_IMPORTED_MODULE_0___default.a.PureComponent {
  constructor(props) {
    super(props);
    this.state = {
      showContextMenu: false,
      contextMenuKeyboard: false
    };
    this.onClick = this.onClick.bind(this);
    this.onKeyDown = this.onKeyDown.bind(this);
    this.onUpdate = this.onUpdate.bind(this);
  }

  openContextMenu(isKeyBoard, event) {
    if (this.props.onUpdate) {
      this.props.onUpdate(true);
    }

    this.setState({
      showContextMenu: true,
      contextMenuKeyboard: isKeyBoard
    });
  }

  onClick(event) {
    event.preventDefault();
    this.openContextMenu(false, event);
  }

  onKeyDown(event) {
    if (event.key === "Enter" || event.key === " ") {
      event.preventDefault();
      this.openContextMenu(true, event);
    }
  }

  onUpdate(showContextMenu) {
    if (this.props.onUpdate) {
      this.props.onUpdate(showContextMenu);
    }

    this.setState({
      showContextMenu
    });
  }

  render() {
    const {
      tooltipArgs,
      tooltip,
      children,
      refFunction
    } = this.props;
    const {
      showContextMenu,
      contextMenuKeyboard
    } = this.state;
    return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("button", {
      "aria-haspopup": "true",
      "data-l10n-id": tooltip,
      "data-l10n-args": tooltipArgs ? JSON.stringify(tooltipArgs) : null,
      className: "context-menu-button icon",
      onKeyDown: this.onKeyDown,
      onClick: this.onClick,
      ref: refFunction
    }), showContextMenu ? react__WEBPACK_IMPORTED_MODULE_0___default.a.cloneElement(children, {
      keyboardAccess: contextMenuKeyboard,
      onUpdate: this.onUpdate
    }) : null);
  }

}

/***/ }),
/* 32 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "INTERSECTION_RATIO", function() { return INTERSECTION_RATIO; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ImpressionStats", function() { return ImpressionStats; });
/* harmony import */ var common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */


const VISIBLE = "visible";
const VISIBILITY_CHANGE_EVENT = "visibilitychange"; // Per analytical requirement, we set the minimal intersection ratio to
// 0.5, and an impression is identified when the wrapped item has at least
// 50% visibility.
//
// This constant is exported for unit test

const INTERSECTION_RATIO = 0.5;
/**
 * Impression wrapper for Discovery Stream related React components.
 *
 * It makses use of the Intersection Observer API to detect the visibility,
 * and relies on page visibility to ensure the impression is reported
 * only when the component is visible on the page.
 *
 * Note:
 *   * This wrapper could be used either at the individual card level,
 *     or by the card container components
 *   * Each impression will be sent only once as soon as the desired
 *     visibility is detected
 *   * Batching is not yet implemented, hence it might send multiple
 *     impression pings separately
 */

class ImpressionStats extends react__WEBPACK_IMPORTED_MODULE_1___default.a.PureComponent {
  // This checks if the given cards are the same as those in the last impression ping.
  // If so, it should not send the same impression ping again.
  _needsImpressionStats(cards) {
    if (!this.impressionCardGuids || this.impressionCardGuids.length !== cards.length) {
      return true;
    }

    for (let i = 0; i < cards.length; i++) {
      if (cards[i].id !== this.impressionCardGuids[i]) {
        return true;
      }
    }

    return false;
  }

  _dispatchImpressionStats() {
    const {
      props
    } = this;
    const cards = props.rows;

    if (this.props.campaignId) {
      this.props.dispatch(common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionCreators"].OnlyToMain({
        type: common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionTypes"].DISCOVERY_STREAM_SPOC_IMPRESSION,
        data: {
          campaignId: this.props.campaignId
        }
      }));
    }

    if (this._needsImpressionStats(cards)) {
      props.dispatch(common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionCreators"].DiscoveryStreamImpressionStats({
        source: props.source.toUpperCase(),
        tiles: cards.map(link => ({
          id: link.id,
          pos: link.pos,
          ...(link.shim ? {
            shim: link.shim
          } : {})
        }))
      }));
      this.impressionCardGuids = cards.map(link => link.id);
    }
  } // This checks if the given cards are the same as those in the last loaded content ping.
  // If so, it should not send the same loaded content ping again.


  _needsLoadedContent(cards) {
    if (!this.loadedContentGuids || this.loadedContentGuids.length !== cards.length) {
      return true;
    }

    for (let i = 0; i < cards.length; i++) {
      if (cards[i].id !== this.loadedContentGuids[i]) {
        return true;
      }
    }

    return false;
  }

  _dispatchLoadedContent() {
    const {
      props
    } = this;
    const cards = props.rows;

    if (this._needsLoadedContent(cards)) {
      props.dispatch(common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionCreators"].DiscoveryStreamLoadedContent({
        source: props.source.toUpperCase(),
        tiles: cards.map(link => ({
          id: link.id,
          pos: link.pos
        }))
      }));
      this.loadedContentGuids = cards.map(link => link.id);
    }
  }

  setImpressionObserverOrAddListener() {
    const {
      props
    } = this;

    if (!props.dispatch) {
      return;
    }

    if (props.document.visibilityState === VISIBLE) {
      // Send the loaded content ping once the page is visible.
      this._dispatchLoadedContent();

      this.setImpressionObserver();
    } else {
      // We should only ever send the latest impression stats ping, so remove any
      // older listeners.
      if (this._onVisibilityChange) {
        props.document.removeEventListener(VISIBILITY_CHANGE_EVENT, this._onVisibilityChange);
      }

      this._onVisibilityChange = () => {
        if (props.document.visibilityState === VISIBLE) {
          // Send the loaded content ping once the page is visible.
          this._dispatchLoadedContent();

          this.setImpressionObserver();
          props.document.removeEventListener(VISIBILITY_CHANGE_EVENT, this._onVisibilityChange);
        }
      };

      props.document.addEventListener(VISIBILITY_CHANGE_EVENT, this._onVisibilityChange);
    }
  }
  /**
   * Set an impression observer for the wrapped component. It makes use of
   * the Intersection Observer API to detect if the wrapped component is
   * visible with a desired ratio, and only sends impression if that's the case.
   *
   * See more details about Intersection Observer API at:
   * https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API
   */


  setImpressionObserver() {
    const {
      props
    } = this;

    if (!props.rows.length) {
      return;
    }

    this._handleIntersect = entries => {
      if (entries.some(entry => entry.isIntersecting && entry.intersectionRatio >= INTERSECTION_RATIO)) {
        this._dispatchImpressionStats();

        this.impressionObserver.unobserve(this.refs.impression);
      }
    };

    const options = {
      threshold: INTERSECTION_RATIO
    };
    this.impressionObserver = new props.IntersectionObserver(this._handleIntersect, options);
    this.impressionObserver.observe(this.refs.impression);
  }

  componentDidMount() {
    if (this.props.rows.length) {
      this.setImpressionObserverOrAddListener();
    }
  }

  componentDidUpdate(prevProps) {
    if (this.props.rows.length && this.props.rows !== prevProps.rows) {
      this.setImpressionObserverOrAddListener();
    }
  }

  componentWillUnmount() {
    if (this._handleIntersect && this.impressionObserver) {
      this.impressionObserver.unobserve(this.refs.impression);
    }

    if (this._onVisibilityChange) {
      this.props.document.removeEventListener(VISIBILITY_CHANGE_EVENT, this._onVisibilityChange);
    }
  }

  render() {
    return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      ref: "impression",
      className: "impression-observer"
    }, this.props.children);
  }

}
ImpressionStats.defaultProps = {
  IntersectionObserver: global.IntersectionObserver,
  document: global.document,
  rows: [],
  source: ""
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1)))

/***/ }),
/* 33 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CollapsibleSection", function() { return CollapsibleSection; });
/* harmony import */ var common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var content_src_components_ErrorBoundary_ErrorBoundary__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(34);
/* harmony import */ var content_src_components_FluentOrText_FluentOrText__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(36);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(9);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var content_src_components_SectionMenu_SectionMenu__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(37);
/* harmony import */ var content_src_lib_section_menu_options__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(38);
/* harmony import */ var content_src_components_ContextMenu_ContextMenuButton__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(31);
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */







const VISIBLE = "visible";
const VISIBILITY_CHANGE_EVENT = "visibilitychange";
class CollapsibleSection extends react__WEBPACK_IMPORTED_MODULE_3___default.a.PureComponent {
  constructor(props) {
    super(props);
    this.onBodyMount = this.onBodyMount.bind(this);
    this.onHeaderClick = this.onHeaderClick.bind(this);
    this.onKeyPress = this.onKeyPress.bind(this);
    this.onTransitionEnd = this.onTransitionEnd.bind(this);
    this.enableOrDisableAnimation = this.enableOrDisableAnimation.bind(this);
    this.onMenuButtonMouseEnter = this.onMenuButtonMouseEnter.bind(this);
    this.onMenuButtonMouseLeave = this.onMenuButtonMouseLeave.bind(this);
    this.onMenuUpdate = this.onMenuUpdate.bind(this);
    this.state = {
      enableAnimation: true,
      isAnimating: false,
      menuButtonHover: false,
      showContextMenu: false
    };
    this.setContextMenuButtonRef = this.setContextMenuButtonRef.bind(this);
  }

  componentWillMount() {
    this.props.document.addEventListener(VISIBILITY_CHANGE_EVENT, this.enableOrDisableAnimation);
  }

  componentWillUpdate(nextProps) {
    // Check if we're about to go from expanded to collapsed
    if (!this.props.collapsed && nextProps.collapsed) {
      // This next line forces a layout flush of the section body, which has a
      // max-height style set, so that the upcoming collapse animation can
      // animate from that height to the collapsed height. Without this, the
      // update is coalesced and there's no animation from no-max-height to 0.
      this.sectionBody.scrollHeight; // eslint-disable-line no-unused-expressions
    }
  }

  setContextMenuButtonRef(element) {
    this.contextMenuButtonRef = element;
  }

  componentDidMount() {
    this.contextMenuButtonRef.addEventListener("mouseenter", this.onMenuButtonMouseEnter);
    this.contextMenuButtonRef.addEventListener("mouseleave", this.onMenuButtonMouseLeave);
  }

  componentWillUnmount() {
    this.props.document.removeEventListener(VISIBILITY_CHANGE_EVENT, this.enableOrDisableAnimation);
    this.contextMenuButtonRef.removeEventListener("mouseenter", this.onMenuButtonMouseEnter);
    this.contextMenuButtonRef.removeEventListener("mouseleave", this.onMenuButtonMouseLeave);
  }

  enableOrDisableAnimation() {
    // Only animate the collapse/expand for visible tabs.
    const visible = this.props.document.visibilityState === VISIBLE;

    if (this.state.enableAnimation !== visible) {
      this.setState({
        enableAnimation: visible
      });
    }
  }

  onBodyMount(node) {
    this.sectionBody = node;
  }

  onHeaderClick() {
    // If this.sectionBody is unset, it means that we're in some sort of error
    // state, probably displaying the error fallback, so we won't be able to
    // compute the height, and we don't want to persist the preference.
    // If props.collapsed is undefined handler shouldn't do anything.
    if (!this.sectionBody || this.props.collapsed === undefined) {
      return;
    } // Get the current height of the body so max-height transitions can work


    this.setState({
      isAnimating: true,
      maxHeight: `${this._getSectionBodyHeight()}px`
    });
    const {
      action,
      userEvent
    } = content_src_lib_section_menu_options__WEBPACK_IMPORTED_MODULE_5__["SectionMenuOptions"].CheckCollapsed(this.props);
    this.props.dispatch(action);
    this.props.dispatch(common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionCreators"].UserEvent({
      event: userEvent,
      source: this.props.source
    }));
  }

  onKeyPress(event) {
    if (event.key === "Enter" || event.key === " ") {
      event.preventDefault();
      this.onHeaderClick();
    }
  }

  _getSectionBodyHeight() {
    const div = this.sectionBody;

    if (div.style.display === "none") {
      // If the div isn't displayed, we can't get it's height. So we display it
      // to get the height (it doesn't show up because max-height is set to 0px
      // in CSS). We don't undo this because we are about to expand the section.
      div.style.display = "block";
    }

    return div.scrollHeight;
  }

  onTransitionEnd(event) {
    // Only update the animating state for our own transition (not a child's)
    if (event.target === event.currentTarget) {
      this.setState({
        isAnimating: false
      });
    }
  }

  renderIcon() {
    const {
      icon
    } = this.props;

    if (icon && icon.startsWith("moz-extension://")) {
      return react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("span", {
        className: "icon icon-small-spacer",
        style: {
          backgroundImage: `url('${icon}')`
        }
      });
    }

    return react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("span", {
      className: `icon icon-small-spacer icon-${icon || "webextension"}`
    });
  }

  onMenuButtonMouseEnter() {
    this.setState({
      menuButtonHover: true
    });
  }

  onMenuButtonMouseLeave() {
    this.setState({
      menuButtonHover: false
    });
  }

  onMenuUpdate(showContextMenu) {
    this.setState({
      showContextMenu
    });
  }

  render() {
    const isCollapsible = this.props.collapsed !== undefined;
    const {
      enableAnimation,
      isAnimating,
      maxHeight,
      menuButtonHover,
      showContextMenu
    } = this.state;
    const {
      id,
      eventSource,
      collapsed,
      learnMore,
      title,
      extraMenuOptions,
      showPrefName,
      privacyNoticeURL,
      dispatch,
      isFixed,
      isFirst,
      isLast,
      isWebExtension
    } = this.props;
    const active = menuButtonHover || showContextMenu;
    let bodyStyle;

    if (isAnimating && !collapsed) {
      bodyStyle = {
        maxHeight
      };
    } else if (!isAnimating && collapsed) {
      bodyStyle = {
        display: "none"
      };
    }

    return react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("section", {
      className: `collapsible-section ${this.props.className}${enableAnimation ? " animation-enabled" : ""}${collapsed ? " collapsed" : ""}${active ? " active" : ""}`,
      "aria-expanded": !collapsed // Note: data-section-id is used for web extension api tests in mozilla central
      ,
      "data-section-id": id
    }, react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("div", {
      className: "section-top-bar"
    }, react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("h3", {
      className: "section-title"
    }, react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("span", {
      className: "click-target-container"
    }, react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("span", {
      className: "click-target",
      role: "button",
      tabIndex: "0",
      onKeyPress: this.onKeyPress,
      onClick: this.onHeaderClick
    }, this.renderIcon(), react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement(content_src_components_FluentOrText_FluentOrText__WEBPACK_IMPORTED_MODULE_2__["FluentOrText"], {
      message: title
    }), isCollapsible && react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("span", {
      "data-l10n-id": collapsed ? "newtab-section-expand-section-label" : "newtab-section-collapse-section-label",
      className: `collapsible-arrow icon ${collapsed ? "icon-arrowhead-forward-small" : "icon-arrowhead-down-small"}`
    })), react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("span", {
      className: "learn-more-link-wrapper"
    }, learnMore && react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("span", {
      className: "learn-more-link"
    }, react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement(content_src_components_FluentOrText_FluentOrText__WEBPACK_IMPORTED_MODULE_2__["FluentOrText"], {
      message: learnMore.link.message
    }, react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("a", {
      href: learnMore.link.href
    })))))), react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement(content_src_components_ContextMenu_ContextMenuButton__WEBPACK_IMPORTED_MODULE_6__["ContextMenuButton"], {
      tooltip: "newtab-menu-section-tooltip",
      onUpdate: this.onMenuUpdate,
      refFunction: this.setContextMenuButtonRef
    }, react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement(content_src_components_SectionMenu_SectionMenu__WEBPACK_IMPORTED_MODULE_4__["SectionMenu"], {
      id: id,
      extraOptions: extraMenuOptions,
      eventSource: eventSource,
      showPrefName: showPrefName,
      privacyNoticeURL: privacyNoticeURL,
      collapsed: collapsed,
      isFixed: isFixed,
      isFirst: isFirst,
      isLast: isLast,
      dispatch: dispatch,
      isWebExtension: isWebExtension
    })))), react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement(content_src_components_ErrorBoundary_ErrorBoundary__WEBPACK_IMPORTED_MODULE_1__["ErrorBoundary"], {
      className: "section-body-fallback"
    }, react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("div", {
      className: `section-body${isAnimating ? " animating" : ""}`,
      onTransitionEnd: this.onTransitionEnd,
      ref: this.onBodyMount,
      style: bodyStyle
    }, this.props.children)));
  }

}
CollapsibleSection.defaultProps = {
  document: global.document || {
    addEventListener: () => {},
    removeEventListener: () => {},
    visibilityState: "hidden"
  },
  Prefs: {
    values: {}
  }
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1)))

/***/ }),
/* 34 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ErrorBoundaryFallback", function() { return ErrorBoundaryFallback; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ErrorBoundary", function() { return ErrorBoundary; });
/* harmony import */ var content_src_components_A11yLinkButton_A11yLinkButton__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(35);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */


class ErrorBoundaryFallback extends react__WEBPACK_IMPORTED_MODULE_1___default.a.PureComponent {
  constructor(props) {
    super(props);
    this.windowObj = this.props.windowObj || window;
    this.onClick = this.onClick.bind(this);
  }
  /**
   * Since we only get here if part of the page has crashed, do a
   * forced reload to give us the best chance at recovering.
   */


  onClick() {
    this.windowObj.location.reload(true);
  }

  render() {
    const defaultClass = "as-error-fallback";
    let className;

    if ("className" in this.props) {
      className = `${this.props.className} ${defaultClass}`;
    } else {
      className = defaultClass;
    } // "A11yLinkButton" to force normal link styling stuff (eg cursor on hover)


    return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      className: className
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      "data-l10n-id": "newtab-error-fallback-info"
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(content_src_components_A11yLinkButton_A11yLinkButton__WEBPACK_IMPORTED_MODULE_0__["A11yLinkButton"], {
      className: "reload-button",
      onClick: this.onClick,
      "data-l10n-id": "newtab-error-fallback-refresh-link"
    })));
  }

}
ErrorBoundaryFallback.defaultProps = {
  className: "as-error-fallback"
};
class ErrorBoundary extends react__WEBPACK_IMPORTED_MODULE_1___default.a.PureComponent {
  constructor(props) {
    super(props);
    this.state = {
      hasError: false
    };
  }

  componentDidCatch(error, info) {
    this.setState({
      hasError: true
    });
  }

  render() {
    if (!this.state.hasError) {
      return this.props.children;
    }

    return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(this.props.FallbackComponent, {
      className: this.props.className
    });
  }

}
ErrorBoundary.defaultProps = {
  FallbackComponent: ErrorBoundaryFallback
};

/***/ }),
/* 35 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "A11yLinkButton", function() { return A11yLinkButton; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */

function A11yLinkButton(props) {
  // function for merging classes, if necessary
  let className = "a11y-link-button";

  if (props.className) {
    className += ` ${props.className}`;
  }

  return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("button", _extends({
    type: "button"
  }, props, {
    className: className
  }), props.children);
}

/***/ }),
/* 36 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FluentOrText", function() { return FluentOrText; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */

/**
 * Set text on a child element/component depending on if the message is already
 * translated plain text or a fluent id with optional args.
 */

class FluentOrText extends react__WEBPACK_IMPORTED_MODULE_0___default.a.PureComponent {
  render() {
    // Ensure we have a single child to attach attributes
    const {
      children,
      message
    } = this.props;
    const child = children ? react__WEBPACK_IMPORTED_MODULE_0___default.a.Children.only(children) : react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span", null); // For a string message, just use it as the child's text

    let grandChildren = message;
    let extraProps; // Convert a message object to set desired fluent-dom attributes

    if (typeof message === "object") {
      const args = message.args || message.values;
      extraProps = {
        "data-l10n-args": args && JSON.stringify(args),
        "data-l10n-id": message.id || message.string_id
      }; // Use original children potentially with data-l10n-name attributes

      grandChildren = child.props.children;
    } // Add the message to the child via fluent attributes or text node


    return react__WEBPACK_IMPORTED_MODULE_0___default.a.cloneElement(child, extraProps, grandChildren);
  }

}

/***/ }),
/* 37 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_SectionMenu", function() { return _SectionMenu; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SectionMenu", function() { return SectionMenu; });
/* harmony import */ var common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var content_src_components_ContextMenu_ContextMenu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(30);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var content_src_lib_section_menu_options__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(38);
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */




const DEFAULT_SECTION_MENU_OPTIONS = ["MoveUp", "MoveDown", "Separator", "RemoveSection", "CheckCollapsed", "Separator", "ManageSection"];
const WEBEXT_SECTION_MENU_OPTIONS = ["MoveUp", "MoveDown", "Separator", "CheckCollapsed", "Separator", "ManageWebExtension"];
class _SectionMenu extends react__WEBPACK_IMPORTED_MODULE_2___default.a.PureComponent {
  handleAddWhileCollapsed() {
    const {
      action,
      userEvent
    } = content_src_lib_section_menu_options__WEBPACK_IMPORTED_MODULE_3__["SectionMenuOptions"].ExpandSection(this.props);
    this.props.dispatch(action);

    if (userEvent) {
      this.props.dispatch(common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionCreators"].UserEvent({
        event: userEvent,
        source: this.props.source
      }));
    }
  }

  getOptions() {
    const {
      props
    } = this;
    const propOptions = props.isWebExtension ? [...WEBEXT_SECTION_MENU_OPTIONS] : [...DEFAULT_SECTION_MENU_OPTIONS]; // Remove the move related options if the section is fixed

    if (props.isFixed) {
      propOptions.splice(propOptions.indexOf("MoveUp"), 3);
    } // Prepend custom options and a separator


    if (props.extraOptions) {
      propOptions.splice(0, 0, ...props.extraOptions, "Separator");
    } // Insert privacy notice before the last option ("ManageSection")


    if (props.privacyNoticeURL) {
      propOptions.splice(-1, 0, "PrivacyNotice");
    }

    const options = propOptions.map(o => content_src_lib_section_menu_options__WEBPACK_IMPORTED_MODULE_3__["SectionMenuOptions"][o](props)).map(option => {
      const {
        action,
        id,
        type,
        userEvent
      } = option;

      if (!type && id) {
        option.onClick = () => {
          const hasAddEvent = userEvent === "MENU_ADD_TOPSITE" || userEvent === "MENU_ADD_SEARCH";

          if (props.collapsed && hasAddEvent) {
            this.handleAddWhileCollapsed();
          }

          props.dispatch(action);

          if (userEvent) {
            props.dispatch(common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionCreators"].UserEvent({
              event: userEvent,
              source: props.source
            }));
          }
        };
      }

      return option;
    }); // This is for accessibility to support making each item tabbable.
    // We want to know which item is the first and which item
    // is the last, so we can close the context menu accordingly.

    options[0].first = true;
    options[options.length - 1].last = true;
    return options;
  }

  render() {
    return react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(content_src_components_ContextMenu_ContextMenu__WEBPACK_IMPORTED_MODULE_1__["ContextMenu"], {
      onUpdate: this.props.onUpdate,
      options: this.getOptions(),
      keyboardAccess: this.props.keyboardAccess
    });
  }

}
const SectionMenu = _SectionMenu;

/***/ }),
/* 38 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SectionMenuOptions", function() { return SectionMenuOptions; });
/* harmony import */ var common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */

/**
 * List of functions that return items that can be included as menu options in a
 * SectionMenu. All functions take the section as the only parameter.
 */

const SectionMenuOptions = {
  Separator: () => ({
    type: "separator"
  }),
  MoveUp: section => ({
    id: "newtab-section-menu-move-up",
    icon: "arrowhead-up",
    action: common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionCreators"].OnlyToMain({
      type: common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionTypes"].SECTION_MOVE,
      data: {
        id: section.id,
        direction: -1
      }
    }),
    userEvent: "MENU_MOVE_UP",
    disabled: !!section.isFirst
  }),
  MoveDown: section => ({
    id: "newtab-section-menu-move-down",
    icon: "arrowhead-down",
    action: common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionCreators"].OnlyToMain({
      type: common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionTypes"].SECTION_MOVE,
      data: {
        id: section.id,
        direction: +1
      }
    }),
    userEvent: "MENU_MOVE_DOWN",
    disabled: !!section.isLast
  }),
  RemoveSection: section => ({
    id: "newtab-section-menu-remove-section",
    icon: "dismiss",
    action: common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionCreators"].SetPref(section.showPrefName, false),
    userEvent: "MENU_REMOVE"
  }),
  CollapseSection: section => ({
    id: "newtab-section-menu-collapse-section",
    icon: "minimize",
    action: common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionCreators"].OnlyToMain({
      type: common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionTypes"].UPDATE_SECTION_PREFS,
      data: {
        id: section.id,
        value: {
          collapsed: true
        }
      }
    }),
    userEvent: "MENU_COLLAPSE"
  }),
  ExpandSection: section => ({
    id: "newtab-section-menu-expand-section",
    icon: "maximize",
    action: common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionCreators"].OnlyToMain({
      type: common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionTypes"].UPDATE_SECTION_PREFS,
      data: {
        id: section.id,
        value: {
          collapsed: false
        }
      }
    }),
    userEvent: "MENU_EXPAND"
  }),
  ManageSection: section => ({
    id: "newtab-section-menu-manage-section",
    icon: "settings",
    action: common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionCreators"].OnlyToMain({
      type: common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionTypes"].SETTINGS_OPEN
    }),
    userEvent: "MENU_MANAGE"
  }),
  ManageWebExtension: section => ({
    id: "newtab-section-menu-manage-webext",
    icon: "settings",
    action: common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionCreators"].OnlyToMain({
      type: common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionTypes"].OPEN_WEBEXT_SETTINGS,
      data: section.id
    })
  }),
  AddTopSite: section => ({
    id: "newtab-section-menu-add-topsite",
    icon: "add",
    action: {
      type: common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionTypes"].TOP_SITES_EDIT,
      data: {
        index: -1
      }
    },
    userEvent: "MENU_ADD_TOPSITE"
  }),
  AddSearchShortcut: section => ({
    id: "newtab-section-menu-add-search-engine",
    icon: "search",
    action: {
      type: common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionTypes"].TOP_SITES_OPEN_SEARCH_SHORTCUTS_MODAL
    },
    userEvent: "MENU_ADD_SEARCH"
  }),
  PrivacyNotice: section => ({
    id: "newtab-section-menu-privacy-notice",
    icon: "info",
    action: common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionCreators"].OnlyToMain({
      type: common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionTypes"].OPEN_LINK,
      data: {
        url: section.privacyNoticeURL
      }
    }),
    userEvent: "MENU_PRIVACY_NOTICE"
  }),
  CheckCollapsed: section => section.collapsed ? SectionMenuOptions.ExpandSection(section) : SectionMenuOptions.CollapseSection(section)
};

/***/ }),
/* 39 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Section", function() { return Section; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SectionIntl", function() { return SectionIntl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_Sections", function() { return _Sections; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Sections", function() { return Sections; });
/* harmony import */ var common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var content_src_components_Card_Card__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(57);
/* harmony import */ var content_src_components_CollapsibleSection_CollapsibleSection__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(33);
/* harmony import */ var content_src_components_ComponentPerfTimer_ComponentPerfTimer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(41);
/* harmony import */ var content_src_components_FluentOrText_FluentOrText__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(36);
/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(27);
/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(react_redux__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var content_src_components_MoreRecommendations_MoreRecommendations__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(43);
/* harmony import */ var content_src_components_PocketLoggedInCta_PocketLoggedInCta__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(44);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(9);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var content_src_components_Topics_Topics__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(45);
/* harmony import */ var content_src_components_TopSites_TopSites__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(46);
function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */











const VISIBLE = "visible";
const VISIBILITY_CHANGE_EVENT = "visibilitychange";
const CARDS_PER_ROW_DEFAULT = 3;
const CARDS_PER_ROW_COMPACT_WIDE = 4;
class Section extends react__WEBPACK_IMPORTED_MODULE_8___default.a.PureComponent {
  get numRows() {
    const {
      rowsPref,
      maxRows,
      Prefs
    } = this.props;
    return rowsPref ? Prefs.values[rowsPref] : maxRows;
  }

  _dispatchImpressionStats() {
    const {
      props
    } = this;
    let cardsPerRow = CARDS_PER_ROW_DEFAULT;

    if (props.compactCards && global.matchMedia(`(min-width: 1072px)`).matches) {
      // If the section has compact cards and the viewport is wide enough, we show
      // 4 columns instead of 3.
      // $break-point-widest = 1072px (from _variables.scss)
      cardsPerRow = CARDS_PER_ROW_COMPACT_WIDE;
    }

    const maxCards = cardsPerRow * this.numRows;
    const cards = props.rows.slice(0, maxCards);

    if (this.needsImpressionStats(cards)) {
      props.dispatch(common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionCreators"].ImpressionStats({
        source: props.eventSource,
        tiles: cards.map(link => ({
          id: link.guid
        }))
      }));
      this.impressionCardGuids = cards.map(link => link.guid);
    }
  } // This sends an event when a user sees a set of new content. If content
  // changes while the page is hidden (i.e. preloaded or on a hidden tab),
  // only send the event if the page becomes visible again.


  sendImpressionStatsOrAddListener() {
    const {
      props
    } = this;

    if (!props.shouldSendImpressionStats || !props.dispatch) {
      return;
    }

    if (props.document.visibilityState === VISIBLE) {
      this._dispatchImpressionStats();
    } else {
      // We should only ever send the latest impression stats ping, so remove any
      // older listeners.
      if (this._onVisibilityChange) {
        props.document.removeEventListener(VISIBILITY_CHANGE_EVENT, this._onVisibilityChange);
      } // When the page becomes visible, send the impression stats ping if the section isn't collapsed.


      this._onVisibilityChange = () => {
        if (props.document.visibilityState === VISIBLE) {
          if (!this.props.pref.collapsed) {
            this._dispatchImpressionStats();
          }

          props.document.removeEventListener(VISIBILITY_CHANGE_EVENT, this._onVisibilityChange);
        }
      };

      props.document.addEventListener(VISIBILITY_CHANGE_EVENT, this._onVisibilityChange);
    }
  }

  componentWillMount() {
    this.sendNewTabRehydrated(this.props.initialized);
  }

  componentDidMount() {
    if (this.props.rows.length && !this.props.pref.collapsed) {
      this.sendImpressionStatsOrAddListener();
    }
  }

  componentDidUpdate(prevProps) {
    const {
      props
    } = this;
    const isCollapsed = props.pref.collapsed;
    const wasCollapsed = prevProps.pref.collapsed;

    if ( // Don't send impression stats for the empty state
    props.rows.length && ( // We only want to send impression stats if the content of the cards has changed
    // and the section is not collapsed...
    props.rows !== prevProps.rows && !isCollapsed || // or if we are expanding a section that was collapsed.
    wasCollapsed && !isCollapsed)) {
      this.sendImpressionStatsOrAddListener();
    }
  }

  componentWillUpdate(nextProps) {
    this.sendNewTabRehydrated(nextProps.initialized);
  }

  componentWillUnmount() {
    if (this._onVisibilityChange) {
      this.props.document.removeEventListener(VISIBILITY_CHANGE_EVENT, this._onVisibilityChange);
    }
  }

  needsImpressionStats(cards) {
    if (!this.impressionCardGuids || this.impressionCardGuids.length !== cards.length) {
      return true;
    }

    for (let i = 0; i < cards.length; i++) {
      if (cards[i].guid !== this.impressionCardGuids[i]) {
        return true;
      }
    }

    return false;
  } // The NEW_TAB_REHYDRATED event is used to inform feeds that their
  // data has been consumed e.g. for counting the number of tabs that
  // have rendered that data.


  sendNewTabRehydrated(initialized) {
    if (initialized && !this.renderNotified) {
      this.props.dispatch(common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionCreators"].AlsoToMain({
        type: common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionTypes"].NEW_TAB_REHYDRATED,
        data: {}
      }));
      this.renderNotified = true;
    }
  }

  render() {
    const {
      id,
      eventSource,
      title,
      icon,
      rows,
      Pocket,
      topics,
      emptyState,
      dispatch,
      compactCards,
      read_more_endpoint,
      contextMenuOptions,
      initialized,
      learnMore,
      pref,
      privacyNoticeURL,
      isFirst,
      isLast
    } = this.props;
    const waitingForSpoc = id === "topstories" && this.props.Pocket.waitingForSpoc;
    const maxCardsPerRow = compactCards ? CARDS_PER_ROW_COMPACT_WIDE : CARDS_PER_ROW_DEFAULT;
    const {
      numRows
    } = this;
    const maxCards = maxCardsPerRow * numRows;
    const maxCardsOnNarrow = CARDS_PER_ROW_DEFAULT * numRows;
    const {
      pocketCta,
      isUserLoggedIn
    } = Pocket || {};
    const {
      useCta
    } = pocketCta || {}; // Don't display anything until we have a definitve result from Pocket,
    // to avoid a flash of logged out state while we render.

    const isPocketLoggedInDefined = isUserLoggedIn === true || isUserLoggedIn === false;
    const hasTopics = topics && topics.length > 0;
    const shouldShowPocketCta = id === "topstories" && useCta && isUserLoggedIn === false; // Show topics only for top stories and if it has loaded with topics.
    // The classs .top-stories-bottom-container ensures content doesn't shift as things load.

    const shouldShowTopics = id === "topstories" && hasTopics && (useCta && isUserLoggedIn === true || !useCta && isPocketLoggedInDefined); // We use topics to determine language support for read more.

    const shouldShowReadMore = read_more_endpoint && hasTopics;
    const realRows = rows.slice(0, maxCards); // The empty state should only be shown after we have initialized and there is no content.
    // Otherwise, we should show placeholders.

    const shouldShowEmptyState = initialized && !rows.length;
    const cards = [];

    if (!shouldShowEmptyState) {
      for (let i = 0; i < maxCards; i++) {
        const link = realRows[i]; // On narrow viewports, we only show 3 cards per row. We'll mark the rest as
        // .hide-for-narrow to hide in CSS via @media query.

        const className = i >= maxCardsOnNarrow ? "hide-for-narrow" : "";
        let usePlaceholder = !link; // If we are in the third card and waiting for spoc,
        // use the placeholder.

        if (!usePlaceholder && i === 2 && waitingForSpoc) {
          usePlaceholder = true;
        }

        cards.push(!usePlaceholder ? react__WEBPACK_IMPORTED_MODULE_8___default.a.createElement(content_src_components_Card_Card__WEBPACK_IMPORTED_MODULE_1__["Card"], {
          key: i,
          index: i,
          className: className,
          dispatch: dispatch,
          link: link,
          contextMenuOptions: contextMenuOptions,
          eventSource: eventSource,
          shouldSendImpressionStats: this.props.shouldSendImpressionStats,
          isWebExtension: this.props.isWebExtension
        }) : react__WEBPACK_IMPORTED_MODULE_8___default.a.createElement(content_src_components_Card_Card__WEBPACK_IMPORTED_MODULE_1__["PlaceholderCard"], {
          key: i,
          className: className
        }));
      }
    }

    const sectionClassName = ["section", compactCards ? "compact-cards" : "normal-cards"].join(" "); // <Section> <-- React component
    // <section> <-- HTML5 element

    return react__WEBPACK_IMPORTED_MODULE_8___default.a.createElement(content_src_components_ComponentPerfTimer_ComponentPerfTimer__WEBPACK_IMPORTED_MODULE_3__["ComponentPerfTimer"], this.props, react__WEBPACK_IMPORTED_MODULE_8___default.a.createElement(content_src_components_CollapsibleSection_CollapsibleSection__WEBPACK_IMPORTED_MODULE_2__["CollapsibleSection"], {
      className: sectionClassName,
      icon: icon,
      title: title,
      id: id,
      eventSource: eventSource,
      collapsed: this.props.pref.collapsed,
      showPrefName: pref && pref.feed || id,
      privacyNoticeURL: privacyNoticeURL,
      Prefs: this.props.Prefs,
      isFixed: this.props.isFixed,
      isFirst: isFirst,
      isLast: isLast,
      learnMore: learnMore,
      dispatch: this.props.dispatch,
      isWebExtension: this.props.isWebExtension
    }, !shouldShowEmptyState && react__WEBPACK_IMPORTED_MODULE_8___default.a.createElement("ul", {
      className: "section-list",
      style: {
        padding: 0
      }
    }, cards), shouldShowEmptyState && react__WEBPACK_IMPORTED_MODULE_8___default.a.createElement("div", {
      className: "section-empty-state"
    }, react__WEBPACK_IMPORTED_MODULE_8___default.a.createElement("div", {
      className: "empty-state"
    }, emptyState.icon && emptyState.icon.startsWith("moz-extension://") ? react__WEBPACK_IMPORTED_MODULE_8___default.a.createElement("span", {
      className: "empty-state-icon icon",
      style: {
        "background-image": `url('${emptyState.icon}')`
      }
    }) : react__WEBPACK_IMPORTED_MODULE_8___default.a.createElement("span", {
      className: `empty-state-icon icon icon-${emptyState.icon}`
    }), react__WEBPACK_IMPORTED_MODULE_8___default.a.createElement(content_src_components_FluentOrText_FluentOrText__WEBPACK_IMPORTED_MODULE_4__["FluentOrText"], {
      message: emptyState.message
    }, react__WEBPACK_IMPORTED_MODULE_8___default.a.createElement("p", {
      className: "empty-state-message"
    })))), id === "topstories" && react__WEBPACK_IMPORTED_MODULE_8___default.a.createElement("div", {
      className: "top-stories-bottom-container"
    }, shouldShowTopics && react__WEBPACK_IMPORTED_MODULE_8___default.a.createElement("div", {
      className: "wrapper-topics"
    }, react__WEBPACK_IMPORTED_MODULE_8___default.a.createElement(content_src_components_Topics_Topics__WEBPACK_IMPORTED_MODULE_9__["Topics"], {
      topics: this.props.topics
    })), shouldShowPocketCta && react__WEBPACK_IMPORTED_MODULE_8___default.a.createElement("div", {
      className: "wrapper-cta"
    }, react__WEBPACK_IMPORTED_MODULE_8___default.a.createElement(content_src_components_PocketLoggedInCta_PocketLoggedInCta__WEBPACK_IMPORTED_MODULE_7__["PocketLoggedInCta"], null)), react__WEBPACK_IMPORTED_MODULE_8___default.a.createElement("div", {
      className: "wrapper-more-recommendations"
    }, shouldShowReadMore && react__WEBPACK_IMPORTED_MODULE_8___default.a.createElement(content_src_components_MoreRecommendations_MoreRecommendations__WEBPACK_IMPORTED_MODULE_6__["MoreRecommendations"], {
      read_more_endpoint: read_more_endpoint
    })))));
  }

}
Section.defaultProps = {
  document: global.document,
  rows: [],
  emptyState: {},
  pref: {},
  title: ""
};
const SectionIntl = Object(react_redux__WEBPACK_IMPORTED_MODULE_5__["connect"])(state => ({
  Prefs: state.Prefs,
  Pocket: state.Pocket
}))(Section);
class _Sections extends react__WEBPACK_IMPORTED_MODULE_8___default.a.PureComponent {
  renderSections() {
    const sections = [];
    const enabledSections = this.props.Sections.filter(section => section.enabled);
    const {
      sectionOrder,
      "feeds.topsites": showTopSites
    } = this.props.Prefs.values; // Enabled sections doesn't include Top Sites, so we add it if enabled.

    const expectedCount = enabledSections.length + ~~showTopSites;

    for (const sectionId of sectionOrder.split(",")) {
      const commonProps = {
        key: sectionId,
        isFirst: sections.length === 0,
        isLast: sections.length === expectedCount - 1
      };

      if (sectionId === "topsites" && showTopSites) {
        sections.push(react__WEBPACK_IMPORTED_MODULE_8___default.a.createElement(content_src_components_TopSites_TopSites__WEBPACK_IMPORTED_MODULE_10__["TopSites"], commonProps));
      } else {
        const section = enabledSections.find(s => s.id === sectionId);

        if (section) {
          sections.push(react__WEBPACK_IMPORTED_MODULE_8___default.a.createElement(SectionIntl, _extends({}, section, commonProps)));
        }
      }
    }

    return sections;
  }

  render() {
    return react__WEBPACK_IMPORTED_MODULE_8___default.a.createElement("div", {
      className: "sections-list"
    }, this.renderSections());
  }

}
const Sections = Object(react_redux__WEBPACK_IMPORTED_MODULE_5__["connect"])(state => ({
  Sections: state.Sections,
  Prefs: state.Prefs
}))(_Sections);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1)))

/***/ }),
/* 40 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ScreenshotUtils", function() { return ScreenshotUtils; });
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */

/**
 * List of helper functions for screenshot-based images.
 *
 * There are two kinds of images:
 * 1. Remote Image: This is the image from the main process and it refers to
 *    the image in the React props. This can either be an object with the `data`
 *    and `path` properties, if it is a blob, or a string, if it is a normal image.
 * 2. Local Image: This is the image object in the content process and it refers
 *    to the image *object* in the React component's state. All local image
 *    objects have the `url` property, and an additional property `path`, if they
 *    are blobs.
 */
const ScreenshotUtils = {
  isBlob(isLocal, image) {
    return !!(image && image.path && (!isLocal && image.data || isLocal && image.url));
  },

  // This should always be called with a remote image and not a local image.
  createLocalImageObject(remoteImage) {
    if (!remoteImage) {
      return null;
    }

    if (this.isBlob(false, remoteImage)) {
      return {
        url: global.URL.createObjectURL(remoteImage.data),
        path: remoteImage.path
      };
    }

    return {
      url: remoteImage
    };
  },

  // Revokes the object URL of the image if the local image is a blob.
  // This should always be called with a local image and not a remote image.
  maybeRevokeBlobObjectURL(localImage) {
    if (this.isBlob(true, localImage)) {
      global.URL.revokeObjectURL(localImage.url);
    }
  },

  // Checks if remoteImage and localImage are the same.
  isRemoteImageLocal(localImage, remoteImage) {
    // Both remoteImage and localImage are present.
    if (remoteImage && localImage) {
      return this.isBlob(false, remoteImage) ? localImage.path === remoteImage.path : localImage.url === remoteImage;
    } // This will only handle the remaining three possible outcomes.
    // (i.e. everything except when both image and localImage are present)


    return !remoteImage && !localImage;
  }

};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1)))

/***/ }),
/* 41 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ComponentPerfTimer", function() { return ComponentPerfTimer; });
/* harmony import */ var common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var common_PerfService_jsm__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(42);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */


 // Currently record only a fixed set of sections. This will prevent data
// from custom sections from showing up or from topstories.

const RECORDED_SECTIONS = ["highlights", "topsites"];
class ComponentPerfTimer extends react__WEBPACK_IMPORTED_MODULE_2___default.a.Component {
  constructor(props) {
    super(props); // Just for test dependency injection:

    this.perfSvc = this.props.perfSvc || common_PerfService_jsm__WEBPACK_IMPORTED_MODULE_1__["perfService"];
    this._sendBadStateEvent = this._sendBadStateEvent.bind(this);
    this._sendPaintedEvent = this._sendPaintedEvent.bind(this);
    this._reportMissingData = false;
    this._timestampHandled = false;
    this._recordedFirstRender = false;
  }

  componentDidMount() {
    if (!RECORDED_SECTIONS.includes(this.props.id)) {
      return;
    }

    this._maybeSendPaintedEvent();
  }

  componentDidUpdate() {
    if (!RECORDED_SECTIONS.includes(this.props.id)) {
      return;
    }

    this._maybeSendPaintedEvent();
  }
  /**
   * Call the given callback after the upcoming frame paints.
   *
   * @note Both setTimeout and requestAnimationFrame are throttled when the page
   * is hidden, so this callback may get called up to a second or so after the
   * requestAnimationFrame "paint" for hidden tabs.
   *
   * Newtabs hidden while loading will presumably be fairly rare (other than
   * preloaded tabs, which we will be filtering out on the server side), so such
   * cases should get lost in the noise.
   *
   * If we decide that it's important to find out when something that's hidden
   * has "painted", however, another option is to post a message to this window.
   * That should happen even faster than setTimeout, and, at least as of this
   * writing, it's not throttled in hidden windows in Firefox.
   *
   * @param {Function} callback
   *
   * @returns void
   */


  _afterFramePaint(callback) {
    requestAnimationFrame(() => setTimeout(callback, 0));
  }

  _maybeSendBadStateEvent() {
    // Follow up bugs:
    // https://github.com/mozilla/activity-stream/issues/3691
    if (!this.props.initialized) {
      // Remember to report back when data is available.
      this._reportMissingData = true;
    } else if (this._reportMissingData) {
      this._reportMissingData = false; // Report how long it took for component to become initialized.

      this._sendBadStateEvent();
    }
  }

  _maybeSendPaintedEvent() {
    // If we've already handled a timestamp, don't do it again.
    if (this._timestampHandled || !this.props.initialized) {
      return;
    } // And if we haven't, we're doing so now, so remember that. Even if
    // something goes wrong in the callback, we can't try again, as we'd be
    // sending back the wrong data, and we have to do it here, so that other
    // calls to this method while waiting for the next frame won't also try to
    // handle it.


    this._timestampHandled = true;

    this._afterFramePaint(this._sendPaintedEvent);
  }
  /**
   * Triggered by call to render. Only first call goes through due to
   * `_recordedFirstRender`.
   */


  _ensureFirstRenderTsRecorded() {
    // Used as t0 for recording how long component took to initialize.
    if (!this._recordedFirstRender) {
      this._recordedFirstRender = true; // topsites_first_render_ts, highlights_first_render_ts.

      const key = `${this.props.id}_first_render_ts`;
      this.perfSvc.mark(key);
    }
  }
  /**
   * Creates `TELEMETRY_UNDESIRED_EVENT` with timestamp in ms
   * of how much longer the data took to be ready for display than it would
   * have been the ideal case.
   * https://github.com/mozilla/ping-centre/issues/98
   */


  _sendBadStateEvent() {
    // highlights_data_ready_ts, topsites_data_ready_ts.
    const dataReadyKey = `${this.props.id}_data_ready_ts`;
    this.perfSvc.mark(dataReadyKey);

    try {
      const firstRenderKey = `${this.props.id}_first_render_ts`; // value has to be Int32.

      const value = parseInt(this.perfSvc.getMostRecentAbsMarkStartByName(dataReadyKey) - this.perfSvc.getMostRecentAbsMarkStartByName(firstRenderKey), 10);
      this.props.dispatch(common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionCreators"].OnlyToMain({
        type: common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionTypes"].SAVE_SESSION_PERF_DATA,
        // highlights_data_late_by_ms, topsites_data_late_by_ms.
        data: {
          [`${this.props.id}_data_late_by_ms`]: value
        }
      }));
    } catch (ex) {// If this failed, it's likely because the `privacy.resistFingerprinting`
      // pref is true.
    }
  }

  _sendPaintedEvent() {
    // Record first_painted event but only send if topsites.
    if (this.props.id !== "topsites") {
      return;
    } // topsites_first_painted_ts.


    const key = `${this.props.id}_first_painted_ts`;
    this.perfSvc.mark(key);

    try {
      const data = {};
      data[key] = this.perfSvc.getMostRecentAbsMarkStartByName(key);
      this.props.dispatch(common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionCreators"].OnlyToMain({
        type: common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionTypes"].SAVE_SESSION_PERF_DATA,
        data
      }));
    } catch (ex) {// If this failed, it's likely because the `privacy.resistFingerprinting`
      // pref is true.  We should at least not blow up, and should continue
      // to set this._timestampHandled to avoid going through this again.
    }
  }

  render() {
    if (RECORDED_SECTIONS.includes(this.props.id)) {
      this._ensureFirstRenderTsRecorded();

      this._maybeSendBadStateEvent();
    }

    return this.props.children;
  }

}

/***/ }),
/* 42 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_PerfService", function() { return _PerfService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "perfService", function() { return perfService; });
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */


if (typeof ChromeUtils !== "undefined") {
  // Use a var here instead of let outside to avoid creating a locally scoped
  // variable that hides the global, which we modify for testing.
  // eslint-disable-next-line no-var, vars-on-top
  var {
    Services
  } = ChromeUtils.import("resource://gre/modules/Services.jsm");
}

let usablePerfObj;
/* istanbul ignore else */
// eslint-disable-next-line block-scoped-var

if (typeof Services !== "undefined") {
  // Borrow the high-resolution timer from the hidden window....
  // eslint-disable-next-line block-scoped-var
  usablePerfObj = Services.appShell.hiddenDOMWindow.performance;
} else {
  // we must be running in content space
  // eslint-disable-next-line no-undef
  usablePerfObj = performance;
}

function _PerfService(options) {
  // For testing, so that we can use a fake Window.performance object with
  // known state.
  if (options && options.performanceObj) {
    this._perf = options.performanceObj;
  } else {
    this._perf = usablePerfObj;
  }
}
_PerfService.prototype = {
  /**
   * Calls the underlying mark() method on the appropriate Window.performance
   * object to add a mark with the given name to the appropriate performance
   * timeline.
   *
   * @param  {String} name  the name to give the current mark
   * @return {void}
   */
  mark: function mark(str) {
    this._perf.mark(str);
  },

  /**
   * Calls the underlying getEntriesByName on the appropriate Window.performance
   * object.
   *
   * @param  {String} name
   * @param  {String} type eg "mark"
   * @return {Array}       Performance* objects
   */
  getEntriesByName: function getEntriesByName(name, type) {
    return this._perf.getEntriesByName(name, type);
  },

  /**
   * The timeOrigin property from the appropriate performance object.
   * Used to ensure that timestamps from the add-on code and the content code
   * are comparable.
   *
   * @note If this is called from a context without a window
   * (eg a JSM in chrome), it will return the timeOrigin of the XUL hidden
   * window, which appears to be the first created window (and thus
   * timeOrigin) in the browser.  Note also, however, there is also a private
   * hidden window, presumably for private browsing, which appears to be
   * created dynamically later.  Exactly how/when that shows up needs to be
   * investigated.
   *
   * @return {Number} A double of milliseconds with a precision of 0.5us.
   */
  get timeOrigin() {
    return this._perf.timeOrigin;
  },

  /**
   * Returns the "absolute" version of performance.now(), i.e. one that
   * should ([bug 1401406](https://bugzilla.mozilla.org/show_bug.cgi?id=1401406)
   * be comparable across both chrome and content.
   *
   * @return {Number}
   */
  absNow: function absNow() {
    return this.timeOrigin + this._perf.now();
  },

  /**
   * This returns the absolute startTime from the most recent performance.mark()
   * with the given name.
   *
   * @param  {String} name  the name to lookup the start time for
   *
   * @return {Number}       the returned start time, as a DOMHighResTimeStamp
   *
   * @throws {Error}        "No Marks with the name ..." if none are available
   *
   * @note Always surround calls to this by try/catch.  Otherwise your code
   * may fail when the `privacy.resistFingerprinting` pref is true.  When
   * this pref is set, all attempts to get marks will likely fail, which will
   * cause this method to throw.
   *
   * See [bug 1369303](https://bugzilla.mozilla.org/show_bug.cgi?id=1369303)
   * for more info.
   */
  getMostRecentAbsMarkStartByName(name) {
    let entries = this.getEntriesByName(name, "mark");

    if (!entries.length) {
      throw new Error(`No marks with the name ${name}`);
    }

    let mostRecentEntry = entries[entries.length - 1];
    return this._perf.timeOrigin + mostRecentEntry.startTime;
  }

};
var perfService = new _PerfService();

/***/ }),
/* 43 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MoreRecommendations", function() { return MoreRecommendations; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */

class MoreRecommendations extends react__WEBPACK_IMPORTED_MODULE_0___default.a.PureComponent {
  render() {
    const {
      read_more_endpoint
    } = this.props;

    if (read_more_endpoint) {
      return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("a", {
        className: "more-recommendations",
        href: read_more_endpoint,
        "data-l10n-id": "newtab-pocket-more-recommendations"
      });
    }

    return null;
  }

}

/***/ }),
/* 44 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_PocketLoggedInCta", function() { return _PocketLoggedInCta; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PocketLoggedInCta", function() { return PocketLoggedInCta; });
/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(27);
/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_redux__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */


class _PocketLoggedInCta extends react__WEBPACK_IMPORTED_MODULE_1___default.a.PureComponent {
  render() {
    const {
      pocketCta
    } = this.props.Pocket;
    return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
      className: "pocket-logged-in-cta"
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("a", {
      className: "pocket-cta-button",
      href: pocketCta.ctaUrl ? pocketCta.ctaUrl : "https://getpocket.com/"
    }, pocketCta.ctaButton ? pocketCta.ctaButton : react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
      "data-l10n-id": "newtab-pocket-cta-button"
    })), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("a", {
      href: pocketCta.ctaUrl ? pocketCta.ctaUrl : "https://getpocket.com/"
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
      className: "cta-text"
    }, pocketCta.ctaText ? pocketCta.ctaText : react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
      "data-l10n-id": "newtab-pocket-cta-text"
    }))));
  }

}
const PocketLoggedInCta = Object(react_redux__WEBPACK_IMPORTED_MODULE_0__["connect"])(state => ({
  Pocket: state.Pocket
}))(_PocketLoggedInCta);

/***/ }),
/* 45 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Topic", function() { return Topic; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Topics", function() { return Topics; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */

class Topic extends react__WEBPACK_IMPORTED_MODULE_0___default.a.PureComponent {
  render() {
    const {
      url,
      name
    } = this.props;
    return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li", null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("a", {
      key: name,
      href: url
    }, name));
  }

}
class Topics extends react__WEBPACK_IMPORTED_MODULE_0___default.a.PureComponent {
  render() {
    const {
      topics
    } = this.props;
    return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span", {
      className: "topics"
    }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span", {
      "data-l10n-id": "newtab-pocket-read-more"
    }), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("ul", null, topics && topics.map(t => react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Topic, {
      key: t.name,
      url: t.url,
      name: t.name
    }))));
  }

}

/***/ }),
/* 46 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_TopSites", function() { return _TopSites; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TopSites", function() { return TopSites; });
/* harmony import */ var common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var _TopSitesConstants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(47);
/* harmony import */ var content_src_components_CollapsibleSection_CollapsibleSection__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(33);
/* harmony import */ var content_src_components_ComponentPerfTimer_ComponentPerfTimer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(41);
/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(27);
/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react_redux__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _asrouter_components_ModalOverlay_ModalOverlay__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(21);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(9);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _SearchShortcutsForm__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(48);
/* harmony import */ var common_Reducers_jsm__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(56);
/* harmony import */ var _TopSiteForm__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(59);
/* harmony import */ var _TopSite__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(49);
function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */












function topSiteIconType(link) {
  if (link.customScreenshotURL) {
    return "custom_screenshot";
  }

  if (link.tippyTopIcon || link.faviconRef === "tippytop") {
    return "tippytop";
  }

  if (link.faviconSize >= _TopSitesConstants__WEBPACK_IMPORTED_MODULE_1__["MIN_RICH_FAVICON_SIZE"]) {
    return "rich_icon";
  }

  if (link.screenshot && link.faviconSize >= _TopSitesConstants__WEBPACK_IMPORTED_MODULE_1__["MIN_CORNER_FAVICON_SIZE"]) {
    return "screenshot_with_icon";
  }

  if (link.screenshot) {
    return "screenshot";
  }

  return "no_image";
}
/**
 * Iterates through TopSites and counts types of images.
 * @param acc Accumulator for reducer.
 * @param topsite Entry in TopSites.
 */


function countTopSitesIconsTypes(topSites) {
  const countTopSitesTypes = (acc, link) => {
    acc[topSiteIconType(link)]++;
    return acc;
  };

  return topSites.reduce(countTopSitesTypes, {
    custom_screenshot: 0,
    screenshot_with_icon: 0,
    screenshot: 0,
    tippytop: 0,
    rich_icon: 0,
    no_image: 0
  });
}

class _TopSites extends react__WEBPACK_IMPORTED_MODULE_6___default.a.PureComponent {
  constructor(props) {
    super(props);
    this.onEditFormClose = this.onEditFormClose.bind(this);
    this.onSearchShortcutsFormClose = this.onSearchShortcutsFormClose.bind(this);
  }
  /**
   * Dispatch session statistics about the quality of TopSites icons and pinned count.
   */


  _dispatchTopSitesStats() {
    const topSites = this._getVisibleTopSites();

    const topSitesIconsStats = countTopSitesIconsTypes(topSites);
    const topSitesPinned = topSites.filter(site => !!site.isPinned).length;
    const searchShortcuts = topSites.filter(site => !!site.searchTopSite).length; // Dispatch telemetry event with the count of TopSites images types.

    this.props.dispatch(common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionCreators"].AlsoToMain({
      type: common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionTypes"].SAVE_SESSION_PERF_DATA,
      data: {
        topsites_icon_stats: topSitesIconsStats,
        topsites_pinned: topSitesPinned,
        topsites_search_shortcuts: searchShortcuts
      }
    }));
  }
  /**
   * Return the TopSites that are visible based on prefs and window width.
   */


  _getVisibleTopSites() {
    // We hide 2 sites per row when not in the wide layout.
    let sitesPerRow = common_Reducers_jsm__WEBPACK_IMPORTED_MODULE_8__["TOP_SITES_MAX_SITES_PER_ROW"]; // $break-point-widest = 1072px (from _variables.scss)

    if (!global.matchMedia(`(min-width: 1072px)`).matches) {
      sitesPerRow -= 2;
    }

    return this.props.TopSites.rows.slice(0, this.props.TopSitesRows * sitesPerRow);
  }

  componentDidUpdate() {
    this._dispatchTopSitesStats();
  }

  componentDidMount() {
    this._dispatchTopSitesStats();
  }

  onEditFormClose() {
    this.props.dispatch(common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionCreators"].UserEvent({
      source: _TopSitesConstants__WEBPACK_IMPORTED_MODULE_1__["TOP_SITES_SOURCE"],
      event: "TOP_SITES_EDIT_CLOSE"
    }));
    this.props.dispatch({
      type: common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionTypes"].TOP_SITES_CANCEL_EDIT
    });
  }

  onSearchShortcutsFormClose() {
    this.props.dispatch(common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionCreators"].UserEvent({
      source: _TopSitesConstants__WEBPACK_IMPORTED_MODULE_1__["TOP_SITES_SOURCE"],
      event: "SEARCH_EDIT_CLOSE"
    }));
    this.props.dispatch({
      type: common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionTypes"].TOP_SITES_CLOSE_SEARCH_SHORTCUTS_MODAL
    });
  }

  render() {
    const {
      props
    } = this;
    const {
      editForm,
      showSearchShortcutsForm
    } = props.TopSites;
    const extraMenuOptions = ["AddTopSite"];

    if (props.Prefs.values["improvesearch.topSiteSearchShortcuts"]) {
      extraMenuOptions.push("AddSearchShortcut");
    }

    return react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement(content_src_components_ComponentPerfTimer_ComponentPerfTimer__WEBPACK_IMPORTED_MODULE_3__["ComponentPerfTimer"], {
      id: "topsites",
      initialized: props.TopSites.initialized,
      dispatch: props.dispatch
    }, react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement(content_src_components_CollapsibleSection_CollapsibleSection__WEBPACK_IMPORTED_MODULE_2__["CollapsibleSection"], {
      className: "top-sites",
      icon: "topsites",
      id: "topsites",
      title: this.props.title || {
        id: "newtab-section-header-topsites"
      },
      extraMenuOptions: extraMenuOptions,
      showPrefName: "feeds.topsites",
      eventSource: _TopSitesConstants__WEBPACK_IMPORTED_MODULE_1__["TOP_SITES_SOURCE"],
      collapsed: props.TopSites.pref ? props.TopSites.pref.collapsed : undefined,
      isFixed: props.isFixed,
      isFirst: props.isFirst,
      isLast: props.isLast,
      dispatch: props.dispatch
    }, react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement(_TopSite__WEBPACK_IMPORTED_MODULE_10__["TopSiteList"], {
      TopSites: props.TopSites,
      TopSitesRows: props.TopSitesRows,
      dispatch: props.dispatch,
      topSiteIconType: topSiteIconType
    }), react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement("div", {
      className: "edit-topsites-wrapper"
    }, editForm && react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement("div", {
      className: "edit-topsites"
    }, react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement(_asrouter_components_ModalOverlay_ModalOverlay__WEBPACK_IMPORTED_MODULE_5__["ModalOverlayWrapper"], {
      unstyled: true,
      onClose: this.onEditFormClose,
      innerClassName: "modal"
    }, react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement(_TopSiteForm__WEBPACK_IMPORTED_MODULE_9__["TopSiteForm"], _extends({
      site: props.TopSites.rows[editForm.index],
      onClose: this.onEditFormClose,
      dispatch: this.props.dispatch
    }, editForm)))), showSearchShortcutsForm && react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement("div", {
      className: "edit-search-shortcuts"
    }, react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement(_asrouter_components_ModalOverlay_ModalOverlay__WEBPACK_IMPORTED_MODULE_5__["ModalOverlayWrapper"], {
      unstyled: true,
      onClose: this.onSearchShortcutsFormClose,
      innerClassName: "modal"
    }, react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement(_SearchShortcutsForm__WEBPACK_IMPORTED_MODULE_7__["SearchShortcutsForm"], {
      TopSites: props.TopSites,
      onClose: this.onSearchShortcutsFormClose,
      dispatch: this.props.dispatch
    }))))));
  }

}
const TopSites = Object(react_redux__WEBPACK_IMPORTED_MODULE_4__["connect"])(state => ({
  TopSites: state.TopSites,
  Prefs: state.Prefs,
  TopSitesRows: state.Prefs.values.topSitesRows
}))(_TopSites);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1)))

/***/ }),
/* 47 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TOP_SITES_SOURCE", function() { return TOP_SITES_SOURCE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TOP_SITES_CONTEXT_MENU_OPTIONS", function() { return TOP_SITES_CONTEXT_MENU_OPTIONS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TOP_SITES_SEARCH_SHORTCUTS_CONTEXT_MENU_OPTIONS", function() { return TOP_SITES_SEARCH_SHORTCUTS_CONTEXT_MENU_OPTIONS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MIN_RICH_FAVICON_SIZE", function() { return MIN_RICH_FAVICON_SIZE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MIN_CORNER_FAVICON_SIZE", function() { return MIN_CORNER_FAVICON_SIZE; });
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */
const TOP_SITES_SOURCE = "TOP_SITES";
const TOP_SITES_CONTEXT_MENU_OPTIONS = ["CheckPinTopSite", "EditTopSite", "Separator", "OpenInNewWindow", "OpenInPrivateWindow", "Separator", "BlockUrl", "DeleteUrl"]; // the special top site for search shortcut experiment can only have the option to unpin (which removes) the topsite

const TOP_SITES_SEARCH_SHORTCUTS_CONTEXT_MENU_OPTIONS = ["CheckPinTopSite", "Separator", "BlockUrl"]; // minimum size necessary to show a rich icon instead of a screenshot

const MIN_RICH_FAVICON_SIZE = 96; // minimum size necessary to show any icon in the top left corner with a screenshot

const MIN_CORNER_FAVICON_SIZE = 16;

/***/ }),
/* 48 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SelectableSearchShortcut", function() { return SelectableSearchShortcut; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SearchShortcutsForm", function() { return SearchShortcutsForm; });
/* harmony import */ var common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _TopSitesConstants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(47);
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */



class SelectableSearchShortcut extends react__WEBPACK_IMPORTED_MODULE_1___default.a.PureComponent {
  render() {
    const {
      shortcut,
      selected
    } = this.props;
    const imageStyle = {
      backgroundImage: `url("${shortcut.tippyTopIcon}")`
    };
    return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      className: "top-site-outer search-shortcut"
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("input", {
      type: "checkbox",
      id: shortcut.keyword,
      name: shortcut.keyword,
      checked: selected,
      onChange: this.props.onChange
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("label", {
      htmlFor: shortcut.keyword
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      className: "top-site-inner"
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      className: "tile"
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      className: "top-site-icon rich-icon",
      style: imageStyle,
      "data-fallback": "@"
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      className: "top-site-icon search-topsite"
    })), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      className: "title"
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
      dir: "auto"
    }, shortcut.keyword))))));
  }

}
class SearchShortcutsForm extends react__WEBPACK_IMPORTED_MODULE_1___default.a.PureComponent {
  constructor(props) {
    super(props);
    this.handleChange = this.handleChange.bind(this);
    this.onCancelButtonClick = this.onCancelButtonClick.bind(this);
    this.onSaveButtonClick = this.onSaveButtonClick.bind(this); // clone the shortcuts and add them to the state so we can add isSelected property

    const shortcuts = [];
    const {
      rows,
      searchShortcuts
    } = props.TopSites;
    searchShortcuts.forEach(shortcut => {
      shortcuts.push({ ...shortcut,
        isSelected: !!rows.find(row => row && row.isPinned && row.searchTopSite && row.label === shortcut.keyword)
      });
    });
    this.state = {
      shortcuts
    };
  }

  handleChange(event) {
    const {
      target
    } = event;
    const {
      name,
      checked
    } = target;
    this.setState(prevState => {
      const shortcuts = prevState.shortcuts.slice();
      let shortcut = shortcuts.find(({
        keyword
      }) => keyword === name);
      shortcut.isSelected = checked;
      return {
        shortcuts
      };
    });
  }

  onCancelButtonClick(ev) {
    ev.preventDefault();
    this.props.onClose();
  }

  onSaveButtonClick(ev) {
    ev.preventDefault(); // Check if there were any changes and act accordingly

    const {
      rows
    } = this.props.TopSites;
    const pinQueue = [];
    const unpinQueue = [];
    this.state.shortcuts.forEach(shortcut => {
      const alreadyPinned = rows.find(row => row && row.isPinned && row.searchTopSite && row.label === shortcut.keyword);

      if (shortcut.isSelected && !alreadyPinned) {
        pinQueue.push(this._searchTopSite(shortcut));
      } else if (!shortcut.isSelected && alreadyPinned) {
        unpinQueue.push({
          url: alreadyPinned.url,
          searchVendor: shortcut.shortURL
        });
      }
    }); // Tell the feed to do the work.

    this.props.dispatch(common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionCreators"].OnlyToMain({
      type: common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionTypes"].UPDATE_PINNED_SEARCH_SHORTCUTS,
      data: {
        addedShortcuts: pinQueue,
        deletedShortcuts: unpinQueue
      }
    })); // Send the Telemetry pings.

    pinQueue.forEach(shortcut => {
      this.props.dispatch(common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionCreators"].UserEvent({
        source: _TopSitesConstants__WEBPACK_IMPORTED_MODULE_2__["TOP_SITES_SOURCE"],
        event: "SEARCH_EDIT_ADD",
        value: {
          search_vendor: shortcut.searchVendor
        }
      }));
    });
    unpinQueue.forEach(shortcut => {
      this.props.dispatch(common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionCreators"].UserEvent({
        source: _TopSitesConstants__WEBPACK_IMPORTED_MODULE_2__["TOP_SITES_SOURCE"],
        event: "SEARCH_EDIT_DELETE",
        value: {
          search_vendor: shortcut.searchVendor
        }
      }));
    });
    this.props.onClose();
  }

  _searchTopSite(shortcut) {
    return {
      url: shortcut.url,
      searchTopSite: true,
      label: shortcut.keyword,
      searchVendor: shortcut.shortURL
    };
  }

  render() {
    return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("form", {
      className: "topsite-form"
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      className: "search-shortcuts-container"
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("h3", {
      className: "section-title grey-title",
      "data-l10n-id": "newtab-topsites-add-search-engine-header"
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, this.state.shortcuts.map(shortcut => react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(SelectableSearchShortcut, {
      key: shortcut.keyword,
      shortcut: shortcut,
      selected: shortcut.isSelected,
      onChange: this.handleChange
    })))), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("section", {
      className: "actions"
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("button", {
      className: "cancel",
      type: "button",
      onClick: this.onCancelButtonClick,
      "data-l10n-id": "newtab-topsites-cancel-button"
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("button", {
      className: "done",
      type: "submit",
      onClick: this.onSaveButtonClick,
      "data-l10n-id": "newtab-topsites-save-button"
    })));
  }

}

/***/ }),
/* 49 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TopSiteLink", function() { return TopSiteLink; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TopSite", function() { return TopSite; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TopSitePlaceholder", function() { return TopSitePlaceholder; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TopSiteList", function() { return TopSiteList; });
/* harmony import */ var common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var _TopSitesConstants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(47);
/* harmony import */ var content_src_components_LinkMenu_LinkMenu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(60);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(9);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var content_src_lib_screenshot_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(40);
/* harmony import */ var common_Reducers_jsm__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(56);
/* harmony import */ var content_src_components_ContextMenu_ContextMenuButton__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(31);
function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */







class TopSiteLink extends react__WEBPACK_IMPORTED_MODULE_3___default.a.PureComponent {
  constructor(props) {
    super(props);
    this.state = {
      screenshotImage: null
    };
    this.onDragEvent = this.onDragEvent.bind(this);
    this.onKeyPress = this.onKeyPress.bind(this);
  }
  /*
   * Helper to determine whether the drop zone should allow a drop. We only allow
   * dropping top sites for now.
   */


  _allowDrop(e) {
    return e.dataTransfer.types.includes("text/topsite-index");
  }

  onDragEvent(event) {
    switch (event.type) {
      case "click":
        // Stop any link clicks if we started any dragging
        if (this.dragged) {
          event.preventDefault();
        }

        break;

      case "dragstart":
        this.dragged = true;
        event.dataTransfer.effectAllowed = "move";
        event.dataTransfer.setData("text/topsite-index", this.props.index);
        event.target.blur();
        this.props.onDragEvent(event, this.props.index, this.props.link, this.props.title);
        break;

      case "dragend":
        this.props.onDragEvent(event);
        break;

      case "dragenter":
      case "dragover":
      case "drop":
        if (this._allowDrop(event)) {
          event.preventDefault();
          this.props.onDragEvent(event, this.props.index);
        }

        break;

      case "mousedown":
        // Block the scroll wheel from appearing for middle clicks on search top sites
        if (event.button === 1 && this.props.link.searchTopSite) {
          event.preventDefault();
        } // Reset at the first mouse event of a potential drag


        this.dragged = false;
        break;
    }
  }
  /**
   * Helper to obtain the next state based on nextProps and prevState.
   *
   * NOTE: Rename this method to getDerivedStateFromProps when we update React
   *       to >= 16.3. We will need to update tests as well. We cannot rename this
   *       method to getDerivedStateFromProps now because there is a mismatch in
   *       the React version that we are using for both testing and production.
   *       (i.e. react-test-render => "16.3.2", react => "16.2.0").
   *
   * See https://github.com/airbnb/enzyme/blob/master/packages/enzyme-adapter-react-16/package.json#L43.
   */


  static getNextStateFromProps(nextProps, prevState) {
    const {
      screenshot
    } = nextProps.link;
    const imageInState = content_src_lib_screenshot_utils__WEBPACK_IMPORTED_MODULE_4__["ScreenshotUtils"].isRemoteImageLocal(prevState.screenshotImage, screenshot);

    if (imageInState) {
      return null;
    } // Since image was updated, attempt to revoke old image blob URL, if it exists.


    content_src_lib_screenshot_utils__WEBPACK_IMPORTED_MODULE_4__["ScreenshotUtils"].maybeRevokeBlobObjectURL(prevState.screenshotImage);
    return {
      screenshotImage: content_src_lib_screenshot_utils__WEBPACK_IMPORTED_MODULE_4__["ScreenshotUtils"].createLocalImageObject(screenshot)
    };
  } // NOTE: Remove this function when we update React to >= 16.3 since React will
  //       call getDerivedStateFromProps automatically. We will also need to
  //       rename getNextStateFromProps to getDerivedStateFromProps.


  componentWillMount() {
    const nextState = TopSiteLink.getNextStateFromProps(this.props, this.state);

    if (nextState) {
      this.setState(nextState);
    }
  } // NOTE: Remove this function when we update React to >= 16.3 since React will
  //       call getDerivedStateFromProps automatically. We will also need to
  //       rename getNextStateFromProps to getDerivedStateFromProps.


  componentWillReceiveProps(nextProps) {
    const nextState = TopSiteLink.getNextStateFromProps(nextProps, this.state);

    if (nextState) {
      this.setState(nextState);
    }
  }

  componentWillUnmount() {
    content_src_lib_screenshot_utils__WEBPACK_IMPORTED_MODULE_4__["ScreenshotUtils"].maybeRevokeBlobObjectURL(this.state.screenshotImage);
  }

  onKeyPress(event) {
    // If we have tabbed to a search shortcut top site, and we click 'enter',
    // we should execute the onClick function. This needs to be added because
    // search top sites are anchor tags without an href. See bug 1483135
    if (this.props.link.searchTopSite && event.key === "Enter") {
      this.props.onClick(event);
    }
  }

  render() {
    const {
      children,
      className,
      defaultStyle,
      isDraggable,
      link,
      onClick,
      title
    } = this.props;
    const topSiteOuterClassName = `top-site-outer${className ? ` ${className}` : ""}${link.isDragged ? " dragged" : ""}${link.searchTopSite ? " search-shortcut" : ""}`;
    const {
      tippyTopIcon,
      faviconSize
    } = link;
    const [letterFallback] = title;
    let imageClassName;
    let imageStyle;
    let showSmallFavicon = false;
    let smallFaviconStyle;
    let smallFaviconFallback;
    let hasScreenshotImage = this.state.screenshotImage && this.state.screenshotImage.url;

    if (defaultStyle) {
      // force no styles (letter fallback) even if the link has imagery
      smallFaviconFallback = false;
    } else if (link.searchTopSite) {
      imageClassName = "top-site-icon rich-icon";
      imageStyle = {
        backgroundColor: link.backgroundColor,
        backgroundImage: `url(${tippyTopIcon})`
      };
      smallFaviconStyle = {
        backgroundImage: `url(${tippyTopIcon})`
      };
    } else if (link.customScreenshotURL) {
      // assume high quality custom screenshot and use rich icon styles and class names
      imageClassName = "top-site-icon rich-icon";
      imageStyle = {
        backgroundColor: link.backgroundColor,
        backgroundImage: hasScreenshotImage ? `url(${this.state.screenshotImage.url})` : "none"
      };
    } else if (tippyTopIcon || faviconSize >= _TopSitesConstants__WEBPACK_IMPORTED_MODULE_1__["MIN_RICH_FAVICON_SIZE"]) {
      // styles and class names for top sites with rich icons
      imageClassName = "top-site-icon rich-icon";
      imageStyle = {
        backgroundColor: link.backgroundColor,
        backgroundImage: `url(${tippyTopIcon || link.favicon})`
      };
    } else {
      // styles and class names for top sites with screenshot + small icon in top left corner
      imageClassName = `screenshot${hasScreenshotImage ? " active" : ""}`;
      imageStyle = {
        backgroundImage: hasScreenshotImage ? `url(${this.state.screenshotImage.url})` : "none"
      }; // only show a favicon in top left if it's greater than 16x16

      if (faviconSize >= _TopSitesConstants__WEBPACK_IMPORTED_MODULE_1__["MIN_CORNER_FAVICON_SIZE"]) {
        showSmallFavicon = true;
        smallFaviconStyle = {
          backgroundImage: `url(${link.favicon})`
        };
      } else if (hasScreenshotImage) {
        // Don't show a small favicon if there is no screenshot, because that
        // would result in two fallback icons
        showSmallFavicon = true;
        smallFaviconFallback = true;
      }
    }

    let draggableProps = {};

    if (isDraggable) {
      draggableProps = {
        onClick: this.onDragEvent,
        onDragEnd: this.onDragEvent,
        onDragStart: this.onDragEvent,
        onMouseDown: this.onDragEvent
      };
    }

    return react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("li", _extends({
      className: topSiteOuterClassName,
      onDrop: this.onDragEvent,
      onDragOver: this.onDragEvent,
      onDragEnter: this.onDragEvent,
      onDragLeave: this.onDragEvent
    }, draggableProps), react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("div", {
      className: "top-site-inner"
    }, react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("a", {
      className: "top-site-button",
      href: link.searchTopSite ? undefined : link.url,
      tabIndex: "0",
      onKeyPress: this.onKeyPress,
      onClick: onClick,
      draggable: true
    }, react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("div", {
      className: "tile",
      "aria-hidden": true,
      "data-fallback": letterFallback
    }, react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("div", {
      className: imageClassName,
      style: imageStyle
    }), link.searchTopSite && react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("div", {
      className: "top-site-icon search-topsite"
    }), showSmallFavicon && react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("div", {
      className: "top-site-icon default-icon",
      "data-fallback": smallFaviconFallback && letterFallback,
      style: smallFaviconStyle
    })), react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("div", {
      className: `title ${link.isPinned ? "pinned" : ""}`
    }, link.isPinned && react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("div", {
      className: "icon icon-pin-small"
    }), react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("span", {
      dir: "auto"
    }, title))), children));
  }

}
TopSiteLink.defaultProps = {
  title: "",
  link: {},
  isDraggable: true
};
class TopSite extends react__WEBPACK_IMPORTED_MODULE_3___default.a.PureComponent {
  constructor(props) {
    super(props);
    this.state = {
      showContextMenu: false
    };
    this.onLinkClick = this.onLinkClick.bind(this);
    this.onMenuUpdate = this.onMenuUpdate.bind(this);
  }
  /**
   * Report to telemetry additional information about the item.
   */


  _getTelemetryInfo() {
    const value = {
      icon_type: this.props.link.iconType
    }; // Filter out "not_pinned" type for being the default

    if (this.props.link.isPinned) {
      value.card_type = "pinned";
    }

    if (this.props.link.searchTopSite) {
      // Set the card_type as "search" regardless of its pinning status
      value.card_type = "search";
      value.search_vendor = this.props.link.hostname;
    }

    return {
      value
    };
  }

  userEvent(event) {
    this.props.dispatch(common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionCreators"].UserEvent(Object.assign({
      event,
      source: _TopSitesConstants__WEBPACK_IMPORTED_MODULE_1__["TOP_SITES_SOURCE"],
      action_position: this.props.index
    }, this._getTelemetryInfo())));
  }

  onLinkClick(event) {
    this.userEvent("CLICK"); // Specially handle a top site link click for "typed" frecency bonus as
    // specified as a property on the link.

    event.preventDefault();
    const {
      altKey,
      button,
      ctrlKey,
      metaKey,
      shiftKey
    } = event;

    if (!this.props.link.searchTopSite) {
      this.props.dispatch(common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionCreators"].OnlyToMain({
        type: common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionTypes"].OPEN_LINK,
        data: Object.assign(this.props.link, {
          event: {
            altKey,
            button,
            ctrlKey,
            metaKey,
            shiftKey
          }
        })
      }));
    } else {
      this.props.dispatch(common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionCreators"].OnlyToMain({
        type: common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionTypes"].FILL_SEARCH_TERM,
        data: {
          label: this.props.link.label
        }
      }));
    }
  }

  onMenuUpdate(isOpen) {
    if (isOpen) {
      this.props.onActivate(this.props.index);
    } else {
      this.props.onActivate();
    }
  }

  render() {
    const {
      props
    } = this;
    const {
      link
    } = props;
    const isContextMenuOpen = props.activeIndex === props.index;
    const title = link.label || link.hostname;
    return react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement(TopSiteLink, _extends({}, props, {
      onClick: this.onLinkClick,
      onDragEvent: this.props.onDragEvent,
      className: `${props.className || ""}${isContextMenuOpen ? " active" : ""}`,
      title: title
    }), react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement(content_src_components_ContextMenu_ContextMenuButton__WEBPACK_IMPORTED_MODULE_6__["ContextMenuButton"], {
      tooltip: "newtab-menu-content-tooltip",
      tooltipArgs: {
        title
      },
      onUpdate: this.onMenuUpdate
    }, react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement(content_src_components_LinkMenu_LinkMenu__WEBPACK_IMPORTED_MODULE_2__["LinkMenu"], {
      dispatch: props.dispatch,
      index: props.index,
      onUpdate: this.onMenuUpdate,
      options: link.searchTopSite ? _TopSitesConstants__WEBPACK_IMPORTED_MODULE_1__["TOP_SITES_SEARCH_SHORTCUTS_CONTEXT_MENU_OPTIONS"] : _TopSitesConstants__WEBPACK_IMPORTED_MODULE_1__["TOP_SITES_CONTEXT_MENU_OPTIONS"],
      site: link,
      siteInfo: this._getTelemetryInfo(),
      source: _TopSitesConstants__WEBPACK_IMPORTED_MODULE_1__["TOP_SITES_SOURCE"]
    }))));
  }

}
TopSite.defaultProps = {
  link: {},

  onActivate() {}

};
class TopSitePlaceholder extends react__WEBPACK_IMPORTED_MODULE_3___default.a.PureComponent {
  constructor(props) {
    super(props);
    this.onEditButtonClick = this.onEditButtonClick.bind(this);
  }

  onEditButtonClick() {
    this.props.dispatch({
      type: common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionTypes"].TOP_SITES_EDIT,
      data: {
        index: this.props.index
      }
    });
  }

  render() {
    return react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement(TopSiteLink, _extends({}, this.props, {
      className: `placeholder ${this.props.className || ""}`,
      isDraggable: false
    }), react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("button", {
      "aria-haspopup": "true",
      className: "context-menu-button edit-button icon",
      "data-l10n-id": "newtab-menu-topsites-placeholder-tooltip",
      onClick: this.onEditButtonClick
    }));
  }

}
class TopSiteList extends react__WEBPACK_IMPORTED_MODULE_3___default.a.PureComponent {
  static get DEFAULT_STATE() {
    return {
      activeIndex: null,
      draggedIndex: null,
      draggedSite: null,
      draggedTitle: null,
      topSitesPreview: null
    };
  }

  constructor(props) {
    super(props);
    this.state = TopSiteList.DEFAULT_STATE;
    this.onDragEvent = this.onDragEvent.bind(this);
    this.onActivate = this.onActivate.bind(this);
  }

  componentWillReceiveProps(nextProps) {
    if (this.state.draggedSite) {
      const prevTopSites = this.props.TopSites && this.props.TopSites.rows;
      const newTopSites = nextProps.TopSites && nextProps.TopSites.rows;

      if (prevTopSites && prevTopSites[this.state.draggedIndex] && prevTopSites[this.state.draggedIndex].url === this.state.draggedSite.url && (!newTopSites[this.state.draggedIndex] || newTopSites[this.state.draggedIndex].url !== this.state.draggedSite.url)) {
        // We got the new order from the redux store via props. We can clear state now.
        this.setState(TopSiteList.DEFAULT_STATE);
      }
    }
  }

  userEvent(event, index) {
    this.props.dispatch(common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionCreators"].UserEvent({
      event,
      source: _TopSitesConstants__WEBPACK_IMPORTED_MODULE_1__["TOP_SITES_SOURCE"],
      action_position: index
    }));
  }

  onDragEvent(event, index, link, title) {
    switch (event.type) {
      case "dragstart":
        this.dropped = false;
        this.setState({
          draggedIndex: index,
          draggedSite: link,
          draggedTitle: title,
          activeIndex: null
        });
        this.userEvent("DRAG", index);
        break;

      case "dragend":
        if (!this.dropped) {
          // If there was no drop event, reset the state to the default.
          this.setState(TopSiteList.DEFAULT_STATE);
        }

        break;

      case "dragenter":
        if (index === this.state.draggedIndex) {
          this.setState({
            topSitesPreview: null
          });
        } else {
          this.setState({
            topSitesPreview: this._makeTopSitesPreview(index)
          });
        }

        break;

      case "drop":
        if (index !== this.state.draggedIndex) {
          this.dropped = true;
          this.props.dispatch(common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionCreators"].AlsoToMain({
            type: common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionTypes"].TOP_SITES_INSERT,
            data: {
              site: {
                url: this.state.draggedSite.url,
                label: this.state.draggedTitle,
                customScreenshotURL: this.state.draggedSite.customScreenshotURL,
                // Only if the search topsites experiment is enabled
                ...(this.state.draggedSite.searchTopSite && {
                  searchTopSite: true
                })
              },
              index,
              draggedFromIndex: this.state.draggedIndex
            }
          }));
          this.userEvent("DROP", index);
        }

        break;
    }
  }

  _getTopSites() {
    // Make a copy of the sites to truncate or extend to desired length
    let topSites = this.props.TopSites.rows.slice();
    topSites.length = this.props.TopSitesRows * common_Reducers_jsm__WEBPACK_IMPORTED_MODULE_5__["TOP_SITES_MAX_SITES_PER_ROW"];
    return topSites;
  }
  /**
   * Make a preview of the topsites that will be the result of dropping the currently
   * dragged site at the specified index.
   */


  _makeTopSitesPreview(index) {
    const topSites = this._getTopSites();

    topSites[this.state.draggedIndex] = null;
    const pinnedOnly = topSites.map(site => site && site.isPinned ? site : null);
    const unpinned = topSites.filter(site => site && !site.isPinned);
    const siteToInsert = Object.assign({}, this.state.draggedSite, {
      isPinned: true,
      isDragged: true
    });

    if (!pinnedOnly[index]) {
      pinnedOnly[index] = siteToInsert;
    } else {
      // Find the hole to shift the pinned site(s) towards. We shift towards the
      // hole left by the site being dragged.
      let holeIndex = index;
      const indexStep = index > this.state.draggedIndex ? -1 : 1;

      while (pinnedOnly[holeIndex]) {
        holeIndex += indexStep;
      } // Shift towards the hole.


      const shiftingStep = index > this.state.draggedIndex ? 1 : -1;

      while (holeIndex !== index) {
        const nextIndex = holeIndex + shiftingStep;
        pinnedOnly[holeIndex] = pinnedOnly[nextIndex];
        holeIndex = nextIndex;
      }

      pinnedOnly[index] = siteToInsert;
    } // Fill in the remaining holes with unpinned sites.


    const preview = pinnedOnly;

    for (let i = 0; i < preview.length; i++) {
      if (!preview[i]) {
        preview[i] = unpinned.shift() || null;
      }
    }

    return preview;
  }

  onActivate(index) {
    this.setState({
      activeIndex: index
    });
  }

  render() {
    const {
      props
    } = this;

    const topSites = this.state.topSitesPreview || this._getTopSites();

    const topSitesUI = [];
    const commonProps = {
      onDragEvent: this.onDragEvent,
      dispatch: props.dispatch
    }; // We assign a key to each placeholder slot. We need it to be independent
    // of the slot index (i below) so that the keys used stay the same during
    // drag and drop reordering and the underlying DOM nodes are reused.
    // This mostly (only?) affects linux so be sure to test on linux before changing.

    let holeIndex = 0; // On narrow viewports, we only show 6 sites per row. We'll mark the rest as
    // .hide-for-narrow to hide in CSS via @media query.

    const maxNarrowVisibleIndex = props.TopSitesRows * 6;

    for (let i = 0, l = topSites.length; i < l; i++) {
      const link = topSites[i] && Object.assign({}, topSites[i], {
        iconType: this.props.topSiteIconType(topSites[i])
      });
      const slotProps = {
        key: link ? link.url : holeIndex++,
        index: i
      };

      if (i >= maxNarrowVisibleIndex) {
        slotProps.className = "hide-for-narrow";
      }

      topSitesUI.push(!link ? react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement(TopSitePlaceholder, _extends({}, slotProps, commonProps)) : react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement(TopSite, _extends({
        link: link,
        activeIndex: this.state.activeIndex,
        onActivate: this.onActivate
      }, slotProps, commonProps)));
    }

    return react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("ul", {
      className: `top-sites-list${this.state.draggedSite ? " dnd-active" : ""}`
    }, topSitesUI);
  }

}

/***/ }),
/* 50 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_Search", function() { return _Search; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Search", function() { return Search; });
/* harmony import */ var common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(27);
/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_redux__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var content_src_lib_constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(11);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(9);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */

/* globals ContentSearchUIController */






class _Search extends react__WEBPACK_IMPORTED_MODULE_3___default.a.PureComponent {
  constructor(props) {
    super(props);
    this.onSearchClick = this.onSearchClick.bind(this);
    this.onSearchHandoffClick = this.onSearchHandoffClick.bind(this);
    this.onSearchHandoffPaste = this.onSearchHandoffPaste.bind(this);
    this.onSearchHandoffDrop = this.onSearchHandoffDrop.bind(this);
    this.onInputMount = this.onInputMount.bind(this);
    this.onSearchHandoffButtonMount = this.onSearchHandoffButtonMount.bind(this);
  }

  handleEvent(event) {
    // Also track search events with our own telemetry
    if (event.detail.type === "Search") {
      this.props.dispatch(common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionCreators"].UserEvent({
        event: "SEARCH"
      }));
    }
  }

  onSearchClick(event) {
    window.gContentSearchController.search(event);
  }

  doSearchHandoff(text) {
    this.props.dispatch(common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionCreators"].OnlyToMain({
      type: common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionTypes"].HANDOFF_SEARCH_TO_AWESOMEBAR,
      data: {
        text
      }
    }));
    this.props.dispatch({
      type: common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionTypes"].FAKE_FOCUS_SEARCH
    });
    this.props.dispatch(common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionCreators"].UserEvent({
      event: "SEARCH_HANDOFF"
    }));

    if (text) {
      this.props.dispatch({
        type: common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionTypes"].HIDE_SEARCH
      });
    }
  }

  onSearchHandoffClick(event) {
    // When search hand-off is enabled, we render a big button that is styled to
    // look like a search textbox. If the button is clicked, we style
    // the button as if it was a focused search box and show a fake cursor but
    // really focus the awesomebar without the focus styles ("hidden focus").
    event.preventDefault();
    this.doSearchHandoff();
  }

  onSearchHandoffPaste(event) {
    event.preventDefault();
    this.doSearchHandoff(event.clipboardData.getData("Text"));
  }

  onSearchHandoffDrop(event) {
    event.preventDefault();
    let text = event.dataTransfer.getData("text");

    if (text) {
      this.doSearchHandoff(text);
    }
  }

  componentWillUnmount() {
    delete window.gContentSearchController;
  }

  onInputMount(input) {
    if (input) {
      // The "healthReportKey" and needs to be "newtab" or "abouthome" so that
      // BrowserUsageTelemetry.jsm knows to handle events with this name, and
      // can add the appropriate telemetry probes for search. Without the correct
      // name, certain tests like browser_UsageTelemetry_content.js will fail
      // (See github ticket #2348 for more details)
      const healthReportKey = content_src_lib_constants__WEBPACK_IMPORTED_MODULE_2__["IS_NEWTAB"] ? "newtab" : "abouthome"; // The "searchSource" needs to be "newtab" or "homepage" and is sent with
      // the search data and acts as context for the search request (See
      // nsISearchEngine.getSubmission). It is necessary so that search engine
      // plugins can correctly atribute referrals. (See github ticket #3321 for
      // more details)

      const searchSource = content_src_lib_constants__WEBPACK_IMPORTED_MODULE_2__["IS_NEWTAB"] ? "newtab" : "homepage"; // gContentSearchController needs to exist as a global so that tests for
      // the existing about:home can find it; and so it allows these tests to pass.
      // In the future, when activity stream is default about:home, this can be renamed

      window.gContentSearchController = new ContentSearchUIController(input, input.parentNode, healthReportKey, searchSource);
      addEventListener("ContentSearchClient", this);
    } else {
      window.gContentSearchController = null;
      removeEventListener("ContentSearchClient", this);
    }
  }

  onSearchHandoffButtonMount(button) {
    // Keep a reference to the button for use during "paste" event handling.
    this._searchHandoffButton = button;
  }
  /*
   * Do not change the ID on the input field, as legacy newtab code
   * specifically looks for the id 'newtab-search-text' on input fields
   * in order to execute searches in various tests
   */


  render() {
    const wrapperClassName = ["search-wrapper", this.props.hide && "search-hidden", this.props.fakeFocus && "fake-focus"].filter(v => v).join(" ");
    return react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("div", {
      className: wrapperClassName
    }, this.props.showLogo && react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("div", {
      className: "logo-and-wordmark"
    }, react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("div", {
      className: "logo"
    }), react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("div", {
      className: "wordmark"
    })), !this.props.handoffEnabled && react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("div", {
      className: "search-inner-wrapper"
    }, react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("input", {
      id: "newtab-search-text",
      "data-l10n-id": "newtab-search-box-search-the-web-input",
      maxLength: "256",
      ref: this.onInputMount,
      type: "search"
    }), react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("button", {
      id: "searchSubmit",
      className: "search-button",
      "data-l10n-id": "newtab-search-box-search-button",
      onClick: this.onSearchClick
    })), this.props.handoffEnabled && react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("div", {
      className: "search-inner-wrapper"
    }, react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("button", {
      className: "search-handoff-button",
      "data-l10n-id": "newtab-search-box-search-the-web-input",
      ref: this.onSearchHandoffButtonMount,
      onClick: this.onSearchHandoffClick,
      tabIndex: "-1"
    }, react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("div", {
      className: "fake-textbox",
      "data-l10n-id": "newtab-search-box-search-the-web-text"
    }), react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("input", {
      type: "search",
      className: "fake-editable",
      tabIndex: "-1",
      "aria-hidden": "true",
      onDrop: this.onSearchHandoffDrop,
      onPaste: this.onSearchHandoffPaste
    }), react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("div", {
      className: "fake-caret"
    })), react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement("input", {
      type: "search",
      style: {
        display: "none"
      },
      ref: this.onInputMount
    })));
  }

}
const Search = Object(react_redux__WEBPACK_IMPORTED_MODULE_1__["connect"])()(_Search);

/***/ }),
/* 51 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DetectUserSessionStart", function() { return DetectUserSessionStart; });
/* harmony import */ var common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var common_PerfService_jsm__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(42);
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */


const VISIBLE = "visible";
const VISIBILITY_CHANGE_EVENT = "visibilitychange";
class DetectUserSessionStart {
  constructor(store, options = {}) {
    this._store = store; // Overrides for testing

    this.document = options.document || global.document;
    this._perfService = options.perfService || common_PerfService_jsm__WEBPACK_IMPORTED_MODULE_1__["perfService"];
    this._onVisibilityChange = this._onVisibilityChange.bind(this);
  }
  /**
   * sendEventOrAddListener - Notify immediately if the page is already visible,
   *                    or else set up a listener for when visibility changes.
   *                    This is needed for accurate session tracking for telemetry,
   *                    because tabs are pre-loaded.
   */


  sendEventOrAddListener() {
    if (this.document.visibilityState === VISIBLE) {
      // If the document is already visible, to the user, send a notification
      // immediately that a session has started.
      this._sendEvent();
    } else {
      // If the document is not visible, listen for when it does become visible.
      this.document.addEventListener(VISIBILITY_CHANGE_EVENT, this._onVisibilityChange);
    }
  }
  /**
   * _sendEvent - Sends a message to the main process to indicate the current
   *              tab is now visible to the user, includes the
   *              visibility_event_rcvd_ts time in ms from the UNIX epoch.
   */


  _sendEvent() {
    this._perfService.mark("visibility_event_rcvd_ts");

    try {
      let visibility_event_rcvd_ts = this._perfService.getMostRecentAbsMarkStartByName("visibility_event_rcvd_ts");

      this._store.dispatch(common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionCreators"].AlsoToMain({
        type: common_Actions_jsm__WEBPACK_IMPORTED_MODULE_0__["actionTypes"].SAVE_SESSION_PERF_DATA,
        data: {
          visibility_event_rcvd_ts
        }
      }));
    } catch (ex) {// If this failed, it's likely because the `privacy.resistFingerprinting`
      // pref is true.  We should at least not blow up.
    }
  }
  /**
   * _onVisibilityChange - If the visibility has changed to visible, sends a notification
   *                      and removes the event listener. This should only be called once per tab.
   */


  _onVisibilityChange() {
    if (this.document.visibilityState === VISIBLE) {
      this._sendEvent();

      this.document.removeEventListener(VISIBILITY_CHANGE_EVENT, this._onVisibilityChange);
    }
  }

}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1)))

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(61);

exports.__esModule = true;
exports.default = addClass;

var _hasClass = _interopRequireDefault(__webpack_require__(62));

function addClass(element, className) {
  if (element.classList) element.classList.add(className);else if (!(0, _hasClass.default)(element, className)) if (typeof element.className === 'string') element.className = element.className + ' ' + className;else element.setAttribute('class', (element.className && element.className.baseVal || '') + ' ' + className);
}

module.exports = exports["default"];

/***/ }),
/* 53 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

// EXTERNAL MODULE: external "React"
var external_React_ = __webpack_require__(9);

// EXTERNAL MODULE: external "PropTypes"
var external_PropTypes_ = __webpack_require__(10);
var external_PropTypes_default = /*#__PURE__*/__webpack_require__.n(external_PropTypes_);

// CONCATENATED MODULE: ./node_modules/fluent-sequence/src/map_sync.js
/*
 * Synchronously map an identifier or an array of identifiers to the best
 * `FluentBundle` instance(s).
 *
 * @param {Iterable} iterable
 * @param {string|Array<string>} ids
 * @returns {FluentBundle|Array<FluentBundle>}
 */
function mapBundleSync(iterable, ids) {
  if (!Array.isArray(ids)) {
    return getBundleForId(iterable, ids);
  }

  return ids.map(
    id => getBundleForId(iterable, id)
  );
}

/*
 * Find the best `FluentBundle` with the translation for `id`.
 */
function getBundleForId(iterable, id) {
  for (const bundle of iterable) {
    if (bundle.hasMessage(id)) {
      return bundle;
    }
  }

  return null;
}

// CONCATENATED MODULE: ./node_modules/fluent-sequence/src/map_async.js
/*
 * Asynchronously map an identifier or an array of identifiers to the best
 * `FluentBundle` instance(s).
 *
 * @param {AsyncIterable} iterable
 * @param {string|Array<string>} ids
 * @returns {Promise<FluentBundle|Array<FluentBundle>>}
 */
async function mapBundleAsync(iterable, ids) {
  if (!Array.isArray(ids)) {
    for await (const bundle of iterable) {
      if (bundle.hasMessage(ids)) {
        return bundle;
      }
    }
  }

  let remainingCount = ids.length;
  const foundBundles = new Array(remainingCount).fill(null);

  for await (const bundle of iterable) {
    for (const [index, id] of ids.entries()) {
      if (!foundBundles[index] && bundle.hasMessage(id)) {
        foundBundles[index] = bundle;
        remainingCount--;
      }

      // Return early when all ids have been mapped to contexts.
      if (remainingCount === 0) {
        return foundBundles;
      }
    }
  }

  return foundBundles;
}

// CONCATENATED MODULE: ./node_modules/fluent-sequence/src/index.js
/*
 * @module fluent-sequence
 * @overview Manage ordered sequences of FluentBundles.
 */




// CONCATENATED MODULE: ./node_modules/cached-iterable/src/cached_iterable.mjs
/*
 * Base CachedIterable class.
 */
class CachedIterable extends Array {
    /**
     * Create a `CachedIterable` instance from an iterable or, if another
     * instance of `CachedIterable` is passed, return it without any
     * modifications.
     *
     * @param {Iterable} iterable
     * @returns {CachedIterable}
     */
    static from(iterable) {
        if (iterable instanceof this) {
            return iterable;
        }

        return new this(iterable);
    }
}

// CONCATENATED MODULE: ./node_modules/cached-iterable/src/cached_sync_iterable.mjs


/*
 * CachedSyncIterable caches the elements yielded by an iterable.
 *
 * It can be used to iterate over an iterable many times without depleting the
 * iterable.
 */
class cached_sync_iterable_CachedSyncIterable extends CachedIterable {
    /**
     * Create an `CachedSyncIterable` instance.
     *
     * @param {Iterable} iterable
     * @returns {CachedSyncIterable}
     */
    constructor(iterable) {
        super();

        if (Symbol.iterator in Object(iterable)) {
            this.iterator = iterable[Symbol.iterator]();
        } else {
            throw new TypeError("Argument must implement the iteration protocol.");
        }
    }

    [Symbol.iterator]() {
        const cached = this;
        let cur = 0;

        return {
            next() {
                if (cached.length <= cur) {
                    cached.push(cached.iterator.next());
                }
                return cached[cur++];
            }
        };
    }

    /**
     * This method allows user to consume the next element from the iterator
     * into the cache.
     *
     * @param {number} count - number of elements to consume
     */
    touchNext(count = 1) {
        let idx = 0;
        while (idx++ < count) {
            const last = this[this.length - 1];
            if (last && last.done) {
                break;
            }
            this.push(this.iterator.next());
        }
        // Return the last cached {value, done} object to allow the calling
        // code to decide if it needs to call touchNext again.
        return this[this.length - 1];
    }
}

// CONCATENATED MODULE: ./node_modules/cached-iterable/src/cached_async_iterable.mjs


/*
 * CachedAsyncIterable caches the elements yielded by an async iterable.
 *
 * It can be used to iterate over an iterable many times without depleting the
 * iterable.
 */
class cached_async_iterable_CachedAsyncIterable extends CachedIterable {
    /**
     * Create an `CachedAsyncIterable` instance.
     *
     * @param {Iterable} iterable
     * @returns {CachedAsyncIterable}
     */
    constructor(iterable) {
        super();

        if (Symbol.asyncIterator in Object(iterable)) {
            this.iterator = iterable[Symbol.asyncIterator]();
        } else if (Symbol.iterator in Object(iterable)) {
            this.iterator = iterable[Symbol.iterator]();
        } else {
            throw new TypeError("Argument must implement the iteration protocol.");
        }
    }

    /**
     * Synchronous iterator over the cached elements.
     *
     * Return a generator object implementing the iterator protocol over the
     * cached elements of the original (async or sync) iterable.
     */
    [Symbol.iterator]() {
        const cached = this;
        let cur = 0;

        return {
            next() {
                if (cached.length === cur) {
                    return {value: undefined, done: true};
                }
                return cached[cur++];
            }
        };
    }

    /**
     * Asynchronous iterator caching the yielded elements.
     *
     * Elements yielded by the original iterable will be cached and available
     * synchronously. Returns an async generator object implementing the
     * iterator protocol over the elements of the original (async or sync)
     * iterable.
     */
    [Symbol.asyncIterator]() {
        const cached = this;
        let cur = 0;

        return {
            async next() {
                if (cached.length <= cur) {
                    cached.push(await cached.iterator.next());
                }
                return cached[cur++];
            }
        };
    }

    /**
     * This method allows user to consume the next element from the iterator
     * into the cache.
     *
     * @param {number} count - number of elements to consume
     */
    async touchNext(count = 1) {
        let idx = 0;
        while (idx++ < count) {
            const last = this[this.length - 1];
            if (last && last.done) {
                break;
            }
            this.push(await this.iterator.next());
        }
        // Return the last cached {value, done} object to allow the calling
        // code to decide if it needs to call touchNext again.
        return this[this.length - 1];
    }
}

// CONCATENATED MODULE: ./node_modules/cached-iterable/src/index.mjs



// CONCATENATED MODULE: ./node_modules/fluent-react/src/localization.js


/*
 * `ReactLocalization` handles translation formatting and fallback.
 *
 * The current negotiated fallback chain of languages is stored in the
 * `ReactLocalization` instance in form of an iterable of `FluentBundle`
 * instances.  This iterable is used to find the best existing translation for
 * a given identifier.
 *
 * `Localized` components must subscribe to the changes of the
 * `ReactLocalization`'s fallback chain.  When the fallback chain changes (the
 * `bundles` iterable is set anew), all subscribed compontent must relocalize.
 *
 * The `ReactLocalization` class instances are exposed to `Localized` elements
 * via the `LocalizationProvider` component.
 */

class localization_ReactLocalization {
  constructor(bundles) {
    this.bundles = cached_sync_iterable_CachedSyncIterable.from(bundles);
    this.subs = new Set();
  }
  /*
   * Subscribe a `Localized` component to changes of `bundles`.
   */


  subscribe(comp) {
    this.subs.add(comp);
  }
  /*
   * Unsubscribe a `Localized` component from `bundles` changes.
   */


  unsubscribe(comp) {
    this.subs.delete(comp);
  }
  /*
   * Set a new `bundles` iterable and trigger the retranslation.
   */


  setBundles(bundles) {
    this.bundles = cached_sync_iterable_CachedSyncIterable.from(bundles); // Update all subscribed Localized components.

    this.subs.forEach(comp => comp.relocalize());
  }

  getBundle(id) {
    return mapBundleSync(this.bundles, id);
  }
  /*
   * Find a translation by `id` and format it to a string using `args`.
   */


  getString(id, args, fallback) {
    const bundle = this.getBundle(id);

    if (bundle === null) {
      return fallback || id;
    }

    const msg = bundle.getMessage(id);
    return bundle.format(msg, args);
  }

}
function isReactLocalization(props, propName) {
  const prop = props[propName];

  if (prop instanceof localization_ReactLocalization) {
    return null;
  }

  return new Error(`The ${propName} context field must be an instance of ReactLocalization.`);
}
// CONCATENATED MODULE: ./node_modules/fluent-react/src/markup.js
/* eslint-env browser */
let cachedParseMarkup; // We use a function creator to make the reference to `document` lazy. At the
// same time, it's eager enough to throw in <LocalizationProvider> as soon as
// it's first mounted which reduces the risk of this error making it to the
// runtime without developers noticing it in development.

function createParseMarkup() {
  if (typeof document === "undefined") {
    // We can't use <template> to sanitize translations.
    throw new Error("`document` is undefined. Without it, translations cannot " + "be safely sanitized. Consult the documentation at " + "https://github.com/projectfluent/fluent.js/wiki/React-Overlays.");
  }

  if (!cachedParseMarkup) {
    const template = document.createElement("template");

    cachedParseMarkup = function parseMarkup(str) {
      template.innerHTML = str;
      return Array.from(template.content.childNodes);
    };
  }

  return cachedParseMarkup;
}
// CONCATENATED MODULE: ./node_modules/fluent-react/src/provider.js




/*
 * The Provider component for the `ReactLocalization` class.
 *
 * Exposes a `ReactLocalization` instance to all descendants via React's
 * context feature.  It makes translations available to all localizable
 * elements in the descendant's render tree without the need to pass them
 * explicitly.
 *
 *     <LocalizationProvider bundles={…}>
 *         …
 *     </LocalizationProvider>
 *
 * The `LocalizationProvider` component takes one prop: `bundles`.  It should
 * be an iterable of `FluentBundle` instances in order of the user's
 * preferred languages.  The `FluentBundle` instances will be used by
 * `ReactLocalization` to format translations.  If a translation is missing in
 * one instance, `ReactLocalization` will fall back to the next one.
 */

class provider_LocalizationProvider extends external_React_["Component"] {
  constructor(props) {
    super(props);
    const {
      bundles,
      parseMarkup
    } = props;

    if (bundles === undefined) {
      throw new Error("LocalizationProvider must receive the bundles prop.");
    }

    if (!bundles[Symbol.iterator]) {
      throw new Error("The bundles prop must be an iterable.");
    }

    this.l10n = new localization_ReactLocalization(bundles);
    this.parseMarkup = parseMarkup || createParseMarkup();
  }

  getChildContext() {
    return {
      l10n: this.l10n,
      parseMarkup: this.parseMarkup
    };
  }

  componentWillReceiveProps(next) {
    const {
      bundles
    } = next;

    if (bundles !== this.props.bundles) {
      this.l10n.setBundles(bundles);
    }
  }

  render() {
    return external_React_["Children"].only(this.props.children);
  }

}
provider_LocalizationProvider.childContextTypes = {
  l10n: isReactLocalization,
  parseMarkup: external_PropTypes_default.a.func
};
provider_LocalizationProvider.propTypes = {
  children: external_PropTypes_default.a.element.isRequired,
  bundles: isIterable,
  parseMarkup: external_PropTypes_default.a.func
};

function isIterable(props, propName, componentName) {
  const prop = props[propName];

  if (Symbol.iterator in Object(prop)) {
    return null;
  }

  return new Error(`The ${propName} prop supplied to ${componentName} must be an iterable.`);
}
// CONCATENATED MODULE: ./node_modules/fluent-react/src/with_localization.js


function withLocalization(Inner) {
  class WithLocalization extends external_React_["Component"] {
    componentDidMount() {
      const {
        l10n
      } = this.context;

      if (l10n) {
        l10n.subscribe(this);
      }
    }

    componentWillUnmount() {
      const {
        l10n
      } = this.context;

      if (l10n) {
        l10n.unsubscribe(this);
      }
    }
    /*
     * Rerender this component in a new language.
     */


    relocalize() {
      // When the `ReactLocalization`'s fallback chain changes, update the
      // component.
      this.forceUpdate();
    }
    /*
     * Find a translation by `id` and format it to a string using `args`.
     */


    getString(id, args, fallback) {
      const {
        l10n
      } = this.context;

      if (!l10n) {
        return fallback || id;
      }

      return l10n.getString(id, args, fallback);
    }

    render() {
      return Object(external_React_["createElement"])(Inner, Object.assign( // getString needs to be re-bound on updates to trigger a re-render
      {
        getString: (...args) => this.getString(...args)
      }, this.props));
    }

  }

  WithLocalization.displayName = `WithLocalization(${displayName(Inner)})`;
  WithLocalization.contextTypes = {
    l10n: isReactLocalization
  };
  return WithLocalization;
}

function displayName(component) {
  return component.displayName || component.name || "Component";
}
// CONCATENATED MODULE: ./node_modules/fluent-react/vendor/omittedCloseTags.js
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in this directory.
 */
// For HTML, certain tags should omit their close tag. We keep a whitelist for
// those special-case tags.
var omittedCloseTags = {
  area: true,
  base: true,
  br: true,
  col: true,
  embed: true,
  hr: true,
  img: true,
  input: true,
  keygen: true,
  link: true,
  meta: true,
  param: true,
  source: true,
  track: true,
  wbr: true // NOTE: menuitem's close tag should be omitted, but that causes problems.

};
/* harmony default export */ var vendor_omittedCloseTags = (omittedCloseTags);
// CONCATENATED MODULE: ./node_modules/fluent-react/vendor/voidElementTags.js
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in this directory.
 */
 // For HTML, certain tags cannot have children. This has the same purpose as
// `omittedCloseTags` except that `menuitem` should still have its closing tag.

var voidElementTags = {
  menuitem: true,
  ...vendor_omittedCloseTags
};
/* harmony default export */ var vendor_voidElementTags = (voidElementTags);
// CONCATENATED MODULE: ./node_modules/fluent-react/src/localized.js



 // Match the opening angle bracket (<) in HTML tags, and HTML entities like
// &amp;, &#0038;, &#x0026;.

const reMarkup = /<|&#?\w+;/;
/*
 * Prepare props passed to `Localized` for formatting.
 */

function toArguments(props) {
  const args = {};
  const elems = {};

  for (const [propname, propval] of Object.entries(props)) {
    if (propname.startsWith("$")) {
      const name = propname.substr(1);
      args[name] = propval;
    } else if (Object(external_React_["isValidElement"])(propval)) {
      // We'll try to match localNames of elements found in the translation with
      // names of elements passed as props. localNames are always lowercase.
      const name = propname.toLowerCase();
      elems[name] = propval;
    }
  }

  return [args, elems];
}
/*
 * The `Localized` class renders its child with translated props and children.
 *
 *     <Localized id="hello-world">
 *         <p>{'Hello, world!'}</p>
 *     </Localized>
 *
 * The `id` prop should be the unique identifier of the translation.  Any
 * attributes found in the translation will be applied to the wrapped element.
 *
 * Arguments to the translation can be passed as `$`-prefixed props on
 * `Localized`.
 *
 *     <Localized id="hello-world" $username={name}>
 *         <p>{'Hello, { $username }!'}</p>
 *     </Localized>
 *
 *  It's recommended that the contents of the wrapped component be a string
 *  expression.  The string will be used as the ultimate fallback if no
 *  translation is available.  It also makes it easy to grep for strings in the
 *  source code.
 */


class localized_Localized extends external_React_["Component"] {
  componentDidMount() {
    const {
      l10n
    } = this.context;

    if (l10n) {
      l10n.subscribe(this);
    }
  }

  componentWillUnmount() {
    const {
      l10n
    } = this.context;

    if (l10n) {
      l10n.unsubscribe(this);
    }
  }
  /*
   * Rerender this component in a new language.
   */


  relocalize() {
    // When the `ReactLocalization`'s fallback chain changes, update the
    // component.
    this.forceUpdate();
  }

  render() {
    const {
      l10n,
      parseMarkup
    } = this.context;
    const {
      id,
      attrs,
      children: elem
    } = this.props; // Validate that the child element isn't an array

    if (Array.isArray(elem)) {
      throw new Error("<Localized/> expected to receive a single " + "React node child");
    }

    if (!l10n) {
      // Use the wrapped component as fallback.
      return elem;
    }

    const bundle = l10n.getBundle(id);

    if (bundle === null) {
      // Use the wrapped component as fallback.
      return elem;
    }

    const msg = bundle.getMessage(id);
    const [args, elems] = toArguments(this.props);
    const messageValue = bundle.format(msg, args); // Check if the fallback is a valid element -- if not then it's not
    // markup (e.g. nothing or a fallback string) so just use the
    // formatted message value

    if (!Object(external_React_["isValidElement"])(elem)) {
      return messageValue;
    } // The default is to forbid all message attributes. If the attrs prop exists
    // on the Localized instance, only set message attributes which have been
    // explicitly allowed by the developer.


    if (attrs && msg.attrs) {
      var localizedProps = {};

      for (const [name, allowed] of Object.entries(attrs)) {
        if (allowed && msg.attrs.hasOwnProperty(name)) {
          localizedProps[name] = bundle.format(msg.attrs[name], args);
        }
      }
    } // If the wrapped component is a known void element, explicitly dismiss the
    // message value and do not pass it to cloneElement in order to avoid the
    // "void element tags must neither have `children` nor use
    // `dangerouslySetInnerHTML`" error.


    if (elem.type in vendor_voidElementTags) {
      return Object(external_React_["cloneElement"])(elem, localizedProps);
    } // If the message has a null value, we're only interested in its attributes.
    // Do not pass the null value to cloneElement as it would nuke all children
    // of the wrapped component.


    if (messageValue === null) {
      return Object(external_React_["cloneElement"])(elem, localizedProps);
    } // If the message value doesn't contain any markup nor any HTML entities,
    // insert it as the only child of the wrapped component.


    if (!reMarkup.test(messageValue)) {
      return Object(external_React_["cloneElement"])(elem, localizedProps, messageValue);
    } // If the message contains markup, parse it and try to match the children
    // found in the translation with the props passed to this Localized.


    const translationNodes = parseMarkup(messageValue);
    const translatedChildren = translationNodes.map(childNode => {
      if (childNode.nodeType === childNode.TEXT_NODE) {
        return childNode.textContent;
      } // If the child is not expected just take its textContent.


      if (!elems.hasOwnProperty(childNode.localName)) {
        return childNode.textContent;
      }

      const sourceChild = elems[childNode.localName]; // If the element passed as a prop to <Localized> is a known void element,
      // explicitly dismiss any textContent which might have accidentally been
      // defined in the translation to prevent the "void element tags must not
      // have children" error.

      if (sourceChild.type in vendor_voidElementTags) {
        return sourceChild;
      } // TODO Protect contents of elements wrapped in <Localized>
      // https://github.com/projectfluent/fluent.js/issues/184
      // TODO  Control localizable attributes on elements passed as props
      // https://github.com/projectfluent/fluent.js/issues/185


      return Object(external_React_["cloneElement"])(sourceChild, null, childNode.textContent);
    });
    return Object(external_React_["cloneElement"])(elem, localizedProps, ...translatedChildren);
  }

}
localized_Localized.contextTypes = {
  l10n: isReactLocalization,
  parseMarkup: external_PropTypes_default.a.func
};
localized_Localized.propTypes = {
  children: external_PropTypes_default.a.node
};
// CONCATENATED MODULE: ./node_modules/fluent-react/src/index.js
/* concated harmony reexport LocalizationProvider */__webpack_require__.d(__webpack_exports__, "LocalizationProvider", function() { return provider_LocalizationProvider; });
/* concated harmony reexport withLocalization */__webpack_require__.d(__webpack_exports__, "withLocalization", function() { return withLocalization; });
/* concated harmony reexport Localized */__webpack_require__.d(__webpack_exports__, "Localized", function() { return localized_Localized; });
/* concated harmony reexport ReactLocalization */__webpack_require__.d(__webpack_exports__, "ReactLocalization", function() { return localization_ReactLocalization; });
/* concated harmony reexport isReactLocalization */__webpack_require__.d(__webpack_exports__, "isReactLocalization", function() { return isReactLocalization; });
/*
 * @module fluent-react
 * @overview
 *

 * `fluent-react` provides React bindings for Fluent.  It takes advantage of
 * React's Components system and the virtual DOM.  Translations are exposed to
 * components via the provider pattern.
 *
 *     <LocalizationProvider bundles={…}>
 *         <Localized id="hello-world">
 *             <p>{'Hello, world!'}</p>
 *         </Localized>
 *     </LocalizationProvider>
 *
 * Consult the documentation of the `LocalizationProvider` and the `Localized`
 * components for more information.
 */





/***/ }),
/* 54 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

// EXTERNAL MODULE: external "React"
var external_React_ = __webpack_require__(9);
var external_React_default = /*#__PURE__*/__webpack_require__.n(external_React_);

// EXTERNAL MODULE: ./content-src/asrouter/templates/EOYSnippet/EOYSnippet.schema.json
var EOYSnippet_schema = __webpack_require__(13);

// CONCATENATED MODULE: ./content-src/asrouter/components/Button/Button.jsx
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */

const ALLOWED_STYLE_TAGS = ["color", "backgroundColor"];
const Button = props => {
  const style = {}; // Add allowed style tags from props, e.g. props.color becomes style={color: props.color}

  for (const tag of ALLOWED_STYLE_TAGS) {
    if (typeof props[tag] !== "undefined") {
      style[tag] = props[tag];
    }
  } // remove border if bg is set to something custom


  if (style.backgroundColor) {
    style.border = "0";
  }

  return external_React_default.a.createElement("button", {
    onClick: props.onClick,
    className: props.className || "ASRouterButton secondary",
    style: style
  }, props.children);
};
// CONCATENATED MODULE: ./content-src/asrouter/components/ConditionalWrapper/ConditionalWrapper.jsx
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */
// lifted from https://gist.github.com/kitze/23d82bb9eb0baabfd03a6a720b1d637f
const ConditionalWrapper = ({
  condition,
  wrap,
  children
}) => condition ? wrap(children) : children;
// EXTERNAL MODULE: ./content-src/asrouter/components/RichText/RichText.jsx
var RichText = __webpack_require__(14);

// EXTERNAL MODULE: ./content-src/asrouter/template-utils.js
var template_utils = __webpack_require__(15);

// EXTERNAL MODULE: ./content-src/asrouter/templates/SimpleSnippet/SimpleSnippet.schema.json
var SimpleSnippet_schema = __webpack_require__(16);

// CONCATENATED MODULE: ./content-src/asrouter/components/SnippetBase/SnippetBase.jsx
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */


class SnippetBase_SnippetBase extends external_React_default.a.PureComponent {
  constructor(props) {
    super(props);
    this.onBlockClicked = this.onBlockClicked.bind(this);
    this.onDismissClicked = this.onDismissClicked.bind(this);
    this.setBlockButtonRef = this.setBlockButtonRef.bind(this);
    this.onBlockButtonMouseEnter = this.onBlockButtonMouseEnter.bind(this);
    this.onBlockButtonMouseLeave = this.onBlockButtonMouseLeave.bind(this);
    this.state = {
      blockButtonHover: false
    };
  }

  componentDidMount() {
    if (this.blockButtonRef) {
      this.blockButtonRef.addEventListener("mouseenter", this.onBlockButtonMouseEnter);
      this.blockButtonRef.addEventListener("mouseleave", this.onBlockButtonMouseLeave);
    }
  }

  componentWillUnmount() {
    if (this.blockButtonRef) {
      this.blockButtonRef.removeEventListener("mouseenter", this.onBlockButtonMouseEnter);
      this.blockButtonRef.removeEventListener("mouseleave", this.onBlockButtonMouseLeave);
    }
  }

  setBlockButtonRef(element) {
    this.blockButtonRef = element;
  }

  onBlockButtonMouseEnter() {
    this.setState({
      blockButtonHover: true
    });
  }

  onBlockButtonMouseLeave() {
    this.setState({
      blockButtonHover: false
    });
  }

  onBlockClicked() {
    if (this.props.provider !== "preview") {
      this.props.sendUserActionTelemetry({
        event: "BLOCK",
        id: this.props.UISurface
      });
    }

    this.props.onBlock();
  }

  onDismissClicked() {
    if (this.props.provider !== "preview") {
      this.props.sendUserActionTelemetry({
        event: "DISMISS",
        id: this.props.UISurface
      });
    }

    this.props.onDismiss();
  }

  renderDismissButton() {
    if (this.props.footerDismiss) {
      return external_React_default.a.createElement("div", {
        className: "footer"
      }, external_React_default.a.createElement("div", {
        className: "footer-content"
      }, external_React_default.a.createElement("button", {
        className: "ASRouterButton secondary",
        onClick: this.onDismissClicked
      }, this.props.content.scene2_dismiss_button_text)));
    }

    const label = this.props.content.block_button_text || SimpleSnippet_schema.properties.block_button_text.default;
    return external_React_default.a.createElement("button", {
      className: "blockButton",
      title: label,
      "aria-label": label,
      onClick: this.onBlockClicked,
      ref: this.setBlockButtonRef
    });
  }

  render() {
    const {
      props
    } = this;
    const {
      blockButtonHover
    } = this.state;
    const containerClassName = `SnippetBaseContainer${props.className ? ` ${props.className}` : ""}${blockButtonHover ? " active" : ""}`;
    return external_React_default.a.createElement("div", {
      className: containerClassName,
      style: this.props.textStyle
    }, external_React_default.a.createElement("div", {
      className: "innerWrapper"
    }, props.children), this.renderDismissButton());
  }

}
// CONCATENATED MODULE: ./content-src/asrouter/templates/SimpleSnippet/SimpleSnippet.jsx
function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */






const DEFAULT_ICON_PATH = "chrome://branding/content/icon64.png"; // Alt text placeholder in case the prop from the server isn't available

const ICON_ALT_TEXT = "";
class SimpleSnippet_SimpleSnippet extends external_React_default.a.PureComponent {
  constructor(props) {
    super(props);
    this.onButtonClick = this.onButtonClick.bind(this);
  }

  onButtonClick() {
    if (this.props.provider !== "preview") {
      this.props.sendUserActionTelemetry({
        event: "CLICK_BUTTON",
        id: this.props.UISurface
      });
    }

    const {
      button_url
    } = this.props.content; // If button_url is defined handle it as OPEN_URL action

    const type = this.props.content.button_action || button_url && "OPEN_URL";
    this.props.onAction({
      type,
      data: {
        args: this.props.content.button_action_args || button_url
      }
    });

    if (!this.props.content.do_not_autoblock) {
      this.props.onBlock();
    }
  }

  _shouldRenderButton() {
    return this.props.content.button_action || this.props.onButtonClick || this.props.content.button_url;
  }

  renderTitle() {
    const {
      title
    } = this.props.content;
    return title ? external_React_default.a.createElement("h3", {
      className: `title ${this._shouldRenderButton() ? "title-inline" : ""}`
    }, this.renderTitleIcon(), " ", title) : null;
  }

  renderTitleIcon() {
    const titleIconLight = Object(template_utils["safeURI"])(this.props.content.title_icon);
    const titleIconDark = Object(template_utils["safeURI"])(this.props.content.title_icon_dark_theme || this.props.content.title_icon);

    if (!titleIconLight) {
      return null;
    }

    return external_React_default.a.createElement(external_React_default.a.Fragment, null, external_React_default.a.createElement("span", {
      className: "titleIcon icon-light-theme",
      style: {
        backgroundImage: `url("${titleIconLight}")`
      }
    }), external_React_default.a.createElement("span", {
      className: "titleIcon icon-dark-theme",
      style: {
        backgroundImage: `url("${titleIconDark}")`
      }
    }));
  }

  renderButton() {
    const {
      props
    } = this;

    if (!this._shouldRenderButton()) {
      return null;
    }

    return external_React_default.a.createElement(Button, {
      onClick: props.onButtonClick || this.onButtonClick,
      color: props.content.button_color,
      backgroundColor: props.content.button_background_color
    }, props.content.button_label);
  }

  renderText() {
    const {
      props
    } = this;
    return external_React_default.a.createElement(RichText["RichText"], {
      text: props.content.text,
      customElements: this.props.customElements,
      localization_id: "text",
      links: props.content.links,
      sendClick: props.sendClick
    });
  }

  wrapSectionHeader(url) {
    return function (children) {
      return external_React_default.a.createElement("a", {
        href: url
      }, children);
    };
  }

  wrapSnippetContent(children) {
    return external_React_default.a.createElement("div", {
      className: "innerContentWrapper"
    }, children);
  }

  renderSectionHeader() {
    const {
      props
    } = this; // an icon and text must be specified to render the section header

    if (props.content.section_title_icon && props.content.section_title_text) {
      const sectionTitleIconLight = Object(template_utils["safeURI"])(props.content.section_title_icon);
      const sectionTitleIconDark = Object(template_utils["safeURI"])(props.content.section_title_icon_dark_theme || props.content.section_title_icon);
      const sectionTitleURL = props.content.section_title_url;
      return external_React_default.a.createElement("div", {
        className: "section-header"
      }, external_React_default.a.createElement("h3", {
        className: "section-title"
      }, external_React_default.a.createElement(ConditionalWrapper, {
        condition: sectionTitleURL,
        wrap: this.wrapSectionHeader(sectionTitleURL)
      }, external_React_default.a.createElement("span", {
        className: "icon icon-small-spacer icon-light-theme",
        style: {
          backgroundImage: `url("${sectionTitleIconLight}")`
        }
      }), external_React_default.a.createElement("span", {
        className: "icon icon-small-spacer icon-dark-theme",
        style: {
          backgroundImage: `url("${sectionTitleIconDark}")`
        }
      }), external_React_default.a.createElement("span", {
        className: "section-title-text"
      }, props.content.section_title_text))));
    }

    return null;
  }

  render() {
    const {
      props
    } = this;
    const sectionHeader = this.renderSectionHeader();
    let className = "SimpleSnippet";

    if (props.className) {
      className += ` ${props.className}`;
    }

    if (props.content.tall) {
      className += " tall";
    }

    if (sectionHeader) {
      className += " has-section-header";
    }

    return external_React_default.a.createElement(SnippetBase_SnippetBase, _extends({}, props, {
      className: className,
      textStyle: this.props.textStyle
    }), sectionHeader, external_React_default.a.createElement(ConditionalWrapper, {
      condition: sectionHeader,
      wrap: this.wrapSnippetContent
    }, external_React_default.a.createElement("img", {
      src: Object(template_utils["safeURI"])(props.content.icon) || DEFAULT_ICON_PATH,
      className: "icon icon-light-theme",
      alt: props.content.icon_alt_text || ICON_ALT_TEXT
    }), external_React_default.a.createElement("img", {
      src: Object(template_utils["safeURI"])(props.content.icon_dark_theme || props.content.icon) || DEFAULT_ICON_PATH,
      className: "icon icon-dark-theme",
      alt: props.content.icon_alt_text || ICON_ALT_TEXT
    }), external_React_default.a.createElement("div", null, this.renderTitle(), " ", external_React_default.a.createElement("p", {
      className: "body"
    }, this.renderText()), this.props.extraContent), external_React_default.a.createElement("div", null, this.renderButton())));
  }

}
// CONCATENATED MODULE: ./content-src/asrouter/templates/EOYSnippet/EOYSnippet.jsx
function EOYSnippet_extends() { EOYSnippet_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return EOYSnippet_extends.apply(this, arguments); }

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */




class EOYSnippet_EOYSnippetBase extends external_React_default.a.PureComponent {
  constructor(props) {
    super(props);
    this.handleSubmit = this.handleSubmit.bind(this);
  }
  /**
   * setFrequencyValue - `frequency` form parameter value should be `monthly`
   *                     if `monthly-checkbox` is selected or `single` otherwise
   */


  setFrequencyValue() {
    const frequencyCheckbox = this.refs.form.querySelector("#monthly-checkbox");

    if (frequencyCheckbox.checked) {
      this.refs.form.querySelector("[name='frequency']").value = "monthly";
    }
  }

  handleSubmit(event) {
    event.preventDefault();
    this.setFrequencyValue();
    this.refs.form.submit();

    if (!this.props.content.do_not_autoblock) {
      this.props.onBlock();
    }
  }

  renderDonations() {
    const fieldNames = ["first", "second", "third", "fourth"];
    const numberFormat = new Intl.NumberFormat(this.props.content.locale || navigator.language, {
      style: "currency",
      currency: this.props.content.currency_code,
      minimumFractionDigits: 0
    }); // Default to `second` button

    const {
      selected_button
    } = this.props.content;
    const btnStyle = {
      color: this.props.content.button_color,
      backgroundColor: this.props.content.button_background_color
    };
    const donationURLParams = [];
    const paramsStartIndex = this.props.content.donation_form_url.indexOf("?");

    for (const entry of new URLSearchParams(this.props.content.donation_form_url.slice(paramsStartIndex)).entries()) {
      donationURLParams.push(entry);
    }

    return external_React_default.a.createElement("form", {
      className: "EOYSnippetForm",
      action: this.props.content.donation_form_url,
      method: this.props.form_method,
      onSubmit: this.handleSubmit,
      ref: "form"
    }, donationURLParams.map(([key, value], idx) => external_React_default.a.createElement("input", {
      type: "hidden",
      name: key,
      value: value,
      key: idx
    })), fieldNames.map((field, idx) => {
      const button_name = `donation_amount_${field}`;
      const amount = this.props.content[button_name];
      return external_React_default.a.createElement(external_React_default.a.Fragment, {
        key: idx
      }, external_React_default.a.createElement("input", {
        type: "radio",
        name: "amount",
        value: amount,
        id: field,
        defaultChecked: button_name === selected_button
      }), external_React_default.a.createElement("label", {
        htmlFor: field,
        className: "donation-amount"
      }, numberFormat.format(amount)));
    }), external_React_default.a.createElement("div", {
      className: "monthly-checkbox-container"
    }, external_React_default.a.createElement("input", {
      id: "monthly-checkbox",
      type: "checkbox"
    }), external_React_default.a.createElement("label", {
      htmlFor: "monthly-checkbox"
    }, this.props.content.monthly_checkbox_label_text)), external_React_default.a.createElement("input", {
      type: "hidden",
      name: "frequency",
      value: "single"
    }), external_React_default.a.createElement("input", {
      type: "hidden",
      name: "currency",
      value: this.props.content.currency_code
    }), external_React_default.a.createElement("input", {
      type: "hidden",
      name: "presets",
      value: fieldNames.map(field => this.props.content[`donation_amount_${field}`])
    }), external_React_default.a.createElement("button", {
      style: btnStyle,
      type: "submit",
      className: "ASRouterButton primary donation-form-url"
    }, this.props.content.button_label));
  }

  render() {
    const textStyle = {
      color: this.props.content.text_color,
      backgroundColor: this.props.content.background_color
    };
    const customElement = external_React_default.a.createElement("em", {
      style: {
        backgroundColor: this.props.content.highlight_color
      }
    });
    return external_React_default.a.createElement(SimpleSnippet_SimpleSnippet, EOYSnippet_extends({}, this.props, {
      className: this.props.content.test,
      customElements: {
        em: customElement
      },
      textStyle: textStyle,
      extraContent: this.renderDonations()
    }));
  }

}

const EOYSnippet = props => {
  const extendedContent = {
    monthly_checkbox_label_text: EOYSnippet_schema.properties.monthly_checkbox_label_text.default,
    locale: EOYSnippet_schema.properties.locale.default,
    currency_code: EOYSnippet_schema.properties.currency_code.default,
    selected_button: EOYSnippet_schema.properties.selected_button.default,
    ...props.content
  };
  return external_React_default.a.createElement(EOYSnippet_EOYSnippetBase, EOYSnippet_extends({}, props, {
    content: extendedContent,
    form_method: "GET"
  }));
};
// EXTERNAL MODULE: ./content-src/asrouter/templates/FXASignupSnippet/FXASignupSnippet.schema.json
var FXASignupSnippet_schema = __webpack_require__(17);

// CONCATENATED MODULE: ./content-src/asrouter/templates/SubmitFormSnippet/SubmitFormSnippet.jsx
function SubmitFormSnippet_extends() { SubmitFormSnippet_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return SubmitFormSnippet_extends.apply(this, arguments); }

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */





 // Alt text placeholder in case the prop from the server isn't available

const SubmitFormSnippet_ICON_ALT_TEXT = "";
class SubmitFormSnippet_SubmitFormSnippet extends external_React_default.a.PureComponent {
  constructor(props) {
    super(props);
    this.expandSnippet = this.expandSnippet.bind(this);
    this.handleSubmit = this.handleSubmit.bind(this);
    this.handleSubmitAttempt = this.handleSubmitAttempt.bind(this);
    this.onInputChange = this.onInputChange.bind(this);
    this.state = {
      expanded: false,
      submitAttempted: false,
      signupSubmitted: false,
      signupSuccess: false,
      disableForm: false
    };
  }

  handleSubmitAttempt() {
    if (!this.state.submitAttempted) {
      this.setState({
        submitAttempted: true
      });
    }
  }

  async handleSubmit(event) {
    let json;

    if (this.state.disableForm) {
      return;
    }

    event.preventDefault();
    this.setState({
      disableForm: true
    });
    this.props.sendUserActionTelemetry({
      event: "CLICK_BUTTON",
      value: "conversion-subscribe-activation",
      id: "NEWTAB_FOOTER_BAR_CONTENT"
    });

    if (this.props.form_method.toUpperCase() === "GET") {
      this.props.onBlock({
        preventDismiss: true
      });
      this.refs.form.submit();
      return;
    }

    const {
      url,
      formData
    } = this.props.processFormData ? this.props.processFormData(this.refs.mainInput, this.props) : {
      url: this.refs.form.action,
      formData: new FormData(this.refs.form)
    };

    try {
      const fetchRequest = new Request(url, {
        body: formData,
        method: "POST",
        credentials: "omit"
      });
      const response = await fetch(fetchRequest); // eslint-disable-line fetch-options/no-fetch-credentials

      json = await response.json();
    } catch (err) {
      console.log(err); // eslint-disable-line no-console
    }

    if (json && json.status === "ok") {
      this.setState({
        signupSuccess: true,
        signupSubmitted: true
      });

      if (!this.props.content.do_not_autoblock) {
        this.props.onBlock({
          preventDismiss: true
        });
      }

      this.props.sendUserActionTelemetry({
        event: "CLICK_BUTTON",
        value: "subscribe-success",
        id: "NEWTAB_FOOTER_BAR_CONTENT"
      });
    } else {
      // eslint-disable-next-line no-console
      console.error("There was a problem submitting the form", json || "[No JSON response]");
      this.setState({
        signupSuccess: false,
        signupSubmitted: true
      });
      this.props.sendUserActionTelemetry({
        event: "CLICK_BUTTON",
        value: "subscribe-error",
        id: "NEWTAB_FOOTER_BAR_CONTENT"
      });
    }

    this.setState({
      disableForm: false
    });
  }

  expandSnippet() {
    this.props.sendUserActionTelemetry({
      event: "CLICK_BUTTON",
      value: "scene1-button-learn-more",
      id: this.props.UISurface
    });
    this.setState({
      expanded: true,
      signupSuccess: false,
      signupSubmitted: false
    });
  }

  renderHiddenFormInputs() {
    const {
      hidden_inputs
    } = this.props.content;

    if (!hidden_inputs) {
      return null;
    }

    return Object.keys(hidden_inputs).map((key, idx) => external_React_default.a.createElement("input", {
      key: idx,
      type: "hidden",
      name: key,
      value: hidden_inputs[key]
    }));
  }

  renderDisclaimer() {
    const {
      content
    } = this.props;

    if (!content.scene2_disclaimer_html) {
      return null;
    }

    return external_React_default.a.createElement("p", {
      className: "disclaimerText"
    }, external_React_default.a.createElement(RichText["RichText"], {
      text: content.scene2_disclaimer_html,
      localization_id: "disclaimer_html",
      links: content.links,
      doNotAutoBlock: true,
      openNewWindow: true,
      sendClick: this.props.sendClick
    }));
  }

  renderFormPrivacyNotice() {
    const {
      content
    } = this.props;

    if (!content.scene2_privacy_html) {
      return null;
    }

    return external_React_default.a.createElement("p", {
      className: "privacyNotice"
    }, external_React_default.a.createElement("input", {
      type: "checkbox",
      id: "id_privacy",
      name: "privacy",
      required: "required"
    }), external_React_default.a.createElement("label", {
      htmlFor: "id_privacy"
    }, external_React_default.a.createElement(RichText["RichText"], {
      text: content.scene2_privacy_html,
      localization_id: "privacy_html",
      links: content.links,
      doNotAutoBlock: true,
      openNewWindow: true,
      sendClick: this.props.sendClick
    })));
  }

  renderSignupSubmitted() {
    const {
      content
    } = this.props;
    const isSuccess = this.state.signupSuccess;
    const successTitle = isSuccess && content.success_title;
    const bodyText = isSuccess ? {
      success_text: content.success_text
    } : {
      error_text: content.error_text
    };
    const retryButtonText = content.scene1_button_label;
    return external_React_default.a.createElement(SnippetBase_SnippetBase, this.props, external_React_default.a.createElement("div", {
      className: "submissionStatus"
    }, successTitle ? external_React_default.a.createElement("h2", {
      className: "submitStatusTitle"
    }, successTitle) : null, external_React_default.a.createElement("p", null, external_React_default.a.createElement(RichText["RichText"], SubmitFormSnippet_extends({}, bodyText, {
      localization_id: isSuccess ? "success_text" : "error_text"
    })), isSuccess ? null : external_React_default.a.createElement(Button, {
      onClick: this.expandSnippet
    }, retryButtonText))));
  }

  onInputChange(event) {
    if (!this.props.validateInput) {
      return;
    }

    const hasError = this.props.validateInput(event.target.value, this.props.content);
    event.target.setCustomValidity(hasError);
  }

  renderInput() {
    const placholder = this.props.content.scene2_email_placeholder_text || this.props.content.scene2_input_placeholder;
    return external_React_default.a.createElement("input", {
      ref: "mainInput",
      type: this.props.inputType || "email",
      className: `mainInput${this.state.submitAttempted ? "" : " clean"}`,
      name: "email",
      required: true,
      placeholder: placholder,
      onChange: this.props.validateInput ? this.onInputChange : null
    });
  }

  renderSignupView() {
    const {
      content
    } = this.props;
    const containerClass = `SubmitFormSnippet ${this.props.className}`;
    return external_React_default.a.createElement(SnippetBase_SnippetBase, SubmitFormSnippet_extends({}, this.props, {
      className: containerClass,
      footerDismiss: true
    }), content.scene2_icon ? external_React_default.a.createElement("div", {
      className: "scene2Icon"
    }, external_React_default.a.createElement("img", {
      src: Object(template_utils["safeURI"])(content.scene2_icon),
      className: "icon-light-theme",
      alt: content.scene2_icon_alt_text || SubmitFormSnippet_ICON_ALT_TEXT
    }), external_React_default.a.createElement("img", {
      src: Object(template_utils["safeURI"])(content.scene2_icon_dark_theme || content.scene2_icon),
      className: "icon-dark-theme",
      alt: content.scene2_icon_alt_text || SubmitFormSnippet_ICON_ALT_TEXT
    })) : null, external_React_default.a.createElement("div", {
      className: "message"
    }, external_React_default.a.createElement("p", null, content.scene2_title && external_React_default.a.createElement("h3", {
      className: "scene2Title"
    }, content.scene2_title), " ", content.scene2_text && external_React_default.a.createElement(RichText["RichText"], {
      scene2_text: content.scene2_text,
      localization_id: "scene2_text"
    }))), external_React_default.a.createElement("form", {
      action: this.props.form_action,
      method: this.props.form_method,
      onSubmit: this.handleSubmit,
      ref: "form"
    }, this.renderHiddenFormInputs(), external_React_default.a.createElement("div", null, this.renderInput(), external_React_default.a.createElement("button", {
      type: "submit",
      className: "ASRouterButton primary",
      onClick: this.handleSubmitAttempt,
      ref: "formSubmitBtn"
    }, content.scene2_button_label)), this.renderFormPrivacyNotice() || this.renderDisclaimer()));
  }

  getFirstSceneContent() {
    return Object.keys(this.props.content).filter(key => key.includes("scene1")).reduce((acc, key) => {
      acc[key.substr(7)] = this.props.content[key];
      return acc;
    }, {});
  }

  render() {
    const content = { ...this.props.content,
      ...this.getFirstSceneContent()
    };

    if (this.state.signupSubmitted) {
      return this.renderSignupSubmitted();
    }

    if (this.state.expanded) {
      return this.renderSignupView();
    }

    return external_React_default.a.createElement(SimpleSnippet_SimpleSnippet, SubmitFormSnippet_extends({}, this.props, {
      content: content,
      onButtonClick: this.expandSnippet
    }));
  }

}
// CONCATENATED MODULE: ./content-src/asrouter/templates/FXASignupSnippet/FXASignupSnippet.jsx
function FXASignupSnippet_extends() { FXASignupSnippet_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return FXASignupSnippet_extends.apply(this, arguments); }

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */



const FXASignupSnippet = props => {
  const userAgent = window.navigator.userAgent.match(/Firefox\/([0-9]+)\./);
  const firefox_version = userAgent ? parseInt(userAgent[1], 10) : 0;
  const extendedContent = {
    scene1_button_label: FXASignupSnippet_schema.properties.scene1_button_label.default,
    scene2_email_placeholder_text: FXASignupSnippet_schema.properties.scene2_email_placeholder_text.default,
    scene2_button_label: FXASignupSnippet_schema.properties.scene2_button_label.default,
    scene2_dismiss_button_text: FXASignupSnippet_schema.properties.scene2_dismiss_button_text.default,
    ...props.content,
    hidden_inputs: {
      action: "email",
      context: "fx_desktop_v3",
      entrypoint: "snippets",
      service: "sync",
      utm_source: "snippet",
      utm_content: firefox_version,
      utm_campaign: props.content.utm_campaign,
      utm_term: props.content.utm_term,
      ...props.content.hidden_inputs
    }
  };
  return external_React_default.a.createElement(SubmitFormSnippet_SubmitFormSnippet, FXASignupSnippet_extends({}, props, {
    content: extendedContent,
    form_action: "https://accounts.firefox.com/",
    form_method: "GET"
  }));
};
// EXTERNAL MODULE: ./content-src/asrouter/templates/NewsletterSnippet/NewsletterSnippet.schema.json
var NewsletterSnippet_schema = __webpack_require__(18);

// CONCATENATED MODULE: ./content-src/asrouter/templates/NewsletterSnippet/NewsletterSnippet.jsx
function NewsletterSnippet_extends() { NewsletterSnippet_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return NewsletterSnippet_extends.apply(this, arguments); }

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */



const NewsletterSnippet = props => {
  const extendedContent = {
    scene1_button_label: NewsletterSnippet_schema.properties.scene1_button_label.default,
    scene2_email_placeholder_text: NewsletterSnippet_schema.properties.scene2_email_placeholder_text.default,
    scene2_button_label: NewsletterSnippet_schema.properties.scene2_button_label.default,
    scene2_dismiss_button_text: NewsletterSnippet_schema.properties.scene2_dismiss_button_text.default,
    scene2_newsletter: NewsletterSnippet_schema.properties.scene2_newsletter.default,
    ...props.content,
    hidden_inputs: {
      newsletters: props.content.scene2_newsletter || NewsletterSnippet_schema.properties.scene2_newsletter.default,
      fmt: NewsletterSnippet_schema.properties.hidden_inputs.properties.fmt.default,
      lang: props.content.locale || NewsletterSnippet_schema.properties.locale.default,
      source_url: `https://snippets.mozilla.com/show/${props.id}`,
      ...props.content.hidden_inputs
    }
  };
  return external_React_default.a.createElement(SubmitFormSnippet_SubmitFormSnippet, NewsletterSnippet_extends({}, props, {
    content: extendedContent,
    form_action: "https://basket.mozilla.org/subscribe.json",
    form_method: "POST"
  }));
};
// CONCATENATED MODULE: ./content-src/asrouter/templates/SendToDeviceSnippet/isEmailOrPhoneNumber.js
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */

/**
 * Checks if a given string is an email or phone number or neither
 * @param {string} val The user input
 * @param {ASRMessageContent} content .content property on ASR message
 * @returns {"email"|"phone"|""} The type of the input
 */
function isEmailOrPhoneNumber(val, content) {
  const {
    locale
  } = content; // http://emailregex.com/

  const email_re = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
  const check_email = email_re.test(val);
  let check_phone; // depends on locale

  switch (locale) {
    case "en-US":
    case "en-CA":
      // allow 10-11 digits in case user wants to enter country code
      check_phone = val.length >= 10 && val.length <= 11 && !isNaN(val);
      break;

    case "de":
      // allow between 2 and 12 digits for german phone numbers
      check_phone = val.length >= 2 && val.length <= 12 && !isNaN(val);
      break;
    // this case should never be hit, but good to have a fallback just in case

    default:
      check_phone = !isNaN(val);
      break;
  }

  if (check_email) {
    return "email";
  } else if (check_phone) {
    return "phone";
  }

  return "";
}
// EXTERNAL MODULE: ./content-src/asrouter/templates/SendToDeviceSnippet/SendToDeviceSnippet.schema.json
var SendToDeviceSnippet_schema = __webpack_require__(19);

// CONCATENATED MODULE: ./content-src/asrouter/templates/SendToDeviceSnippet/SendToDeviceSnippet.jsx
function SendToDeviceSnippet_extends() { SendToDeviceSnippet_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return SendToDeviceSnippet_extends.apply(this, arguments); }

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */





function validateInput(value, content) {
  const type = isEmailOrPhoneNumber(value, content);
  return type ? "" : "Must be an email or a phone number.";
}

function processFormData(input, message) {
  const {
    content
  } = message;
  const type = content.include_sms ? isEmailOrPhoneNumber(input.value, content) : "email";
  const formData = new FormData();
  let url;

  if (type === "phone") {
    url = "https://basket.mozilla.org/news/subscribe_sms/";
    formData.append("mobile_number", input.value);
    formData.append("msg_name", content.message_id_sms);
    formData.append("country", content.country);
  } else if (type === "email") {
    url = "https://basket.mozilla.org/news/subscribe/";
    formData.append("email", input.value);
    formData.append("newsletters", content.message_id_email);
    formData.append("source_url", encodeURIComponent(`https://snippets.mozilla.com/show/${message.id}`));
  }

  formData.append("lang", content.locale);
  return {
    formData,
    url
  };
}

function addDefaultValues(props) {
  return { ...props,
    content: {
      scene1_button_label: SendToDeviceSnippet_schema.properties.scene1_button_label.default,
      scene2_dismiss_button_text: SendToDeviceSnippet_schema.properties.scene2_dismiss_button_text.default,
      scene2_button_label: SendToDeviceSnippet_schema.properties.scene2_button_label.default,
      scene2_input_placeholder: SendToDeviceSnippet_schema.properties.scene2_input_placeholder.default,
      locale: SendToDeviceSnippet_schema.properties.locale.default,
      country: SendToDeviceSnippet_schema.properties.country.default,
      message_id_email: "",
      include_sms: SendToDeviceSnippet_schema.properties.include_sms.default,
      ...props.content
    }
  };
}

const SendToDeviceSnippet = props => {
  const propsWithDefaults = addDefaultValues(props);
  return external_React_default.a.createElement(SubmitFormSnippet_SubmitFormSnippet, SendToDeviceSnippet_extends({}, propsWithDefaults, {
    form_method: "POST",
    className: "send_to_device_snippet",
    inputType: propsWithDefaults.content.include_sms ? "text" : "email",
    validateInput: propsWithDefaults.content.include_sms ? validateInput : null,
    processFormData: processFormData
  }));
};
// CONCATENATED MODULE: ./content-src/asrouter/templates/SimpleBelowSearchSnippet/SimpleBelowSearchSnippet.jsx
function SimpleBelowSearchSnippet_extends() { SimpleBelowSearchSnippet_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return SimpleBelowSearchSnippet_extends.apply(this, arguments); }

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */




const SimpleBelowSearchSnippet_DEFAULT_ICON_PATH = "chrome://branding/content/icon64.png"; // Alt text placeholder in case the prop from the server isn't available

const SimpleBelowSearchSnippet_ICON_ALT_TEXT = "";
class SimpleBelowSearchSnippet_SimpleBelowSearchSnippet extends external_React_default.a.PureComponent {
  renderText() {
    const {
      props
    } = this;
    return external_React_default.a.createElement(RichText["RichText"], {
      text: props.content.text,
      customElements: this.props.customElements,
      localization_id: "text",
      links: props.content.links,
      sendClick: props.sendClick
    });
  }

  render() {
    const {
      props
    } = this;
    let className = "SimpleBelowSearchSnippet";

    if (props.className) {
      className += ` ${props.className}`;
    }

    return external_React_default.a.createElement(SnippetBase_SnippetBase, SimpleBelowSearchSnippet_extends({}, props, {
      className: className,
      textStyle: this.props.textStyle
    }), external_React_default.a.createElement("img", {
      src: Object(template_utils["safeURI"])(props.content.icon) || SimpleBelowSearchSnippet_DEFAULT_ICON_PATH,
      className: "icon icon-light-theme",
      alt: props.content.icon_alt_text || SimpleBelowSearchSnippet_ICON_ALT_TEXT
    }), external_React_default.a.createElement("img", {
      src: Object(template_utils["safeURI"])(props.content.icon_dark_theme || props.content.icon) || SimpleBelowSearchSnippet_DEFAULT_ICON_PATH,
      className: "icon icon-dark-theme",
      alt: props.content.icon_alt_text || SimpleBelowSearchSnippet_ICON_ALT_TEXT
    }), external_React_default.a.createElement("div", null, external_React_default.a.createElement("p", {
      className: "body"
    }, this.renderText()), this.props.extraContent));
  }

}
// CONCATENATED MODULE: ./content-src/asrouter/templates/template-manifest.jsx
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SnippetsTemplates", function() { return SnippetsTemplates; });
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */





 // Key names matching schema name of templates

const SnippetsTemplates = {
  simple_snippet: SimpleSnippet_SimpleSnippet,
  newsletter_snippet: NewsletterSnippet,
  fxa_signup_snippet: FXASignupSnippet,
  send_to_device_snippet: SendToDeviceSnippet,
  eoy_snippet: EOYSnippet,
  simple_below_search_snippet: SimpleBelowSearchSnippet_SimpleBelowSearchSnippet
};

/***/ }),
/* 55 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

// CONCATENATED MODULE: ./node_modules/fluent/src/types.js
/* global Intl */

/**
 * The `FluentType` class is the base of Fluent's type system.
 *
 * Fluent types wrap JavaScript values and store additional configuration for
 * them, which can then be used in the `toString` method together with a proper
 * `Intl` formatter.
 */
class FluentType {
  /**
   * Create an `FluentType` instance.
   *
   * @param   {Any}    value - JavaScript value to wrap.
   * @param   {Object} opts  - Configuration.
   * @returns {FluentType}
   */
  constructor(value, opts) {
    this.value = value;
    this.opts = opts;
  }
  /**
   * Unwrap the raw value stored by this `FluentType`.
   *
   * @returns {Any}
   */


  valueOf() {
    return this.value;
  }
  /**
   * Format this instance of `FluentType` to a string.
   *
   * Formatted values are suitable for use outside of the `FluentBundle`.
   * This method can use `Intl` formatters memoized by the `FluentBundle`
   * instance passed as an argument.
   *
   * @param   {FluentBundle} [bundle]
   * @returns {string}
   */


  toString() {
    throw new Error("Subclasses of FluentType must implement toString.");
  }

}
class FluentNone extends FluentType {
  toString() {
    return this.value || "???";
  }

}
class FluentNumber extends FluentType {
  constructor(value, opts) {
    super(parseFloat(value), opts);
  }

  toString(bundle) {
    try {
      const nf = bundle._memoizeIntlObject(Intl.NumberFormat, this.opts);

      return nf.format(this.value);
    } catch (e) {
      // XXX Report the error.
      return this.value;
    }
  }

}
class FluentDateTime extends FluentType {
  constructor(value, opts) {
    super(new Date(value), opts);
  }

  toString(bundle) {
    try {
      const dtf = bundle._memoizeIntlObject(Intl.DateTimeFormat, this.opts);

      return dtf.format(this.value);
    } catch (e) {
      // XXX Report the error.
      return this.value;
    }
  }

}
// CONCATENATED MODULE: ./node_modules/fluent/src/builtins.js
/**
 * @overview
 *
 * The FTL resolver ships with a number of functions built-in.
 *
 * Each function take two arguments:
 *   - args - an array of positional args
 *   - opts - an object of key-value args
 *
 * Arguments to functions are guaranteed to already be instances of
 * `FluentType`.  Functions must return `FluentType` objects as well.
 */

/* harmony default export */ var builtins = ({
  "NUMBER": ([arg], opts) => new FluentNumber(arg.valueOf(), merge(arg.opts, opts)),
  "DATETIME": ([arg], opts) => new FluentDateTime(arg.valueOf(), merge(arg.opts, opts))
});

function merge(argopts, opts) {
  return Object.assign({}, argopts, values(opts));
}

function values(opts) {
  const unwrapped = {};

  for (const [name, opt] of Object.entries(opts)) {
    unwrapped[name] = opt.valueOf();
  }

  return unwrapped;
}
// CONCATENATED MODULE: ./node_modules/fluent/src/resolver.js
/* global Intl */

/**
 * @overview
 *
 * The role of the Fluent resolver is to format a translation object to an
 * instance of `FluentType` or an array of instances.
 *
 * Translations can contain references to other messages or variables,
 * conditional logic in form of select expressions, traits which describe their
 * grammatical features, and can use Fluent builtins which make use of the
 * `Intl` formatters to format numbers, dates, lists and more into the
 * bundle's language. See the documentation of the Fluent syntax for more
 * information.
 *
 * In case of errors the resolver will try to salvage as much of the
 * translation as possible.  In rare situations where the resolver didn't know
 * how to recover from an error it will return an instance of `FluentNone`.
 *
 * All expressions resolve to an instance of `FluentType`. The caller should
 * use the `toString` method to convert the instance to a native value.
 *
 * All functions in this file pass around a special object called `scope`.
 * This object stores a set of elements used by all resolve functions:
 *
 *  * {FluentBundle} bundle
 *      bundle for which the given resolution is happening
 *  * {Object} args
 *      list of developer provided arguments that can be used
 *  * {Array} errors
 *      list of errors collected while resolving
 *  * {WeakSet} dirty
 *      Set of patterns already encountered during this resolution.
 *      This is used to prevent cyclic resolutions.
 */

 // Prevent expansion of too long placeables.

const MAX_PLACEABLE_LENGTH = 2500; // Unicode bidi isolation characters.

const FSI = "\u2068";
const PDI = "\u2069"; // Helper: match a variant key to the given selector.

function resolver_match(bundle, selector, key) {
  if (key === selector) {
    // Both are strings.
    return true;
  } // XXX Consider comparing options too, e.g. minimumFractionDigits.


  if (key instanceof FluentNumber && selector instanceof FluentNumber && key.value === selector.value) {
    return true;
  }

  if (selector instanceof FluentNumber && typeof key === "string") {
    let category = bundle._memoizeIntlObject(Intl.PluralRules, selector.opts).select(selector.value);

    if (key === category) {
      return true;
    }
  }

  return false;
} // Helper: resolve the default variant from a list of variants.


function getDefault(scope, variants, star) {
  if (variants[star]) {
    return Type(scope, variants[star]);
  }

  scope.errors.push(new RangeError("No default"));
  return new FluentNone();
} // Helper: resolve arguments to a call expression.


function getArguments(scope, args) {
  const positional = [];
  const named = {};

  for (const arg of args) {
    if (arg.type === "narg") {
      named[arg.name] = Type(scope, arg.value);
    } else {
      positional.push(Type(scope, arg));
    }
  }

  return [positional, named];
} // Resolve an expression to a Fluent type.


function Type(scope, expr) {
  // A fast-path for strings which are the most common case. Since they
  // natively have the `toString` method they can be used as if they were
  // a FluentType instance without incurring the cost of creating one.
  if (typeof expr === "string") {
    return scope.bundle._transform(expr);
  } // A fast-path for `FluentNone` which doesn't require any additional logic.


  if (expr instanceof FluentNone) {
    return expr;
  } // The Runtime AST (Entries) encodes patterns (complex strings with
  // placeables) as Arrays.


  if (Array.isArray(expr)) {
    return Pattern(scope, expr);
  }

  switch (expr.type) {
    case "str":
      return expr.value;

    case "num":
      return new FluentNumber(expr.value, {
        minimumFractionDigits: expr.precision
      });

    case "var":
      return VariableReference(scope, expr);

    case "mesg":
      return MessageReference(scope, expr);

    case "term":
      return TermReference(scope, expr);

    case "func":
      return FunctionReference(scope, expr);

    case "select":
      return SelectExpression(scope, expr);

    case undefined:
      {
        // If it's a node with a value, resolve the value.
        if (expr.value !== null && expr.value !== undefined) {
          return Type(scope, expr.value);
        }

        scope.errors.push(new RangeError("No value"));
        return new FluentNone();
      }

    default:
      return new FluentNone();
  }
} // Resolve a reference to a variable.


function VariableReference(scope, {
  name
}) {
  if (!scope.args || !scope.args.hasOwnProperty(name)) {
    if (scope.insideTermReference === false) {
      scope.errors.push(new ReferenceError(`Unknown variable: ${name}`));
    }

    return new FluentNone(`$${name}`);
  }

  const arg = scope.args[name]; // Return early if the argument already is an instance of FluentType.

  if (arg instanceof FluentType) {
    return arg;
  } // Convert the argument to a Fluent type.


  switch (typeof arg) {
    case "string":
      return arg;

    case "number":
      return new FluentNumber(arg);

    case "object":
      if (arg instanceof Date) {
        return new FluentDateTime(arg);
      }

    default:
      scope.errors.push(new TypeError(`Unsupported variable type: ${name}, ${typeof arg}`));
      return new FluentNone(`$${name}`);
  }
} // Resolve a reference to another message.


function MessageReference(scope, {
  name,
  attr
}) {
  const message = scope.bundle._messages.get(name);

  if (!message) {
    const err = new ReferenceError(`Unknown message: ${name}`);
    scope.errors.push(err);
    return new FluentNone(name);
  }

  if (attr) {
    const attribute = message.attrs && message.attrs[attr];

    if (attribute) {
      return Type(scope, attribute);
    }

    scope.errors.push(new ReferenceError(`Unknown attribute: ${attr}`));
    return Type(scope, message);
  }

  return Type(scope, message);
} // Resolve a call to a Term with key-value arguments.


function TermReference(scope, {
  name,
  attr,
  args
}) {
  const id = `-${name}`;

  const term = scope.bundle._terms.get(id);

  if (!term) {
    const err = new ReferenceError(`Unknown term: ${id}`);
    scope.errors.push(err);
    return new FluentNone(id);
  } // Every TermReference has its own args.


  const [, keyargs] = getArguments(scope, args);
  const local = { ...scope,
    args: keyargs,
    insideTermReference: true
  };

  if (attr) {
    const attribute = term.attrs && term.attrs[attr];

    if (attribute) {
      return Type(local, attribute);
    }

    scope.errors.push(new ReferenceError(`Unknown attribute: ${attr}`));
    return Type(local, term);
  }

  return Type(local, term);
} // Resolve a call to a Function with positional and key-value arguments.


function FunctionReference(scope, {
  name,
  args
}) {
  // Some functions are built-in. Others may be provided by the runtime via
  // the `FluentBundle` constructor.
  const func = scope.bundle._functions[name] || builtins[name];

  if (!func) {
    scope.errors.push(new ReferenceError(`Unknown function: ${name}()`));
    return new FluentNone(`${name}()`);
  }

  if (typeof func !== "function") {
    scope.errors.push(new TypeError(`Function ${name}() is not callable`));
    return new FluentNone(`${name}()`);
  }

  try {
    return func(...getArguments(scope, args));
  } catch (e) {
    // XXX Report errors.
    return new FluentNone();
  }
} // Resolve a select expression to the member object.


function SelectExpression(scope, {
  selector,
  variants,
  star
}) {
  let sel = Type(scope, selector);

  if (sel instanceof FluentNone) {
    const variant = getDefault(scope, variants, star);
    return Type(scope, variant);
  } // Match the selector against keys of each variant, in order.


  for (const variant of variants) {
    const key = Type(scope, variant.key);

    if (resolver_match(scope.bundle, sel, key)) {
      return Type(scope, variant);
    }
  }

  const variant = getDefault(scope, variants, star);
  return Type(scope, variant);
} // Resolve a pattern (a complex string with placeables).


function Pattern(scope, ptn) {
  if (scope.dirty.has(ptn)) {
    scope.errors.push(new RangeError("Cyclic reference"));
    return new FluentNone();
  } // Tag the pattern as dirty for the purpose of the current resolution.


  scope.dirty.add(ptn);
  const result = []; // Wrap interpolations with Directional Isolate Formatting characters
  // only when the pattern has more than one element.

  const useIsolating = scope.bundle._useIsolating && ptn.length > 1;

  for (const elem of ptn) {
    if (typeof elem === "string") {
      result.push(scope.bundle._transform(elem));
      continue;
    }

    const part = Type(scope, elem).toString(scope.bundle);

    if (useIsolating) {
      result.push(FSI);
    }

    if (part.length > MAX_PLACEABLE_LENGTH) {
      scope.errors.push(new RangeError("Too many characters in placeable " + `(${part.length}, max allowed is ${MAX_PLACEABLE_LENGTH})`));
      result.push(part.slice(MAX_PLACEABLE_LENGTH));
    } else {
      result.push(part);
    }

    if (useIsolating) {
      result.push(PDI);
    }
  }

  scope.dirty.delete(ptn);
  return result.join("");
}
/**
 * Format a translation into a string.
 *
 * @param   {FluentBundle} bundle
 *    A FluentBundle instance which will be used to resolve the
 *    contextual information of the message.
 * @param   {Object}         args
 *    List of arguments provided by the developer which can be accessed
 *    from the message.
 * @param   {Object}         message
 *    An object with the Message to be resolved.
 * @param   {Array}          errors
 *    An error array that any encountered errors will be appended to.
 * @returns {FluentType}
 */


function resolve(bundle, args, message, errors = []) {
  const scope = {
    bundle,
    args,
    errors,
    dirty: new WeakSet(),
    // TermReferences are resolved in a new scope.
    insideTermReference: false
  };
  return Type(scope, message).toString(bundle);
}
// CONCATENATED MODULE: ./node_modules/fluent/src/error.js
class FluentError extends Error {}
// CONCATENATED MODULE: ./node_modules/fluent/src/resource.js
 // This regex is used to iterate through the beginnings of messages and terms.
// With the /m flag, the ^ matches at the beginning of every line.

const RE_MESSAGE_START = /^(-?[a-zA-Z][\w-]*) *= */mg; // Both Attributes and Variants are parsed in while loops. These regexes are
// used to break out of them.

const RE_ATTRIBUTE_START = /\.([a-zA-Z][\w-]*) *= */y;
const RE_VARIANT_START = /\*?\[/y;
const RE_NUMBER_LITERAL = /(-?[0-9]+(?:\.([0-9]+))?)/y;
const RE_IDENTIFIER = /([a-zA-Z][\w-]*)/y;
const RE_REFERENCE = /([$-])?([a-zA-Z][\w-]*)(?:\.([a-zA-Z][\w-]*))?/y;
const RE_FUNCTION_NAME = /^[A-Z][A-Z0-9_-]*$/; // A "run" is a sequence of text or string literal characters which don't
// require any special handling. For TextElements such special characters are: {
// (starts a placeable), and line breaks which require additional logic to check
// if the next line is indented. For StringLiterals they are: \ (starts an
// escape sequence), " (ends the literal), and line breaks which are not allowed
// in StringLiterals. Note that string runs may be empty; text runs may not.

const RE_TEXT_RUN = /([^{}\n\r]+)/y;
const RE_STRING_RUN = /([^\\"\n\r]*)/y; // Escape sequences.

const RE_STRING_ESCAPE = /\\([\\"])/y;
const RE_UNICODE_ESCAPE = /\\u([a-fA-F0-9]{4})|\\U([a-fA-F0-9]{6})/y; // Used for trimming TextElements and indents.

const RE_LEADING_NEWLINES = /^\n+/;
const RE_TRAILING_SPACES = / +$/; // Used in makeIndent to strip spaces from blank lines and normalize CRLF to LF.

const RE_BLANK_LINES = / *\r?\n/g; // Used in makeIndent to measure the indentation.

const RE_INDENT = /( *)$/; // Common tokens.

const TOKEN_BRACE_OPEN = /{\s*/y;
const TOKEN_BRACE_CLOSE = /\s*}/y;
const TOKEN_BRACKET_OPEN = /\[\s*/y;
const TOKEN_BRACKET_CLOSE = /\s*] */y;
const TOKEN_PAREN_OPEN = /\s*\(\s*/y;
const TOKEN_ARROW = /\s*->\s*/y;
const TOKEN_COLON = /\s*:\s*/y; // Note the optional comma. As a deviation from the Fluent EBNF, the parser
// doesn't enforce commas between call arguments.

const TOKEN_COMMA = /\s*,?\s*/y;
const TOKEN_BLANK = /\s+/y; // Maximum number of placeables in a single Pattern to protect against Quadratic
// Blowup attacks. See https://msdn.microsoft.com/en-us/magazine/ee335713.aspx.

const MAX_PLACEABLES = 100;
/**
 * Fluent Resource is a structure storing a map of parsed localization entries.
 */

class resource_FluentResource extends Map {
  /**
   * Create a new FluentResource from Fluent code.
   */
  static fromString(source) {
    RE_MESSAGE_START.lastIndex = 0;
    let resource = new this();
    let cursor = 0; // Iterate over the beginnings of messages and terms to efficiently skip
    // comments and recover from errors.

    while (true) {
      let next = RE_MESSAGE_START.exec(source);

      if (next === null) {
        break;
      }

      cursor = RE_MESSAGE_START.lastIndex;

      try {
        resource.set(next[1], parseMessage());
      } catch (err) {
        if (err instanceof FluentError) {
          // Don't report any Fluent syntax errors. Skip directly to the
          // beginning of the next message or term.
          continue;
        }

        throw err;
      }
    }

    return resource; // The parser implementation is inlined below for performance reasons.
    // The parser focuses on minimizing the number of false negatives at the
    // expense of increasing the risk of false positives. In other words, it
    // aims at parsing valid Fluent messages with a success rate of 100%, but it
    // may also parse a few invalid messages which the reference parser would
    // reject. The parser doesn't perform any validation and may produce entries
    // which wouldn't make sense in the real world. For best results users are
    // advised to validate translations with the fluent-syntax parser
    // pre-runtime.
    // The parser makes an extensive use of sticky regexes which can be anchored
    // to any offset of the source string without slicing it. Errors are thrown
    // to bail out of parsing of ill-formed messages.

    function test(re) {
      re.lastIndex = cursor;
      return re.test(source);
    } // Advance the cursor by the char if it matches. May be used as a predicate
    // (was the match found?) or, if errorClass is passed, as an assertion.


    function consumeChar(char, errorClass) {
      if (source[cursor] === char) {
        cursor++;
        return true;
      }

      if (errorClass) {
        throw new errorClass(`Expected ${char}`);
      }

      return false;
    } // Advance the cursor by the token if it matches. May be used as a predicate
    // (was the match found?) or, if errorClass is passed, as an assertion.


    function consumeToken(re, errorClass) {
      if (test(re)) {
        cursor = re.lastIndex;
        return true;
      }

      if (errorClass) {
        throw new errorClass(`Expected ${re.toString()}`);
      }

      return false;
    } // Execute a regex, advance the cursor, and return all capture groups.


    function match(re) {
      re.lastIndex = cursor;
      let result = re.exec(source);

      if (result === null) {
        throw new FluentError(`Expected ${re.toString()}`);
      }

      cursor = re.lastIndex;
      return result;
    } // Execute a regex, advance the cursor, and return the capture group.


    function match1(re) {
      return match(re)[1];
    }

    function parseMessage() {
      let value = parsePattern();
      let attrs = parseAttributes();

      if (attrs === null) {
        if (value === null) {
          throw new FluentError("Expected message value or attributes");
        }

        return value;
      }

      return {
        value,
        attrs
      };
    }

    function parseAttributes() {
      let attrs = {};

      while (test(RE_ATTRIBUTE_START)) {
        let name = match1(RE_ATTRIBUTE_START);
        let value = parsePattern();

        if (value === null) {
          throw new FluentError("Expected attribute value");
        }

        attrs[name] = value;
      }

      return Object.keys(attrs).length > 0 ? attrs : null;
    }

    function parsePattern() {
      // First try to parse any simple text on the same line as the id.
      if (test(RE_TEXT_RUN)) {
        var first = match1(RE_TEXT_RUN);
      } // If there's a placeable on the first line, parse a complex pattern.


      if (source[cursor] === "{" || source[cursor] === "}") {
        // Re-use the text parsed above, if possible.
        return parsePatternElements(first ? [first] : [], Infinity);
      } // RE_TEXT_VALUE stops at newlines. Only continue parsing the pattern if
      // what comes after the newline is indented.


      let indent = parseIndent();

      if (indent) {
        if (first) {
          // If there's text on the first line, the blank block is part of the
          // translation content in its entirety.
          return parsePatternElements([first, indent], indent.length);
        } // Otherwise, we're dealing with a block pattern, i.e. a pattern which
        // starts on a new line. Discrad the leading newlines but keep the
        // inline indent; it will be used by the dedentation logic.


        indent.value = trim(indent.value, RE_LEADING_NEWLINES);
        return parsePatternElements([indent], indent.length);
      }

      if (first) {
        // It was just a simple inline text after all.
        return trim(first, RE_TRAILING_SPACES);
      }

      return null;
    } // Parse a complex pattern as an array of elements.


    function parsePatternElements(elements = [], commonIndent) {
      let placeableCount = 0;

      while (true) {
        if (test(RE_TEXT_RUN)) {
          elements.push(match1(RE_TEXT_RUN));
          continue;
        }

        if (source[cursor] === "{") {
          if (++placeableCount > MAX_PLACEABLES) {
            throw new FluentError("Too many placeables");
          }

          elements.push(parsePlaceable());
          continue;
        }

        if (source[cursor] === "}") {
          throw new FluentError("Unbalanced closing brace");
        }

        let indent = parseIndent();

        if (indent) {
          elements.push(indent);
          commonIndent = Math.min(commonIndent, indent.length);
          continue;
        }

        break;
      }

      let lastIndex = elements.length - 1; // Trim the trailing spaces in the last element if it's a TextElement.

      if (typeof elements[lastIndex] === "string") {
        elements[lastIndex] = trim(elements[lastIndex], RE_TRAILING_SPACES);
      }

      let baked = [];

      for (let element of elements) {
        if (element.type === "indent") {
          // Dedent indented lines by the maximum common indent.
          element = element.value.slice(0, element.value.length - commonIndent);
        } else if (element.type === "str") {
          // Optimize StringLiterals into their value.
          element = element.value;
        }

        if (element) {
          baked.push(element);
        }
      }

      return baked;
    }

    function parsePlaceable() {
      consumeToken(TOKEN_BRACE_OPEN, FluentError);
      let selector = parseInlineExpression();

      if (consumeToken(TOKEN_BRACE_CLOSE)) {
        return selector;
      }

      if (consumeToken(TOKEN_ARROW)) {
        let variants = parseVariants();
        consumeToken(TOKEN_BRACE_CLOSE, FluentError);
        return {
          type: "select",
          selector,
          ...variants
        };
      }

      throw new FluentError("Unclosed placeable");
    }

    function parseInlineExpression() {
      if (source[cursor] === "{") {
        // It's a nested placeable.
        return parsePlaceable();
      }

      if (test(RE_REFERENCE)) {
        let [, sigil, name, attr = null] = match(RE_REFERENCE);

        if (sigil === "$") {
          return {
            type: "var",
            name
          };
        }

        if (consumeToken(TOKEN_PAREN_OPEN)) {
          let args = parseArguments();

          if (sigil === "-") {
            // A parameterized term: -term(...).
            return {
              type: "term",
              name,
              attr,
              args
            };
          }

          if (RE_FUNCTION_NAME.test(name)) {
            return {
              type: "func",
              name,
              args
            };
          }

          throw new FluentError("Function names must be all upper-case");
        }

        if (sigil === "-") {
          // A non-parameterized term: -term.
          return {
            type: "term",
            name,
            attr,
            args: []
          };
        }

        return {
          type: "mesg",
          name,
          attr
        };
      }

      return parseLiteral();
    }

    function parseArguments() {
      let args = [];

      while (true) {
        switch (source[cursor]) {
          case ")":
            // End of the argument list.
            cursor++;
            return args;

          case undefined:
            // EOF
            throw new FluentError("Unclosed argument list");
        }

        args.push(parseArgument()); // Commas between arguments are treated as whitespace.

        consumeToken(TOKEN_COMMA);
      }
    }

    function parseArgument() {
      let expr = parseInlineExpression();

      if (expr.type !== "mesg") {
        return expr;
      }

      if (consumeToken(TOKEN_COLON)) {
        // The reference is the beginning of a named argument.
        return {
          type: "narg",
          name: expr.name,
          value: parseLiteral()
        };
      } // It's a regular message reference.


      return expr;
    }

    function parseVariants() {
      let variants = [];
      let count = 0;
      let star;

      while (test(RE_VARIANT_START)) {
        if (consumeChar("*")) {
          star = count;
        }

        let key = parseVariantKey();
        let value = parsePattern();

        if (value === null) {
          throw new FluentError("Expected variant value");
        }

        variants[count++] = {
          key,
          value
        };
      }

      if (count === 0) {
        return null;
      }

      if (star === undefined) {
        throw new FluentError("Expected default variant");
      }

      return {
        variants,
        star
      };
    }

    function parseVariantKey() {
      consumeToken(TOKEN_BRACKET_OPEN, FluentError);
      let key = test(RE_NUMBER_LITERAL) ? parseNumberLiteral() : match1(RE_IDENTIFIER);
      consumeToken(TOKEN_BRACKET_CLOSE, FluentError);
      return key;
    }

    function parseLiteral() {
      if (test(RE_NUMBER_LITERAL)) {
        return parseNumberLiteral();
      }

      if (source[cursor] === "\"") {
        return parseStringLiteral();
      }

      throw new FluentError("Invalid expression");
    }

    function parseNumberLiteral() {
      let [, value, fraction = ""] = match(RE_NUMBER_LITERAL);
      let precision = fraction.length;
      return {
        type: "num",
        value: parseFloat(value),
        precision
      };
    }

    function parseStringLiteral() {
      consumeChar("\"", FluentError);
      let value = "";

      while (true) {
        value += match1(RE_STRING_RUN);

        if (source[cursor] === "\\") {
          value += parseEscapeSequence();
          continue;
        }

        if (consumeChar("\"")) {
          return {
            type: "str",
            value
          };
        } // We've reached an EOL of EOF.


        throw new FluentError("Unclosed string literal");
      }
    } // Unescape known escape sequences.


    function parseEscapeSequence() {
      if (test(RE_STRING_ESCAPE)) {
        return match1(RE_STRING_ESCAPE);
      }

      if (test(RE_UNICODE_ESCAPE)) {
        let [, codepoint4, codepoint6] = match(RE_UNICODE_ESCAPE);
        let codepoint = parseInt(codepoint4 || codepoint6, 16);
        return codepoint <= 0xD7FF || 0xE000 <= codepoint // It's a Unicode scalar value.
        ? String.fromCodePoint(codepoint) // Lonely surrogates can cause trouble when the parsing result is
        // saved using UTF-8. Use U+FFFD REPLACEMENT CHARACTER instead.
        : "�";
      }

      throw new FluentError("Unknown escape sequence");
    } // Parse blank space. Return it if it looks like indent before a pattern
    // line. Skip it othwerwise.


    function parseIndent() {
      let start = cursor;
      consumeToken(TOKEN_BLANK); // Check the first non-blank character after the indent.

      switch (source[cursor]) {
        case ".":
        case "[":
        case "*":
        case "}":
        case undefined:
          // EOF
          // A special character. End the Pattern.
          return false;

        case "{":
          // Placeables don't require indentation (in EBNF: block-placeable).
          // Continue the Pattern.
          return makeIndent(source.slice(start, cursor));
      } // If the first character on the line is not one of the special characters
      // listed above, it's a regular text character. Check if there's at least
      // one space of indent before it.


      if (source[cursor - 1] === " ") {
        // It's an indented text character (in EBNF: indented-char). Continue
        // the Pattern.
        return makeIndent(source.slice(start, cursor));
      } // A not-indented text character is likely the identifier of the next
      // message. End the Pattern.


      return false;
    } // Trim blanks in text according to the given regex.


    function trim(text, re) {
      return text.replace(re, "");
    } // Normalize a blank block and extract the indent details.


    function makeIndent(blank) {
      let value = blank.replace(RE_BLANK_LINES, "\n");
      let length = RE_INDENT.exec(blank)[1].length;
      return {
        type: "indent",
        value,
        length
      };
    }
  }

}
// CONCATENATED MODULE: ./node_modules/fluent/src/bundle.js


/**
 * Message bundles are single-language stores of translations.  They are
 * responsible for parsing translation resources in the Fluent syntax and can
 * format translation units (entities) to strings.
 *
 * Always use `FluentBundle.format` to retrieve translation units from a
 * bundle. Translations can contain references to other entities or variables,
 * conditional logic in form of select expressions, traits which describe their
 * grammatical features, and can use Fluent builtins which make use of the
 * `Intl` formatters to format numbers, dates, lists and more into the
 * bundle's language. See the documentation of the Fluent syntax for more
 * information.
 */

class bundle_FluentBundle {
  /**
   * Create an instance of `FluentBundle`.
   *
   * The `locales` argument is used to instantiate `Intl` formatters used by
   * translations.  The `options` object can be used to configure the bundle.
   *
   * Examples:
   *
   *     const bundle = new FluentBundle(locales);
   *
   *     const bundle = new FluentBundle(locales, { useIsolating: false });
   *
   *     const bundle = new FluentBundle(locales, {
   *       useIsolating: true,
   *       functions: {
   *         NODE_ENV: () => process.env.NODE_ENV
   *       }
   *     });
   *
   * Available options:
   *
   *   - `functions` - an object of additional functions available to
   *                   translations as builtins.
   *
   *   - `useIsolating` - boolean specifying whether to use Unicode isolation
   *                    marks (FSI, PDI) for bidi interpolations.
   *                    Default: true
   *
   *   - `transform` - a function used to transform string parts of patterns.
   *
   * @param   {string|Array<string>} locales - Locale or locales of the bundle
   * @param   {Object} [options]
   * @returns {FluentBundle}
   */
  constructor(locales, {
    functions = {},
    useIsolating = true,
    transform = v => v
  } = {}) {
    this.locales = Array.isArray(locales) ? locales : [locales];
    this._terms = new Map();
    this._messages = new Map();
    this._functions = functions;
    this._useIsolating = useIsolating;
    this._transform = transform;
    this._intls = new WeakMap();
  }
  /*
   * Return an iterator over public `[id, message]` pairs.
   *
   * @returns {Iterator}
   */


  get messages() {
    return this._messages[Symbol.iterator]();
  }
  /*
   * Check if a message is present in the bundle.
   *
   * @param {string} id - The identifier of the message to check.
   * @returns {bool}
   */


  hasMessage(id) {
    return this._messages.has(id);
  }
  /*
   * Return the internal representation of a message.
   *
   * The internal representation should only be used as an argument to
   * `FluentBundle.format`.
   *
   * @param {string} id - The identifier of the message to check.
   * @returns {Any}
   */


  getMessage(id) {
    return this._messages.get(id);
  }
  /**
   * Add a translation resource to the bundle.
   *
   * The translation resource must use the Fluent syntax.  It will be parsed by
   * the bundle and each translation unit (message) will be available in the
   * bundle by its identifier.
   *
   *     bundle.addMessages('foo = Foo');
   *     bundle.getMessage('foo');
   *
   *     // Returns a raw representation of the 'foo' message.
   *
   *     bundle.addMessages('bar = Bar');
   *     bundle.addMessages('bar = Newbar', { allowOverrides: true });
   *     bundle.getMessage('bar');
   *
   *     // Returns a raw representation of the 'bar' message: Newbar.
   *
   * Parsed entities should be formatted with the `format` method in case they
   * contain logic (references, select expressions etc.).
   *
   * Available options:
   *
   *   - `allowOverrides` - boolean specifying whether it's allowed to override
   *                      an existing message or term with a new value.
   *                      Default: false
   *
   * @param   {string} source - Text resource with translations.
   * @param   {Object} [options]
   * @returns {Array<Error>}
   */


  addMessages(source, options) {
    const res = resource_FluentResource.fromString(source);
    return this.addResource(res, options);
  }
  /**
   * Add a translation resource to the bundle.
   *
   * The translation resource must be an instance of FluentResource,
   * e.g. parsed by `FluentResource.fromString`.
   *
   *     let res = FluentResource.fromString("foo = Foo");
   *     bundle.addResource(res);
   *     bundle.getMessage('foo');
   *
   *     // Returns a raw representation of the 'foo' message.
   *
   *     let res = FluentResource.fromString("bar = Bar");
   *     bundle.addResource(res);
   *     res = FluentResource.fromString("bar = Newbar");
   *     bundle.addResource(res, { allowOverrides: true });
   *     bundle.getMessage('bar');
   *
   *     // Returns a raw representation of the 'bar' message: Newbar.
   *
   * Parsed entities should be formatted with the `format` method in case they
   * contain logic (references, select expressions etc.).
   *
   * Available options:
   *
   *   - `allowOverrides` - boolean specifying whether it's allowed to override
   *                      an existing message or term with a new value.
   *                      Default: false
   *
   * @param   {FluentResource} res - FluentResource object.
   * @param   {Object} [options]
   * @returns {Array<Error>}
   */


  addResource(res, {
    allowOverrides = false
  } = {}) {
    const errors = [];

    for (const [id, value] of res) {
      if (id.startsWith("-")) {
        // Identifiers starting with a dash (-) define terms. Terms are private
        // and cannot be retrieved from FluentBundle.
        if (allowOverrides === false && this._terms.has(id)) {
          errors.push(`Attempt to override an existing term: "${id}"`);
          continue;
        }

        this._terms.set(id, value);
      } else {
        if (allowOverrides === false && this._messages.has(id)) {
          errors.push(`Attempt to override an existing message: "${id}"`);
          continue;
        }

        this._messages.set(id, value);
      }
    }

    return errors;
  }
  /**
   * Format a message to a string or null.
   *
   * Format a raw `message` from the bundle into a string (or a null if it has
   * a null value).  `args` will be used to resolve references to variables
   * passed as arguments to the translation.
   *
   * In case of errors `format` will try to salvage as much of the translation
   * as possible and will still return a string.  For performance reasons, the
   * encountered errors are not returned but instead are appended to the
   * `errors` array passed as the third argument.
   *
   *     const errors = [];
   *     bundle.addMessages('hello = Hello, { $name }!');
   *     const hello = bundle.getMessage('hello');
   *     bundle.format(hello, { name: 'Jane' }, errors);
   *
   *     // Returns 'Hello, Jane!' and `errors` is empty.
   *
   *     bundle.format(hello, undefined, errors);
   *
   *     // Returns 'Hello, name!' and `errors` is now:
   *
   *     [<ReferenceError: Unknown variable: name>]
   *
   * @param   {Object | string}    message
   * @param   {Object | undefined} args
   * @param   {Array}              errors
   * @returns {?string}
   */


  format(message, args, errors) {
    // optimize entities which are simple strings with no attributes
    if (typeof message === "string") {
      return this._transform(message);
    } // optimize entities with null values


    if (message === null || message.value === null) {
      return null;
    } // optimize simple-string entities with attributes


    if (typeof message.value === "string") {
      return this._transform(message.value);
    }

    return resolve(this, args, message, errors);
  }

  _memoizeIntlObject(ctor, opts) {
    const cache = this._intls.get(ctor) || {};
    const id = JSON.stringify(opts);

    if (!cache[id]) {
      cache[id] = new ctor(this.locales, opts);

      this._intls.set(ctor, cache);
    }

    return cache[id];
  }

}
// CONCATENATED MODULE: ./node_modules/fluent/src/util.js
function nonBlank(line) {
  return !/^\s*$/.test(line);
}

function countIndent(line) {
  const [indent] = line.match(/^\s*/);
  return indent.length;
}
/**
 * Template literal tag for dedenting FTL code.
 *
 * Strip the common indent of non-blank lines. Remove blank lines.
 *
 * @param {Array<string>} strings
 */


function ftl(strings) {
  const [code] = strings;
  const lines = code.split("\n").filter(nonBlank);
  const indents = lines.map(countIndent);
  const common = Math.min(...indents);
  const indent = new RegExp(`^\\s{${common}}`);
  return lines.map(line => line.replace(indent, "")).join("\n");
}
// CONCATENATED MODULE: ./node_modules/fluent/src/index.js
/*
 * @module fluent
 * @overview
 *
 * `fluent` is a JavaScript implementation of Project Fluent, a localization
 * framework designed to unleash the expressive power of the natural language.
 *
 */





// CONCATENATED MODULE: ./content-src/asrouter/rich-text-strings.js
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RICH_TEXT_KEYS", function() { return RICH_TEXT_KEYS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "generateBundles", function() { return generateBundles; });
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */

/**
 * Properties that allow rich text MUST be added to this list.
 *   key: the localization_id that should be used
 *   value: a property or array of properties on the message.content object
 */

const RICH_TEXT_CONFIG = {
  text: ["text", "scene1_text"],
  success_text: "success_text",
  error_text: "error_text",
  scene2_text: "scene2_text",
  amo_html: "amo_html",
  privacy_html: "scene2_privacy_html",
  disclaimer_html: "scene2_disclaimer_html"
};
const RICH_TEXT_KEYS = Object.keys(RICH_TEXT_CONFIG);
/**
 * Generates an array of messages suitable for fluent's localization provider
 * including all needed strings for rich text.
 * @param {object} content A .content object from an ASR message (i.e. message.content)
 * @returns {FluentBundle[]} A array containing the fluent message context
 */

function generateBundles(content) {
  const bundle = new bundle_FluentBundle("en-US");
  RICH_TEXT_KEYS.forEach(key => {
    const attrs = RICH_TEXT_CONFIG[key];
    const attrsToTry = Array.isArray(attrs) ? [...attrs] : [attrs];
    let string = "";

    while (!string && attrsToTry.length) {
      const attr = attrsToTry.pop();
      string = content[attr];
    }

    bundle.addMessages(`${key} = ${string}`);
  });
  return [bundle];
}

/***/ }),
/* 56 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

// EXTERNAL MODULE: ./common/Actions.jsm
var Actions = __webpack_require__(2);

// CONCATENATED MODULE: ./common/Dedupe.jsm
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */
class Dedupe {
  constructor(createKey) {
    this.createKey = createKey || this.defaultCreateKey;
  }

  defaultCreateKey(item) {
    return item;
  }
  /**
   * Dedupe any number of grouped elements favoring those from earlier groups.
   *
   * @param {Array} groups Contains an arbitrary number of arrays of elements.
   * @returns {Array} A matching array of each provided group deduped.
   */


  group(...groups) {
    const globalKeys = new Set();
    const result = [];

    for (const values of groups) {
      const valueMap = new Map();

      for (const value of values) {
        const key = this.createKey(value);

        if (!globalKeys.has(key) && !valueMap.has(key)) {
          valueMap.set(key, value);
        }
      }

      result.push(valueMap);
      valueMap.forEach((value, key) => globalKeys.add(key));
    }

    return result.map(m => Array.from(m.values()));
  }

}
// CONCATENATED MODULE: ./common/Reducers.jsm
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TOP_SITES_DEFAULT_ROWS", function() { return TOP_SITES_DEFAULT_ROWS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TOP_SITES_MAX_SITES_PER_ROW", function() { return TOP_SITES_MAX_SITES_PER_ROW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "INITIAL_STATE", function() { return INITIAL_STATE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "insertPinned", function() { return insertPinned; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reducers", function() { return reducers; });
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */




const TOP_SITES_DEFAULT_ROWS = 1;
const TOP_SITES_MAX_SITES_PER_ROW = 8;
const dedupe = new Dedupe(site => site && site.url);
const INITIAL_STATE = {
  App: {
    // Have we received real data from the app yet?
    initialized: false
  },
  ASRouter: {
    initialized: false
  },
  Snippets: {
    initialized: false
  },
  TopSites: {
    // Have we received real data from history yet?
    initialized: false,
    // The history (and possibly default) links
    rows: [],
    // Used in content only to dispatch action to TopSiteForm.
    editForm: null,
    // Used in content only to open the SearchShortcutsForm modal.
    showSearchShortcutsForm: false,
    // The list of available search shortcuts.
    searchShortcuts: []
  },
  Prefs: {
    initialized: false,
    values: {}
  },
  Dialog: {
    visible: false,
    data: {}
  },
  Sections: [],
  Pocket: {
    isUserLoggedIn: null,
    pocketCta: {},
    waitingForSpoc: true
  },
  // This is the new pocket configurable layout state.
  DiscoveryStream: {
    // This is a JSON-parsed copy of the discoverystream.config pref value.
    config: {
      enabled: false,
      layout_endpoint: ""
    },
    layout: [],
    lastUpdated: null,
    feeds: {
      data: {// "https://foo.com/feed1": {lastUpdated: 123, data: []}
      },
      loaded: false
    },
    spocs: {
      spocs_endpoint: "",
      lastUpdated: null,
      data: {},
      // {spocs: []}
      loaded: false,
      frequency_caps: [],
      blocked: []
    }
  },
  Search: {
    // When search hand-off is enabled, we render a big button that is styled to
    // look like a search textbox. If the button is clicked, we style
    // the button as if it was a focused search box and show a fake cursor but
    // really focus the awesomebar without the focus styles ("hidden focus").
    fakeFocus: false,
    // Hide the search box after handing off to AwesomeBar and user starts typing.
    hide: false
  }
};

function App(prevState = INITIAL_STATE.App, action) {
  switch (action.type) {
    case Actions["actionTypes"].INIT:
      return Object.assign({}, prevState, action.data || {}, {
        initialized: true
      });

    default:
      return prevState;
  }
}

function ASRouter(prevState = INITIAL_STATE.ASRouter, action) {
  switch (action.type) {
    case Actions["actionTypes"].AS_ROUTER_INITIALIZED:
      return { ...action.data,
        initialized: true
      };

    default:
      return prevState;
  }
}
/**
 * insertPinned - Inserts pinned links in their specified slots
 *
 * @param {array} a list of links
 * @param {array} a list of pinned links
 * @return {array} resulting list of links with pinned links inserted
 */


function insertPinned(links, pinned) {
  // Remove any pinned links
  const pinnedUrls = pinned.map(link => link && link.url);
  let newLinks = links.filter(link => link ? !pinnedUrls.includes(link.url) : false);
  newLinks = newLinks.map(link => {
    if (link && link.isPinned) {
      delete link.isPinned;
      delete link.pinIndex;
    }

    return link;
  }); // Then insert them in their specified location

  pinned.forEach((val, index) => {
    if (!val) {
      return;
    }

    let link = Object.assign({}, val, {
      isPinned: true,
      pinIndex: index
    });

    if (index > newLinks.length) {
      newLinks[index] = link;
    } else {
      newLinks.splice(index, 0, link);
    }
  });
  return newLinks;
}

function TopSites(prevState = INITIAL_STATE.TopSites, action) {
  let hasMatch;
  let newRows;

  switch (action.type) {
    case Actions["actionTypes"].TOP_SITES_UPDATED:
      if (!action.data || !action.data.links) {
        return prevState;
      }

      return Object.assign({}, prevState, {
        initialized: true,
        rows: action.data.links
      }, action.data.pref ? {
        pref: action.data.pref
      } : {});

    case Actions["actionTypes"].TOP_SITES_PREFS_UPDATED:
      return Object.assign({}, prevState, {
        pref: action.data.pref
      });

    case Actions["actionTypes"].TOP_SITES_EDIT:
      return Object.assign({}, prevState, {
        editForm: {
          index: action.data.index,
          previewResponse: null
        }
      });

    case Actions["actionTypes"].TOP_SITES_CANCEL_EDIT:
      return Object.assign({}, prevState, {
        editForm: null
      });

    case Actions["actionTypes"].TOP_SITES_OPEN_SEARCH_SHORTCUTS_MODAL:
      return Object.assign({}, prevState, {
        showSearchShortcutsForm: true
      });

    case Actions["actionTypes"].TOP_SITES_CLOSE_SEARCH_SHORTCUTS_MODAL:
      return Object.assign({}, prevState, {
        showSearchShortcutsForm: false
      });

    case Actions["actionTypes"].PREVIEW_RESPONSE:
      if (!prevState.editForm || action.data.url !== prevState.editForm.previewUrl) {
        return prevState;
      }

      return Object.assign({}, prevState, {
        editForm: {
          index: prevState.editForm.index,
          previewResponse: action.data.preview,
          previewUrl: action.data.url
        }
      });

    case Actions["actionTypes"].PREVIEW_REQUEST:
      if (!prevState.editForm) {
        return prevState;
      }

      return Object.assign({}, prevState, {
        editForm: {
          index: prevState.editForm.index,
          previewResponse: null,
          previewUrl: action.data.url
        }
      });

    case Actions["actionTypes"].PREVIEW_REQUEST_CANCEL:
      if (!prevState.editForm) {
        return prevState;
      }

      return Object.assign({}, prevState, {
        editForm: {
          index: prevState.editForm.index,
          previewResponse: null
        }
      });

    case Actions["actionTypes"].SCREENSHOT_UPDATED:
      newRows = prevState.rows.map(row => {
        if (row && row.url === action.data.url) {
          hasMatch = true;
          return Object.assign({}, row, {
            screenshot: action.data.screenshot
          });
        }

        return row;
      });
      return hasMatch ? Object.assign({}, prevState, {
        rows: newRows
      }) : prevState;

    case Actions["actionTypes"].PLACES_BOOKMARK_ADDED:
      if (!action.data) {
        return prevState;
      }

      newRows = prevState.rows.map(site => {
        if (site && site.url === action.data.url) {
          const {
            bookmarkGuid,
            bookmarkTitle,
            dateAdded
          } = action.data;
          return Object.assign({}, site, {
            bookmarkGuid,
            bookmarkTitle,
            bookmarkDateCreated: dateAdded
          });
        }

        return site;
      });
      return Object.assign({}, prevState, {
        rows: newRows
      });

    case Actions["actionTypes"].PLACES_BOOKMARK_REMOVED:
      if (!action.data) {
        return prevState;
      }

      newRows = prevState.rows.map(site => {
        if (site && site.url === action.data.url) {
          const newSite = Object.assign({}, site);
          delete newSite.bookmarkGuid;
          delete newSite.bookmarkTitle;
          delete newSite.bookmarkDateCreated;
          return newSite;
        }

        return site;
      });
      return Object.assign({}, prevState, {
        rows: newRows
      });

    case Actions["actionTypes"].PLACES_LINK_DELETED:
      if (!action.data) {
        return prevState;
      }

      newRows = prevState.rows.filter(site => action.data.url !== site.url);
      return Object.assign({}, prevState, {
        rows: newRows
      });

    case Actions["actionTypes"].UPDATE_SEARCH_SHORTCUTS:
      return { ...prevState,
        searchShortcuts: action.data.searchShortcuts
      };

    case Actions["actionTypes"].SNIPPETS_PREVIEW_MODE:
      return { ...prevState,
        rows: []
      };

    default:
      return prevState;
  }
}

function Dialog(prevState = INITIAL_STATE.Dialog, action) {
  switch (action.type) {
    case Actions["actionTypes"].DIALOG_OPEN:
      return Object.assign({}, prevState, {
        visible: true,
        data: action.data
      });

    case Actions["actionTypes"].DIALOG_CANCEL:
      return Object.assign({}, prevState, {
        visible: false
      });

    case Actions["actionTypes"].DELETE_HISTORY_URL:
      return Object.assign({}, INITIAL_STATE.Dialog);

    default:
      return prevState;
  }
}

function Prefs(prevState = INITIAL_STATE.Prefs, action) {
  let newValues;

  switch (action.type) {
    case Actions["actionTypes"].PREFS_INITIAL_VALUES:
      return Object.assign({}, prevState, {
        initialized: true,
        values: action.data
      });

    case Actions["actionTypes"].PREF_CHANGED:
      newValues = Object.assign({}, prevState.values);
      newValues[action.data.name] = action.data.value;
      return Object.assign({}, prevState, {
        values: newValues
      });

    default:
      return prevState;
  }
}

function Sections(prevState = INITIAL_STATE.Sections, action) {
  let hasMatch;
  let newState;

  switch (action.type) {
    case Actions["actionTypes"].SECTION_DEREGISTER:
      return prevState.filter(section => section.id !== action.data);

    case Actions["actionTypes"].SECTION_REGISTER:
      // If section exists in prevState, update it
      newState = prevState.map(section => {
        if (section && section.id === action.data.id) {
          hasMatch = true;
          return Object.assign({}, section, action.data);
        }

        return section;
      }); // Otherwise, append it

      if (!hasMatch) {
        const initialized = !!(action.data.rows && action.data.rows.length > 0);
        const section = Object.assign({
          title: "",
          rows: [],
          enabled: false
        }, action.data, {
          initialized
        });
        newState.push(section);
      }

      return newState;

    case Actions["actionTypes"].SECTION_UPDATE:
      newState = prevState.map(section => {
        if (section && section.id === action.data.id) {
          // If the action is updating rows, we should consider initialized to be true.
          // This can be overridden if initialized is defined in the action.data
          const initialized = action.data.rows ? {
            initialized: true
          } : {}; // Make sure pinned cards stay at their current position when rows are updated.
          // Disabling a section (SECTION_UPDATE with empty rows) does not retain pinned cards.

          if (action.data.rows && action.data.rows.length > 0 && section.rows.find(card => card.pinned)) {
            const rows = Array.from(action.data.rows);
            section.rows.forEach((card, index) => {
              if (card.pinned) {
                // Only add it if it's not already there.
                if (rows[index].guid !== card.guid) {
                  rows.splice(index, 0, card);
                }
              }
            });
            return Object.assign({}, section, initialized, Object.assign({}, action.data, {
              rows
            }));
          }

          return Object.assign({}, section, initialized, action.data);
        }

        return section;
      });

      if (!action.data.dedupeConfigurations) {
        return newState;
      }

      action.data.dedupeConfigurations.forEach(dedupeConf => {
        newState = newState.map(section => {
          if (section.id === dedupeConf.id) {
            const dedupedRows = dedupeConf.dedupeFrom.reduce((rows, dedupeSectionId) => {
              const dedupeSection = newState.find(s => s.id === dedupeSectionId);
              const [, newRows] = dedupe.group(dedupeSection.rows, rows);
              return newRows;
            }, section.rows);
            return Object.assign({}, section, {
              rows: dedupedRows
            });
          }

          return section;
        });
      });
      return newState;

    case Actions["actionTypes"].SECTION_UPDATE_CARD:
      return prevState.map(section => {
        if (section && section.id === action.data.id && section.rows) {
          const newRows = section.rows.map(card => {
            if (card.url === action.data.url) {
              return Object.assign({}, card, action.data.options);
            }

            return card;
          });
          return Object.assign({}, section, {
            rows: newRows
          });
        }

        return section;
      });

    case Actions["actionTypes"].PLACES_BOOKMARK_ADDED:
      if (!action.data) {
        return prevState;
      }

      return prevState.map(section => Object.assign({}, section, {
        rows: section.rows.map(item => {
          // find the item within the rows that is attempted to be bookmarked
          if (item.url === action.data.url) {
            const {
              bookmarkGuid,
              bookmarkTitle,
              dateAdded
            } = action.data;
            return Object.assign({}, item, {
              bookmarkGuid,
              bookmarkTitle,
              bookmarkDateCreated: dateAdded,
              type: "bookmark"
            });
          }

          return item;
        })
      }));

    case Actions["actionTypes"].PLACES_SAVED_TO_POCKET:
      if (!action.data) {
        return prevState;
      }

      return prevState.map(section => Object.assign({}, section, {
        rows: section.rows.map(item => {
          if (item.url === action.data.url) {
            return Object.assign({}, item, {
              open_url: action.data.open_url,
              pocket_id: action.data.pocket_id,
              title: action.data.title,
              type: "pocket"
            });
          }

          return item;
        })
      }));

    case Actions["actionTypes"].PLACES_BOOKMARK_REMOVED:
      if (!action.data) {
        return prevState;
      }

      return prevState.map(section => Object.assign({}, section, {
        rows: section.rows.map(item => {
          // find the bookmark within the rows that is attempted to be removed
          if (item.url === action.data.url) {
            const newSite = Object.assign({}, item);
            delete newSite.bookmarkGuid;
            delete newSite.bookmarkTitle;
            delete newSite.bookmarkDateCreated;

            if (!newSite.type || newSite.type === "bookmark") {
              newSite.type = "history";
            }

            return newSite;
          }

          return item;
        })
      }));

    case Actions["actionTypes"].PLACES_LINK_DELETED:
    case Actions["actionTypes"].PLACES_LINK_BLOCKED:
      if (!action.data) {
        return prevState;
      }

      return prevState.map(section => Object.assign({}, section, {
        rows: section.rows.filter(site => site.url !== action.data.url)
      }));

    case Actions["actionTypes"].DELETE_FROM_POCKET:
    case Actions["actionTypes"].ARCHIVE_FROM_POCKET:
      return prevState.map(section => Object.assign({}, section, {
        rows: section.rows.filter(site => site.pocket_id !== action.data.pocket_id)
      }));

    case Actions["actionTypes"].SNIPPETS_PREVIEW_MODE:
      return prevState.map(section => ({ ...section,
        rows: []
      }));

    default:
      return prevState;
  }
}

function Snippets(prevState = INITIAL_STATE.Snippets, action) {
  switch (action.type) {
    case Actions["actionTypes"].SNIPPETS_DATA:
      return Object.assign({}, prevState, {
        initialized: true
      }, action.data);

    case Actions["actionTypes"].SNIPPET_BLOCKED:
      return Object.assign({}, prevState, {
        blockList: prevState.blockList.concat(action.data)
      });

    case Actions["actionTypes"].SNIPPETS_BLOCKLIST_CLEARED:
      return Object.assign({}, prevState, {
        blockList: []
      });

    case Actions["actionTypes"].SNIPPETS_RESET:
      return INITIAL_STATE.Snippets;

    default:
      return prevState;
  }
}

function Pocket(prevState = INITIAL_STATE.Pocket, action) {
  switch (action.type) {
    case Actions["actionTypes"].POCKET_WAITING_FOR_SPOC:
      return { ...prevState,
        waitingForSpoc: action.data
      };

    case Actions["actionTypes"].POCKET_LOGGED_IN:
      return { ...prevState,
        isUserLoggedIn: !!action.data
      };

    case Actions["actionTypes"].POCKET_CTA:
      return { ...prevState,
        pocketCta: {
          ctaButton: action.data.cta_button,
          ctaText: action.data.cta_text,
          ctaUrl: action.data.cta_url,
          useCta: action.data.use_cta
        }
      };

    default:
      return prevState;
  }
}

function DiscoveryStream(prevState = INITIAL_STATE.DiscoveryStream, action) {
  // Return if action data is empty, or spocs or feeds data is not loaded
  const isNotReady = () => !action.data || !prevState.spocs.loaded || !prevState.feeds.loaded;

  const nextState = handleSites => ({ ...prevState,
    spocs: { ...prevState.spocs,
      data: prevState.spocs.data.spocs ? {
        spocs: handleSites(prevState.spocs.data.spocs)
      } : {}
    },
    feeds: { ...prevState.feeds,
      data: Object.keys(prevState.feeds.data).reduce((accumulator, feed_url) => {
        accumulator[feed_url] = {
          data: { ...prevState.feeds.data[feed_url].data,
            recommendations: handleSites(prevState.feeds.data[feed_url].data.recommendations)
          }
        };
        return accumulator;
      }, {})
    }
  });

  switch (action.type) {
    case Actions["actionTypes"].DISCOVERY_STREAM_CONFIG_CHANGE: // The reason this is a separate action is so it doesn't trigger a listener update on init

    case Actions["actionTypes"].DISCOVERY_STREAM_CONFIG_SETUP:
      return { ...prevState,
        config: action.data || {}
      };

    case Actions["actionTypes"].DISCOVERY_STREAM_LAYOUT_UPDATE:
      return { ...prevState,
        lastUpdated: action.data.lastUpdated || null,
        layout: action.data.layout || []
      };

    case Actions["actionTypes"].DISCOVERY_STREAM_LAYOUT_RESET:
      return { ...INITIAL_STATE.DiscoveryStream,
        config: prevState.config
      };

    case Actions["actionTypes"].DISCOVERY_STREAM_FEEDS_UPDATE:
      return { ...prevState,
        feeds: { ...prevState.feeds,
          loaded: true
        }
      };

    case Actions["actionTypes"].DISCOVERY_STREAM_FEED_UPDATE:
      const newData = {};
      newData[action.data.url] = action.data.feed;
      return { ...prevState,
        feeds: { ...prevState.feeds,
          data: { ...prevState.feeds.data,
            ...newData
          }
        }
      };

    case Actions["actionTypes"].DISCOVERY_STREAM_SPOCS_CAPS:
      return { ...prevState,
        spocs: { ...prevState.spocs,
          frequency_caps: [...prevState.spocs.frequency_caps, ...action.data]
        }
      };

    case Actions["actionTypes"].DISCOVERY_STREAM_SPOCS_ENDPOINT:
      return { ...prevState,
        spocs: { ...INITIAL_STATE.DiscoveryStream.spocs,
          spocs_endpoint: action.data || INITIAL_STATE.DiscoveryStream.spocs.spocs_endpoint
        }
      };

    case Actions["actionTypes"].DISCOVERY_STREAM_SPOCS_UPDATE:
      if (action.data) {
        return { ...prevState,
          spocs: { ...prevState.spocs,
            lastUpdated: action.data.lastUpdated,
            data: action.data.spocs,
            loaded: true
          }
        };
      }

      return prevState;

    case Actions["actionTypes"].DISCOVERY_STREAM_SPOC_BLOCKED:
      return { ...prevState,
        spocs: { ...prevState.spocs,
          blocked: [...prevState.spocs.blocked, action.data.url]
        }
      };

    case Actions["actionTypes"].DISCOVERY_STREAM_LINK_BLOCKED:
      return isNotReady() ? prevState : nextState(items => items.filter(item => item.url !== action.data.url));

    case Actions["actionTypes"].PLACES_SAVED_TO_POCKET:
      const addPocketInfo = item => {
        if (item.url === action.data.url) {
          return Object.assign({}, item, {
            open_url: action.data.open_url,
            pocket_id: action.data.pocket_id
          });
        }

        return item;
      };

      return isNotReady() ? prevState : nextState(items => items.map(addPocketInfo));

    case Actions["actionTypes"].DELETE_FROM_POCKET:
    case Actions["actionTypes"].ARCHIVE_FROM_POCKET:
      return isNotReady() ? prevState : nextState(items => items.filter(item => item.pocket_id !== action.data.pocket_id));

    case Actions["actionTypes"].PLACES_BOOKMARK_ADDED:
      const updateBookmarkInfo = item => {
        if (item.url === action.data.url) {
          const {
            bookmarkGuid,
            bookmarkTitle,
            dateAdded
          } = action.data;
          return Object.assign({}, item, {
            bookmarkGuid,
            bookmarkTitle,
            bookmarkDateCreated: dateAdded
          });
        }

        return item;
      };

      return isNotReady() ? prevState : nextState(items => items.map(updateBookmarkInfo));

    case Actions["actionTypes"].PLACES_BOOKMARK_REMOVED:
      const removeBookmarkInfo = item => {
        if (item.url === action.data.url) {
          const newSite = Object.assign({}, item);
          delete newSite.bookmarkGuid;
          delete newSite.bookmarkTitle;
          delete newSite.bookmarkDateCreated;
          return newSite;
        }

        return item;
      };

      return isNotReady() ? prevState : nextState(items => items.map(removeBookmarkInfo));

    default:
      return prevState;
  }
}

function Search(prevState = INITIAL_STATE.Search, action) {
  switch (action.type) {
    case Actions["actionTypes"].HIDE_SEARCH:
      return Object.assign({ ...prevState,
        hide: true
      });

    case Actions["actionTypes"].FAKE_FOCUS_SEARCH:
      return Object.assign({ ...prevState,
        fakeFocus: true
      });

    case Actions["actionTypes"].SHOW_SEARCH:
      return Object.assign({ ...prevState,
        hide: false,
        fakeFocus: false
      });

    default:
      return prevState;
  }
}

var reducers = {
  TopSites,
  App,
  ASRouter,
  Snippets,
  Prefs,
  Dialog,
  Sections,
  Pocket,
  DiscoveryStream,
  Search
};

/***/ }),
/* 57 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

// EXTERNAL MODULE: ./common/Actions.jsm
var Actions = __webpack_require__(2);

// CONCATENATED MODULE: ./content-src/components/Card/types.js
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */
const cardContextTypes = {
  history: {
    fluentID: "newtab-label-visited",
    icon: "history-item"
  },
  bookmark: {
    fluentID: "newtab-label-bookmarked",
    icon: "bookmark-added"
  },
  trending: {
    fluentID: "newtab-label-recommended",
    icon: "trending"
  },
  pocket: {
    fluentID: "newtab-label-saved",
    icon: "pocket"
  },
  download: {
    fluentID: "newtab-label-download",
    icon: "download"
  }
};
// EXTERNAL MODULE: external "ReactRedux"
var external_ReactRedux_ = __webpack_require__(27);

// EXTERNAL MODULE: ./content-src/components/ContextMenu/ContextMenuButton.jsx
var ContextMenuButton = __webpack_require__(31);

// EXTERNAL MODULE: ./content-src/components/LinkMenu/LinkMenu.jsx + 1 modules
var LinkMenu = __webpack_require__(60);

// EXTERNAL MODULE: external "React"
var external_React_ = __webpack_require__(9);
var external_React_default = /*#__PURE__*/__webpack_require__.n(external_React_);

// EXTERNAL MODULE: ./content-src/lib/screenshot-utils.js
var screenshot_utils = __webpack_require__(40);

// CONCATENATED MODULE: ./content-src/components/Card/Card.jsx
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_Card", function() { return Card_Card; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Card", function() { return Card; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PlaceholderCard", function() { return PlaceholderCard; });
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */






 // Keep track of pending image loads to only request once

const gImageLoading = new Map();
/**
 * Card component.
 * Cards are found within a Section component and contain information about a link such
 * as preview image, page title, page description, and some context about if the page
 * was visited, bookmarked, trending etc...
 * Each Section can make an unordered list of Cards which will create one instane of
 * this class. Each card will then get a context menu which reflects the actions that
 * can be done on this Card.
 */

class Card_Card extends external_React_default.a.PureComponent {
  constructor(props) {
    super(props);
    this.state = {
      activeCard: null,
      imageLoaded: false,
      cardImage: null
    };
    this.onMenuButtonUpdate = this.onMenuButtonUpdate.bind(this);
    this.onLinkClick = this.onLinkClick.bind(this);
  }
  /**
   * Helper to conditionally load an image and update state when it loads.
   */


  async maybeLoadImage() {
    // No need to load if it's already loaded or no image
    const {
      cardImage
    } = this.state;

    if (!cardImage) {
      return;
    }

    const imageUrl = cardImage.url;

    if (!this.state.imageLoaded) {
      // Initialize a promise to share a load across multiple card updates
      if (!gImageLoading.has(imageUrl)) {
        const loaderPromise = new Promise((resolve, reject) => {
          const loader = new Image();
          loader.addEventListener("load", resolve);
          loader.addEventListener("error", reject);
          loader.src = imageUrl;
        }); // Save and remove the promise only while it's pending

        gImageLoading.set(imageUrl, loaderPromise);
        loaderPromise.catch(ex => ex).then(() => gImageLoading.delete(imageUrl)).catch();
      } // Wait for the image whether just started loading or reused promise


      await gImageLoading.get(imageUrl); // Only update state if we're still waiting to load the original image

      if (screenshot_utils["ScreenshotUtils"].isRemoteImageLocal(this.state.cardImage, this.props.link.image) && !this.state.imageLoaded) {
        this.setState({
          imageLoaded: true
        });
      }
    }
  }
  /**
   * Helper to obtain the next state based on nextProps and prevState.
   *
   * NOTE: Rename this method to getDerivedStateFromProps when we update React
   *       to >= 16.3. We will need to update tests as well. We cannot rename this
   *       method to getDerivedStateFromProps now because there is a mismatch in
   *       the React version that we are using for both testing and production.
   *       (i.e. react-test-render => "16.3.2", react => "16.2.0").
   *
   * See https://github.com/airbnb/enzyme/blob/master/packages/enzyme-adapter-react-16/package.json#L43.
   */


  static getNextStateFromProps(nextProps, prevState) {
    const {
      image
    } = nextProps.link;
    const imageInState = screenshot_utils["ScreenshotUtils"].isRemoteImageLocal(prevState.cardImage, image);
    let nextState = null; // Image is updating.

    if (!imageInState && nextProps.link) {
      nextState = {
        imageLoaded: false
      };
    }

    if (imageInState) {
      return nextState;
    } // Since image was updated, attempt to revoke old image blob URL, if it exists.


    screenshot_utils["ScreenshotUtils"].maybeRevokeBlobObjectURL(prevState.cardImage);
    nextState = nextState || {};
    nextState.cardImage = screenshot_utils["ScreenshotUtils"].createLocalImageObject(image);
    return nextState;
  }

  onMenuButtonUpdate(isOpen) {
    if (isOpen) {
      this.setState({
        activeCard: this.props.index
      });
    } else {
      this.setState({
        activeCard: null
      });
    }
  }
  /**
   * Report to telemetry additional information about the item.
   */


  _getTelemetryInfo() {
    // Filter out "history" type for being the default
    if (this.props.link.type !== "history") {
      return {
        value: {
          card_type: this.props.link.type
        }
      };
    }

    return null;
  }

  onLinkClick(event) {
    event.preventDefault();

    if (this.props.link.type === "download") {
      this.props.dispatch(Actions["actionCreators"].OnlyToMain({
        type: Actions["actionTypes"].SHOW_DOWNLOAD_FILE,
        data: this.props.link
      }));
    } else {
      const {
        altKey,
        button,
        ctrlKey,
        metaKey,
        shiftKey
      } = event;
      this.props.dispatch(Actions["actionCreators"].OnlyToMain({
        type: Actions["actionTypes"].OPEN_LINK,
        data: Object.assign(this.props.link, {
          event: {
            altKey,
            button,
            ctrlKey,
            metaKey,
            shiftKey
          }
        })
      }));
    }

    if (this.props.isWebExtension) {
      this.props.dispatch(Actions["actionCreators"].WebExtEvent(Actions["actionTypes"].WEBEXT_CLICK, {
        source: this.props.eventSource,
        url: this.props.link.url,
        action_position: this.props.index
      }));
    } else {
      this.props.dispatch(Actions["actionCreators"].UserEvent(Object.assign({
        event: "CLICK",
        source: this.props.eventSource,
        action_position: this.props.index
      }, this._getTelemetryInfo())));

      if (this.props.shouldSendImpressionStats) {
        this.props.dispatch(Actions["actionCreators"].ImpressionStats({
          source: this.props.eventSource,
          click: 0,
          tiles: [{
            id: this.props.link.guid,
            pos: this.props.index
          }]
        }));
      }
    }
  }

  componentDidMount() {
    this.maybeLoadImage();
  }

  componentDidUpdate() {
    this.maybeLoadImage();
  } // NOTE: Remove this function when we update React to >= 16.3 since React will
  //       call getDerivedStateFromProps automatically. We will also need to
  //       rename getNextStateFromProps to getDerivedStateFromProps.


  componentWillMount() {
    const nextState = Card_Card.getNextStateFromProps(this.props, this.state);

    if (nextState) {
      this.setState(nextState);
    }
  } // NOTE: Remove this function when we update React to >= 16.3 since React will
  //       call getDerivedStateFromProps automatically. We will also need to
  //       rename getNextStateFromProps to getDerivedStateFromProps.


  componentWillReceiveProps(nextProps) {
    const nextState = Card_Card.getNextStateFromProps(nextProps, this.state);

    if (nextState) {
      this.setState(nextState);
    }
  }

  componentWillUnmount() {
    screenshot_utils["ScreenshotUtils"].maybeRevokeBlobObjectURL(this.state.cardImage);
  }

  render() {
    const {
      index,
      className,
      link,
      dispatch,
      contextMenuOptions,
      eventSource,
      shouldSendImpressionStats
    } = this.props;
    const {
      props
    } = this;
    const title = link.title || link.hostname;
    const isContextMenuOpen = this.state.activeCard === index; // Display "now" as "trending" until we have new strings #3402

    const {
      icon,
      fluentID
    } = cardContextTypes[link.type === "now" ? "trending" : link.type] || {};
    const hasImage = this.state.cardImage || link.hasImage;
    const imageStyle = {
      backgroundImage: this.state.cardImage ? `url(${this.state.cardImage.url})` : "none"
    };
    const outerClassName = ["card-outer", className, isContextMenuOpen && "active", props.placeholder && "placeholder"].filter(v => v).join(" ");
    return external_React_default.a.createElement("li", {
      className: outerClassName
    }, external_React_default.a.createElement("a", {
      href: link.type === "pocket" ? link.open_url : link.url,
      onClick: !props.placeholder ? this.onLinkClick : undefined
    }, external_React_default.a.createElement("div", {
      className: "card"
    }, external_React_default.a.createElement("div", {
      className: "card-preview-image-outer"
    }, hasImage && external_React_default.a.createElement("div", {
      className: `card-preview-image${this.state.imageLoaded ? " loaded" : ""}`,
      style: imageStyle
    })), external_React_default.a.createElement("div", {
      className: "card-details"
    }, link.type === "download" && external_React_default.a.createElement("div", {
      className: "card-host-name alternate",
      "data-l10n-id": "newtab-menu-show-file"
    }), link.hostname && external_React_default.a.createElement("div", {
      className: "card-host-name"
    }, link.hostname.slice(0, 100), link.type === "download" && `  \u2014 ${link.description}`), external_React_default.a.createElement("div", {
      className: ["card-text", icon ? "" : "no-context", link.description ? "" : "no-description", link.hostname ? "" : "no-host-name"].join(" ")
    }, external_React_default.a.createElement("h4", {
      className: "card-title",
      dir: "auto"
    }, link.title), external_React_default.a.createElement("p", {
      className: "card-description",
      dir: "auto"
    }, link.description)), external_React_default.a.createElement("div", {
      className: "card-context"
    }, icon && !link.context && external_React_default.a.createElement("span", {
      "aria-haspopup": "true",
      className: `card-context-icon icon icon-${icon}`
    }), link.icon && link.context && external_React_default.a.createElement("span", {
      "aria-haspopup": "true",
      className: "card-context-icon icon",
      style: {
        backgroundImage: `url('${link.icon}')`
      }
    }), fluentID && !link.context && external_React_default.a.createElement("div", {
      className: "card-context-label",
      "data-l10n-id": fluentID
    }), link.context && external_React_default.a.createElement("div", {
      className: "card-context-label"
    }, link.context))))), !props.placeholder && external_React_default.a.createElement(ContextMenuButton["ContextMenuButton"], {
      tooltip: "newtab-menu-content-tooltip",
      tooltipArgs: {
        title
      },
      onUpdate: this.onMenuButtonUpdate
    }, external_React_default.a.createElement(LinkMenu["LinkMenu"], {
      dispatch: dispatch,
      index: index,
      source: eventSource,
      options: link.contextMenuOptions || contextMenuOptions,
      site: link,
      siteInfo: this._getTelemetryInfo(),
      shouldSendImpressionStats: shouldSendImpressionStats
    })));
  }

}
Card_Card.defaultProps = {
  link: {}
};
const Card = Object(external_ReactRedux_["connect"])(state => ({
  platform: state.Prefs.values.platform
}))(Card_Card);
const PlaceholderCard = props => external_React_default.a.createElement(Card, {
  placeholder: true,
  className: props.className
});

/***/ }),
/* 58 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

// EXTERNAL MODULE: external "React"
var external_React_ = __webpack_require__(9);
var external_React_default = /*#__PURE__*/__webpack_require__.n(external_React_);

// EXTERNAL MODULE: ./content-src/asrouter/templates/Trailhead/Trailhead.jsx
var Trailhead = __webpack_require__(20);

// EXTERNAL MODULE: ./content-src/asrouter/templates/ReturnToAMO/ReturnToAMO.jsx
var ReturnToAMO = __webpack_require__(23);

// EXTERNAL MODULE: ./content-src/asrouter/templates/StartupOverlay/StartupOverlay.jsx
var StartupOverlay = __webpack_require__(24);

// EXTERNAL MODULE: ./node_modules/fluent-react/src/index.js + 14 modules
var src = __webpack_require__(53);

// EXTERNAL MODULE: ./content-src/asrouter/rich-text-strings.js + 8 modules
var rich_text_strings = __webpack_require__(55);

// CONCATENATED MODULE: ./content-src/asrouter/templates/FirstRun/Interrupt.jsx
function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */






class Interrupt_Interrupt extends external_React_default.a.PureComponent {
  render() {
    const {
      onDismiss,
      onNextScene,
      message,
      sendUserActionTelemetry,
      executeAction,
      dispatch,
      fxaEndpoint,
      UTMTerm,
      flowParams
    } = this.props;

    switch (message.template) {
      case "return_to_amo_overlay":
        return external_React_default.a.createElement(src["LocalizationProvider"], {
          bundles: Object(rich_text_strings["generateBundles"])({
            amo_html: message.content.text
          })
        }, external_React_default.a.createElement(ReturnToAMO["ReturnToAMO"], _extends({}, message, {
          UISurface: "NEWTAB_OVERLAY",
          onBlock: onDismiss,
          onAction: executeAction,
          sendUserActionTelemetry: sendUserActionTelemetry
        })));

      case "fxa_overlay":
        return external_React_default.a.createElement(StartupOverlay["StartupOverlay"], {
          onBlock: onDismiss,
          dispatch: dispatch,
          fxa_endpoint: fxaEndpoint
        });

      case "trailhead":
        return external_React_default.a.createElement(Trailhead["Trailhead"], {
          document: this.props.document,
          message: message,
          onNextScene: onNextScene,
          onAction: executeAction,
          sendUserActionTelemetry: sendUserActionTelemetry,
          dispatch: dispatch,
          fxaEndpoint: fxaEndpoint,
          UTMTerm: UTMTerm,
          flowParams: flowParams
        });

      default:
        throw new Error(`${message.template} is not a valid FirstRun message`);
    }
  }

}
// EXTERNAL MODULE: ./content-src/asrouter/templates/FirstRun/Triplets.jsx
var Triplets = __webpack_require__(25);

// EXTERNAL MODULE: ./common/Actions.jsm
var Actions = __webpack_require__(2);

// EXTERNAL MODULE: ./content-src/asrouter/templates/FirstRun/addUtmParams.js
var addUtmParams = __webpack_require__(22);

// CONCATENATED MODULE: ./content-src/asrouter/templates/FirstRun/FirstRun.jsx
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FLUENT_FILES", function() { return FLUENT_FILES; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "helpers", function() { return helpers; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FirstRun", function() { return FirstRun_FirstRun; });
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */





const FLUENT_FILES = ["branding/brand.ftl", "browser/branding/brandings.ftl", "browser/branding/sync-brand.ftl", "browser/newtab/onboarding.ftl"];
const helpers = {
  selectInterruptAndTriplets(message = {}) {
    const hasInterrupt = Boolean(message.content);
    const hasTriplets = Boolean(message.bundle && message.bundle.length);
    const UTMTerm = message.utm_term || "";
    return {
      hasTriplets,
      hasInterrupt,
      interrupt: hasInterrupt ? message : null,
      triplets: hasTriplets ? message.bundle : null,
      UTMTerm
    };
  },

  addFluent(document) {
    FLUENT_FILES.forEach(file => {
      const link = document.head.appendChild(document.createElement("link"));
      link.href = file;
      link.rel = "localization";
    });
  },

  async fetchFlowParams({
    fxaEndpoint,
    UTMTerm,
    dispatch,
    setFlowParams
  }) {
    try {
      const url = new URL(`${fxaEndpoint}/metrics-flow?entrypoint=activity-stream-firstrun&form_type=email`);
      Object(addUtmParams["addUtmParams"])(url, UTMTerm);
      const response = await fetch(url, {
        credentials: "omit"
      });

      if (response.status === 200) {
        const {
          deviceId,
          flowId,
          flowBeginTime
        } = await response.json();
        setFlowParams({
          deviceId,
          flowId,
          flowBeginTime
        });
      } else {
        dispatch(Actions["actionCreators"].OnlyToMain({
          type: Actions["actionTypes"].TELEMETRY_UNDESIRED_EVENT,
          data: {
            event: "FXA_METRICS_FETCH_ERROR",
            value: response.status
          }
        }));
      }
    } catch (error) {
      dispatch(Actions["actionCreators"].OnlyToMain({
        type: Actions["actionTypes"].TELEMETRY_UNDESIRED_EVENT,
        data: {
          event: "FXA_METRICS_ERROR"
        }
      }));
    }
  }

};
class FirstRun_FirstRun extends external_React_default.a.PureComponent {
  constructor(props) {
    super(props);
    this.didLoadFlowParams = false;
    this.state = {
      prevMessage: undefined,
      hasInterrupt: false,
      hasTriplets: false,
      interrupt: undefined,
      triplets: undefined,
      isInterruptVisible: false,
      isTripletsContainerVisible: false,
      isTripletsContentVisible: false,
      UTMTerm: "",
      flowParams: undefined
    };
    this.closeInterrupt = this.closeInterrupt.bind(this);
    this.closeTriplets = this.closeTriplets.bind(this);
    helpers.addFluent(this.props.document);
  }

  static getDerivedStateFromProps(props, state) {
    const {
      message
    } = props;

    if (message && message.id !== state.prevMessageId) {
      const {
        hasTriplets,
        hasInterrupt,
        interrupt,
        triplets,
        UTMTerm
      } = helpers.selectInterruptAndTriplets(message);
      return {
        prevMessageId: message.id,
        hasInterrupt,
        hasTriplets,
        interrupt,
        triplets,
        isInterruptVisible: hasInterrupt,
        isTripletsContainerVisible: hasTriplets,
        isTripletsContentVisible: !(hasInterrupt || !hasTriplets),
        UTMTerm
      };
    }

    return null;
  }

  fetchFlowParams() {
    const {
      fxaEndpoint,
      dispatch
    } = this.props;
    const {
      UTMTerm
    } = this.state;

    if (fxaEndpoint && UTMTerm && !this.didLoadFlowParams) {
      this.didLoadFlowParams = true;
      helpers.fetchFlowParams({
        fxaEndpoint,
        UTMTerm,
        dispatch,
        setFlowParams: flowParams => this.setState({
          flowParams
        })
      });
    }
  }

  removeHideMain() {
    if (!this.state.hasInterrupt) {
      // We need to remove hide-main since we should show it underneath everything that has rendered
      this.props.document.body.classList.remove("hide-main", "welcome");
    }
  }

  componentDidMount() {
    this.fetchFlowParams();
    this.removeHideMain();
  }

  componentDidUpdate() {
    // In case we didn't have FXA info immediately, try again when we receive it.
    this.fetchFlowParams();
    this.removeHideMain();
  }

  closeInterrupt() {
    this.setState(prevState => ({
      isInterruptVisible: false,
      isTripletsContainerVisible: prevState.hasTriplets,
      isTripletsContentVisible: prevState.hasTriplets
    }));
  }

  closeTriplets() {
    this.setState({
      isTripletsContainerVisible: false
    });
  }

  render() {
    const {
      props
    } = this;
    const {
      sendUserActionTelemetry,
      fxaEndpoint,
      dispatch,
      executeAction
    } = props;
    const {
      interrupt,
      triplets,
      isInterruptVisible,
      isTripletsContainerVisible,
      isTripletsContentVisible,
      hasTriplets,
      UTMTerm,
      flowParams
    } = this.state;
    return external_React_default.a.createElement(external_React_default.a.Fragment, null, isInterruptVisible ? external_React_default.a.createElement(Interrupt_Interrupt, {
      document: props.document,
      message: interrupt,
      onNextScene: this.closeInterrupt,
      UTMTerm: UTMTerm,
      sendUserActionTelemetry: sendUserActionTelemetry,
      dispatch: dispatch,
      flowParams: flowParams,
      onDismiss: this.closeInterrupt,
      fxaEndpoint: fxaEndpoint
    }) : null, hasTriplets ? external_React_default.a.createElement(Triplets["Triplets"], {
      document: props.document,
      cards: triplets,
      showCardPanel: isTripletsContainerVisible,
      showContent: isTripletsContentVisible,
      hideContainer: this.closeTriplets,
      sendUserActionTelemetry: sendUserActionTelemetry,
      UTMTerm: `${UTMTerm}-card`,
      flowParams: flowParams,
      onAction: executeAction
    }) : null);
  }

}

/***/ }),
/* 59 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

// EXTERNAL MODULE: ./common/Actions.jsm
var Actions = __webpack_require__(2);

// EXTERNAL MODULE: ./content-src/components/A11yLinkButton/A11yLinkButton.jsx
var A11yLinkButton = __webpack_require__(35);

// EXTERNAL MODULE: external "React"
var external_React_ = __webpack_require__(9);
var external_React_default = /*#__PURE__*/__webpack_require__.n(external_React_);

// EXTERNAL MODULE: ./content-src/components/TopSites/TopSitesConstants.js
var TopSitesConstants = __webpack_require__(47);

// CONCATENATED MODULE: ./content-src/components/TopSites/TopSiteFormInput.jsx
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */

class TopSiteFormInput_TopSiteFormInput extends external_React_default.a.PureComponent {
  constructor(props) {
    super(props);
    this.state = {
      validationError: this.props.validationError
    };
    this.onChange = this.onChange.bind(this);
    this.onMount = this.onMount.bind(this);
    this.onClearIconPress = this.onClearIconPress.bind(this);
  }

  componentWillReceiveProps(nextProps) {
    if (nextProps.shouldFocus && !this.props.shouldFocus) {
      this.input.focus();
    }

    if (nextProps.validationError && !this.props.validationError) {
      this.setState({
        validationError: true
      });
    } // If the component is in an error state but the value was cleared by the parent


    if (this.state.validationError && !nextProps.value) {
      this.setState({
        validationError: false
      });
    }
  }

  onClearIconPress(event) {
    // If there is input in the URL or custom image URL fields,
    // and we hit 'enter' while tabbed over the clear icon,
    // we should execute the function to clear the field.
    if (event.key === "Enter") {
      this.props.onClear();
    }
  }

  onChange(ev) {
    if (this.state.validationError) {
      this.setState({
        validationError: false
      });
    }

    this.props.onChange(ev);
  }

  onMount(input) {
    this.input = input;
  }

  renderLoadingOrCloseButton() {
    const showClearButton = this.props.value && this.props.onClear;

    if (this.props.loading) {
      return external_React_default.a.createElement("div", {
        className: "loading-container"
      }, external_React_default.a.createElement("div", {
        className: "loading-animation"
      }));
    } else if (showClearButton) {
      return external_React_default.a.createElement("button", {
        type: "button",
        className: "icon icon-clear-input icon-button-style",
        onClick: this.props.onClear,
        onKeyPress: this.onClearIconPress
      });
    }

    return null;
  }

  render() {
    const {
      typeUrl
    } = this.props;
    const {
      validationError
    } = this.state;
    return external_React_default.a.createElement("label", null, external_React_default.a.createElement("span", {
      "data-l10n-id": this.props.titleId
    }), external_React_default.a.createElement("div", {
      className: `field ${typeUrl ? "url" : ""}${validationError ? " invalid" : ""}`
    }, external_React_default.a.createElement("input", {
      type: "text",
      value: this.props.value,
      ref: this.onMount,
      onChange: this.onChange,
      "data-l10n-id": this.props.placeholderId // Set focus on error if the url field is valid or when the input is first rendered and is empty
      // eslint-disable-next-line jsx-a11y/no-autofocus
      ,
      autoFocus: this.props.shouldFocus,
      disabled: this.props.loading
    }), this.renderLoadingOrCloseButton(), validationError && external_React_default.a.createElement("aside", {
      className: "error-tooltip",
      "data-l10n-id": this.props.errorMessageId
    })));
  }

}
TopSiteFormInput_TopSiteFormInput.defaultProps = {
  showClearButton: false,
  value: "",
  validationError: false
};
// EXTERNAL MODULE: ./content-src/components/TopSites/TopSite.jsx
var TopSite = __webpack_require__(49);

// CONCATENATED MODULE: ./content-src/components/TopSites/TopSiteForm.jsx
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TopSiteForm", function() { return TopSiteForm_TopSiteForm; });
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */






class TopSiteForm_TopSiteForm extends external_React_default.a.PureComponent {
  constructor(props) {
    super(props);
    const {
      site
    } = props;
    this.state = {
      label: site ? site.label || site.hostname : "",
      url: site ? site.url : "",
      validationError: false,
      customScreenshotUrl: site ? site.customScreenshotURL : "",
      showCustomScreenshotForm: site ? site.customScreenshotURL : false
    };
    this.onClearScreenshotInput = this.onClearScreenshotInput.bind(this);
    this.onLabelChange = this.onLabelChange.bind(this);
    this.onUrlChange = this.onUrlChange.bind(this);
    this.onCancelButtonClick = this.onCancelButtonClick.bind(this);
    this.onClearUrlClick = this.onClearUrlClick.bind(this);
    this.onDoneButtonClick = this.onDoneButtonClick.bind(this);
    this.onCustomScreenshotUrlChange = this.onCustomScreenshotUrlChange.bind(this);
    this.onPreviewButtonClick = this.onPreviewButtonClick.bind(this);
    this.onEnableScreenshotUrlForm = this.onEnableScreenshotUrlForm.bind(this);
    this.validateUrl = this.validateUrl.bind(this);
  }

  onLabelChange(event) {
    this.setState({
      label: event.target.value
    });
  }

  onUrlChange(event) {
    this.setState({
      url: event.target.value,
      validationError: false
    });
  }

  onClearUrlClick() {
    this.setState({
      url: "",
      validationError: false
    });
  }

  onEnableScreenshotUrlForm() {
    this.setState({
      showCustomScreenshotForm: true
    });
  }

  _updateCustomScreenshotInput(customScreenshotUrl) {
    this.setState({
      customScreenshotUrl,
      validationError: false
    });
    this.props.dispatch({
      type: Actions["actionTypes"].PREVIEW_REQUEST_CANCEL
    });
  }

  onCustomScreenshotUrlChange(event) {
    this._updateCustomScreenshotInput(event.target.value);
  }

  onClearScreenshotInput() {
    this._updateCustomScreenshotInput("");
  }

  onCancelButtonClick(ev) {
    ev.preventDefault();
    this.props.onClose();
  }

  onDoneButtonClick(ev) {
    ev.preventDefault();

    if (this.validateForm()) {
      const site = {
        url: this.cleanUrl(this.state.url)
      };
      const {
        index
      } = this.props;

      if (this.state.label !== "") {
        site.label = this.state.label;
      }

      if (this.state.customScreenshotUrl) {
        site.customScreenshotURL = this.cleanUrl(this.state.customScreenshotUrl);
      } else if (this.props.site && this.props.site.customScreenshotURL) {
        // Used to flag that previously cached screenshot should be removed
        site.customScreenshotURL = null;
      }

      this.props.dispatch(Actions["actionCreators"].AlsoToMain({
        type: Actions["actionTypes"].TOP_SITES_PIN,
        data: {
          site,
          index
        }
      }));
      this.props.dispatch(Actions["actionCreators"].UserEvent({
        source: TopSitesConstants["TOP_SITES_SOURCE"],
        event: "TOP_SITES_EDIT",
        action_position: index
      }));
      this.props.onClose();
    }
  }

  onPreviewButtonClick(event) {
    event.preventDefault();

    if (this.validateForm()) {
      this.props.dispatch(Actions["actionCreators"].AlsoToMain({
        type: Actions["actionTypes"].PREVIEW_REQUEST,
        data: {
          url: this.cleanUrl(this.state.customScreenshotUrl)
        }
      }));
      this.props.dispatch(Actions["actionCreators"].UserEvent({
        source: TopSitesConstants["TOP_SITES_SOURCE"],
        event: "PREVIEW_REQUEST"
      }));
    }
  }

  cleanUrl(url) {
    // If we are missing a protocol, prepend http://
    if (!url.startsWith("http:") && !url.startsWith("https:")) {
      return `http://${url}`;
    }

    return url;
  }

  _tryParseUrl(url) {
    try {
      return new URL(url);
    } catch (e) {
      return null;
    }
  }

  validateUrl(url) {
    const validProtocols = ["http:", "https:"];

    const urlObj = this._tryParseUrl(url) || this._tryParseUrl(this.cleanUrl(url));

    return urlObj && validProtocols.includes(urlObj.protocol);
  }

  validateCustomScreenshotUrl() {
    const {
      customScreenshotUrl
    } = this.state;
    return !customScreenshotUrl || this.validateUrl(customScreenshotUrl);
  }

  validateForm() {
    const validate = this.validateUrl(this.state.url) && this.validateCustomScreenshotUrl();

    if (!validate) {
      this.setState({
        validationError: true
      });
    }

    return validate;
  }

  _renderCustomScreenshotInput() {
    const {
      customScreenshotUrl
    } = this.state;
    const requestFailed = this.props.previewResponse === "";
    const validationError = this.state.validationError && !this.validateCustomScreenshotUrl() || requestFailed; // Set focus on error if the url field is valid or when the input is first rendered and is empty

    const shouldFocus = validationError && this.validateUrl(this.state.url) || !customScreenshotUrl;
    const isLoading = this.props.previewResponse === null && customScreenshotUrl && this.props.previewUrl === this.cleanUrl(customScreenshotUrl);

    if (!this.state.showCustomScreenshotForm) {
      return external_React_default.a.createElement(A11yLinkButton["A11yLinkButton"], {
        onClick: this.onEnableScreenshotUrlForm,
        className: "enable-custom-image-input",
        "data-l10n-id": "newtab-topsites-use-image-link"
      });
    }

    return external_React_default.a.createElement("div", {
      className: "custom-image-input-container"
    }, external_React_default.a.createElement(TopSiteFormInput_TopSiteFormInput, {
      errorMessageId: requestFailed ? "newtab-topsites-image-validation" : "newtab-topsites-url-validation",
      loading: isLoading,
      onChange: this.onCustomScreenshotUrlChange,
      onClear: this.onClearScreenshotInput,
      shouldFocus: shouldFocus,
      typeUrl: true,
      value: customScreenshotUrl,
      validationError: validationError,
      titleId: "newtab-topsites-image-url-label",
      placeholderId: "newtab-topsites-url-input"
    }));
  }

  render() {
    const {
      customScreenshotUrl
    } = this.state;
    const requestFailed = this.props.previewResponse === ""; // For UI purposes, editing without an existing link is "add"

    const showAsAdd = !this.props.site;
    const previous = this.props.site && this.props.site.customScreenshotURL || "";
    const changed = customScreenshotUrl && this.cleanUrl(customScreenshotUrl) !== previous; // Preview mode if changes were made to the custom screenshot URL and no preview was received yet
    // or the request failed

    const previewMode = changed && !this.props.previewResponse;
    const previewLink = Object.assign({}, this.props.site);

    if (this.props.previewResponse) {
      previewLink.screenshot = this.props.previewResponse;
      previewLink.customScreenshotURL = this.props.previewUrl;
    } // Handles the form submit so an enter press performs the correct action


    const onSubmit = previewMode ? this.onPreviewButtonClick : this.onDoneButtonClick;
    return external_React_default.a.createElement("form", {
      className: "topsite-form",
      onSubmit: onSubmit
    }, external_React_default.a.createElement("div", {
      className: "form-input-container"
    }, external_React_default.a.createElement("h3", {
      className: "section-title grey-title",
      "data-l10n-id": showAsAdd ? "newtab-topsites-add-topsites-header" : "newtab-topsites-edit-topsites-header"
    }), external_React_default.a.createElement("div", {
      className: "fields-and-preview"
    }, external_React_default.a.createElement("div", {
      className: "form-wrapper"
    }, external_React_default.a.createElement(TopSiteFormInput_TopSiteFormInput, {
      onChange: this.onLabelChange,
      value: this.state.label,
      titleId: "newtab-topsites-title-label",
      placeholderId: "newtab-topsites-title-input"
    }), external_React_default.a.createElement(TopSiteFormInput_TopSiteFormInput, {
      onChange: this.onUrlChange,
      shouldFocus: this.state.validationError && !this.validateUrl(this.state.url),
      value: this.state.url,
      onClear: this.onClearUrlClick,
      validationError: this.state.validationError && !this.validateUrl(this.state.url),
      titleId: "newtab-topsites-url-label",
      typeUrl: true,
      placeholderId: "newtab-topsites-url-input",
      errorMessageId: "newtab-topsites-url-validation"
    }), this._renderCustomScreenshotInput()), external_React_default.a.createElement(TopSite["TopSiteLink"], {
      link: previewLink,
      defaultStyle: requestFailed,
      title: this.state.label
    }))), external_React_default.a.createElement("section", {
      className: "actions"
    }, external_React_default.a.createElement("button", {
      className: "cancel",
      type: "button",
      onClick: this.onCancelButtonClick,
      "data-l10n-id": "newtab-topsites-cancel-button"
    }), previewMode ? external_React_default.a.createElement("button", {
      className: "done preview",
      type: "submit",
      "data-l10n-id": "newtab-topsites-preview-button"
    }) : external_React_default.a.createElement("button", {
      className: "done",
      type: "submit",
      "data-l10n-id": showAsAdd ? "newtab-topsites-add-button" : "newtab-topsites-save-button"
    })));
  }

}
TopSiteForm_TopSiteForm.defaultProps = {
  site: null,
  index: -1
};

/***/ }),
/* 60 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

// EXTERNAL MODULE: ./common/Actions.jsm
var Actions = __webpack_require__(2);

// EXTERNAL MODULE: external "ReactRedux"
var external_ReactRedux_ = __webpack_require__(27);

// EXTERNAL MODULE: ./content-src/components/ContextMenu/ContextMenu.jsx
var ContextMenu = __webpack_require__(30);

// CONCATENATED MODULE: ./content-src/lib/link-menu-options.js
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */


const _OpenInPrivateWindow = site => ({
  id: "newtab-menu-open-new-private-window",
  icon: "new-window-private",
  action: Actions["actionCreators"].OnlyToMain({
    type: Actions["actionTypes"].OPEN_PRIVATE_WINDOW,
    data: {
      url: site.url,
      referrer: site.referrer
    }
  }),
  userEvent: "OPEN_PRIVATE_WINDOW"
});
/**
 * List of functions that return items that can be included as menu options in a
 * LinkMenu. All functions take the site as the first parameter, and optionally
 * the index of the site.
 */


const LinkMenuOptions = {
  Separator: () => ({
    type: "separator"
  }),
  EmptyItem: () => ({
    type: "empty"
  }),
  RemoveBookmark: site => ({
    id: "newtab-menu-remove-bookmark",
    icon: "bookmark-added",
    action: Actions["actionCreators"].AlsoToMain({
      type: Actions["actionTypes"].DELETE_BOOKMARK_BY_ID,
      data: site.bookmarkGuid
    }),
    userEvent: "BOOKMARK_DELETE"
  }),
  AddBookmark: site => ({
    id: "newtab-menu-bookmark",
    icon: "bookmark-hollow",
    action: Actions["actionCreators"].AlsoToMain({
      type: Actions["actionTypes"].BOOKMARK_URL,
      data: {
        url: site.url,
        title: site.title,
        type: site.type
      }
    }),
    userEvent: "BOOKMARK_ADD"
  }),
  OpenInNewWindow: site => ({
    id: "newtab-menu-open-new-window",
    icon: "new-window",
    action: Actions["actionCreators"].AlsoToMain({
      type: Actions["actionTypes"].OPEN_NEW_WINDOW,
      data: {
        referrer: site.referrer,
        typedBonus: site.typedBonus,
        url: site.url
      }
    }),
    userEvent: "OPEN_NEW_WINDOW"
  }),
  BlockUrl: (site, index, eventSource) => ({
    id: "newtab-menu-dismiss",
    icon: "dismiss",
    action: Actions["actionCreators"].AlsoToMain({
      type: Actions["actionTypes"].BLOCK_URL,
      data: {
        url: site.open_url || site.url,
        pocket_id: site.pocket_id
      }
    }),
    impression: Actions["actionCreators"].ImpressionStats({
      source: eventSource,
      block: 0,
      tiles: [{
        id: site.guid,
        pos: index,
        ...(site.shim && site.shim.delete ? {
          shim: site.shim.delete
        } : {})
      }]
    }),
    userEvent: "BLOCK"
  }),
  // This is an option for web extentions which will result in remove items from
  // memory and notify the web extenion, rather than using the built-in block list.
  WebExtDismiss: (site, index, eventSource) => ({
    id: "menu_action_webext_dismiss",
    string_id: "newtab-menu-dismiss",
    icon: "dismiss",
    action: Actions["actionCreators"].WebExtEvent(Actions["actionTypes"].WEBEXT_DISMISS, {
      source: eventSource,
      url: site.url,
      action_position: index
    })
  }),
  DeleteUrl: (site, index, eventSource, isEnabled, siteInfo) => ({
    id: "newtab-menu-delete-history",
    icon: "delete",
    action: {
      type: Actions["actionTypes"].DIALOG_OPEN,
      data: {
        onConfirm: [Actions["actionCreators"].AlsoToMain({
          type: Actions["actionTypes"].DELETE_HISTORY_URL,
          data: {
            url: site.url,
            pocket_id: site.pocket_id,
            forceBlock: site.bookmarkGuid
          }
        }), Actions["actionCreators"].UserEvent(Object.assign({
          event: "DELETE",
          source: eventSource,
          action_position: index
        }, siteInfo))],
        eventSource,
        body_string_id: ["newtab-confirm-delete-history-p1", "newtab-confirm-delete-history-p2"],
        confirm_button_string_id: "newtab-topsites-delete-history-button",
        cancel_button_string_id: "newtab-topsites-cancel-button",
        icon: "modal-delete"
      }
    },
    userEvent: "DIALOG_OPEN"
  }),
  ShowFile: site => ({
    id: "newtab-menu-show-file",
    icon: "search",
    action: Actions["actionCreators"].OnlyToMain({
      type: Actions["actionTypes"].SHOW_DOWNLOAD_FILE,
      data: {
        url: site.url
      }
    })
  }),
  OpenFile: site => ({
    id: "newtab-menu-open-file",
    icon: "open-file",
    action: Actions["actionCreators"].OnlyToMain({
      type: Actions["actionTypes"].OPEN_DOWNLOAD_FILE,
      data: {
        url: site.url
      }
    })
  }),
  CopyDownloadLink: site => ({
    id: "newtab-menu-copy-download-link",
    icon: "copy",
    action: Actions["actionCreators"].OnlyToMain({
      type: Actions["actionTypes"].COPY_DOWNLOAD_LINK,
      data: {
        url: site.url
      }
    })
  }),
  GoToDownloadPage: site => ({
    id: "newtab-menu-go-to-download-page",
    icon: "download",
    action: Actions["actionCreators"].OnlyToMain({
      type: Actions["actionTypes"].OPEN_LINK,
      data: {
        url: site.referrer
      }
    }),
    disabled: !site.referrer
  }),
  RemoveDownload: site => ({
    id: "newtab-menu-remove-download",
    icon: "delete",
    action: Actions["actionCreators"].OnlyToMain({
      type: Actions["actionTypes"].REMOVE_DOWNLOAD_FILE,
      data: {
        url: site.url
      }
    })
  }),
  PinTopSite: ({
    url,
    searchTopSite,
    label
  }, index) => ({
    id: "newtab-menu-pin",
    icon: "pin",
    action: Actions["actionCreators"].AlsoToMain({
      type: Actions["actionTypes"].TOP_SITES_PIN,
      data: {
        site: {
          url,
          ...(searchTopSite && {
            searchTopSite,
            label
          })
        },
        index
      }
    }),
    userEvent: "PIN"
  }),
  UnpinTopSite: site => ({
    id: "newtab-menu-unpin",
    icon: "unpin",
    action: Actions["actionCreators"].AlsoToMain({
      type: Actions["actionTypes"].TOP_SITES_UNPIN,
      data: {
        site: {
          url: site.url
        }
      }
    }),
    userEvent: "UNPIN"
  }),
  SaveToPocket: (site, index, eventSource) => ({
    id: "newtab-menu-save-to-pocket",
    icon: "pocket-save",
    action: Actions["actionCreators"].AlsoToMain({
      type: Actions["actionTypes"].SAVE_TO_POCKET,
      data: {
        site: {
          url: site.url,
          title: site.title
        }
      }
    }),
    impression: Actions["actionCreators"].ImpressionStats({
      source: eventSource,
      pocket: 0,
      tiles: [{
        id: site.guid,
        pos: index,
        ...(site.shim && site.shim.save ? {
          shim: site.shim.save
        } : {})
      }]
    }),
    userEvent: "SAVE_TO_POCKET"
  }),
  DeleteFromPocket: site => ({
    id: "newtab-menu-delete-pocket",
    icon: "pocket-delete",
    action: Actions["actionCreators"].AlsoToMain({
      type: Actions["actionTypes"].DELETE_FROM_POCKET,
      data: {
        pocket_id: site.pocket_id
      }
    }),
    userEvent: "DELETE_FROM_POCKET"
  }),
  ArchiveFromPocket: site => ({
    id: "newtab-menu-archive-pocket",
    icon: "pocket-archive",
    action: Actions["actionCreators"].AlsoToMain({
      type: Actions["actionTypes"].ARCHIVE_FROM_POCKET,
      data: {
        pocket_id: site.pocket_id
      }
    }),
    userEvent: "ARCHIVE_FROM_POCKET"
  }),
  EditTopSite: (site, index) => ({
    id: "newtab-menu-edit-topsites",
    icon: "edit",
    action: {
      type: Actions["actionTypes"].TOP_SITES_EDIT,
      data: {
        index
      }
    }
  }),
  CheckBookmark: site => site.bookmarkGuid ? LinkMenuOptions.RemoveBookmark(site) : LinkMenuOptions.AddBookmark(site),
  CheckPinTopSite: (site, index) => site.isPinned ? LinkMenuOptions.UnpinTopSite(site) : LinkMenuOptions.PinTopSite(site, index),
  CheckSavedToPocket: (site, index) => site.pocket_id ? LinkMenuOptions.DeleteFromPocket(site) : LinkMenuOptions.SaveToPocket(site, index),
  CheckBookmarkOrArchive: site => site.pocket_id ? LinkMenuOptions.ArchiveFromPocket(site) : LinkMenuOptions.CheckBookmark(site),
  OpenInPrivateWindow: (site, index, eventSource, isEnabled) => isEnabled ? _OpenInPrivateWindow(site) : LinkMenuOptions.EmptyItem()
};
// EXTERNAL MODULE: external "React"
var external_React_ = __webpack_require__(9);
var external_React_default = /*#__PURE__*/__webpack_require__.n(external_React_);

// CONCATENATED MODULE: ./content-src/components/LinkMenu/LinkMenu.jsx
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_LinkMenu", function() { return LinkMenu_LinkMenu; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LinkMenu", function() { return LinkMenu; });
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */





const DEFAULT_SITE_MENU_OPTIONS = ["CheckPinTopSite", "EditTopSite", "Separator", "OpenInNewWindow", "OpenInPrivateWindow", "Separator", "BlockUrl"];
class LinkMenu_LinkMenu extends external_React_default.a.PureComponent {
  getOptions() {
    const {
      props
    } = this;
    const {
      site,
      index,
      source,
      isPrivateBrowsingEnabled,
      siteInfo,
      platform
    } = props; // Handle special case of default site

    const propOptions = !site.isDefault || site.searchTopSite ? props.options : DEFAULT_SITE_MENU_OPTIONS;
    const options = propOptions.map(o => LinkMenuOptions[o](site, index, source, isPrivateBrowsingEnabled, siteInfo, platform)).map(option => {
      const {
        action,
        impression,
        id,
        type,
        userEvent
      } = option;

      if (!type && id) {
        option.onClick = () => {
          props.dispatch(action);

          if (userEvent) {
            const userEventData = Object.assign({
              event: userEvent,
              source,
              action_position: index
            }, siteInfo);
            props.dispatch(Actions["actionCreators"].UserEvent(userEventData));
          }

          if (impression && props.shouldSendImpressionStats) {
            props.dispatch(impression);
          }
        };
      }

      return option;
    }); // This is for accessibility to support making each item tabbable.
    // We want to know which item is the first and which item
    // is the last, so we can close the context menu accordingly.

    options[0].first = true;
    options[options.length - 1].last = true;
    return options;
  }

  render() {
    return external_React_default.a.createElement(ContextMenu["ContextMenu"], {
      onUpdate: this.props.onUpdate,
      onShow: this.props.onShow,
      options: this.getOptions(),
      keyboardAccess: this.props.keyboardAccess
    });
  }

}

const getState = state => ({
  isPrivateBrowsingEnabled: state.Prefs.values.isPrivateBrowsingEnabled,
  platform: state.Prefs.values.platform
});

const LinkMenu = Object(external_ReactRedux_["connect"])(getState)(LinkMenu_LinkMenu);

/***/ }),
/* 61 */
/***/ (function(module, exports) {

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

module.exports = _interopRequireDefault;

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = hasClass;

function hasClass(element, className) {
  if (element.classList) return !!className && element.classList.contains(className);else return (" " + (element.className.baseVal || element.className) + " ").indexOf(" " + className + " ") !== -1;
}

module.exports = exports["default"];

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function replaceClassName(origClass, classToRemove) {
  return origClass.replace(new RegExp('(^|\\s)' + classToRemove + '(?:\\s|$)', 'g'), '$1').replace(/\s+/g, ' ').replace(/^\s*|\s*$/g, '');
}

module.exports = function removeClass(element, className) {
  if (element.classList) element.classList.remove(className);else if (typeof element.className === 'string') element.className = replaceClassName(element.className, className);else element.setAttribute('class', replaceClassName(element.className && element.className.baseVal || '', className));
};

/***/ }),
/* 64 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

// EXTERNAL MODULE: ./common/Actions.jsm
var Actions = __webpack_require__(2);

// EXTERNAL MODULE: external "React"
var external_React_ = __webpack_require__(9);
var external_React_default = /*#__PURE__*/__webpack_require__.n(external_React_);

// EXTERNAL MODULE: external "ReactDOM"
var external_ReactDOM_ = __webpack_require__(12);
var external_ReactDOM_default = /*#__PURE__*/__webpack_require__.n(external_ReactDOM_);

// CONCATENATED MODULE: ./content-src/components/DiscoveryStreamComponents/DSImage/DSImage.jsx
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */


class DSImage_DSImage extends external_React_default.a.PureComponent {
  constructor(props) {
    super(props);
    this.onOptimizedImageError = this.onOptimizedImageError.bind(this);
    this.onNonOptimizedImageError = this.onNonOptimizedImageError.bind(this);
    this.state = {
      isSeen: false,
      optimizedImageFailed: false
    };
  }

  onSeen(entries) {
    if (this.state) {
      if (entries.some(entry => entry.isIntersecting)) {
        if (this.props.optimize) {
          this.setState({
            containerWidth: external_ReactDOM_default.a.findDOMNode(this).clientWidth,
            containerHeight: external_ReactDOM_default.a.findDOMNode(this).clientHeight
          });
        }

        this.setState({
          isSeen: true
        }); // Stop observing since element has been seen

        this.observer.unobserve(external_ReactDOM_default.a.findDOMNode(this));
      }
    }
  }

  reformatImageURL(url, width, height) {
    // Change the image URL to request a size tailored for the parent container width
    // Also: force JPEG, quality 60, no upscaling, no EXIF data
    // Uses Thumbor: https://thumbor.readthedocs.io/en/latest/usage.html
    return `https://img-getpocket.cdn.mozilla.net/${width}x${height}/filters:format(jpeg):quality(60):no_upscale():strip_exif()/${encodeURIComponent(url)}`;
  }

  componentDidMount() {
    this.observer = new IntersectionObserver(this.onSeen.bind(this));
    this.observer.observe(external_ReactDOM_default.a.findDOMNode(this));
  }

  componentWillUnmount() {
    // Remove observer on unmount
    if (this.observer) {
      this.observer.unobserve(external_ReactDOM_default.a.findDOMNode(this));
    }
  }

  render() {
    const classNames = `ds-image${this.props.extraClassNames ? ` ${this.props.extraClassNames}` : ``}`;
    let img;

    if (this.state && this.state.isSeen) {
      if (this.props.optimize && this.props.rawSource && !this.state.optimizedImageFailed) {
        let source;
        let source2x;

        if (this.state && this.state.containerWidth) {
          let baseSource = this.props.rawSource;
          source = this.reformatImageURL(baseSource, this.state.containerWidth, this.state.containerHeight);
          source2x = this.reformatImageURL(baseSource, this.state.containerWidth * 2, this.state.containerHeight * 2);
          img = external_React_default.a.createElement("img", {
            alt: "",
            crossOrigin: "anonymous",
            onError: this.onOptimizedImageError,
            src: source,
            srcSet: `${source2x} 2x`
          });
        }
      } else if (!this.state.nonOptimizedImageFailed) {
        img = external_React_default.a.createElement("img", {
          alt: "",
          crossOrigin: "anonymous",
          onError: this.onNonOptimizedImageError,
          src: this.props.source
        });
      } else {
        // Remove the img element if both sources fail. Render a placeholder instead.
        img = external_React_default.a.createElement("div", {
          className: "broken-image"
        });
      }
    }

    return external_React_default.a.createElement("picture", {
      className: classNames
    }, img);
  }

  onOptimizedImageError() {
    // This will trigger a re-render and the unoptimized 450px image will be used as a fallback
    this.setState({
      optimizedImageFailed: true
    });
  }

  onNonOptimizedImageError() {
    this.setState({
      nonOptimizedImageFailed: true
    });
  }

}
DSImage_DSImage.defaultProps = {
  source: null,
  // The current source style from Pocket API (always 450px)
  rawSource: null,
  // Unadulterated image URL to filter through Thumbor
  extraClassNames: null,
  // Additional classnames to append to component
  optimize: true // Measure parent container to request exact sizes

};
// EXTERNAL MODULE: ./content-src/components/LinkMenu/LinkMenu.jsx + 1 modules
var LinkMenu = __webpack_require__(60);

// EXTERNAL MODULE: ./content-src/components/ContextMenu/ContextMenuButton.jsx
var ContextMenuButton = __webpack_require__(31);

// CONCATENATED MODULE: ./content-src/components/DiscoveryStreamComponents/DSLinkMenu/DSLinkMenu.jsx
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */



class DSLinkMenu_DSLinkMenu extends external_React_default.a.PureComponent {
  constructor(props) {
    super(props);
    this.windowObj = this.props.windowObj || window; // Added to support unit tests

    this.onMenuUpdate = this.onMenuUpdate.bind(this);
    this.onMenuShow = this.onMenuShow.bind(this);
    this.contextMenuButtonRef = external_React_default.a.createRef();
  }

  onMenuUpdate(showContextMenu) {
    if (!showContextMenu) {
      const dsLinkMenuHostDiv = this.contextMenuButtonRef.current.parentElement;
      dsLinkMenuHostDiv.parentElement.classList.remove("active", "last-item");
    }
  }

  nextAnimationFrame() {
    return new Promise(resolve => requestAnimationFrame(resolve));
  }

  async onMenuShow() {
    const dsLinkMenuHostDiv = this.contextMenuButtonRef.current.parentElement; // Wait for next frame before computing scrollMaxX to allow fluent menu strings to be visible

    await this.nextAnimationFrame();

    if (this.windowObj.scrollMaxX > 0) {
      dsLinkMenuHostDiv.parentElement.classList.add("last-item");
    }

    dsLinkMenuHostDiv.parentElement.classList.add("active");
  }

  render() {
    const {
      index,
      dispatch
    } = this.props;
    const TOP_STORIES_CONTEXT_MENU_OPTIONS = ["CheckBookmarkOrArchive", "CheckSavedToPocket", "Separator", "OpenInNewWindow", "OpenInPrivateWindow", "Separator", "BlockUrl"];
    const type = this.props.type || "DISCOVERY_STREAM";
    const title = this.props.title || this.props.source;
    return external_React_default.a.createElement("div", null, external_React_default.a.createElement(ContextMenuButton["ContextMenuButton"], {
      refFunction: this.contextMenuButtonRef,
      tooltip: "newtab-menu-content-tooltip",
      tooltipArgs: {
        title
      },
      onUpdate: this.onMenuUpdate
    }, external_React_default.a.createElement(LinkMenu["LinkMenu"], {
      dispatch: dispatch,
      index: index,
      source: type.toUpperCase(),
      onShow: this.onMenuShow,
      options: TOP_STORIES_CONTEXT_MENU_OPTIONS,
      shouldSendImpressionStats: true,
      site: {
        referrer: "https://getpocket.com/recommendations",
        title: this.props.title,
        type: this.props.type,
        url: this.props.url,
        guid: this.props.id,
        pocket_id: this.props.pocket_id,
        shim: this.props.shim,
        bookmarkGuid: this.props.bookmarkGuid
      }
    })));
  }

}
// EXTERNAL MODULE: ./content-src/components/DiscoveryStreamImpressionStats/ImpressionStats.jsx
var ImpressionStats = __webpack_require__(32);

// CONCATENATED MODULE: ./content-src/components/DiscoveryStreamComponents/SafeAnchor/SafeAnchor.jsx
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */


class SafeAnchor_SafeAnchor extends external_React_default.a.PureComponent {
  constructor(props) {
    super(props);
    this.onClick = this.onClick.bind(this);
  }

  onClick(event) {
    // Use dispatch instead of normal link click behavior to include referrer
    if (this.props.dispatch) {
      event.preventDefault();
      const {
        altKey,
        button,
        ctrlKey,
        metaKey,
        shiftKey
      } = event;
      this.props.dispatch(Actions["actionCreators"].OnlyToMain({
        type: Actions["actionTypes"].OPEN_LINK,
        data: {
          event: {
            altKey,
            button,
            ctrlKey,
            metaKey,
            shiftKey
          },
          referrer: "https://getpocket.com/recommendations",
          // Use the anchor's url, which could have been cleaned up
          url: event.currentTarget.href
        }
      }));
    } // Propagate event if there's a handler


    if (this.props.onLinkClick) {
      this.props.onLinkClick(event);
    }
  }

  safeURI(url) {
    let protocol = null;

    try {
      protocol = new URL(url).protocol;
    } catch (e) {
      return "";
    }

    const isAllowed = ["http:", "https:"].includes(protocol);

    if (!isAllowed) {
      console.warn(`${url} is not allowed for anchor targets.`); // eslint-disable-line no-console

      return "";
    }

    return url;
  }

  render() {
    const {
      url,
      className
    } = this.props;
    return external_React_default.a.createElement("a", {
      href: this.safeURI(url),
      className: className,
      onClick: this.onClick
    }, this.props.children);
  }

}
// CONCATENATED MODULE: ./node_modules/react-transition-group/node_modules/@babel/runtime/helpers/esm/extends.js
function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}
// CONCATENATED MODULE: ./node_modules/react-transition-group/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}
// CONCATENATED MODULE: ./node_modules/react-transition-group/node_modules/@babel/runtime/helpers/esm/inheritsLoose.js
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}
// EXTERNAL MODULE: external "PropTypes"
var external_PropTypes_ = __webpack_require__(10);
var external_PropTypes_default = /*#__PURE__*/__webpack_require__.n(external_PropTypes_);

// EXTERNAL MODULE: ./node_modules/dom-helpers/class/addClass.js
var class_addClass = __webpack_require__(52);
var addClass_default = /*#__PURE__*/__webpack_require__.n(class_addClass);

// EXTERNAL MODULE: ./node_modules/dom-helpers/class/removeClass.js
var class_removeClass = __webpack_require__(63);
var removeClass_default = /*#__PURE__*/__webpack_require__.n(class_removeClass);

// CONCATENATED MODULE: ./node_modules/react-transition-group/esm/config.js
/* harmony default export */ var esm_config = ({
  disabled: false
});
// CONCATENATED MODULE: ./node_modules/react-transition-group/esm/utils/PropTypes.js

var timeoutsShape =  true ? external_PropTypes_default.a.oneOfType([external_PropTypes_default.a.number, external_PropTypes_default.a.shape({
  enter: external_PropTypes_default.a.number,
  exit: external_PropTypes_default.a.number,
  appear: external_PropTypes_default.a.number
}).isRequired]) : undefined;
var classNamesShape =  true ? external_PropTypes_default.a.oneOfType([external_PropTypes_default.a.string, external_PropTypes_default.a.shape({
  enter: external_PropTypes_default.a.string,
  exit: external_PropTypes_default.a.string,
  active: external_PropTypes_default.a.string
}), external_PropTypes_default.a.shape({
  enter: external_PropTypes_default.a.string,
  enterDone: external_PropTypes_default.a.string,
  enterActive: external_PropTypes_default.a.string,
  exit: external_PropTypes_default.a.string,
  exitDone: external_PropTypes_default.a.string,
  exitActive: external_PropTypes_default.a.string
})]) : undefined;
// CONCATENATED MODULE: ./node_modules/react-transition-group/esm/TransitionGroupContext.js

/* harmony default export */ var TransitionGroupContext = (external_React_default.a.createContext(null));
// CONCATENATED MODULE: ./node_modules/react-transition-group/esm/Transition.js








var UNMOUNTED = 'unmounted';
var EXITED = 'exited';
var ENTERING = 'entering';
var ENTERED = 'entered';
var EXITING = 'exiting';
/**
 * The Transition component lets you describe a transition from one component
 * state to another _over time_ with a simple declarative API. Most commonly
 * it's used to animate the mounting and unmounting of a component, but can also
 * be used to describe in-place transition states as well.
 *
 * ---
 *
 * **Note**: `Transition` is a platform-agnostic base component. If you're using
 * transitions in CSS, you'll probably want to use
 * [`CSSTransition`](https://reactcommunity.org/react-transition-group/css-transition)
 * instead. It inherits all the features of `Transition`, but contains
 * additional features necessary to play nice with CSS transitions (hence the
 * name of the component).
 *
 * ---
 *
 * By default the `Transition` component does not alter the behavior of the
 * component it renders, it only tracks "enter" and "exit" states for the
 * components. It's up to you to give meaning and effect to those states. For
 * example we can add styles to a component when it enters or exits:
 *
 * ```jsx
 * import { Transition } from 'react-transition-group';
 *
 * const duration = 300;
 *
 * const defaultStyle = {
 *   transition: `opacity ${duration}ms ease-in-out`,
 *   opacity: 0,
 * }
 *
 * const transitionStyles = {
 *   entering: { opacity: 1 },
 *   entered:  { opacity: 1 },
 *   exiting:  { opacity: 0 },
 *   exited:  { opacity: 0 },
 * };
 *
 * const Fade = ({ in: inProp }) => (
 *   <Transition in={inProp} timeout={duration}>
 *     {state => (
 *       <div style={{
 *         ...defaultStyle,
 *         ...transitionStyles[state]
 *       }}>
 *         I'm a fade Transition!
 *       </div>
 *     )}
 *   </Transition>
 * );
 * ```
 *
 * There are 4 main states a Transition can be in:
 *  - `'entering'`
 *  - `'entered'`
 *  - `'exiting'`
 *  - `'exited'`
 *
 * Transition state is toggled via the `in` prop. When `true` the component
 * begins the "Enter" stage. During this stage, the component will shift from
 * its current transition state, to `'entering'` for the duration of the
 * transition and then to the `'entered'` stage once it's complete. Let's take
 * the following example (we'll use the
 * [useState](https://reactjs.org/docs/hooks-reference.html#usestate) hook):
 *
 * ```jsx
 * function App() {
 *   const [inProp, setInProp] = useState(false);
 *   return (
 *     <div>
 *       <Transition in={inProp} timeout={500}>
 *         {state => (
 *           // ...
 *         )}
 *       </Transition>
 *       <button onClick={() => setInProp(true)}>
 *         Click to Enter
 *       </button>
 *     </div>
 *   );
 * }
 * ```
 *
 * When the button is clicked the component will shift to the `'entering'` state
 * and stay there for 500ms (the value of `timeout`) before it finally switches
 * to `'entered'`.
 *
 * When `in` is `false` the same thing happens except the state moves from
 * `'exiting'` to `'exited'`.
 */

var Transition_Transition =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(Transition, _React$Component);

  function Transition(props, context) {
    var _this;

    _this = _React$Component.call(this, props, context) || this;
    var parentGroup = context; // In the context of a TransitionGroup all enters are really appears

    var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
    var initialStatus;
    _this.appearStatus = null;

    if (props.in) {
      if (appear) {
        initialStatus = EXITED;
        _this.appearStatus = ENTERING;
      } else {
        initialStatus = ENTERED;
      }
    } else {
      if (props.unmountOnExit || props.mountOnEnter) {
        initialStatus = UNMOUNTED;
      } else {
        initialStatus = EXITED;
      }
    }

    _this.state = {
      status: initialStatus
    };
    _this.nextCallback = null;
    return _this;
  }

  Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
    var nextIn = _ref.in;

    if (nextIn && prevState.status === UNMOUNTED) {
      return {
        status: EXITED
      };
    }

    return null;
  }; // getSnapshotBeforeUpdate(prevProps) {
  //   let nextStatus = null
  //   if (prevProps !== this.props) {
  //     const { status } = this.state
  //     if (this.props.in) {
  //       if (status !== ENTERING && status !== ENTERED) {
  //         nextStatus = ENTERING
  //       }
  //     } else {
  //       if (status === ENTERING || status === ENTERED) {
  //         nextStatus = EXITING
  //       }
  //     }
  //   }
  //   return { nextStatus }
  // }


  var _proto = Transition.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this.updateStatus(true, this.appearStatus);
  };

  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    var nextStatus = null;

    if (prevProps !== this.props) {
      var status = this.state.status;

      if (this.props.in) {
        if (status !== ENTERING && status !== ENTERED) {
          nextStatus = ENTERING;
        }
      } else {
        if (status === ENTERING || status === ENTERED) {
          nextStatus = EXITING;
        }
      }
    }

    this.updateStatus(false, nextStatus);
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    this.cancelNextCallback();
  };

  _proto.getTimeouts = function getTimeouts() {
    var timeout = this.props.timeout;
    var exit, enter, appear;
    exit = enter = appear = timeout;

    if (timeout != null && typeof timeout !== 'number') {
      exit = timeout.exit;
      enter = timeout.enter; // TODO: remove fallback for next major

      appear = timeout.appear !== undefined ? timeout.appear : enter;
    }

    return {
      exit: exit,
      enter: enter,
      appear: appear
    };
  };

  _proto.updateStatus = function updateStatus(mounting, nextStatus) {
    if (mounting === void 0) {
      mounting = false;
    }

    if (nextStatus !== null) {
      // nextStatus will always be ENTERING or EXITING.
      this.cancelNextCallback();
      var node = external_ReactDOM_default.a.findDOMNode(this);

      if (nextStatus === ENTERING) {
        this.performEnter(node, mounting);
      } else {
        this.performExit(node);
      }
    } else if (this.props.unmountOnExit && this.state.status === EXITED) {
      this.setState({
        status: UNMOUNTED
      });
    }
  };

  _proto.performEnter = function performEnter(node, mounting) {
    var _this2 = this;

    var enter = this.props.enter;
    var appearing = this.context ? this.context.isMounting : mounting;
    var timeouts = this.getTimeouts();
    var enterTimeout = appearing ? timeouts.appear : timeouts.enter; // no enter animation skip right to ENTERED
    // if we are mounting and running this it means appear _must_ be set

    if (!mounting && !enter || esm_config.disabled) {
      this.safeSetState({
        status: ENTERED
      }, function () {
        _this2.props.onEntered(node);
      });
      return;
    }

    this.props.onEnter(node, appearing);
    this.safeSetState({
      status: ENTERING
    }, function () {
      _this2.props.onEntering(node, appearing);

      _this2.onTransitionEnd(node, enterTimeout, function () {
        _this2.safeSetState({
          status: ENTERED
        }, function () {
          _this2.props.onEntered(node, appearing);
        });
      });
    });
  };

  _proto.performExit = function performExit(node) {
    var _this3 = this;

    var exit = this.props.exit;
    var timeouts = this.getTimeouts(); // no exit animation skip right to EXITED

    if (!exit || esm_config.disabled) {
      this.safeSetState({
        status: EXITED
      }, function () {
        _this3.props.onExited(node);
      });
      return;
    }

    this.props.onExit(node);
    this.safeSetState({
      status: EXITING
    }, function () {
      _this3.props.onExiting(node);

      _this3.onTransitionEnd(node, timeouts.exit, function () {
        _this3.safeSetState({
          status: EXITED
        }, function () {
          _this3.props.onExited(node);
        });
      });
    });
  };

  _proto.cancelNextCallback = function cancelNextCallback() {
    if (this.nextCallback !== null) {
      this.nextCallback.cancel();
      this.nextCallback = null;
    }
  };

  _proto.safeSetState = function safeSetState(nextState, callback) {
    // This shouldn't be necessary, but there are weird race conditions with
    // setState callbacks and unmounting in testing, so always make sure that
    // we can cancel any pending setState callbacks after we unmount.
    callback = this.setNextCallback(callback);
    this.setState(nextState, callback);
  };

  _proto.setNextCallback = function setNextCallback(callback) {
    var _this4 = this;

    var active = true;

    this.nextCallback = function (event) {
      if (active) {
        active = false;
        _this4.nextCallback = null;
        callback(event);
      }
    };

    this.nextCallback.cancel = function () {
      active = false;
    };

    return this.nextCallback;
  };

  _proto.onTransitionEnd = function onTransitionEnd(node, timeout, handler) {
    this.setNextCallback(handler);
    var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;

    if (!node || doesNotHaveTimeoutOrListener) {
      setTimeout(this.nextCallback, 0);
      return;
    }

    if (this.props.addEndListener) {
      this.props.addEndListener(node, this.nextCallback);
    }

    if (timeout != null) {
      setTimeout(this.nextCallback, timeout);
    }
  };

  _proto.render = function render() {
    var status = this.state.status;

    if (status === UNMOUNTED) {
      return null;
    }

    var _this$props = this.props,
        children = _this$props.children,
        childProps = _objectWithoutPropertiesLoose(_this$props, ["children"]); // filter props for Transtition


    delete childProps.in;
    delete childProps.mountOnEnter;
    delete childProps.unmountOnExit;
    delete childProps.appear;
    delete childProps.enter;
    delete childProps.exit;
    delete childProps.timeout;
    delete childProps.addEndListener;
    delete childProps.onEnter;
    delete childProps.onEntering;
    delete childProps.onEntered;
    delete childProps.onExit;
    delete childProps.onExiting;
    delete childProps.onExited;

    if (typeof children === 'function') {
      // allows for nested Transitions
      return external_React_default.a.createElement(TransitionGroupContext.Provider, {
        value: null
      }, children(status, childProps));
    }

    var child = external_React_default.a.Children.only(children);
    return (// allows for nested Transitions
      external_React_default.a.createElement(TransitionGroupContext.Provider, {
        value: null
      }, external_React_default.a.cloneElement(child, childProps))
    );
  };

  return Transition;
}(external_React_default.a.Component);

Transition_Transition.contextType = TransitionGroupContext;
Transition_Transition.propTypes =  true ? {
  /**
   * A `function` child can be used instead of a React element. This function is
   * called with the current transition status (`'entering'`, `'entered'`,
   * `'exiting'`, `'exited'`), which can be used to apply context
   * specific props to a component.
   *
   * ```jsx
   * <Transition in={this.state.in} timeout={150}>
   *   {state => (
   *     <MyComponent className={`fade fade-${state}`} />
   *   )}
   * </Transition>
   * ```
   */
  children: external_PropTypes_["oneOfType"]([external_PropTypes_["func"].isRequired, external_PropTypes_["element"].isRequired]).isRequired,

  /**
   * Show the component; triggers the enter or exit states
   */
  in: external_PropTypes_["bool"],

  /**
   * By default the child component is mounted immediately along with
   * the parent `Transition` component. If you want to "lazy mount" the component on the
   * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay
   * mounted, even on "exited", unless you also specify `unmountOnExit`.
   */
  mountOnEnter: external_PropTypes_["bool"],

  /**
   * By default the child component stays mounted after it reaches the `'exited'` state.
   * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.
   */
  unmountOnExit: external_PropTypes_["bool"],

  /**
   * Normally a component is not transitioned if it is shown when the `<Transition>` component mounts.
   * If you want to transition on the first mount set `appear` to `true`, and the
   * component will transition in as soon as the `<Transition>` mounts.
   *
   * > Note: there are no specific "appear" states. `appear` only adds an additional `enter` transition.
   */
  appear: external_PropTypes_["bool"],

  /**
   * Enable or disable enter transitions.
   */
  enter: external_PropTypes_["bool"],

  /**
   * Enable or disable exit transitions.
   */
  exit: external_PropTypes_["bool"],

  /**
   * The duration of the transition, in milliseconds.
   * Required unless `addEndListener` is provided.
   *
   * You may specify a single timeout for all transitions:
   *
   * ```jsx
   * timeout={500}
   * ```
   *
   * or individually:
   *
   * ```jsx
   * timeout={{
   *  appear: 500,
   *  enter: 300,
   *  exit: 500,
   * }}
   * ```
   *
   * - `appear` defaults to the value of `enter`
   * - `enter` defaults to `0`
   * - `exit` defaults to `0`
   *
   * @type {number | { enter?: number, exit?: number, appear?: number }}
   */
  timeout: function timeout(props) {
    var pt = timeoutsShape;
    if (!props.addEndListener) pt = pt.isRequired;

    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    return pt.apply(void 0, [props].concat(args));
  },

  /**
   * Add a custom transition end trigger. Called with the transitioning
   * DOM node and a `done` callback. Allows for more fine grained transition end
   * logic. **Note:** Timeouts are still used as a fallback if provided.
   *
   * ```jsx
   * addEndListener={(node, done) => {
   *   // use the css transitionend event to mark the finish of a transition
   *   node.addEventListener('transitionend', done, false);
   * }}
   * ```
   */
  addEndListener: external_PropTypes_["func"],

  /**
   * Callback fired before the "entering" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * @type Function(node: HtmlElement, isAppearing: bool) -> void
   */
  onEnter: external_PropTypes_["func"],

  /**
   * Callback fired after the "entering" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * @type Function(node: HtmlElement, isAppearing: bool)
   */
  onEntering: external_PropTypes_["func"],

  /**
   * Callback fired after the "entered" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * @type Function(node: HtmlElement, isAppearing: bool) -> void
   */
  onEntered: external_PropTypes_["func"],

  /**
   * Callback fired before the "exiting" status is applied.
   *
   * @type Function(node: HtmlElement) -> void
   */
  onExit: external_PropTypes_["func"],

  /**
   * Callback fired after the "exiting" status is applied.
   *
   * @type Function(node: HtmlElement) -> void
   */
  onExiting: external_PropTypes_["func"],

  /**
   * Callback fired after the "exited" status is applied.
   *
   * @type Function(node: HtmlElement) -> void
   */
  onExited: external_PropTypes_["func"] // Name the function so it is clearer in the documentation

} : undefined;

function noop() {}

Transition_Transition.defaultProps = {
  in: false,
  mountOnEnter: false,
  unmountOnExit: false,
  appear: false,
  enter: true,
  exit: true,
  onEnter: noop,
  onEntering: noop,
  onEntered: noop,
  onExit: noop,
  onExiting: noop,
  onExited: noop
};
Transition_Transition.UNMOUNTED = 0;
Transition_Transition.EXITED = 1;
Transition_Transition.ENTERING = 2;
Transition_Transition.ENTERED = 3;
Transition_Transition.EXITING = 4;
/* harmony default export */ var esm_Transition = (Transition_Transition);
// CONCATENATED MODULE: ./node_modules/react-transition-group/esm/CSSTransition.js










var _addClass = function addClass(node, classes) {
  return node && classes && classes.split(' ').forEach(function (c) {
    return addClass_default()(node, c);
  });
};

var CSSTransition_removeClass = function removeClass(node, classes) {
  return node && classes && classes.split(' ').forEach(function (c) {
    return removeClass_default()(node, c);
  });
};
/**
 * A transition component inspired by the excellent
 * [ng-animate](http://www.nganimate.org/) library, you should use it if you're
 * using CSS transitions or animations. It's built upon the
 * [`Transition`](https://reactcommunity.org/react-transition-group/transition)
 * component, so it inherits all of its props.
 *
 * `CSSTransition` applies a pair of class names during the `appear`, `enter`,
 * and `exit` states of the transition. The first class is applied and then a
 * second `*-active` class in order to activate the CSS transition. After the
 * transition, matching `*-done` class names are applied to persist the
 * transition state.
 *
 * ```jsx
 * function App() {
 *   const [inProp, setInProp] = useState(false);
 *   return (
 *     <div>
 *       <CSSTransition in={inProp} timeout={200} classNames="my-node">
 *         <div>
 *           {"I'll receive my-node-* classes"}
 *         </div>
 *       </CSSTransition>
 *       <button type="button" onClick={() => setInProp(true)}>
 *         Click to Enter
 *       </button>
 *     </div>
 *   );
 * }
 * ```
 *
 * When the `in` prop is set to `true`, the child component will first receive
 * the class `example-enter`, then the `example-enter-active` will be added in
 * the next tick. `CSSTransition` [forces a
 * reflow](https://github.com/reactjs/react-transition-group/blob/5007303e729a74be66a21c3e2205e4916821524b/src/CSSTransition.js#L208-L215)
 * between before adding the `example-enter-active`. This is an important trick
 * because it allows us to transition between `example-enter` and
 * `example-enter-active` even though they were added immediately one after
 * another. Most notably, this is what makes it possible for us to animate
 * _appearance_.
 *
 * ```css
 * .my-node-enter {
 *   opacity: 0;
 * }
 * .my-node-enter-active {
 *   opacity: 1;
 *   transition: opacity 200ms;
 * }
 * .my-node-exit {
 *   opacity: 1;
 * }
 * .my-node-exit-active {
 *   opacity: 0;
 *   transition: opacity 200ms;
 * }
 * ```
 *
 * `*-active` classes represent which styles you want to animate **to**.
 */


var CSSTransition_CSSTransition =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(CSSTransition, _React$Component);

  function CSSTransition() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.appliedClasses = {
      appear: {},
      enter: {},
      exit: {}
    };

    _this.onEnter = function (node, appearing) {
      _this.removeClasses(node, 'exit');

      _this.addClass(node, appearing ? 'appear' : 'enter', 'base');

      if (_this.props.onEnter) {
        _this.props.onEnter(node, appearing);
      }
    };

    _this.onEntering = function (node, appearing) {
      var type = appearing ? 'appear' : 'enter';

      _this.addClass(node, type, 'active');

      if (_this.props.onEntering) {
        _this.props.onEntering(node, appearing);
      }
    };

    _this.onEntered = function (node, appearing) {
      var type = appearing ? 'appear' : 'enter';

      _this.removeClasses(node, type);

      _this.addClass(node, type, 'done');

      if (_this.props.onEntered) {
        _this.props.onEntered(node, appearing);
      }
    };

    _this.onExit = function (node) {
      _this.removeClasses(node, 'appear');

      _this.removeClasses(node, 'enter');

      _this.addClass(node, 'exit', 'base');

      if (_this.props.onExit) {
        _this.props.onExit(node);
      }
    };

    _this.onExiting = function (node) {
      _this.addClass(node, 'exit', 'active');

      if (_this.props.onExiting) {
        _this.props.onExiting(node);
      }
    };

    _this.onExited = function (node) {
      _this.removeClasses(node, 'exit');

      _this.addClass(node, 'exit', 'done');

      if (_this.props.onExited) {
        _this.props.onExited(node);
      }
    };

    _this.getClassNames = function (type) {
      var classNames = _this.props.classNames;
      var isStringClassNames = typeof classNames === 'string';
      var prefix = isStringClassNames && classNames ? classNames + "-" : '';
      var baseClassName = isStringClassNames ? "" + prefix + type : classNames[type];
      var activeClassName = isStringClassNames ? baseClassName + "-active" : classNames[type + "Active"];
      var doneClassName = isStringClassNames ? baseClassName + "-done" : classNames[type + "Done"];
      return {
        baseClassName: baseClassName,
        activeClassName: activeClassName,
        doneClassName: doneClassName
      };
    };

    return _this;
  }

  var _proto = CSSTransition.prototype;

  _proto.addClass = function addClass(node, type, phase) {
    var className = this.getClassNames(type)[phase + "ClassName"];

    if (type === 'appear' && phase === 'done') {
      className += " " + this.getClassNames('enter').doneClassName;
    } // This is for to force a repaint,
    // which is necessary in order to transition styles when adding a class name.


    if (phase === 'active') {
      /* eslint-disable no-unused-expressions */
      node && node.scrollTop;
    }

    this.appliedClasses[type][phase] = className;

    _addClass(node, className);
  };

  _proto.removeClasses = function removeClasses(node, type) {
    var _this$appliedClasses$ = this.appliedClasses[type],
        baseClassName = _this$appliedClasses$.base,
        activeClassName = _this$appliedClasses$.active,
        doneClassName = _this$appliedClasses$.done;
    this.appliedClasses[type] = {};

    if (baseClassName) {
      CSSTransition_removeClass(node, baseClassName);
    }

    if (activeClassName) {
      CSSTransition_removeClass(node, activeClassName);
    }

    if (doneClassName) {
      CSSTransition_removeClass(node, doneClassName);
    }
  };

  _proto.render = function render() {
    var _this$props = this.props,
        _ = _this$props.classNames,
        props = _objectWithoutPropertiesLoose(_this$props, ["classNames"]);

    return external_React_default.a.createElement(esm_Transition, _extends({}, props, {
      onEnter: this.onEnter,
      onEntered: this.onEntered,
      onEntering: this.onEntering,
      onExit: this.onExit,
      onExiting: this.onExiting,
      onExited: this.onExited
    }));
  };

  return CSSTransition;
}(external_React_default.a.Component);

CSSTransition_CSSTransition.defaultProps = {
  classNames: ''
};
CSSTransition_CSSTransition.propTypes =  true ? _extends({}, esm_Transition.propTypes, {
  /**
   * The animation classNames applied to the component as it enters, exits or
   * has finished the transition. A single name can be provided and it will be
   * suffixed for each stage: e.g.
   *
   * `classNames="fade"` applies `fade-enter`, `fade-enter-active`,
   * `fade-enter-done`, `fade-exit`, `fade-exit-active`, `fade-exit-done`,
   * `fade-appear`, `fade-appear-active`, and `fade-appear-done`.
   *
   * **Note**: `fade-appear-done` and `fade-enter-done` will _both_ be applied.
   * This allows you to define different behavior for when appearing is done and
   * when regular entering is done, using selectors like
   * `.fade-enter-done:not(.fade-appear-done)`. For example, you could apply an
   * epic entrance animation when element first appears in the DOM using
   * [Animate.css](https://daneden.github.io/animate.css/). Otherwise you can
   * simply use `fade-enter-done` for defining both cases.
   *
   * Each individual classNames can also be specified independently like:
   *
   * ```js
   * classNames={{
   *  appear: 'my-appear',
   *  appearActive: 'my-active-appear',
   *  appearDone: 'my-done-appear',
   *  enter: 'my-enter',
   *  enterActive: 'my-active-enter',
   *  enterDone: 'my-done-enter',
   *  exit: 'my-exit',
   *  exitActive: 'my-active-exit',
   *  exitDone: 'my-done-exit',
   * }}
   * ```
   *
   * If you want to set these classes using CSS Modules:
   *
   * ```js
   * import styles from './styles.css';
   * ```
   *
   * you might want to use camelCase in your CSS file, that way could simply
   * spread them instead of listing them one by one:
   *
   * ```js
   * classNames={{ ...styles }}
   * ```
   *
   * @type {string | {
   *  appear?: string,
   *  appearActive?: string,
   *  appearDone?: string,
   *  enter?: string,
   *  enterActive?: string,
   *  enterDone?: string,
   *  exit?: string,
   *  exitActive?: string,
   *  exitDone?: string,
   * }}
   */
  classNames: classNamesShape,

  /**
   * A `<Transition>` callback fired immediately after the 'enter' or 'appear' class is
   * applied.
   *
   * @type Function(node: HtmlElement, isAppearing: bool)
   */
  onEnter: external_PropTypes_["func"],

  /**
   * A `<Transition>` callback fired immediately after the 'enter-active' or
   * 'appear-active' class is applied.
   *
   * @type Function(node: HtmlElement, isAppearing: bool)
   */
  onEntering: external_PropTypes_["func"],

  /**
   * A `<Transition>` callback fired immediately after the 'enter' or
   * 'appear' classes are **removed** and the `done` class is added to the DOM node.
   *
   * @type Function(node: HtmlElement, isAppearing: bool)
   */
  onEntered: external_PropTypes_["func"],

  /**
   * A `<Transition>` callback fired immediately after the 'exit' class is
   * applied.
   *
   * @type Function(node: HtmlElement)
   */
  onExit: external_PropTypes_["func"],

  /**
   * A `<Transition>` callback fired immediately after the 'exit-active' is applied.
   *
   * @type Function(node: HtmlElement)
   */
  onExiting: external_PropTypes_["func"],

  /**
   * A `<Transition>` callback fired immediately after the 'exit' classes
   * are **removed** and the `exit-done` class is added to the DOM node.
   *
   * @type Function(node: HtmlElement)
   */
  onExited: external_PropTypes_["func"]
}) : undefined;
/* harmony default export */ var esm_CSSTransition = (CSSTransition_CSSTransition);
// CONCATENATED MODULE: ./node_modules/react-transition-group/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}
// CONCATENATED MODULE: ./node_modules/react-transition-group/esm/utils/ChildMapping.js

/**
 * Given `this.props.children`, return an object mapping key to child.
 *
 * @param {*} children `this.props.children`
 * @return {object} Mapping of key to child
 */

function getChildMapping(children, mapFn) {
  var mapper = function mapper(child) {
    return mapFn && Object(external_React_["isValidElement"])(child) ? mapFn(child) : child;
  };

  var result = Object.create(null);
  if (children) external_React_["Children"].map(children, function (c) {
    return c;
  }).forEach(function (child) {
    // run the map function here instead so that the key is the computed one
    result[child.key] = mapper(child);
  });
  return result;
}
/**
 * When you're adding or removing children some may be added or removed in the
 * same render pass. We want to show *both* since we want to simultaneously
 * animate elements in and out. This function takes a previous set of keys
 * and a new set of keys and merges them with its best guess of the correct
 * ordering. In the future we may expose some of the utilities in
 * ReactMultiChild to make this easy, but for now React itself does not
 * directly have this concept of the union of prevChildren and nextChildren
 * so we implement it here.
 *
 * @param {object} prev prev children as returned from
 * `ReactTransitionChildMapping.getChildMapping()`.
 * @param {object} next next children as returned from
 * `ReactTransitionChildMapping.getChildMapping()`.
 * @return {object} a key set that contains all keys in `prev` and all keys
 * in `next` in a reasonable order.
 */

function mergeChildMappings(prev, next) {
  prev = prev || {};
  next = next || {};

  function getValueForKey(key) {
    return key in next ? next[key] : prev[key];
  } // For each key of `next`, the list of keys to insert before that key in
  // the combined list


  var nextKeysPending = Object.create(null);
  var pendingKeys = [];

  for (var prevKey in prev) {
    if (prevKey in next) {
      if (pendingKeys.length) {
        nextKeysPending[prevKey] = pendingKeys;
        pendingKeys = [];
      }
    } else {
      pendingKeys.push(prevKey);
    }
  }

  var i;
  var childMapping = {};

  for (var nextKey in next) {
    if (nextKeysPending[nextKey]) {
      for (i = 0; i < nextKeysPending[nextKey].length; i++) {
        var pendingNextKey = nextKeysPending[nextKey][i];
        childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
      }
    }

    childMapping[nextKey] = getValueForKey(nextKey);
  } // Finally, add the keys which didn't appear before any key in `next`


  for (i = 0; i < pendingKeys.length; i++) {
    childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
  }

  return childMapping;
}

function getProp(child, prop, props) {
  return props[prop] != null ? props[prop] : child.props[prop];
}

function getInitialChildMapping(props, onExited) {
  return getChildMapping(props.children, function (child) {
    return Object(external_React_["cloneElement"])(child, {
      onExited: onExited.bind(null, child),
      in: true,
      appear: getProp(child, 'appear', props),
      enter: getProp(child, 'enter', props),
      exit: getProp(child, 'exit', props)
    });
  });
}
function getNextChildMapping(nextProps, prevChildMapping, onExited) {
  var nextChildMapping = getChildMapping(nextProps.children);
  var children = mergeChildMappings(prevChildMapping, nextChildMapping);
  Object.keys(children).forEach(function (key) {
    var child = children[key];
    if (!Object(external_React_["isValidElement"])(child)) return;
    var hasPrev = key in prevChildMapping;
    var hasNext = key in nextChildMapping;
    var prevChild = prevChildMapping[key];
    var isLeaving = Object(external_React_["isValidElement"])(prevChild) && !prevChild.props.in; // item is new (entering)

    if (hasNext && (!hasPrev || isLeaving)) {
      // console.log('entering', key)
      children[key] = Object(external_React_["cloneElement"])(child, {
        onExited: onExited.bind(null, child),
        in: true,
        exit: getProp(child, 'exit', nextProps),
        enter: getProp(child, 'enter', nextProps)
      });
    } else if (!hasNext && hasPrev && !isLeaving) {
      // item is old (exiting)
      // console.log('leaving', key)
      children[key] = Object(external_React_["cloneElement"])(child, {
        in: false
      });
    } else if (hasNext && hasPrev && Object(external_React_["isValidElement"])(prevChild)) {
      // item hasn't changed transition states
      // copy over the last transition props;
      // console.log('unchanged', key)
      children[key] = Object(external_React_["cloneElement"])(child, {
        onExited: onExited.bind(null, child),
        in: prevChild.props.in,
        exit: getProp(child, 'exit', nextProps),
        enter: getProp(child, 'enter', nextProps)
      });
    }
  });
  return children;
}
// CONCATENATED MODULE: ./node_modules/react-transition-group/esm/TransitionGroup.js









var values = Object.values || function (obj) {
  return Object.keys(obj).map(function (k) {
    return obj[k];
  });
};

var defaultProps = {
  component: 'div',
  childFactory: function childFactory(child) {
    return child;
  }
  /**
   * The `<TransitionGroup>` component manages a set of transition components
   * (`<Transition>` and `<CSSTransition>`) in a list. Like with the transition
   * components, `<TransitionGroup>` is a state machine for managing the mounting
   * and unmounting of components over time.
   *
   * Consider the example below. As items are removed or added to the TodoList the
   * `in` prop is toggled automatically by the `<TransitionGroup>`.
   *
   * Note that `<TransitionGroup>`  does not define any animation behavior!
   * Exactly _how_ a list item animates is up to the individual transition
   * component. This means you can mix and match animations across different list
   * items.
   */

};

var TransitionGroup_TransitionGroup =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(TransitionGroup, _React$Component);

  function TransitionGroup(props, context) {
    var _this;

    _this = _React$Component.call(this, props, context) || this;

    var handleExited = _this.handleExited.bind(_assertThisInitialized(_assertThisInitialized(_this))); // Initial children should all be entering, dependent on appear


    _this.state = {
      contextValue: {
        isMounting: true
      },
      handleExited: handleExited,
      firstRender: true
    };
    return _this;
  }

  var _proto = TransitionGroup.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this.mounted = true;
    this.setState({
      contextValue: {
        isMounting: false
      }
    });
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    this.mounted = false;
  };

  TransitionGroup.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
    var prevChildMapping = _ref.children,
        handleExited = _ref.handleExited,
        firstRender = _ref.firstRender;
    return {
      children: firstRender ? getInitialChildMapping(nextProps, handleExited) : getNextChildMapping(nextProps, prevChildMapping, handleExited),
      firstRender: false
    };
  };

  _proto.handleExited = function handleExited(child, node) {
    var currentChildMapping = getChildMapping(this.props.children);
    if (child.key in currentChildMapping) return;

    if (child.props.onExited) {
      child.props.onExited(node);
    }

    if (this.mounted) {
      this.setState(function (state) {
        var children = _extends({}, state.children);

        delete children[child.key];
        return {
          children: children
        };
      });
    }
  };

  _proto.render = function render() {
    var _this$props = this.props,
        Component = _this$props.component,
        childFactory = _this$props.childFactory,
        props = _objectWithoutPropertiesLoose(_this$props, ["component", "childFactory"]);

    var contextValue = this.state.contextValue;
    var children = values(this.state.children).map(childFactory);
    delete props.appear;
    delete props.enter;
    delete props.exit;

    if (Component === null) {
      return external_React_default.a.createElement(TransitionGroupContext.Provider, {
        value: contextValue
      }, children);
    }

    return external_React_default.a.createElement(TransitionGroupContext.Provider, {
      value: contextValue
    }, external_React_default.a.createElement(Component, props, children));
  };

  return TransitionGroup;
}(external_React_default.a.Component);

TransitionGroup_TransitionGroup.propTypes =  true ? {
  /**
   * `<TransitionGroup>` renders a `<div>` by default. You can change this
   * behavior by providing a `component` prop.
   * If you use React v16+ and would like to avoid a wrapping `<div>` element
   * you can pass in `component={null}`. This is useful if the wrapping div
   * borks your css styles.
   */
  component: external_PropTypes_default.a.any,

  /**
   * A set of `<Transition>` components, that are toggled `in` and out as they
   * leave. the `<TransitionGroup>` will inject specific transition props, so
   * remember to spread them through if you are wrapping the `<Transition>` as
   * with our `<Fade>` example.
   *
   * While this component is meant for multiple `Transition` or `CSSTransition`
   * children, sometimes you may want to have a single transition child with
   * content that you want to be transitioned out and in when you change it
   * (e.g. routes, images etc.) In that case you can change the `key` prop of
   * the transition child as you change its content, this will cause
   * `TransitionGroup` to transition the child out and back in.
   */
  children: external_PropTypes_default.a.node,

  /**
   * A convenience prop that enables or disables appear animations
   * for all children. Note that specifying this will override any defaults set
   * on individual children Transitions.
   */
  appear: external_PropTypes_default.a.bool,

  /**
   * A convenience prop that enables or disables enter animations
   * for all children. Note that specifying this will override any defaults set
   * on individual children Transitions.
   */
  enter: external_PropTypes_default.a.bool,

  /**
   * A convenience prop that enables or disables exit animations
   * for all children. Note that specifying this will override any defaults set
   * on individual children Transitions.
   */
  exit: external_PropTypes_default.a.bool,

  /**
   * You may need to apply reactive updates to a child as it is exiting.
   * This is generally done by using `cloneElement` however in the case of an exiting
   * child the element has already been removed and not accessible to the consumer.
   *
   * If you do need to update a child as it leaves you can provide a `childFactory`
   * to wrap every child, even the ones that are leaving.
   *
   * @type Function(child: ReactElement) -> ReactElement
   */
  childFactory: external_PropTypes_default.a.func
} : undefined;
TransitionGroup_TransitionGroup.defaultProps = defaultProps;
/* harmony default export */ var esm_TransitionGroup = (TransitionGroup_TransitionGroup);
// CONCATENATED MODULE: ./node_modules/react-transition-group/esm/ReplaceTransition.js






/**
 * The `<ReplaceTransition>` component is a specialized `Transition` component
 * that animates between two children.
 *
 * ```jsx
 * <ReplaceTransition in>
 *   <Fade><div>I appear first</div></Fade>
 *   <Fade><div>I replace the above</div></Fade>
 * </ReplaceTransition>
 * ```
 */

var ReplaceTransition_ReplaceTransition =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(ReplaceTransition, _React$Component);

  function ReplaceTransition() {
    var _this;

    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
      _args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(_args)) || this;

    _this.handleEnter = function () {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return _this.handleLifecycle('onEnter', 0, args);
    };

    _this.handleEntering = function () {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      return _this.handleLifecycle('onEntering', 0, args);
    };

    _this.handleEntered = function () {
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }

      return _this.handleLifecycle('onEntered', 0, args);
    };

    _this.handleExit = function () {
      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        args[_key5] = arguments[_key5];
      }

      return _this.handleLifecycle('onExit', 1, args);
    };

    _this.handleExiting = function () {
      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
        args[_key6] = arguments[_key6];
      }

      return _this.handleLifecycle('onExiting', 1, args);
    };

    _this.handleExited = function () {
      for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
        args[_key7] = arguments[_key7];
      }

      return _this.handleLifecycle('onExited', 1, args);
    };

    return _this;
  }

  var _proto = ReplaceTransition.prototype;

  _proto.handleLifecycle = function handleLifecycle(handler, idx, originalArgs) {
    var _child$props;

    var children = this.props.children;
    var child = external_React_default.a.Children.toArray(children)[idx];
    if (child.props[handler]) (_child$props = child.props)[handler].apply(_child$props, originalArgs);
    if (this.props[handler]) this.props[handler](Object(external_ReactDOM_["findDOMNode"])(this));
  };

  _proto.render = function render() {
    var _this$props = this.props,
        children = _this$props.children,
        inProp = _this$props.in,
        props = _objectWithoutPropertiesLoose(_this$props, ["children", "in"]);

    var _React$Children$toArr = external_React_default.a.Children.toArray(children),
        first = _React$Children$toArr[0],
        second = _React$Children$toArr[1];

    delete props.onEnter;
    delete props.onEntering;
    delete props.onEntered;
    delete props.onExit;
    delete props.onExiting;
    delete props.onExited;
    return external_React_default.a.createElement(esm_TransitionGroup, props, inProp ? external_React_default.a.cloneElement(first, {
      key: 'first',
      onEnter: this.handleEnter,
      onEntering: this.handleEntering,
      onEntered: this.handleEntered
    }) : external_React_default.a.cloneElement(second, {
      key: 'second',
      onEnter: this.handleExit,
      onEntering: this.handleExiting,
      onEntered: this.handleExited
    }));
  };

  return ReplaceTransition;
}(external_React_default.a.Component);

ReplaceTransition_ReplaceTransition.propTypes =  true ? {
  in: external_PropTypes_default.a.bool.isRequired,
  children: function children(props, propName) {
    if (external_React_default.a.Children.count(props[propName]) !== 2) return new Error("\"" + propName + "\" must be exactly two transition components.");
    return null;
  }
} : undefined;
/* harmony default export */ var esm_ReplaceTransition = (ReplaceTransition_ReplaceTransition);
// CONCATENATED MODULE: ./node_modules/react-transition-group/esm/SwitchTransition.js


var _leaveRenders, _enterRenders;






function areChildrenDifferent(oldChildren, newChildren) {
  if (oldChildren === newChildren) return false;

  if (external_React_default.a.isValidElement(oldChildren) && external_React_default.a.isValidElement(newChildren) && oldChildren.key != null && oldChildren.key === newChildren.key) {
    return false;
  }

  return true;
}
/**
 * Enum of modes for SwitchTransition component
 * @enum { string }
 */


var modes = {
  out: 'out-in',
  in: 'in-out'
};

var callHook = function callHook(element, name, cb) {
  return function () {
    var _element$props;

    element.props[name] && (_element$props = element.props)[name].apply(_element$props, arguments);
    cb();
  };
};

var leaveRenders = (_leaveRenders = {}, _leaveRenders[modes.out] = function (_ref) {
  var current = _ref.current,
      changeState = _ref.changeState;
  return external_React_default.a.cloneElement(current, {
    in: false,
    onExited: callHook(current, 'onExited', function () {
      changeState(ENTERING, null);
    })
  });
}, _leaveRenders[modes.in] = function (_ref2) {
  var current = _ref2.current,
      changeState = _ref2.changeState,
      children = _ref2.children;
  return [current, external_React_default.a.cloneElement(children, {
    in: true,
    onEntered: callHook(children, 'onEntered', function () {
      changeState(ENTERING);
    })
  })];
}, _leaveRenders);
var enterRenders = (_enterRenders = {}, _enterRenders[modes.out] = function (_ref3) {
  var children = _ref3.children,
      changeState = _ref3.changeState;
  return external_React_default.a.cloneElement(children, {
    in: true,
    onEntered: callHook(children, 'onEntered', function () {
      changeState(ENTERED, external_React_default.a.cloneElement(children, {
        in: true
      }));
    })
  });
}, _enterRenders[modes.in] = function (_ref4) {
  var current = _ref4.current,
      children = _ref4.children,
      changeState = _ref4.changeState;
  return [external_React_default.a.cloneElement(current, {
    in: false,
    onExited: callHook(current, 'onExited', function () {
      changeState(ENTERED, external_React_default.a.cloneElement(children, {
        in: true
      }));
    })
  }), external_React_default.a.cloneElement(children, {
    in: true
  })];
}, _enterRenders);
/**
 * A transition component inspired by the [vue transition modes](https://vuejs.org/v2/guide/transitions.html#Transition-Modes).
 * You can use it when you want to control the render between state transitions.
 * Based on the selected mode and the child's key which is the `Transition` or `CSSTransition` component, the `SwitchTransition` makes a consistent transition between them.
 *
 * If the `out-in` mode is selected, the `SwitchTransition` waits until the old child leaves and then inserts a new child.
 * If the `in-out` mode is selected, the `SwitchTransition` inserts a new child first, waits for the new child to enter and then removes the old child
 *
 * ```jsx
 *
 * function App() {
 *  const [state, setState] = useState(false);
 *  return (
 *    <SwitchTransition>
 *      <FadeTransition key={state ? "Goodbye, world!" : "Hello, world!"}
 *        addEndListener={(node, done) => node.addEventListener("transitionend", done, false)}
 *        classNames='fade' >
 *        <button onClick={() => setState(state => !state)}>
 *          {state ? "Goodbye, world!" : "Hello, world!"}
 *        </button>
 *      </FadeTransition>
 *    </SwitchTransition>
 *  )
 * }
 * ```
 */

var SwitchTransition_SwitchTransition =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(SwitchTransition, _React$Component);

  function SwitchTransition() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.state = {
      status: ENTERED,
      current: null
    };
    _this.appeared = false;

    _this.changeState = function (status, current) {
      if (current === void 0) {
        current = _this.state.current;
      }

      _this.setState({
        status: status,
        current: current
      });
    };

    return _this;
  }

  var _proto = SwitchTransition.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this.appeared = true;
  };

  SwitchTransition.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {
    if (props.children == null) {
      return {
        current: null
      };
    }

    if (state.status === ENTERING && props.mode === modes.in) {
      return {
        status: ENTERING
      };
    }

    if (state.current && areChildrenDifferent(state.current, props.children)) {
      return {
        status: EXITING
      };
    }

    return {
      current: external_React_default.a.cloneElement(props.children, {
        in: true
      })
    };
  };

  _proto.render = function render() {
    var _this$props = this.props,
        children = _this$props.children,
        mode = _this$props.mode,
        _this$state = this.state,
        status = _this$state.status,
        current = _this$state.current;
    var data = {
      children: children,
      current: current,
      changeState: this.changeState,
      status: status
    };
    var component;

    switch (status) {
      case ENTERING:
        component = enterRenders[mode](data);
        break;

      case EXITING:
        component = leaveRenders[mode](data);
        break;

      case ENTERED:
        component = current;
    }

    return external_React_default.a.createElement(TransitionGroupContext.Provider, {
      value: {
        isMounting: !this.appeared
      }
    }, component);
  };

  return SwitchTransition;
}(external_React_default.a.Component);

SwitchTransition_SwitchTransition.propTypes =  true ? {
  /**
   * Transition modes.
   * `out-in`: Current element transitions out first, then when complete, the new element transitions in.
   * `in-out: New element transitions in first, then when complete, the current element transitions out.`
   *
   * @type {'out-in'|'in-out'}
   */
  mode: external_PropTypes_default.a.oneOf([modes.in, modes.out]),

  /**
   * Any `Transition` or `CSSTransition` component
   */
  children: external_PropTypes_default.a.oneOfType([external_PropTypes_default.a.element.isRequired])
} : undefined;
SwitchTransition_SwitchTransition.defaultProps = {
  mode: modes.out
};
/* harmony default export */ var esm_SwitchTransition = (SwitchTransition_SwitchTransition);
// CONCATENATED MODULE: ./node_modules/react-transition-group/esm/index.js






// CONCATENATED MODULE: ./content-src/components/DiscoveryStreamComponents/DSCard/DSCard.jsx
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */







class DSCard_DSCard extends external_React_default.a.PureComponent {
  constructor(props) {
    super(props);
    this.onLinkClick = this.onLinkClick.bind(this);
  }

  onLinkClick(event) {
    if (this.props.dispatch) {
      this.props.dispatch(Actions["actionCreators"].UserEvent({
        event: "CLICK",
        source: this.props.type.toUpperCase(),
        action_position: this.props.pos
      }));
      this.props.dispatch(Actions["actionCreators"].ImpressionStats({
        source: this.props.type.toUpperCase(),
        click: 0,
        tiles: [{
          id: this.props.id,
          pos: this.props.pos,
          ...(this.props.shim && this.props.shim.click ? {
            shim: this.props.shim.click
          } : {})
        }]
      }));
    }
  }

  render() {
    return external_React_default.a.createElement("div", {
      className: `ds-card${this.props.placeholder ? " placeholder" : ""}`
    }, external_React_default.a.createElement(SafeAnchor_SafeAnchor, {
      className: "ds-card-link",
      dispatch: this.props.dispatch,
      onLinkClick: !this.props.placeholder ? this.onLinkClick : undefined,
      url: this.props.url
    }, external_React_default.a.createElement("div", {
      className: "img-wrapper"
    }, external_React_default.a.createElement(DSImage_DSImage, {
      extraClassNames: "img",
      source: this.props.image_src,
      rawSource: this.props.raw_image_src
    })), external_React_default.a.createElement("div", {
      className: "meta"
    }, external_React_default.a.createElement("div", {
      className: "info-wrap"
    }, external_React_default.a.createElement("p", {
      className: "source clamp"
    }, this.props.source), external_React_default.a.createElement("header", {
      className: "title clamp"
    }, this.props.title), this.props.excerpt && external_React_default.a.createElement("p", {
      className: "excerpt clamp"
    }, this.props.excerpt)), this.props.context && external_React_default.a.createElement("p", {
      className: "context"
    }, this.props.context)), external_React_default.a.createElement(ImpressionStats["ImpressionStats"], {
      campaignId: this.props.campaignId,
      rows: [{
        id: this.props.id,
        pos: this.props.pos,
        ...(this.props.shim && this.props.shim.impression ? {
          shim: this.props.shim.impression
        } : {})
      }],
      dispatch: this.props.dispatch,
      source: this.props.type
    })), !this.props.placeholder && external_React_default.a.createElement(DSLinkMenu_DSLinkMenu, {
      id: this.props.id,
      index: this.props.pos,
      dispatch: this.props.dispatch,
      url: this.props.url,
      title: this.props.title,
      source: this.props.source,
      type: this.props.type,
      pocket_id: this.props.pocket_id,
      shim: this.props.shim,
      bookmarkGuid: this.props.bookmarkGuid
    }));
  }

}
const PlaceholderDSCard = props => external_React_default.a.createElement(DSCard_DSCard, {
  placeholder: true
});
// CONCATENATED MODULE: ./content-src/components/DiscoveryStreamComponents/DSEmptyState/DSEmptyState.jsx
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */


class DSEmptyState_DSEmptyState extends external_React_default.a.PureComponent {
  constructor(props) {
    super(props);
    this.onReset = this.onReset.bind(this);
    this.state = {};
  }

  componentWillUnmount() {
    if (this.timeout) {
      clearTimeout(this.timeout);
    }
  }

  onReset() {
    if (this.props.dispatch && this.props.feed) {
      const {
        feed
      } = this.props;
      const {
        url
      } = feed;
      this.props.dispatch({
        type: Actions["actionTypes"].DISCOVERY_STREAM_FEED_UPDATE,
        data: {
          feed: { ...feed,
            data: { ...feed.data,
              status: "waiting"
            }
          },
          url
        }
      });
      this.setState({
        waiting: true
      });
      this.timeout = setTimeout(() => {
        this.timeout = null;
        this.setState({
          waiting: false
        });
      }, 300);
      this.props.dispatch(Actions["actionCreators"].OnlyToMain({
        type: Actions["actionTypes"].DISCOVERY_STREAM_RETRY_FEED,
        data: {
          feed
        }
      }));
    }
  }

  renderButton() {
    if (this.props.status === "waiting" || this.state.waiting) {
      return external_React_default.a.createElement("button", {
        className: "try-again-button waiting",
        "data-l10n-id": "newtab-discovery-empty-section-topstories-loading"
      });
    }

    return external_React_default.a.createElement("button", {
      className: "try-again-button",
      onClick: this.onReset,
      "data-l10n-id": "newtab-discovery-empty-section-topstories-try-again-button"
    });
  }

  renderState() {
    if (this.props.status === "waiting" || this.props.status === "failed") {
      return external_React_default.a.createElement(external_React_default.a.Fragment, null, external_React_default.a.createElement("h2", {
        "data-l10n-id": "newtab-discovery-empty-section-topstories-timed-out"
      }), this.renderButton());
    }

    return external_React_default.a.createElement(external_React_default.a.Fragment, null, external_React_default.a.createElement("h2", {
      "data-l10n-id": "newtab-discovery-empty-section-topstories-header"
    }), external_React_default.a.createElement("p", {
      "data-l10n-id": "newtab-discovery-empty-section-topstories-content"
    }));
  }

  render() {
    return external_React_default.a.createElement("div", {
      className: "section-empty-state"
    }, external_React_default.a.createElement("div", {
      className: "empty-state-message"
    }, this.renderState()));
  }

}
// CONCATENATED MODULE: ./content-src/components/DiscoveryStreamComponents/CardGrid/CardGrid.jsx
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */



class CardGrid_CardGrid extends external_React_default.a.PureComponent {
  renderCards() {
    const recs = this.props.data.recommendations.slice(0, this.props.items);
    const cards = [];

    for (let index = 0; index < this.props.items; index++) {
      const rec = recs[index];
      cards.push(!rec || rec.placeholder ? external_React_default.a.createElement(PlaceholderDSCard, {
        key: `dscard-${index}`
      }) : external_React_default.a.createElement(DSCard_DSCard, {
        key: `dscard-${rec.id}`,
        pos: rec.pos,
        campaignId: rec.campaign_id,
        image_src: rec.image_src,
        raw_image_src: rec.raw_image_src,
        title: rec.title,
        excerpt: rec.excerpt,
        url: rec.url,
        id: rec.id,
        shim: rec.shim,
        type: this.props.type,
        context: rec.context,
        dispatch: this.props.dispatch,
        source: rec.domain,
        pocket_id: rec.pocket_id,
        bookmarkGuid: rec.bookmarkGuid
      }));
    }

    let divisibility = ``;

    if (this.props.items % 4 === 0) {
      divisibility = `divisible-by-4`;
    } else if (this.props.items % 3 === 0) {
      divisibility = `divisible-by-3`;
    }

    return external_React_default.a.createElement("div", {
      className: `ds-card-grid ds-card-grid-${this.props.border} ds-card-grid-${divisibility}`
    }, cards);
  }

  render() {
    const {
      data
    } = this.props; // Handle a render before feed has been fetched by displaying nothing

    if (!data) {
      return null;
    } // Handle the case where a user has dismissed all recommendations


    const isEmpty = data.recommendations.length === 0;
    return external_React_default.a.createElement("div", null, external_React_default.a.createElement("div", {
      className: "ds-header"
    }, this.props.title), isEmpty ? external_React_default.a.createElement("div", {
      className: "ds-card-grid empty"
    }, external_React_default.a.createElement(DSEmptyState_DSEmptyState, {
      status: data.status,
      dispatch: this.props.dispatch,
      feed: this.props.feed
    })) : this.renderCards());
  }

}
CardGrid_CardGrid.defaultProps = {
  border: `border`,
  items: 4 // Number of stories to display

};
// EXTERNAL MODULE: ./content-src/components/CollapsibleSection/CollapsibleSection.jsx
var CollapsibleSection = __webpack_require__(33);

// EXTERNAL MODULE: external "ReactRedux"
var external_ReactRedux_ = __webpack_require__(27);

// CONCATENATED MODULE: ./content-src/components/DiscoveryStreamComponents/DSMessage/DSMessage.jsx
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */


class DSMessage_DSMessage extends external_React_default.a.PureComponent {
  render() {
    return external_React_default.a.createElement("div", {
      className: "ds-message"
    }, external_React_default.a.createElement("header", {
      className: "title"
    }, this.props.icon && external_React_default.a.createElement("div", {
      className: "glyph",
      style: {
        backgroundImage: `url(${this.props.icon})`
      }
    }), this.props.title && external_React_default.a.createElement("span", {
      className: "title-text"
    }, this.props.title), this.props.link_text && this.props.link_url && external_React_default.a.createElement(SafeAnchor_SafeAnchor, {
      className: "link",
      url: this.props.link_url
    }, this.props.link_text)));
  }

}
// CONCATENATED MODULE: ./content-src/components/DiscoveryStreamComponents/List/List.jsx
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */








/**
 * @note exported for testing only
 */

class List_ListItem extends external_React_default.a.PureComponent {
  // TODO performance: get feeds to send appropriately sized images rather
  // than waiting longer and scaling down on client?
  constructor(props) {
    super(props);
    this.onLinkClick = this.onLinkClick.bind(this);
  }

  onLinkClick(event) {
    if (this.props.dispatch) {
      this.props.dispatch(Actions["actionCreators"].UserEvent({
        event: "CLICK",
        source: this.props.type.toUpperCase(),
        action_position: this.props.pos
      }));
      this.props.dispatch(Actions["actionCreators"].ImpressionStats({
        source: this.props.type.toUpperCase(),
        click: 0,
        tiles: [{
          id: this.props.id,
          pos: this.props.pos,
          ...(this.props.shim && this.props.shim.click ? {
            shim: this.props.shim.click
          } : {})
        }]
      }));
    }
  }

  render() {
    return external_React_default.a.createElement("li", {
      className: `ds-list-item${this.props.placeholder ? " placeholder" : ""}`
    }, external_React_default.a.createElement(SafeAnchor_SafeAnchor, {
      className: "ds-list-item-link",
      dispatch: this.props.dispatch,
      onLinkClick: !this.props.placeholder ? this.onLinkClick : undefined,
      url: this.props.url
    }, external_React_default.a.createElement("div", {
      className: "ds-list-item-text"
    }, external_React_default.a.createElement("div", null, external_React_default.a.createElement("div", {
      className: "ds-list-item-title clamp"
    }, this.props.title), this.props.excerpt && external_React_default.a.createElement("div", {
      className: "ds-list-item-excerpt clamp"
    }, this.props.excerpt)), external_React_default.a.createElement("p", null, this.props.context && external_React_default.a.createElement("span", null, external_React_default.a.createElement("span", {
      className: "ds-list-item-context clamp"
    }, this.props.context), external_React_default.a.createElement("br", null)), external_React_default.a.createElement("span", {
      className: "ds-list-item-info clamp"
    }, this.props.domain))), external_React_default.a.createElement(DSImage_DSImage, {
      extraClassNames: "ds-list-image",
      source: this.props.image_src,
      rawSource: this.props.raw_image_src
    }), external_React_default.a.createElement(ImpressionStats["ImpressionStats"], {
      campaignId: this.props.campaignId,
      rows: [{
        id: this.props.id,
        pos: this.props.pos,
        ...(this.props.shim && this.props.shim.impression ? {
          shim: this.props.shim.impression
        } : {})
      }],
      dispatch: this.props.dispatch,
      source: this.props.type
    })), !this.props.placeholder && external_React_default.a.createElement(DSLinkMenu_DSLinkMenu, {
      id: this.props.id,
      index: this.props.pos,
      dispatch: this.props.dispatch,
      url: this.props.url,
      title: this.props.title,
      source: this.props.source,
      type: this.props.type,
      pocket_id: this.props.pocket_id,
      shim: this.props.shim,
      bookmarkGuid: this.props.bookmarkGuid
    }));
  }

}
const PlaceholderListItem = props => external_React_default.a.createElement(List_ListItem, {
  placeholder: true
});
/**
 * @note exported for testing only
 */

function _List(props) {
  const renderList = () => {
    const recs = props.data.recommendations.slice(props.recStartingPoint, props.recStartingPoint + props.items);
    const recMarkup = [];

    for (let index = 0; index < props.items; index++) {
      const rec = recs[index];
      recMarkup.push(!rec || rec.placeholder ? external_React_default.a.createElement(PlaceholderListItem, {
        key: `ds-list-item-${index}`
      }) : external_React_default.a.createElement(List_ListItem, {
        key: `ds-list-item-${rec.id}`,
        dispatch: props.dispatch,
        campaignId: rec.campaign_id,
        domain: rec.domain,
        excerpt: rec.excerpt,
        id: rec.id,
        shim: rec.shim,
        image_src: rec.image_src,
        raw_image_src: rec.raw_image_src,
        pos: rec.pos,
        title: rec.title,
        context: rec.context,
        type: props.type,
        url: rec.url,
        pocket_id: rec.pocket_id,
        bookmarkGuid: rec.bookmarkGuid
      }));
    }

    const listStyles = ["ds-list", props.fullWidth ? "ds-list-full-width" : "", props.hasBorders ? "ds-list-borders" : "", props.hasImages ? "ds-list-images" : "", props.hasNumbers ? "ds-list-numbers" : ""];
    return external_React_default.a.createElement("ul", {
      className: listStyles.join(" ")
    }, recMarkup);
  };

  const {
    data
  } = props;

  if (!data || !data.recommendations) {
    return null;
  } // Handle the case where a user has dismissed all recommendations


  const isEmpty = data.recommendations.length === 0;
  return external_React_default.a.createElement("div", null, props.header && props.header.title ? external_React_default.a.createElement("div", {
    className: "ds-header"
  }, props.header.title) : null, isEmpty ? external_React_default.a.createElement("div", {
    className: "ds-list empty"
  }, external_React_default.a.createElement(DSEmptyState_DSEmptyState, {
    status: data.status,
    dispatch: props.dispatch,
    feed: props.feed
  })) : renderList());
}
_List.defaultProps = {
  recStartingPoint: 0,
  // Index of recommendations to start displaying from
  fullWidth: false,
  // Display items taking up the whole column
  hasBorders: false,
  // Display lines separating each item
  hasImages: false,
  // Display images for each item
  hasNumbers: false,
  // Display numbers for each item
  items: 6 // Number of stories to display.  TODO: get from endpoint

};
const List = Object(external_ReactRedux_["connect"])(state => ({
  DiscoveryStream: state.DiscoveryStream
}))(_List);
// CONCATENATED MODULE: ./content-src/components/DiscoveryStreamComponents/Hero/Hero.jsx
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */









class Hero_Hero extends external_React_default.a.PureComponent {
  constructor(props) {
    super(props);
    this.onLinkClick = this.onLinkClick.bind(this);
  }

  onLinkClick(event) {
    if (this.props.dispatch) {
      this.props.dispatch(Actions["actionCreators"].UserEvent({
        event: "CLICK",
        source: this.props.type.toUpperCase(),
        action_position: this.heroRec.pos
      }));
      this.props.dispatch(Actions["actionCreators"].ImpressionStats({
        source: this.props.type.toUpperCase(),
        click: 0,
        tiles: [{
          id: this.heroRec.id,
          pos: this.heroRec.pos,
          ...(this.heroRec.shim && this.heroRec.shim.click ? {
            shim: this.heroRec.shim.click
          } : {})
        }]
      }));
    }
  }

  renderHero() {
    let [heroRec, ...otherRecs] = this.props.data.recommendations.slice(0, this.props.items);
    this.heroRec = heroRec;
    const cards = [];

    for (let index = 0; index < this.props.items - 1; index++) {
      const rec = otherRecs[index];
      cards.push(!rec || rec.placeholder ? external_React_default.a.createElement(PlaceholderDSCard, {
        key: `dscard-${index}`
      }) : external_React_default.a.createElement(DSCard_DSCard, {
        campaignId: rec.campaign_id,
        key: `dscard-${rec.id}`,
        image_src: rec.image_src,
        raw_image_src: rec.raw_image_src,
        title: rec.title,
        url: rec.url,
        id: rec.id,
        shim: rec.shim,
        pos: rec.pos,
        type: this.props.type,
        dispatch: this.props.dispatch,
        context: rec.context,
        source: rec.domain,
        pocket_id: rec.pocket_id,
        bookmarkGuid: rec.bookmarkGuid
      }));
    }

    let heroCard = null;

    if (!heroRec || heroRec.placeholder) {
      heroCard = external_React_default.a.createElement(PlaceholderDSCard, null);
    } else {
      heroCard = external_React_default.a.createElement("div", {
        className: "ds-hero-item",
        key: `dscard-${heroRec.id}`
      }, external_React_default.a.createElement(SafeAnchor_SafeAnchor, {
        className: "wrapper",
        dispatch: this.props.dispatch,
        onLinkClick: this.onLinkClick,
        url: heroRec.url
      }, external_React_default.a.createElement("div", {
        className: "img-wrapper"
      }, external_React_default.a.createElement(DSImage_DSImage, {
        extraClassNames: "img",
        source: heroRec.image_src,
        rawSource: heroRec.raw_image_src
      })), external_React_default.a.createElement("div", {
        className: "meta"
      }, external_React_default.a.createElement("div", {
        className: "header-and-excerpt"
      }, heroRec.context ? external_React_default.a.createElement("p", {
        className: "context"
      }, heroRec.context) : external_React_default.a.createElement("p", {
        className: "source clamp"
      }, heroRec.domain), external_React_default.a.createElement("header", {
        className: "clamp"
      }, heroRec.title), external_React_default.a.createElement("p", {
        className: "excerpt clamp"
      }, heroRec.excerpt))), external_React_default.a.createElement(ImpressionStats["ImpressionStats"], {
        campaignId: heroRec.campaign_id,
        rows: [{
          id: heroRec.id,
          pos: heroRec.pos,
          ...(heroRec.shim && heroRec.shim.impression ? {
            shim: heroRec.shim.impression
          } : {})
        }],
        dispatch: this.props.dispatch,
        source: this.props.type
      })), external_React_default.a.createElement(DSLinkMenu_DSLinkMenu, {
        id: heroRec.id,
        index: heroRec.pos,
        dispatch: this.props.dispatch,
        url: heroRec.url,
        title: heroRec.title,
        source: heroRec.domain,
        type: this.props.type,
        pocket_id: heroRec.pocket_id,
        shim: heroRec.shim,
        bookmarkGuid: heroRec.bookmarkGuid
      }));
    }

    let list = external_React_default.a.createElement(List, {
      recStartingPoint: 1,
      data: this.props.data,
      feed: this.props.feed,
      hasImages: true,
      hasBorders: this.props.border === `border`,
      items: this.props.items - 1,
      type: `Hero`
    });
    return external_React_default.a.createElement("div", {
      className: `ds-hero ds-hero-${this.props.border}`
    }, heroCard, external_React_default.a.createElement("div", {
      className: `${this.props.subComponentType}`
    }, this.props.subComponentType === `cards` ? cards : list));
  }

  render() {
    const {
      data
    } = this.props; // Handle a render before feed has been fetched by displaying nothing

    if (!data || !data.recommendations) {
      return external_React_default.a.createElement("div", null);
    } // Handle the case where a user has dismissed all recommendations


    const isEmpty = data.recommendations.length === 0;
    return external_React_default.a.createElement("div", null, external_React_default.a.createElement("div", {
      className: "ds-header"
    }, this.props.title), isEmpty ? external_React_default.a.createElement("div", {
      className: "ds-hero empty"
    }, external_React_default.a.createElement(DSEmptyState_DSEmptyState, {
      status: data.status,
      dispatch: this.props.dispatch,
      feed: this.props.feed
    })) : this.renderHero());
  }

}
Hero_Hero.defaultProps = {
  data: {},
  border: `border`,
  items: 1 // Number of stories to display

};
// EXTERNAL MODULE: ./content-src/components/Sections/Sections.jsx
var Sections = __webpack_require__(39);

// CONCATENATED MODULE: ./content-src/components/DiscoveryStreamComponents/Highlights/Highlights.jsx
function Highlights_extends() { Highlights_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return Highlights_extends.apply(this, arguments); }

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */



class Highlights_Highlights extends external_React_default.a.PureComponent {
  render() {
    const section = this.props.Sections.find(s => s.id === "highlights");

    if (!section || !section.enabled) {
      return null;
    }

    return external_React_default.a.createElement("div", {
      className: "ds-highlights sections-list"
    }, external_React_default.a.createElement(Sections["SectionIntl"], Highlights_extends({}, section, {
      isFixed: true
    })));
  }

}
const Highlights = Object(external_ReactRedux_["connect"])(state => ({
  Sections: state.Sections
}))(Highlights_Highlights);
// CONCATENATED MODULE: ./content-src/components/DiscoveryStreamComponents/HorizontalRule/HorizontalRule.jsx
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */

class HorizontalRule_HorizontalRule extends external_React_default.a.PureComponent {
  render() {
    return external_React_default.a.createElement("hr", {
      className: "ds-hr"
    });
  }

}
// CONCATENATED MODULE: ./content-src/components/DiscoveryStreamComponents/Navigation/Navigation.jsx
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */


class Navigation_Topic extends external_React_default.a.PureComponent {
  render() {
    const {
      url,
      name
    } = this.props;
    return external_React_default.a.createElement("li", null, external_React_default.a.createElement(SafeAnchor_SafeAnchor, {
      key: name,
      url: url
    }, name));
  }

}
class Navigation_Navigation extends external_React_default.a.PureComponent {
  render() {
    const {
      links
    } = this.props || [];
    const {
      alignment
    } = this.props || "centered";
    const header = this.props.header || {};
    return external_React_default.a.createElement("div", {
      className: `ds-navigation ds-navigation-${alignment}`
    }, header.title ? external_React_default.a.createElement("div", {
      className: "ds-header"
    }, header.title) : null, external_React_default.a.createElement("div", null, external_React_default.a.createElement("ul", null, links && links.map(t => external_React_default.a.createElement(Navigation_Topic, {
      key: t.name,
      url: t.url,
      name: t.name
    })))));
  }

}
// CONCATENATED MODULE: ./content-src/components/DiscoveryStreamComponents/SectionTitle/SectionTitle.jsx
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */

class SectionTitle_SectionTitle extends external_React_default.a.PureComponent {
  render() {
    const {
      header: {
        title,
        subtitle
      }
    } = this.props;
    return external_React_default.a.createElement("div", {
      className: "ds-section-title"
    }, external_React_default.a.createElement("div", {
      className: "title"
    }, title), subtitle ? external_React_default.a.createElement("div", {
      className: "subtitle"
    }, subtitle) : null);
  }

}
// CONCATENATED MODULE: ./content-src/lib/selectLayoutRender.js
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */
const selectLayoutRender = (state, prefs, rickRollCache) => {
  const {
    layout,
    feeds,
    spocs
  } = state;
  let spocIndex = 0;
  let bufferRollCache = []; // Records the chosen and unchosen spocs by the probability selection.

  let chosenSpocs = new Set();
  let unchosenSpocs = new Set();

  function rollForSpocs(data, spocsConfig) {
    const recommendations = [...data.recommendations];

    for (let position of spocsConfig.positions) {
      const spoc = spocs.data.spocs[spocIndex];

      if (!spoc) {
        break;
      } // Cache random number for a position


      let rickRoll;

      if (!rickRollCache.length) {
        rickRoll = Math.random();
        bufferRollCache.push(rickRoll);
      } else {
        rickRoll = rickRollCache.shift();
        bufferRollCache.push(rickRoll);
      }

      if (rickRoll <= spocsConfig.probability) {
        spocIndex++;

        if (!spocs.blocked.includes(spoc.url)) {
          recommendations.splice(position.index, 0, spoc);
          chosenSpocs.add(spoc);
        }
      } else {
        unchosenSpocs.add(spoc);
      }
    }

    return { ...data,
      recommendations
    };
  }

  const positions = {};
  const DS_COMPONENTS = ["Message", "SectionTitle", "Navigation", "CardGrid", "Hero", "HorizontalRule", "List"];
  const filterArray = [];

  if (!prefs["feeds.topsites"]) {
    filterArray.push("TopSites");
  }

  if (!prefs["feeds.section.topstories"]) {
    filterArray.push(...DS_COMPONENTS);
  }

  const placeholderComponent = component => {
    const data = {
      recommendations: []
    };
    let items = 0;

    if (component.properties && component.properties.items) {
      items = component.properties.items;
    }

    for (let i = 0; i < items; i++) {
      data.recommendations.push({
        placeholder: true
      });
    }

    return { ...component,
      data
    };
  };

  const handleComponent = component => {
    positions[component.type] = positions[component.type] || 0;
    const feed = feeds.data[component.feed.url];
    let data = {
      recommendations: []
    };

    if (feed && feed.data) {
      data = { ...feed.data,
        recommendations: [...(feed.data.recommendations || [])]
      };
    }

    if (component && component.properties && component.properties.offset) {
      data = { ...data,
        recommendations: data.recommendations.slice(component.properties.offset)
      };
    } // Ensure we have recs available for this feed.


    const hasRecs = data && data.recommendations; // Do we ever expect to possibly have a spoc.

    if (hasRecs && component.spocs && component.spocs.positions && component.spocs.positions.length) {
      // We expect a spoc, spocs are loaded, and the server returned spocs.
      if (spocs.loaded && spocs.data.spocs && spocs.data.spocs.length) {
        data = rollForSpocs(data, component.spocs);
      }
    }

    let items = 0;

    if (component.properties && component.properties.items) {
      items = Math.min(component.properties.items, data.recommendations.length);
    } // loop through a component items
    // Store the items position sequentially for multiple components of the same type.
    // Example: A second card grid starts pos offset from the last card grid.


    for (let i = 0; i < items; i++) {
      data.recommendations[i] = { ...data.recommendations[i],
        pos: positions[component.type]++
      };
    }

    return { ...component,
      data
    };
  };

  const renderLayout = () => {
    const renderedLayoutArray = [];

    for (const row of layout.filter(r => r.components.filter(c => !filterArray.includes(c.type)).length)) {
      let components = [];
      renderedLayoutArray.push({ ...row,
        components
      });

      for (const component of row.components.filter(c => !filterArray.includes(c.type))) {
        if (component.feed) {
          const spocsConfig = component.spocs; // Are we still waiting on a feed/spocs, render what we have,
          // add a placeholder for this component, and bail out early.

          if (!feeds.data[component.feed.url] || spocsConfig && spocsConfig.positions && spocsConfig.positions.length && !spocs.loaded) {
            components.push(placeholderComponent(component));
            return renderedLayoutArray;
          }

          components.push(handleComponent(component));
        } else {
          components.push(component);
        }
      }
    }

    return renderedLayoutArray;
  };

  const layoutRender = renderLayout(layout); // If empty, fill rickRollCache with random probability values from bufferRollCache

  if (!rickRollCache.length) {
    rickRollCache.push(...bufferRollCache);
  } // Generate the payload for the SPOCS Fill ping. Note that a SPOC could be rejected
  // by the `probability_selection` first, then gets chosen for the next position. For
  // all other SPOCS that never went through the probabilistic selection, its reason will
  // be "out_of_position".


  let spocsFill = [];

  if (spocs.loaded && feeds.loaded && spocs.data.spocs) {
    const chosenSpocsFill = [...chosenSpocs].map(spoc => ({
      id: spoc.id,
      reason: "n/a",
      displayed: 1,
      full_recalc: 0
    }));
    const unchosenSpocsFill = [...unchosenSpocs].filter(spoc => !chosenSpocs.has(spoc)).map(spoc => ({
      id: spoc.id,
      reason: "probability_selection",
      displayed: 0,
      full_recalc: 0
    }));
    const outOfPositionSpocsFill = spocs.data.spocs.slice(spocIndex).filter(spoc => !unchosenSpocs.has(spoc)).map(spoc => ({
      id: spoc.id,
      reason: "out_of_position",
      displayed: 0,
      full_recalc: 0
    }));
    spocsFill = [...chosenSpocsFill, ...unchosenSpocsFill, ...outOfPositionSpocsFill];
  }

  return {
    spocsFill,
    layoutRender
  };
};
// EXTERNAL MODULE: ./content-src/components/TopSites/TopSites.jsx
var TopSites = __webpack_require__(46);

// CONCATENATED MODULE: ./content-src/components/DiscoveryStreamComponents/TopSites/TopSites.jsx
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */



class TopSites_TopSites extends external_React_default.a.PureComponent {
  render() {
    const header = this.props.header || {};
    return external_React_default.a.createElement("div", {
      className: "ds-top-sites"
    }, external_React_default.a.createElement(TopSites["TopSites"], {
      isFixed: true,
      title: header.title
    }));
  }

}
const TopSites_TopSites_TopSites = Object(external_ReactRedux_["connect"])(state => ({
  TopSites: state.TopSites
}))(TopSites_TopSites);
// CONCATENATED MODULE: ./content-src/components/DiscoveryStreamBase/DiscoveryStreamBase.jsx
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isAllowedCSS", function() { return isAllowedCSS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_DiscoveryStreamBase", function() { return DiscoveryStreamBase_DiscoveryStreamBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DiscoveryStreamBase", function() { return DiscoveryStreamBase; });
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */














const ALLOWED_CSS_URL_PREFIXES = ["chrome://", "resource://", "https://img-getpocket.cdn.mozilla.net/"];
const DUMMY_CSS_SELECTOR = "DUMMY#CSS.SELECTOR";
let rickRollCache = []; // Cache of random probability values for a spoc position

/**
 * Validate a CSS declaration. The values are assumed to be normalized by CSSOM.
 */

function isAllowedCSS(property, value) {
  // Bug 1454823: INTERNAL properties, e.g., -moz-context-properties, are
  // exposed but their values aren't resulting in getting nothing. Fortunately,
  // we don't care about validating the values of the current set of properties.
  if (value === undefined) {
    return true;
  } // Make sure all urls are of the allowed protocols/prefixes


  const urls = value.match(/url\("[^"]+"\)/g);
  return !urls || urls.every(url => ALLOWED_CSS_URL_PREFIXES.some(prefix => url.slice(5).startsWith(prefix)));
}
class DiscoveryStreamBase_DiscoveryStreamBase extends external_React_default.a.PureComponent {
  constructor(props) {
    super(props);
    this.onStyleMount = this.onStyleMount.bind(this);
  }

  onStyleMount(style) {
    // Unmounting style gets rid of old styles, so nothing else to do
    if (!style) {
      return;
    }

    const {
      sheet
    } = style;
    const styles = JSON.parse(style.dataset.styles);
    styles.forEach((row, rowIndex) => {
      row.forEach((component, componentIndex) => {
        // Nothing to do without optional styles overrides
        if (!component) {
          return;
        }

        Object.entries(component).forEach(([selectors, declarations]) => {
          // Start with a dummy rule to validate declarations and selectors
          sheet.insertRule(`${DUMMY_CSS_SELECTOR} {}`);
          const [rule] = sheet.cssRules; // Validate declarations and remove any offenders. CSSOM silently
          // discards invalid entries, so here we apply extra restrictions.

          rule.style = declarations;
          [...rule.style].forEach(property => {
            const value = rule.style[property];

            if (!isAllowedCSS(property, value)) {
              console.error(`Bad CSS declaration ${property}: ${value}`); // eslint-disable-line no-console

              rule.style.removeProperty(property);
            }
          }); // Set the actual desired selectors scoped to the component

          const prefix = `.ds-layout > .ds-column:nth-child(${rowIndex + 1}) .ds-column-grid > :nth-child(${componentIndex + 1})`; // NB: Splitting on "," doesn't work with strings with commas, but
          // we're okay with not supporting those selectors

          rule.selectorText = selectors.split(",").map(selector => prefix + ( // Assume :pseudo-classes are for component instead of descendant
          selector[0] === ":" ? "" : " ") + selector).join(","); // CSSOM silently ignores bad selectors, so we'll be noisy instead

          if (rule.selectorText === DUMMY_CSS_SELECTOR) {
            console.error(`Bad CSS selector ${selectors}`); // eslint-disable-line no-console
          }
        });
      });
    });
  }

  renderComponent(component, embedWidth) {
    switch (component.type) {
      case "Highlights":
        return external_React_default.a.createElement(Highlights, null);

      case "TopSites":
        return external_React_default.a.createElement(TopSites_TopSites_TopSites, {
          header: component.header
        });

      case "Message":
        return external_React_default.a.createElement(DSMessage_DSMessage, {
          title: component.header && component.header.title,
          subtitle: component.header && component.header.subtitle,
          link_text: component.header && component.header.link_text,
          link_url: component.header && component.header.link_url,
          icon: component.header && component.header.icon
        });

      case "SectionTitle":
        return external_React_default.a.createElement(SectionTitle_SectionTitle, {
          header: component.header
        });

      case "Navigation":
        return external_React_default.a.createElement(Navigation_Navigation, {
          links: component.properties.links,
          alignment: component.properties.alignment,
          header: component.header
        });

      case "CardGrid":
        return external_React_default.a.createElement(CardGrid_CardGrid, {
          title: component.header && component.header.title,
          data: component.data,
          feed: component.feed,
          border: component.properties.border,
          type: component.type,
          dispatch: this.props.dispatch,
          items: component.properties.items
        });

      case "Hero":
        return external_React_default.a.createElement(Hero_Hero, {
          subComponentType: embedWidth >= 9 ? `cards` : `list`,
          feed: component.feed,
          title: component.header && component.header.title,
          data: component.data,
          border: component.properties.border,
          type: component.type,
          dispatch: this.props.dispatch,
          items: component.properties.items
        });

      case "HorizontalRule":
        return external_React_default.a.createElement(HorizontalRule_HorizontalRule, null);

      case "List":
        return external_React_default.a.createElement(List, {
          data: component.data,
          feed: component.feed,
          fullWidth: component.properties.full_width,
          hasBorders: component.properties.border === "border",
          hasImages: component.properties.has_images,
          hasNumbers: component.properties.has_numbers,
          items: component.properties.items,
          type: component.type,
          header: component.header
        });

      default:
        return external_React_default.a.createElement("div", null, component.type);
    }
  }

  renderStyles(styles) {
    // Use json string as both the key and styles to render so React knows when
    // to unmount and mount a new instance for new styles.
    const json = JSON.stringify(styles);
    return external_React_default.a.createElement("style", {
      key: json,
      "data-styles": json,
      ref: this.onStyleMount
    });
  }

  componentWillReceiveProps(oldProps) {
    if (this.props.DiscoveryStream.layout !== oldProps.DiscoveryStream.layout) {
      rickRollCache = [];
    }
  }

  render() {
    // Select layout render data by adding spocs and position to recommendations
    const {
      layoutRender,
      spocsFill
    } = selectLayoutRender(this.props.DiscoveryStream, this.props.Prefs.values, rickRollCache);
    const {
      config,
      spocs,
      feeds
    } = this.props.DiscoveryStream; // Send SPOCS Fill if any. Note that it should not send it again if the same
    // page gets re-rendered by state changes.

    if (spocs.loaded && feeds.loaded && spocsFill.length && !this._spocsFillSent) {
      this.props.dispatch(Actions["actionCreators"].DiscoveryStreamSpocsFill({
        spoc_fills: spocsFill
      }));
      this._spocsFillSent = true;
    } // Allow rendering without extracting special components


    if (!config.collapsible) {
      return this.renderLayout(layoutRender);
    } // Find the first component of a type and remove it from layout


    const extractComponent = type => {
      for (const [rowIndex, row] of Object.entries(layoutRender)) {
        for (const [index, component] of Object.entries(row.components)) {
          if (component.type === type) {
            // Remove the row if it was the only component or the single item
            if (row.components.length === 1) {
              layoutRender.splice(rowIndex, 1);
            } else {
              row.components.splice(index, 1);
            }

            return component;
          }
        }
      }

      return null;
    }; // Get "topstories" Section state for default values


    const topStories = this.props.Sections.find(s => s.id === "topstories");

    if (!topStories) {
      return null;
    } // Extract TopSites to render before the rest and Message to use for header


    const topSites = extractComponent("TopSites");
    const message = extractComponent("Message") || {
      header: {
        link_text: topStories.learnMore.link.message,
        link_url: topStories.learnMore.link.href,
        title: topStories.title
      }
    }; // Render a DS-style TopSites then the rest if any in a collapsible section

    return external_React_default.a.createElement(external_React_default.a.Fragment, null, topSites && this.renderLayout([{
      width: 12,
      components: [topSites]
    }]), layoutRender.length > 0 && external_React_default.a.createElement(CollapsibleSection["CollapsibleSection"], {
      className: "ds-layout",
      collapsed: topStories.pref.collapsed,
      dispatch: this.props.dispatch,
      icon: topStories.icon,
      id: topStories.id,
      isFixed: true,
      learnMore: {
        link: {
          href: message.header.link_url,
          message: message.header.link_text
        }
      },
      privacyNoticeURL: topStories.privacyNoticeURL,
      showPrefName: topStories.pref.feed,
      title: message.header.title
    }, this.renderLayout(layoutRender)), this.renderLayout([{
      width: 12,
      components: [{
        type: "Highlights"
      }]
    }]));
  }

  renderLayout(layoutRender) {
    const styles = [];
    return external_React_default.a.createElement("div", {
      className: "discovery-stream ds-layout"
    }, layoutRender.map((row, rowIndex) => external_React_default.a.createElement("div", {
      key: `row-${rowIndex}`,
      className: `ds-column ds-column-${row.width}`
    }, external_React_default.a.createElement("div", {
      className: "ds-column-grid"
    }, row.components.map((component, componentIndex) => {
      if (!component) {
        return null;
      }

      styles[rowIndex] = [...(styles[rowIndex] || []), component.styles];
      return external_React_default.a.createElement("div", {
        key: `component-${componentIndex}`
      }, this.renderComponent(component, row.width));
    })))), this.renderStyles(styles));
  }

}
const DiscoveryStreamBase = Object(external_ReactRedux_["connect"])(state => ({
  DiscoveryStream: state.DiscoveryStream,
  Prefs: state.Prefs,
  Sections: state.Sections
}))(DiscoveryStreamBase_DiscoveryStreamBase);

/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vY29udGVudC1zcmMvYWN0aXZpdHktc3RyZWFtLmpzeCIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL2NvbW1vbi9BY3Rpb25zLmpzbSIsIndlYnBhY2s6Ly8vLi9jb250ZW50LXNyYy9jb21wb25lbnRzL0Jhc2UvQmFzZS5qc3giLCJ3ZWJwYWNrOi8vLy4vY29udGVudC1zcmMvY29tcG9uZW50cy9BU1JvdXRlckFkbWluL0FTUm91dGVyQWRtaW4uanN4Iiwid2VicGFjazovLy8uL2NvbnRlbnQtc3JjL2Fzcm91dGVyL2Fzcm91dGVyLWNvbnRlbnQuanN4Iiwid2VicGFjazovLy8uL2NvbnRlbnQtc3JjL2xpYi9pbml0LXN0b3JlLmpzIiwid2VicGFjazovLy9leHRlcm5hbCBcIlJlZHV4XCIiLCJ3ZWJwYWNrOi8vLy4vY29udGVudC1zcmMvYXNyb3V0ZXIvY29tcG9uZW50cy9JbXByZXNzaW9uc1dyYXBwZXIvSW1wcmVzc2lvbnNXcmFwcGVyLmpzeCIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJSZWFjdFwiIiwid2VicGFjazovLy9leHRlcm5hbCBcIlByb3BUeXBlc1wiIiwid2VicGFjazovLy8uL2NvbnRlbnQtc3JjL2xpYi9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiUmVhY3RET01cIiIsIndlYnBhY2s6Ly8vLi9jb250ZW50LXNyYy9hc3JvdXRlci9jb21wb25lbnRzL1JpY2hUZXh0L1JpY2hUZXh0LmpzeCIsIndlYnBhY2s6Ly8vLi9jb250ZW50LXNyYy9hc3JvdXRlci90ZW1wbGF0ZS11dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9jb250ZW50LXNyYy9hc3JvdXRlci90ZW1wbGF0ZXMvVHJhaWxoZWFkL1RyYWlsaGVhZC5qc3giLCJ3ZWJwYWNrOi8vLy4vY29udGVudC1zcmMvYXNyb3V0ZXIvY29tcG9uZW50cy9Nb2RhbE92ZXJsYXkvTW9kYWxPdmVybGF5LmpzeCIsIndlYnBhY2s6Ly8vLi9jb250ZW50LXNyYy9hc3JvdXRlci90ZW1wbGF0ZXMvRmlyc3RSdW4vYWRkVXRtUGFyYW1zLmpzIiwid2VicGFjazovLy8uL2NvbnRlbnQtc3JjL2Fzcm91dGVyL3RlbXBsYXRlcy9SZXR1cm5Ub0FNTy9SZXR1cm5Ub0FNTy5qc3giLCJ3ZWJwYWNrOi8vLy4vY29udGVudC1zcmMvYXNyb3V0ZXIvdGVtcGxhdGVzL1N0YXJ0dXBPdmVybGF5L1N0YXJ0dXBPdmVybGF5LmpzeCIsIndlYnBhY2s6Ly8vLi9jb250ZW50LXNyYy9hc3JvdXRlci90ZW1wbGF0ZXMvRmlyc3RSdW4vVHJpcGxldHMuanN4Iiwid2VicGFjazovLy8uL2NvbnRlbnQtc3JjL2Fzcm91dGVyL3RlbXBsYXRlcy9PbmJvYXJkaW5nTWVzc2FnZS9PbmJvYXJkaW5nTWVzc2FnZS5qc3giLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiUmVhY3RSZWR1eFwiIiwid2VicGFjazovLy8uL2NvbnRlbnQtc3JjL2NvbXBvbmVudHMvQVNSb3V0ZXJBZG1pbi9TaW1wbGVIYXNoUm91dGVyLmpzeCIsIndlYnBhY2s6Ly8vLi9jb250ZW50LXNyYy9jb21wb25lbnRzL0NvbmZpcm1EaWFsb2cvQ29uZmlybURpYWxvZy5qc3giLCJ3ZWJwYWNrOi8vLy4vY29udGVudC1zcmMvY29tcG9uZW50cy9Db250ZXh0TWVudS9Db250ZXh0TWVudS5qc3giLCJ3ZWJwYWNrOi8vLy4vY29udGVudC1zcmMvY29tcG9uZW50cy9Db250ZXh0TWVudS9Db250ZXh0TWVudUJ1dHRvbi5qc3giLCJ3ZWJwYWNrOi8vLy4vY29udGVudC1zcmMvY29tcG9uZW50cy9EaXNjb3ZlcnlTdHJlYW1JbXByZXNzaW9uU3RhdHMvSW1wcmVzc2lvblN0YXRzLmpzeCIsIndlYnBhY2s6Ly8vLi9jb250ZW50LXNyYy9jb21wb25lbnRzL0NvbGxhcHNpYmxlU2VjdGlvbi9Db2xsYXBzaWJsZVNlY3Rpb24uanN4Iiwid2VicGFjazovLy8uL2NvbnRlbnQtc3JjL2NvbXBvbmVudHMvRXJyb3JCb3VuZGFyeS9FcnJvckJvdW5kYXJ5LmpzeCIsIndlYnBhY2s6Ly8vLi9jb250ZW50LXNyYy9jb21wb25lbnRzL0ExMXlMaW5rQnV0dG9uL0ExMXlMaW5rQnV0dG9uLmpzeCIsIndlYnBhY2s6Ly8vLi9jb250ZW50LXNyYy9jb21wb25lbnRzL0ZsdWVudE9yVGV4dC9GbHVlbnRPclRleHQuanN4Iiwid2VicGFjazovLy8uL2NvbnRlbnQtc3JjL2NvbXBvbmVudHMvU2VjdGlvbk1lbnUvU2VjdGlvbk1lbnUuanN4Iiwid2VicGFjazovLy8uL2NvbnRlbnQtc3JjL2xpYi9zZWN0aW9uLW1lbnUtb3B0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9jb250ZW50LXNyYy9jb21wb25lbnRzL1NlY3Rpb25zL1NlY3Rpb25zLmpzeCIsIndlYnBhY2s6Ly8vLi9jb250ZW50LXNyYy9saWIvc2NyZWVuc2hvdC11dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9jb250ZW50LXNyYy9jb21wb25lbnRzL0NvbXBvbmVudFBlcmZUaW1lci9Db21wb25lbnRQZXJmVGltZXIuanN4Iiwid2VicGFjazovLy8uL2NvbW1vbi9QZXJmU2VydmljZS5qc20iLCJ3ZWJwYWNrOi8vLy4vY29udGVudC1zcmMvY29tcG9uZW50cy9Nb3JlUmVjb21tZW5kYXRpb25zL01vcmVSZWNvbW1lbmRhdGlvbnMuanN4Iiwid2VicGFjazovLy8uL2NvbnRlbnQtc3JjL2NvbXBvbmVudHMvUG9ja2V0TG9nZ2VkSW5DdGEvUG9ja2V0TG9nZ2VkSW5DdGEuanN4Iiwid2VicGFjazovLy8uL2NvbnRlbnQtc3JjL2NvbXBvbmVudHMvVG9waWNzL1RvcGljcy5qc3giLCJ3ZWJwYWNrOi8vLy4vY29udGVudC1zcmMvY29tcG9uZW50cy9Ub3BTaXRlcy9Ub3BTaXRlcy5qc3giLCJ3ZWJwYWNrOi8vLy4vY29udGVudC1zcmMvY29tcG9uZW50cy9Ub3BTaXRlcy9Ub3BTaXRlc0NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly8vLi9jb250ZW50LXNyYy9jb21wb25lbnRzL1RvcFNpdGVzL1NlYXJjaFNob3J0Y3V0c0Zvcm0uanN4Iiwid2VicGFjazovLy8uL2NvbnRlbnQtc3JjL2NvbXBvbmVudHMvVG9wU2l0ZXMvVG9wU2l0ZS5qc3giLCJ3ZWJwYWNrOi8vLy4vY29udGVudC1zcmMvY29tcG9uZW50cy9TZWFyY2gvU2VhcmNoLmpzeCIsIndlYnBhY2s6Ly8vLi9jb250ZW50LXNyYy9saWIvZGV0ZWN0LXVzZXItc2Vzc2lvbi1zdGFydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvY2xhc3MvYWRkQ2xhc3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZsdWVudC1zZXF1ZW5jZS9zcmMvbWFwX3N5bmMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZsdWVudC1zZXF1ZW5jZS9zcmMvbWFwX2FzeW5jLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mbHVlbnQtc2VxdWVuY2Uvc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jYWNoZWQtaXRlcmFibGUvc3JjL2NhY2hlZF9pdGVyYWJsZS5tanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NhY2hlZC1pdGVyYWJsZS9zcmMvY2FjaGVkX3N5bmNfaXRlcmFibGUubWpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jYWNoZWQtaXRlcmFibGUvc3JjL2NhY2hlZF9hc3luY19pdGVyYWJsZS5tanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NhY2hlZC1pdGVyYWJsZS9zcmMvaW5kZXgubWpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mbHVlbnQtcmVhY3Qvc3JjL2xvY2FsaXphdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmx1ZW50LXJlYWN0L3NyYy9tYXJrdXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZsdWVudC1yZWFjdC9zcmMvcHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZsdWVudC1yZWFjdC9zcmMvd2l0aF9sb2NhbGl6YXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZsdWVudC1yZWFjdC92ZW5kb3Ivb21pdHRlZENsb3NlVGFncy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmx1ZW50LXJlYWN0L3ZlbmRvci92b2lkRWxlbWVudFRhZ3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZsdWVudC1yZWFjdC9zcmMvbG9jYWxpemVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mbHVlbnQtcmVhY3Qvc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8uL2NvbnRlbnQtc3JjL2Fzcm91dGVyL2NvbXBvbmVudHMvQnV0dG9uL0J1dHRvbi5qc3giLCJ3ZWJwYWNrOi8vLy4vY29udGVudC1zcmMvYXNyb3V0ZXIvY29tcG9uZW50cy9Db25kaXRpb25hbFdyYXBwZXIvQ29uZGl0aW9uYWxXcmFwcGVyLmpzeCIsIndlYnBhY2s6Ly8vLi9jb250ZW50LXNyYy9hc3JvdXRlci9jb21wb25lbnRzL1NuaXBwZXRCYXNlL1NuaXBwZXRCYXNlLmpzeCIsIndlYnBhY2s6Ly8vLi9jb250ZW50LXNyYy9hc3JvdXRlci90ZW1wbGF0ZXMvU2ltcGxlU25pcHBldC9TaW1wbGVTbmlwcGV0LmpzeCIsIndlYnBhY2s6Ly8vLi9jb250ZW50LXNyYy9hc3JvdXRlci90ZW1wbGF0ZXMvRU9ZU25pcHBldC9FT1lTbmlwcGV0LmpzeCIsIndlYnBhY2s6Ly8vLi9jb250ZW50LXNyYy9hc3JvdXRlci90ZW1wbGF0ZXMvU3VibWl0Rm9ybVNuaXBwZXQvU3VibWl0Rm9ybVNuaXBwZXQuanN4Iiwid2VicGFjazovLy8uL2NvbnRlbnQtc3JjL2Fzcm91dGVyL3RlbXBsYXRlcy9GWEFTaWdudXBTbmlwcGV0L0ZYQVNpZ251cFNuaXBwZXQuanN4Iiwid2VicGFjazovLy8uL2NvbnRlbnQtc3JjL2Fzcm91dGVyL3RlbXBsYXRlcy9OZXdzbGV0dGVyU25pcHBldC9OZXdzbGV0dGVyU25pcHBldC5qc3giLCJ3ZWJwYWNrOi8vLy4vY29udGVudC1zcmMvYXNyb3V0ZXIvdGVtcGxhdGVzL1NlbmRUb0RldmljZVNuaXBwZXQvaXNFbWFpbE9yUGhvbmVOdW1iZXIuanMiLCJ3ZWJwYWNrOi8vLy4vY29udGVudC1zcmMvYXNyb3V0ZXIvdGVtcGxhdGVzL1NlbmRUb0RldmljZVNuaXBwZXQvU2VuZFRvRGV2aWNlU25pcHBldC5qc3giLCJ3ZWJwYWNrOi8vLy4vY29udGVudC1zcmMvYXNyb3V0ZXIvdGVtcGxhdGVzL1NpbXBsZUJlbG93U2VhcmNoU25pcHBldC9TaW1wbGVCZWxvd1NlYXJjaFNuaXBwZXQuanN4Iiwid2VicGFjazovLy8uL2NvbnRlbnQtc3JjL2Fzcm91dGVyL3RlbXBsYXRlcy90ZW1wbGF0ZS1tYW5pZmVzdC5qc3giLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZsdWVudC9zcmMvdHlwZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZsdWVudC9zcmMvYnVpbHRpbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZsdWVudC9zcmMvcmVzb2x2ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZsdWVudC9zcmMvZXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZsdWVudC9zcmMvcmVzb3VyY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZsdWVudC9zcmMvYnVuZGxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mbHVlbnQvc3JjL3V0aWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZsdWVudC9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vY29udGVudC1zcmMvYXNyb3V0ZXIvcmljaC10ZXh0LXN0cmluZ3MuanMiLCJ3ZWJwYWNrOi8vLy4vY29tbW9uL0RlZHVwZS5qc20iLCJ3ZWJwYWNrOi8vLy4vY29tbW9uL1JlZHVjZXJzLmpzbSIsIndlYnBhY2s6Ly8vLi9jb250ZW50LXNyYy9jb21wb25lbnRzL0NhcmQvdHlwZXMuanMiLCJ3ZWJwYWNrOi8vLy4vY29udGVudC1zcmMvY29tcG9uZW50cy9DYXJkL0NhcmQuanN4Iiwid2VicGFjazovLy8uL2NvbnRlbnQtc3JjL2Fzcm91dGVyL3RlbXBsYXRlcy9GaXJzdFJ1bi9JbnRlcnJ1cHQuanN4Iiwid2VicGFjazovLy8uL2NvbnRlbnQtc3JjL2Fzcm91dGVyL3RlbXBsYXRlcy9GaXJzdFJ1bi9GaXJzdFJ1bi5qc3giLCJ3ZWJwYWNrOi8vLy4vY29udGVudC1zcmMvY29tcG9uZW50cy9Ub3BTaXRlcy9Ub3BTaXRlRm9ybUlucHV0LmpzeCIsIndlYnBhY2s6Ly8vLi9jb250ZW50LXNyYy9jb21wb25lbnRzL1RvcFNpdGVzL1RvcFNpdGVGb3JtLmpzeCIsIndlYnBhY2s6Ly8vLi9jb250ZW50LXNyYy9saWIvbGluay1tZW51LW9wdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vY29udGVudC1zcmMvY29tcG9uZW50cy9MaW5rTWVudS9MaW5rTWVudS5qc3giLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9jbGFzcy9oYXNDbGFzcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvY2xhc3MvcmVtb3ZlQ2xhc3MuanMiLCJ3ZWJwYWNrOi8vLy4vY29udGVudC1zcmMvY29tcG9uZW50cy9EaXNjb3ZlcnlTdHJlYW1Db21wb25lbnRzL0RTSW1hZ2UvRFNJbWFnZS5qc3giLCJ3ZWJwYWNrOi8vLy4vY29udGVudC1zcmMvY29tcG9uZW50cy9EaXNjb3ZlcnlTdHJlYW1Db21wb25lbnRzL0RTTGlua01lbnUvRFNMaW5rTWVudS5qc3giLCJ3ZWJwYWNrOi8vLy4vY29udGVudC1zcmMvY29tcG9uZW50cy9EaXNjb3ZlcnlTdHJlYW1Db21wb25lbnRzL1NhZmVBbmNob3IvU2FmZUFuY2hvci5qc3giLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvZXNtL2NvbmZpZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9lc20vdXRpbHMvUHJvcFR5cGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2VzbS9UcmFuc2l0aW9uR3JvdXBDb250ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2VzbS9UcmFuc2l0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2VzbS9DU1NUcmFuc2l0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvZXNtL3V0aWxzL0NoaWxkTWFwcGluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9lc20vVHJhbnNpdGlvbkdyb3VwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2VzbS9SZXBsYWNlVHJhbnNpdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9lc20vU3dpdGNoVHJhbnNpdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9lc20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vY29udGVudC1zcmMvY29tcG9uZW50cy9EaXNjb3ZlcnlTdHJlYW1Db21wb25lbnRzL0RTQ2FyZC9EU0NhcmQuanN4Iiwid2VicGFjazovLy8uL2NvbnRlbnQtc3JjL2NvbXBvbmVudHMvRGlzY292ZXJ5U3RyZWFtQ29tcG9uZW50cy9EU0VtcHR5U3RhdGUvRFNFbXB0eVN0YXRlLmpzeCIsIndlYnBhY2s6Ly8vLi9jb250ZW50LXNyYy9jb21wb25lbnRzL0Rpc2NvdmVyeVN0cmVhbUNvbXBvbmVudHMvQ2FyZEdyaWQvQ2FyZEdyaWQuanN4Iiwid2VicGFjazovLy8uL2NvbnRlbnQtc3JjL2NvbXBvbmVudHMvRGlzY292ZXJ5U3RyZWFtQ29tcG9uZW50cy9EU01lc3NhZ2UvRFNNZXNzYWdlLmpzeCIsIndlYnBhY2s6Ly8vLi9jb250ZW50LXNyYy9jb21wb25lbnRzL0Rpc2NvdmVyeVN0cmVhbUNvbXBvbmVudHMvTGlzdC9MaXN0LmpzeCIsIndlYnBhY2s6Ly8vLi9jb250ZW50LXNyYy9jb21wb25lbnRzL0Rpc2NvdmVyeVN0cmVhbUNvbXBvbmVudHMvSGVyby9IZXJvLmpzeCIsIndlYnBhY2s6Ly8vLi9jb250ZW50LXNyYy9jb21wb25lbnRzL0Rpc2NvdmVyeVN0cmVhbUNvbXBvbmVudHMvSGlnaGxpZ2h0cy9IaWdobGlnaHRzLmpzeCIsIndlYnBhY2s6Ly8vLi9jb250ZW50LXNyYy9jb21wb25lbnRzL0Rpc2NvdmVyeVN0cmVhbUNvbXBvbmVudHMvSG9yaXpvbnRhbFJ1bGUvSG9yaXpvbnRhbFJ1bGUuanN4Iiwid2VicGFjazovLy8uL2NvbnRlbnQtc3JjL2NvbXBvbmVudHMvRGlzY292ZXJ5U3RyZWFtQ29tcG9uZW50cy9OYXZpZ2F0aW9uL05hdmlnYXRpb24uanN4Iiwid2VicGFjazovLy8uL2NvbnRlbnQtc3JjL2NvbXBvbmVudHMvRGlzY292ZXJ5U3RyZWFtQ29tcG9uZW50cy9TZWN0aW9uVGl0bGUvU2VjdGlvblRpdGxlLmpzeCIsIndlYnBhY2s6Ly8vLi9jb250ZW50LXNyYy9saWIvc2VsZWN0TGF5b3V0UmVuZGVyLmpzIiwid2VicGFjazovLy8uL2NvbnRlbnQtc3JjL2NvbXBvbmVudHMvRGlzY292ZXJ5U3RyZWFtQ29tcG9uZW50cy9Ub3BTaXRlcy9Ub3BTaXRlcy5qc3giLCJ3ZWJwYWNrOi8vLy4vY29udGVudC1zcmMvY29tcG9uZW50cy9EaXNjb3ZlcnlTdHJlYW1CYXNlL0Rpc2NvdmVyeVN0cmVhbUJhc2UuanN4Il0sIm5hbWVzIjpbInN0b3JlIiwiaW5pdFN0b3JlIiwicmVkdWNlcnMiLCJEZXRlY3RVc2VyU2Vzc2lvblN0YXJ0Iiwic2VuZEV2ZW50T3JBZGRMaXN0ZW5lciIsImRpc3BhdGNoIiwiYWMiLCJBbHNvVG9NYWluIiwidHlwZSIsImF0IiwiTkVXX1RBQl9TVEFURV9SRVFVRVNUIiwiUmVhY3RET00iLCJoeWRyYXRlIiwiZ2xvYmFsIiwiZG9jdW1lbnQiLCJsb2NhdGlvbiIsImhyZWYiLCJkb2N1bWVudEVsZW1lbnQiLCJsYW5nIiwiZ0FjdGl2aXR5U3RyZWFtU3RyaW5ncyIsImdldEVsZW1lbnRCeUlkIiwiZ2xvYmFsSW1wb3J0Q29udGV4dCIsIldpbmRvdyIsIkJBQ0tHUk9VTkRfUFJPQ0VTUyIsIlVJX0NPREUiLCJhY3Rpb25UeXBlcyIsIkFTUm91dGVyQWN0aW9ucyIsIl9Sb3V0ZU1lc3NhZ2UiLCJhY3Rpb24iLCJvcHRpb25zIiwibWV0YSIsImZyb20iLCJ0byIsIkVycm9yIiwiZm9yRWFjaCIsIm8iLCJmcm9tVGFyZ2V0Iiwic2tpcExvY2FsIiwiQ09OVEVOVF9NRVNTQUdFX1RZUEUiLCJNQUlOX01FU1NBR0VfVFlQRSIsIk9ubHlUb01haW4iLCJCcm9hZGNhc3RUb0NvbnRlbnQiLCJBbHNvVG9PbmVDb250ZW50IiwidGFyZ2V0Iiwic2tpcE1haW4iLCJ0b1RhcmdldCIsIk9ubHlUb09uZUNvbnRlbnQiLCJBbHNvVG9QcmVsb2FkZWQiLCJQUkVMT0FEX01FU1NBR0VfVFlQRSIsIlVzZXJFdmVudCIsImRhdGEiLCJURUxFTUVUUllfVVNFUl9FVkVOVCIsIkFTUm91dGVyVXNlckV2ZW50IiwiQVNfUk9VVEVSX1RFTEVNRVRSWV9VU0VSX0VWRU5UIiwiRGlzY292ZXJ5U3RyZWFtU3BvY3NGaWxsIiwiaW1wb3J0Q29udGV4dCIsIkRJU0NPVkVSWV9TVFJFQU1fU1BPQ1NfRklMTCIsIlVuZGVzaXJlZEV2ZW50IiwiVEVMRU1FVFJZX1VOREVTSVJFRF9FVkVOVCIsIlBlcmZFdmVudCIsIlRFTEVNRVRSWV9QRVJGT1JNQU5DRV9FVkVOVCIsIkltcHJlc3Npb25TdGF0cyIsIlRFTEVNRVRSWV9JTVBSRVNTSU9OX1NUQVRTIiwiRGlzY292ZXJ5U3RyZWFtSW1wcmVzc2lvblN0YXRzIiwiRElTQ09WRVJZX1NUUkVBTV9JTVBSRVNTSU9OX1NUQVRTIiwiRGlzY292ZXJ5U3RyZWFtTG9hZGVkQ29udGVudCIsIkRJU0NPVkVSWV9TVFJFQU1fTE9BREVEX0NPTlRFTlQiLCJTZXRQcmVmIiwibmFtZSIsInZhbHVlIiwiU0VUX1BSRUYiLCJXZWJFeHRFdmVudCIsInNvdXJjZSIsImlzU2VuZFRvTWFpbiIsImlzQnJvYWRjYXN0VG9Db250ZW50IiwiaXNTZW5kVG9PbmVDb250ZW50IiwiaXNTZW5kVG9QcmVsb2FkZWQiLCJpc0Zyb21NYWluIiwiZ2V0UG9ydElkT2ZTZW5kZXIiLCJQcmVmc0J1dHRvbiIsInByb3BzIiwib25DbGljayIsImRlYm91bmNlIiwiZnVuYyIsIndhaXQiLCJ0aW1lciIsImFyZ3MiLCJ3YWtlVXAiLCJzZXRUaW1lb3V0IiwiYXBwbHkiLCJfQmFzZSIsIlJlYWN0IiwiUHVyZUNvbXBvbmVudCIsImNvbXBvbmVudFdpbGxNb3VudCIsImlzRmlyc3RydW4iLCJib2R5IiwiY2xhc3NMaXN0IiwiYWRkIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJ1cGRhdGVUaGVtZSIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJib2R5Q2xhc3NOYW1lIiwiY29udGFpbnMiLCJmaWx0ZXIiLCJ2Iiwiam9pbiIsImNsYXNzTmFtZSIsInJlbmRlciIsIkFwcCIsImlzRGV2dG9vbHNFbmFibGVkIiwiUHJlZnMiLCJ2YWx1ZXMiLCJpbml0aWFsaXplZCIsIkJhc2VDb250ZW50IiwiY29uc3RydWN0b3IiLCJvcGVuUHJlZmVyZW5jZXMiLCJiaW5kIiwib25XaW5kb3dTY3JvbGwiLCJzdGF0ZSIsImZpeGVkU2VhcmNoIiwiY29tcG9uZW50RGlkTW91bnQiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIlNDUk9MTF9USFJFU0hPTEQiLCJzY3JvbGxZIiwic2V0U3RhdGUiLCJTRVRUSU5HU19PUEVOIiwiZXZlbnQiLCJwcmVmcyIsImlzRGlzY292ZXJ5U3RyZWFtIiwiRGlzY292ZXJ5U3RyZWFtIiwiY29uZmlnIiwiZW5hYmxlZCIsImZpbHRlcmVkU2VjdGlvbnMiLCJTZWN0aW9ucyIsInNlY3Rpb24iLCJpZCIsIm5vU2VjdGlvbnNFbmFibGVkIiwibGVuZ3RoIiwic2VhcmNoSGFuZG9mZkVuYWJsZWQiLCJvdXRlckNsYXNzTmFtZSIsInNob3dTZWFyY2giLCJTZWFyY2giLCJmeGFfZW5kcG9pbnQiLCJCYXNlIiwiY29ubmVjdCIsIlJvdyIsImNoaWxkcmVuIiwicmVsYXRpdmVUaW1lIiwidGltZXN0YW1wIiwic2Vjb25kcyIsIk1hdGgiLCJmbG9vciIsIkRhdGUiLCJub3ciLCJtaW51dGVzIiwidG9Mb2NhbGVTdHJpbmciLCJMQVlPVVRfVkFSSUFOVFMiLCJiYXNpYyIsIlRvZ2dsZVN0b3J5QnV0dG9uIiwiaGFuZGxlQ2xpY2siLCJzdG9yeSIsIkRpc2NvdmVyeVN0cmVhbUFkbWluIiwib25FbmFibGVUb2dnbGUiLCJjaGFuZ2VFbmRwb2ludFZhcmlhbnQiLCJvblN0b3J5VG9nZ2xlIiwidG9nZ2xlZFN0b3JpZXMiLCJzZXRDb25maWdWYWx1ZSIsIkRJU0NPVkVSWV9TVFJFQU1fQ09ORklHX1NFVF9WQUxVRSIsImNoZWNrZWQiLCJlbmRwb2ludCIsImxheW91dF9lbmRwb2ludCIsInJlcGxhY2UiLCJyZW5kZXJDb21wb25lbnQiLCJ3aWR0aCIsImNvbXBvbmVudCIsImZlZWQiLCJyZW5kZXJGZWVkIiwiaXNDdXJyZW50VmFyaWFudCIsImlzTWF0Y2giLCJtYXRjaCIsInJlbmRlckZlZWREYXRhIiwidXJsIiwiZmVlZHMiLCJyZWNvbW1lbmRhdGlvbnMiLCJtYXAiLCJyZW5kZXJTdG9yeURhdGEiLCJyZW5kZXJGZWVkc0RhdGEiLCJPYmplY3QiLCJrZXlzIiwicmVuZGVyU3BvY3MiLCJzcG9jcyIsInNwb2NzRGF0YSIsInNwb2NzX2VuZHBvaW50IiwibGFzdFVwZGF0ZWQiLCJzcG9jIiwiZnJlcXVlbmN5X2NhcHMiLCJzdG9yeURhdGEiLCJKU09OIiwic3RyaW5naWZ5IiwibGF5b3V0Iiwib3BhY2l0eSIsInJvdyIsInJvd0luZGV4IiwiY29tcG9uZW50cyIsImNvbXBvbmVudEluZGV4IiwiQVNSb3V0ZXJBZG1pbklubmVyIiwib25NZXNzYWdlIiwiaGFuZGxlRW5hYmxlZFRvZ2dsZSIsImhhbmRsZVVzZXJQcmVmVG9nZ2xlIiwib25DaGFuZ2VNZXNzYWdlRmlsdGVyIiwiZmluZE90aGVyQnVuZGxlZE1lc3NhZ2VzT2ZTYW1lVGVtcGxhdGUiLCJoYW5kbGVFeHByZXNzaW9uRXZhbCIsIm9uQ2hhbmdlVGFyZ2V0aW5nUGFyYW1ldGVycyIsIm9uQ2hhbmdlQXR0cmlidXRpb25QYXJhbWV0ZXJzIiwic2V0QXR0cmlidXRpb24iLCJvbkNvcHlUYXJnZXRpbmdQYXJhbXMiLCJvblBhc3RlVGFyZ2V0aW5nUGFyYW1zIiwib25OZXdUYXJnZXRpbmdQYXJhbXMiLCJtZXNzYWdlRmlsdGVyIiwiZXZhbHVhdGlvblN0YXR1cyIsInN0cmluZ1RhcmdldGluZ1BhcmFtZXRlcnMiLCJuZXdTdHJpbmdUYXJnZXRpbmdQYXJhbWV0ZXJzIiwiY29waWVkVG9DbGlwYm9hcmQiLCJwYXN0ZUZyb21DbGlwYm9hcmQiLCJhdHRyaWJ1dGlvblBhcmFtZXRlcnMiLCJjYW1wYWlnbiIsImNvbnRlbnQiLCJwYXJhbSIsInRhcmdldGluZ1BhcmFtZXRlcnMiLCJBU1JvdXRlclV0aWxzIiwiZ2V0UHJldmlld0VuZHBvaW50Iiwic2VuZE1lc3NhZ2UiLCJhZGRMaXN0ZW5lciIsInJlbW92ZUxpc3RlbmVyIiwidGVtcGxhdGUiLCJtZXNzYWdlcyIsIm1zZyIsImJ1bmRsZWQiLCJoYW5kbGVCbG9jayIsImJ1bmRsZSIsImJsb2NrQnVuZGxlIiwiYmxvY2tCeUlkIiwiaGFuZGxlVW5ibG9jayIsInVuYmxvY2tCdW5kbGUiLCJ1bmJsb2NrQnlJZCIsImhhbmRsZU92ZXJyaWRlIiwib3ZlcnJpZGVNZXNzYWdlIiwiZXhwaXJlQ2FjaGUiLCJyZXNldFByZWYiLCJjb250ZXh0IiwicGFyc2UiLCJleHByZXNzaW9uIiwicmVmcyIsImV4cHJlc3Npb25JbnB1dCIsInRhcmdldGluZ1BhcmFtZXRlcnNFcnJvciIsInVwZGF0ZWRQYXJhbWV0ZXJzIiwiZSIsImNvbnNvbGUiLCJsb2ciLCJwcm92aWRlciIsInByb3ZpZGVyUHJlZnMiLCJmaW5kIiwicCIsImRhdGFzZXQiLCJ1c2VyUHJlZkluZm8iLCJ1c2VyUHJlZnMiLCJpc1VzZXJFbmFibGVkIiwiaXNTeXN0ZW1FbmFibGVkIiwiaXNFbmFibGluZyIsImtleSIsInVuZGVmaW5lZCIsInNldENsaXBib2FyZERhdGEiLCJwcmV2ZW50RGVmYXVsdCIsImNsaXBib2FyZERhdGEiLCJzZXREYXRhIiwiZXhlY0NvbW1hbmQiLCJyZW1vdmUiLCJ0YXJnZXRpbmdQYXJhbXNFdmFsIiwiaW5uZXJUZXh0IiwibWVzc2FnZSIsInJlbmRlck1lc3NhZ2VJdGVtIiwiaXNDdXJyZW50IiwibGFzdE1lc3NhZ2VJZCIsImlzQmxvY2tlZCIsIm1lc3NhZ2VCbG9ja0xpc3QiLCJpbmNsdWRlcyIsImltcHJlc3Npb25zIiwibWVzc2FnZUltcHJlc3Npb25zIiwiaXRlbUNsYXNzTmFtZSIsInJlbmRlck1lc3NhZ2VzIiwibWVzc2FnZXNUb1Nob3ciLCJyZW5kZXJNZXNzYWdlRmlsdGVyIiwicHJvdmlkZXJzIiwicmVuZGVyVGFibGVIZWFkIiwicmVuZGVyUHJvdmlkZXJzIiwicHJvdmlkZXJzQ29uZmlnIiwicHJvdmlkZXJJbmZvIiwiaSIsImlzVGVzdFByb3ZpZGVyIiwiaW5mbyIsImxhYmVsIiwiYnVja2V0IiwicmVhc29uc0Rpc2FibGVkIiwicHVzaCIsImNvaG9ydCIsIndoaXRlU3BhY2UiLCJyZW5kZXJQYXN0ZU1vZGFsIiwiZXJyb3JzIiwicmVuZGVyVGFyZ2V0aW5nUGFyYW1ldGVycyIsInN1Y2Nlc3MiLCJyZXN1bHQiLCJlcnJvclN0YXRlIiwiaW5wdXRDb21wIiwicmVuZGVyUG9ja2V0U3RvcnkiLCJndWlkIiwicmVuZGVyUG9ja2V0U3RvcmllcyIsInJvd3MiLCJTZWN0aW9uIiwicmVuZGVyRGlzY292ZXJ5U3RyZWFtIiwicmVuZGVyQXR0cmlidXRpb25QYXJhbWVycyIsInJlbmRlckVycm9yTWVzc2FnZSIsInByb3ZpZGVySWQiLCJlcnJvciIsImNlbGxLZXkiLCJyZXZlcnNlIiwicmVuZGVyRXJyb3JzIiwicHJvdmlkZXJzV2l0aEVycm9ycyIsInJlbmRlclRyYWlsaGVhZEluZm8iLCJ0cmFpbGhlYWRJbnRlcnJ1cHQiLCJ0cmFpbGhlYWRUcmlwbGV0IiwidHJhaWxoZWFkSW5pdGlhbGl6ZWQiLCJnZXRTZWN0aW9uIiwicm91dGVzIiwiY29sbGFwc2VkIiwiQ29sbGFwc2VUb2dnbGUiLCJvbkNvbGxhcHNlVG9nZ2xlIiwicmVuZGVyQWRtaW4iLCJoYXNoIiwic3RhcnRzV2l0aCIsInNldEJvZHlDbGFzcyIsImNvbXBvbmVudERpZFVwZGF0ZSIsImlzQ29sbGFwc2VkIiwiX0FTUm91dGVyQWRtaW4iLCJBU1JvdXRlckFkbWluIiwiSU5DT01JTkdfTUVTU0FHRV9OQU1FIiwiT1VUR09JTkdfTUVTU0FHRV9OQU1FIiwiVEVNUExBVEVTX0FCT1ZFX1BBR0UiLCJGSVJTVF9SVU5fVEVNUExBVEVTIiwiVEVNUExBVEVTX0JFTE9XX1NFQVJDSCIsImxpc3RlbmVyIiwiUlBNQWRkTWVzc2FnZUxpc3RlbmVyIiwiUlBNUmVtb3ZlTWVzc2FnZUxpc3RlbmVyIiwiUlBNU2VuZEFzeW5jTWVzc2FnZSIsImRpc21pc3NCeUlkIiwiZXhlY3V0ZUFjdGlvbiIsImJ1dHRvbl9hY3Rpb24iLCJzZW5kVGVsZW1ldHJ5IiwicGluZyIsInBheWxvYWQiLCJBU19HRU5FUkFMX09VVEdPSU5HX01FU1NBR0VfTkFNRSIsInBhcmFtcyIsIlVSTFNlYXJjaFBhcmFtcyIsInNsaWNlIiwiaW5kZXhPZiIsIlVSTCIsImdldCIsInNuaXBwZXRJZCIsInRoZW1lIiwiZ2V0UHJldmlld1RoZW1lIiwic2hvdWxkU2VuZEltcHJlc3Npb25PblVwZGF0ZSIsIm5leHRQcm9wcyIsInByZXZQcm9wcyIsIkFTUm91dGVyVUlTdXJmYWNlIiwib25NZXNzYWdlRnJvbVBhcmVudCIsInNlbmRDbGljayIsInNlbmRJbXByZXNzaW9uIiwic2VuZFVzZXJBY3Rpb25UZWxlbWV0cnkiLCJoZWFkZXJQb3J0YWwiLCJmb290ZXJQb3J0YWwiLCJleHRyYVByb3BzIiwiZXZlbnRUeXBlIiwibWVzc2FnZV9pZCIsIm1ldHJpYyIsImRvX25vdF9hdXRvYmxvY2siLCJvbkJsb2NrQnlJZCIsIm9uRGlzbWlzc0J5SWQiLCJjbGVhck1lc3NhZ2UiLCJ3aW5kb3ciLCJkaXNwYXRjaEV2ZW50IiwiQ3VzdG9tRXZlbnQiLCJkZXRhaWwiLCJORVdUQUJfREFSS19USEVNRSIsInRyaWdnZXIiLCJyZW5kZXJTbmlwcGV0cyIsIlNuaXBwZXRzVGVtcGxhdGVzIiwiU25pcHBldENvbXBvbmVudCIsImdlbmVyYXRlQnVuZGxlcyIsInJlbmRlclByZXZpZXdCYW5uZXIiLCJyZW5kZXJGaXJzdFJ1biIsImZ4YUVuZHBvaW50Iiwic2hvdWxkUmVuZGVyQmVsb3dTZWFyY2giLCJzaG91bGRSZW5kZXJJbkhlYWRlciIsImNyZWF0ZVBvcnRhbCIsImRlZmF1bHRQcm9wcyIsIk1FUkdFX1NUT1JFX0FDVElPTiIsIkVBUkxZX1FVRVVFRF9BQ1RJT05TIiwiU0FWRV9TRVNTSU9OX1BFUkZfREFUQSIsIm1lcmdlU3RhdGVSZWR1Y2VyIiwibWFpblJlZHVjZXIiLCJwcmV2U3RhdGUiLCJtZXNzYWdlTWlkZGxld2FyZSIsIm5leHQiLCJhdSIsInJlaHlkcmF0aW9uTWlkZGxld2FyZSIsIl9kaWRSZWh5ZHJhdGUiLCJpc01lcmdlU3RvcmVBY3Rpb24iLCJpc1JlaHlkcmF0aW9uUmVxdWVzdCIsIl9kaWRSZXF1ZXN0SW5pdGlhbFN0YXRlIiwiSU5JVCIsInF1ZXVlRWFybHlNZXNzYWdlTWlkZGxld2FyZSIsIl9yZWNlaXZlZEZyb21NYWluIiwiX2Vhcmx5QWN0aW9uUXVldWUiLCJjcmVhdGVTdG9yZSIsImNvbWJpbmVSZWR1Y2VycyIsImFwcGx5TWlkZGxld2FyZSIsImV4IiwiZHVtcCIsInN0YWNrIiwiVklTSUJMRSIsIlZJU0lCSUxJVFlfQ0hBTkdFX0VWRU5UIiwiSW1wcmVzc2lvbnNXcmFwcGVyIiwic2VuZEltcHJlc3Npb25PckFkZExpc3RlbmVyIiwidmlzaWJpbGl0eVN0YXRlIiwiX29uVmlzaWJpbGl0eUNoYW5nZSIsInNlbmRPbk1vdW50IiwiSVNfTkVXVEFCIiwiZG9jdW1lbnRVUkkiLCJudHBfYmFja2dyb3VuZCIsInIiLCJnIiwiYiIsImEiLCJudHBfdGV4dCIsInNpZGViYXIiLCJzaWRlYmFyX3RleHQiLCJBTExPV0VEX1RBR1MiLCJ1Iiwic3Ryb25nIiwiZW0iLCJiciIsImNvbnZlcnRMaW5rcyIsImxpbmtzIiwiZG9Ob3RBdXRvQmxvY2siLCJvcGVuTmV3V2luZG93IiwicmVkdWNlIiwiYWNjIiwibGlua1RhZyIsInNhZmVVUkkiLCJSaWNoVGV4dCIsIlJJQ0hfVEVYVF9LRVlTIiwibG9jYWxpemF0aW9uX2lkIiwiY3VzdG9tRWxlbWVudHMiLCJ0ZXh0IiwicHJvdG9jb2wiLCJpc0FsbG93ZWQiLCJ3YXJuIiwiRk9DVVNBQkxFX1NFTEVDVE9SIiwiVHJhaWxoZWFkIiwiY2xvc2VNb2RhbCIsIm9uSW5wdXRDaGFuZ2UiLCJvblN0YXJ0Qmx1ciIsIm9uU3VibWl0Iiwib25JbnB1dEludmFsaWQiLCJlbWFpbElucHV0IiwiZGlhbG9nIiwic2V0QXR0cmlidXRlIiwiaW5wdXQiLCJxdWVyeVNlbGVjdG9yIiwiZm9jdXMiLCJwcmV2aW91c1NpYmxpbmciLCJyZWxhdGVkVGFyZ2V0IiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJET0NVTUVOVF9QT1NJVElPTl9DT05UQUlORURfQlkiLCJlbWFpbCIsImVsZW1lbnRzIiwicmVxdWlyZWQiLCJjaGVja1ZhbGlkaXR5IiwiX2dldEZvcm1JbmZvIiwiZXYiLCJyZW1vdmVBdHRyaWJ1dGUiLCJvbk5leHRTY2VuZSIsImFjdGl2ZUVsZW1lbnQiLCJibHVyIiwiaGFzX2Zsb3dfcGFyYW1zIiwiZmxvd1BhcmFtcyIsImZsb3dJZCIsIlVUTVRlcm0iLCJpbm5lckNsYXNzTmFtZSIsInRpdGxlIiwic3RyaW5nX2lkIiwic3VidGl0bGUiLCJiZW5lZml0cyIsIml0ZW0iLCJsZWFybiIsImFkZFV0bVBhcmFtcyIsImZvcm0iLCJkZXZpY2VJZCIsImZsb3dCZWdpblRpbWUiLCJidXR0b24iLCJza2lwQnV0dG9uIiwiTW9kYWxPdmVybGF5V3JhcHBlciIsIm9uS2V5RG93biIsIm9uQ2xvc2UiLCJoZWFkZXIiLCJ1bnN0eWxlZCIsImhlYWRlcklkIiwiTW9kYWxPdmVybGF5IiwiYnV0dG9uX2xhYmVsIiwib25EaXNtaXNzQnVuZGxlIiwiQkFTRV9QQVJBTVMiLCJ1dG1fc291cmNlIiwidXRtX2NhbXBhaWduIiwidXRtX21lZGl1bSIsInV0bVRlcm0iLCJyZXR1cm5VcmwiLCJzZWFyY2hQYXJhbXMiLCJhcHBlbmQiLCJJQ09OX0FMVF9URVhUIiwiUmV0dXJuVG9BTU8iLCJvbkNsaWNrQWRkRXh0ZW5zaW9uIiwib25CbG9ja0J1dHRvbiIsIlVJU3VyZmFjZSIsIm9uQWN0aW9uIiwicHJpbWFyeV9idXR0b24iLCJvbkJsb2NrIiwicmVuZGVyVGV4dCIsImN1c3RvbUVsZW1lbnQiLCJhZGRvbl9pY29uIiwiaWNvbiIsInNlY29uZGFyeV9idXR0b24iLCJTdGFydHVwT3ZlcmxheSIsImNsaWNrU2tpcCIsInJlbW92ZU92ZXJsYXkiLCJ1dG1QYXJhbXMiLCJzaG93IiwiVHJpcGxldHMiLCJvbkNhcmRBY3Rpb24iLCJvbkhpZGVDb250YWluZXIiLCJhY3Rpb25VcGRhdGVzIiwiYWRkRmxvd1BhcmFtcyIsInRvU3RyaW5nIiwiY2FyZHMiLCJoaWRlQ29udGFpbmVyIiwibSIsInNob3dDYXJkUGFuZWwiLCJzaG93Q29udGVudCIsImNhcmQiLCJPbmJvYXJkaW5nQ2FyZCIsIlNpbXBsZUhhc2hSb3V0ZXIiLCJvbkhhc2hDaGFuZ2UiLCJzcGxpdCIsImNsb25lRWxlbWVudCIsIl9Db25maXJtRGlhbG9nIiwiX2hhbmRsZUNhbmNlbEJ0biIsIl9oYW5kbGVDb25maXJtQnRuIiwiRElBTE9HX0NBTkNFTCIsImV2ZW50U291cmNlIiwib25Db25maXJtIiwiX3JlbmRlck1vZGFsTWVzc2FnZSIsIm1lc3NhZ2VfYm9keSIsImJvZHlfc3RyaW5nX2lkIiwidmlzaWJsZSIsImNhbmNlbF9idXR0b25fc3RyaW5nX2lkIiwiY29uZmlybV9idXR0b25fc3RyaW5nX2lkIiwiQ29uZmlybURpYWxvZyIsIkRpYWxvZyIsIkNvbnRleHRNZW51IiwiaGlkZUNvbnRleHQiLCJvblNob3ciLCJvblVwZGF0ZSIsInN0b3BQcm9wYWdhdGlvbiIsIm9wdGlvbiIsImtleWJvYXJkQWNjZXNzIiwiQ29udGV4dE1lbnVJdGVtIiwib25LZXlVcCIsImZvY3VzRmlyc3QiLCJmb2N1c1NpYmxpbmciLCJwYXJlbnQiLCJwYXJlbnROb2RlIiwiY2xvc2VzdFNpYmxpbmdTZWxlY3RvciIsImZpcnN0RWxlbWVudENoaWxkIiwic2hpZnRLZXkiLCJmaXJzdCIsImxhc3QiLCJkaXNhYmxlZCIsIkNvbnRleHRNZW51QnV0dG9uIiwic2hvd0NvbnRleHRNZW51IiwiY29udGV4dE1lbnVLZXlib2FyZCIsIm9wZW5Db250ZXh0TWVudSIsImlzS2V5Qm9hcmQiLCJ0b29sdGlwQXJncyIsInRvb2x0aXAiLCJyZWZGdW5jdGlvbiIsIklOVEVSU0VDVElPTl9SQVRJTyIsIl9uZWVkc0ltcHJlc3Npb25TdGF0cyIsImltcHJlc3Npb25DYXJkR3VpZHMiLCJfZGlzcGF0Y2hJbXByZXNzaW9uU3RhdHMiLCJjYW1wYWlnbklkIiwiRElTQ09WRVJZX1NUUkVBTV9TUE9DX0lNUFJFU1NJT04iLCJ0b1VwcGVyQ2FzZSIsInRpbGVzIiwibGluayIsInBvcyIsInNoaW0iLCJfbmVlZHNMb2FkZWRDb250ZW50IiwibG9hZGVkQ29udGVudEd1aWRzIiwiX2Rpc3BhdGNoTG9hZGVkQ29udGVudCIsInNldEltcHJlc3Npb25PYnNlcnZlck9yQWRkTGlzdGVuZXIiLCJzZXRJbXByZXNzaW9uT2JzZXJ2ZXIiLCJfaGFuZGxlSW50ZXJzZWN0IiwiZW50cmllcyIsInNvbWUiLCJlbnRyeSIsImlzSW50ZXJzZWN0aW5nIiwiaW50ZXJzZWN0aW9uUmF0aW8iLCJpbXByZXNzaW9uT2JzZXJ2ZXIiLCJ1bm9ic2VydmUiLCJpbXByZXNzaW9uIiwidGhyZXNob2xkIiwiSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCJvYnNlcnZlIiwiQ29sbGFwc2libGVTZWN0aW9uIiwib25Cb2R5TW91bnQiLCJvbkhlYWRlckNsaWNrIiwib25LZXlQcmVzcyIsIm9uVHJhbnNpdGlvbkVuZCIsImVuYWJsZU9yRGlzYWJsZUFuaW1hdGlvbiIsIm9uTWVudUJ1dHRvbk1vdXNlRW50ZXIiLCJvbk1lbnVCdXR0b25Nb3VzZUxlYXZlIiwib25NZW51VXBkYXRlIiwiZW5hYmxlQW5pbWF0aW9uIiwiaXNBbmltYXRpbmciLCJtZW51QnV0dG9uSG92ZXIiLCJzZXRDb250ZXh0TWVudUJ1dHRvblJlZiIsInNlY3Rpb25Cb2R5Iiwic2Nyb2xsSGVpZ2h0IiwiZWxlbWVudCIsImNvbnRleHRNZW51QnV0dG9uUmVmIiwibm9kZSIsIm1heEhlaWdodCIsIl9nZXRTZWN0aW9uQm9keUhlaWdodCIsInVzZXJFdmVudCIsIlNlY3Rpb25NZW51T3B0aW9ucyIsIkNoZWNrQ29sbGFwc2VkIiwiZGl2Iiwic3R5bGUiLCJkaXNwbGF5IiwiY3VycmVudFRhcmdldCIsInJlbmRlckljb24iLCJiYWNrZ3JvdW5kSW1hZ2UiLCJpc0NvbGxhcHNpYmxlIiwibGVhcm5Nb3JlIiwiZXh0cmFNZW51T3B0aW9ucyIsInNob3dQcmVmTmFtZSIsInByaXZhY3lOb3RpY2VVUkwiLCJpc0ZpeGVkIiwiaXNGaXJzdCIsImlzTGFzdCIsImlzV2ViRXh0ZW5zaW9uIiwiYWN0aXZlIiwiYm9keVN0eWxlIiwiRXJyb3JCb3VuZGFyeUZhbGxiYWNrIiwid2luZG93T2JqIiwicmVsb2FkIiwiZGVmYXVsdENsYXNzIiwiRXJyb3JCb3VuZGFyeSIsImhhc0Vycm9yIiwiY29tcG9uZW50RGlkQ2F0Y2giLCJGYWxsYmFja0NvbXBvbmVudCIsIkExMXlMaW5rQnV0dG9uIiwiRmx1ZW50T3JUZXh0IiwiY2hpbGQiLCJDaGlsZHJlbiIsIm9ubHkiLCJncmFuZENoaWxkcmVuIiwiREVGQVVMVF9TRUNUSU9OX01FTlVfT1BUSU9OUyIsIldFQkVYVF9TRUNUSU9OX01FTlVfT1BUSU9OUyIsIl9TZWN0aW9uTWVudSIsImhhbmRsZUFkZFdoaWxlQ29sbGFwc2VkIiwiRXhwYW5kU2VjdGlvbiIsImdldE9wdGlvbnMiLCJwcm9wT3B0aW9ucyIsInNwbGljZSIsImV4dHJhT3B0aW9ucyIsImhhc0FkZEV2ZW50IiwiU2VjdGlvbk1lbnUiLCJTZXBhcmF0b3IiLCJNb3ZlVXAiLCJTRUNUSU9OX01PVkUiLCJkaXJlY3Rpb24iLCJNb3ZlRG93biIsIlJlbW92ZVNlY3Rpb24iLCJDb2xsYXBzZVNlY3Rpb24iLCJVUERBVEVfU0VDVElPTl9QUkVGUyIsIk1hbmFnZVNlY3Rpb24iLCJNYW5hZ2VXZWJFeHRlbnNpb24iLCJPUEVOX1dFQkVYVF9TRVRUSU5HUyIsIkFkZFRvcFNpdGUiLCJUT1BfU0lURVNfRURJVCIsImluZGV4IiwiQWRkU2VhcmNoU2hvcnRjdXQiLCJUT1BfU0lURVNfT1BFTl9TRUFSQ0hfU0hPUlRDVVRTX01PREFMIiwiUHJpdmFjeU5vdGljZSIsIk9QRU5fTElOSyIsIkNBUkRTX1BFUl9ST1dfREVGQVVMVCIsIkNBUkRTX1BFUl9ST1dfQ09NUEFDVF9XSURFIiwibnVtUm93cyIsInJvd3NQcmVmIiwibWF4Um93cyIsImNhcmRzUGVyUm93IiwiY29tcGFjdENhcmRzIiwibWF0Y2hNZWRpYSIsIm1hdGNoZXMiLCJtYXhDYXJkcyIsIm5lZWRzSW1wcmVzc2lvblN0YXRzIiwic2VuZEltcHJlc3Npb25TdGF0c09yQWRkTGlzdGVuZXIiLCJzaG91bGRTZW5kSW1wcmVzc2lvblN0YXRzIiwicHJlZiIsInNlbmROZXdUYWJSZWh5ZHJhdGVkIiwid2FzQ29sbGFwc2VkIiwicmVuZGVyTm90aWZpZWQiLCJORVdfVEFCX1JFSFlEUkFURUQiLCJQb2NrZXQiLCJ0b3BpY3MiLCJlbXB0eVN0YXRlIiwicmVhZF9tb3JlX2VuZHBvaW50IiwiY29udGV4dE1lbnVPcHRpb25zIiwid2FpdGluZ0ZvclNwb2MiLCJtYXhDYXJkc1BlclJvdyIsIm1heENhcmRzT25OYXJyb3ciLCJwb2NrZXRDdGEiLCJpc1VzZXJMb2dnZWRJbiIsInVzZUN0YSIsImlzUG9ja2V0TG9nZ2VkSW5EZWZpbmVkIiwiaGFzVG9waWNzIiwic2hvdWxkU2hvd1BvY2tldEN0YSIsInNob3VsZFNob3dUb3BpY3MiLCJzaG91bGRTaG93UmVhZE1vcmUiLCJyZWFsUm93cyIsInNob3VsZFNob3dFbXB0eVN0YXRlIiwidXNlUGxhY2Vob2xkZXIiLCJzZWN0aW9uQ2xhc3NOYW1lIiwicGFkZGluZyIsIlNlY3Rpb25JbnRsIiwiX1NlY3Rpb25zIiwicmVuZGVyU2VjdGlvbnMiLCJzZWN0aW9ucyIsImVuYWJsZWRTZWN0aW9ucyIsInNlY3Rpb25PcmRlciIsInNob3dUb3BTaXRlcyIsImV4cGVjdGVkQ291bnQiLCJzZWN0aW9uSWQiLCJjb21tb25Qcm9wcyIsInMiLCJTY3JlZW5zaG90VXRpbHMiLCJpc0Jsb2IiLCJpc0xvY2FsIiwiaW1hZ2UiLCJwYXRoIiwiY3JlYXRlTG9jYWxJbWFnZU9iamVjdCIsInJlbW90ZUltYWdlIiwiY3JlYXRlT2JqZWN0VVJMIiwibWF5YmVSZXZva2VCbG9iT2JqZWN0VVJMIiwibG9jYWxJbWFnZSIsInJldm9rZU9iamVjdFVSTCIsImlzUmVtb3RlSW1hZ2VMb2NhbCIsIlJFQ09SREVEX1NFQ1RJT05TIiwiQ29tcG9uZW50UGVyZlRpbWVyIiwiQ29tcG9uZW50IiwicGVyZlN2YyIsIl9zZW5kQmFkU3RhdGVFdmVudCIsIl9zZW5kUGFpbnRlZEV2ZW50IiwiX3JlcG9ydE1pc3NpbmdEYXRhIiwiX3RpbWVzdGFtcEhhbmRsZWQiLCJfcmVjb3JkZWRGaXJzdFJlbmRlciIsIl9tYXliZVNlbmRQYWludGVkRXZlbnQiLCJfYWZ0ZXJGcmFtZVBhaW50IiwiY2FsbGJhY2siLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJfbWF5YmVTZW5kQmFkU3RhdGVFdmVudCIsIl9lbnN1cmVGaXJzdFJlbmRlclRzUmVjb3JkZWQiLCJtYXJrIiwiZGF0YVJlYWR5S2V5IiwiZmlyc3RSZW5kZXJLZXkiLCJwYXJzZUludCIsImdldE1vc3RSZWNlbnRBYnNNYXJrU3RhcnRCeU5hbWUiLCJDaHJvbWVVdGlscyIsIlNlcnZpY2VzIiwiaW1wb3J0IiwidXNhYmxlUGVyZk9iaiIsImFwcFNoZWxsIiwiaGlkZGVuRE9NV2luZG93IiwicGVyZm9ybWFuY2UiLCJfUGVyZlNlcnZpY2UiLCJwZXJmb3JtYW5jZU9iaiIsIl9wZXJmIiwicHJvdG90eXBlIiwic3RyIiwiZ2V0RW50cmllc0J5TmFtZSIsInRpbWVPcmlnaW4iLCJhYnNOb3ciLCJtb3N0UmVjZW50RW50cnkiLCJzdGFydFRpbWUiLCJNb3JlUmVjb21tZW5kYXRpb25zIiwiX1BvY2tldExvZ2dlZEluQ3RhIiwiY3RhVXJsIiwiY3RhQnV0dG9uIiwiY3RhVGV4dCIsIlBvY2tldExvZ2dlZEluQ3RhIiwiVG9waWMiLCJUb3BpY3MiLCJ0IiwidG9wU2l0ZUljb25UeXBlIiwiY3VzdG9tU2NyZWVuc2hvdFVSTCIsInRpcHB5VG9wSWNvbiIsImZhdmljb25SZWYiLCJmYXZpY29uU2l6ZSIsIk1JTl9SSUNIX0ZBVklDT05fU0laRSIsInNjcmVlbnNob3QiLCJNSU5fQ09STkVSX0ZBVklDT05fU0laRSIsImNvdW50VG9wU2l0ZXNJY29uc1R5cGVzIiwidG9wU2l0ZXMiLCJjb3VudFRvcFNpdGVzVHlwZXMiLCJjdXN0b21fc2NyZWVuc2hvdCIsInNjcmVlbnNob3Rfd2l0aF9pY29uIiwidGlwcHl0b3AiLCJyaWNoX2ljb24iLCJub19pbWFnZSIsIl9Ub3BTaXRlcyIsIm9uRWRpdEZvcm1DbG9zZSIsIm9uU2VhcmNoU2hvcnRjdXRzRm9ybUNsb3NlIiwiX2Rpc3BhdGNoVG9wU2l0ZXNTdGF0cyIsIl9nZXRWaXNpYmxlVG9wU2l0ZXMiLCJ0b3BTaXRlc0ljb25zU3RhdHMiLCJ0b3BTaXRlc1Bpbm5lZCIsInNpdGUiLCJpc1Bpbm5lZCIsInNlYXJjaFNob3J0Y3V0cyIsInNlYXJjaFRvcFNpdGUiLCJ0b3BzaXRlc19pY29uX3N0YXRzIiwidG9wc2l0ZXNfcGlubmVkIiwidG9wc2l0ZXNfc2VhcmNoX3Nob3J0Y3V0cyIsInNpdGVzUGVyUm93IiwiVE9QX1NJVEVTX01BWF9TSVRFU19QRVJfUk9XIiwiVG9wU2l0ZXMiLCJUb3BTaXRlc1Jvd3MiLCJUT1BfU0lURVNfU09VUkNFIiwiVE9QX1NJVEVTX0NBTkNFTF9FRElUIiwiVE9QX1NJVEVTX0NMT1NFX1NFQVJDSF9TSE9SVENVVFNfTU9EQUwiLCJlZGl0Rm9ybSIsInNob3dTZWFyY2hTaG9ydGN1dHNGb3JtIiwidG9wU2l0ZXNSb3dzIiwiVE9QX1NJVEVTX0NPTlRFWFRfTUVOVV9PUFRJT05TIiwiVE9QX1NJVEVTX1NFQVJDSF9TSE9SVENVVFNfQ09OVEVYVF9NRU5VX09QVElPTlMiLCJTZWxlY3RhYmxlU2VhcmNoU2hvcnRjdXQiLCJzaG9ydGN1dCIsInNlbGVjdGVkIiwiaW1hZ2VTdHlsZSIsImtleXdvcmQiLCJvbkNoYW5nZSIsIlNlYXJjaFNob3J0Y3V0c0Zvcm0iLCJoYW5kbGVDaGFuZ2UiLCJvbkNhbmNlbEJ1dHRvbkNsaWNrIiwib25TYXZlQnV0dG9uQ2xpY2siLCJzaG9ydGN1dHMiLCJpc1NlbGVjdGVkIiwicGluUXVldWUiLCJ1bnBpblF1ZXVlIiwiYWxyZWFkeVBpbm5lZCIsIl9zZWFyY2hUb3BTaXRlIiwic2VhcmNoVmVuZG9yIiwic2hvcnRVUkwiLCJVUERBVEVfUElOTkVEX1NFQVJDSF9TSE9SVENVVFMiLCJhZGRlZFNob3J0Y3V0cyIsImRlbGV0ZWRTaG9ydGN1dHMiLCJzZWFyY2hfdmVuZG9yIiwiVG9wU2l0ZUxpbmsiLCJzY3JlZW5zaG90SW1hZ2UiLCJvbkRyYWdFdmVudCIsIl9hbGxvd0Ryb3AiLCJkYXRhVHJhbnNmZXIiLCJ0eXBlcyIsImRyYWdnZWQiLCJlZmZlY3RBbGxvd2VkIiwiZ2V0TmV4dFN0YXRlRnJvbVByb3BzIiwiaW1hZ2VJblN0YXRlIiwibmV4dFN0YXRlIiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsImRlZmF1bHRTdHlsZSIsImlzRHJhZ2dhYmxlIiwidG9wU2l0ZU91dGVyQ2xhc3NOYW1lIiwiaXNEcmFnZ2VkIiwibGV0dGVyRmFsbGJhY2siLCJpbWFnZUNsYXNzTmFtZSIsInNob3dTbWFsbEZhdmljb24iLCJzbWFsbEZhdmljb25TdHlsZSIsInNtYWxsRmF2aWNvbkZhbGxiYWNrIiwiaGFzU2NyZWVuc2hvdEltYWdlIiwiYmFja2dyb3VuZENvbG9yIiwiZmF2aWNvbiIsImRyYWdnYWJsZVByb3BzIiwib25EcmFnRW5kIiwib25EcmFnU3RhcnQiLCJvbk1vdXNlRG93biIsIlRvcFNpdGUiLCJvbkxpbmtDbGljayIsIl9nZXRUZWxlbWV0cnlJbmZvIiwiaWNvbl90eXBlIiwiaWNvblR5cGUiLCJjYXJkX3R5cGUiLCJob3N0bmFtZSIsImFzc2lnbiIsImFjdGlvbl9wb3NpdGlvbiIsImFsdEtleSIsImN0cmxLZXkiLCJtZXRhS2V5IiwiRklMTF9TRUFSQ0hfVEVSTSIsImlzT3BlbiIsIm9uQWN0aXZhdGUiLCJpc0NvbnRleHRNZW51T3BlbiIsImFjdGl2ZUluZGV4IiwiVG9wU2l0ZVBsYWNlaG9sZGVyIiwib25FZGl0QnV0dG9uQ2xpY2siLCJUb3BTaXRlTGlzdCIsIkRFRkFVTFRfU1RBVEUiLCJkcmFnZ2VkSW5kZXgiLCJkcmFnZ2VkU2l0ZSIsImRyYWdnZWRUaXRsZSIsInRvcFNpdGVzUHJldmlldyIsInByZXZUb3BTaXRlcyIsIm5ld1RvcFNpdGVzIiwiZHJvcHBlZCIsIl9tYWtlVG9wU2l0ZXNQcmV2aWV3IiwiVE9QX1NJVEVTX0lOU0VSVCIsImRyYWdnZWRGcm9tSW5kZXgiLCJfZ2V0VG9wU2l0ZXMiLCJwaW5uZWRPbmx5IiwidW5waW5uZWQiLCJzaXRlVG9JbnNlcnQiLCJob2xlSW5kZXgiLCJpbmRleFN0ZXAiLCJzaGlmdGluZ1N0ZXAiLCJuZXh0SW5kZXgiLCJwcmV2aWV3Iiwic2hpZnQiLCJ0b3BTaXRlc1VJIiwibWF4TmFycm93VmlzaWJsZUluZGV4IiwibCIsInNsb3RQcm9wcyIsIl9TZWFyY2giLCJvblNlYXJjaENsaWNrIiwib25TZWFyY2hIYW5kb2ZmQ2xpY2siLCJvblNlYXJjaEhhbmRvZmZQYXN0ZSIsIm9uU2VhcmNoSGFuZG9mZkRyb3AiLCJvbklucHV0TW91bnQiLCJvblNlYXJjaEhhbmRvZmZCdXR0b25Nb3VudCIsImhhbmRsZUV2ZW50IiwiZ0NvbnRlbnRTZWFyY2hDb250cm9sbGVyIiwic2VhcmNoIiwiZG9TZWFyY2hIYW5kb2ZmIiwiSEFORE9GRl9TRUFSQ0hfVE9fQVdFU09NRUJBUiIsIkZBS0VfRk9DVVNfU0VBUkNIIiwiSElERV9TRUFSQ0giLCJnZXREYXRhIiwiaGVhbHRoUmVwb3J0S2V5Iiwic2VhcmNoU291cmNlIiwiQ29udGVudFNlYXJjaFVJQ29udHJvbGxlciIsIl9zZWFyY2hIYW5kb2ZmQnV0dG9uIiwid3JhcHBlckNsYXNzTmFtZSIsImhpZGUiLCJmYWtlRm9jdXMiLCJzaG93TG9nbyIsImhhbmRvZmZFbmFibGVkIiwiX3N0b3JlIiwiX3BlcmZTZXJ2aWNlIiwicGVyZlNlcnZpY2UiLCJfc2VuZEV2ZW50IiwidmlzaWJpbGl0eV9ldmVudF9yY3ZkX3RzIiwiUmVhY3RMb2NhbGl6YXRpb24iLCJidW5kbGVzIiwiQ2FjaGVkU3luY0l0ZXJhYmxlIiwic3VicyIsIlNldCIsInN1YnNjcmliZSIsImNvbXAiLCJ1bnN1YnNjcmliZSIsImRlbGV0ZSIsInNldEJ1bmRsZXMiLCJyZWxvY2FsaXplIiwiZ2V0QnVuZGxlIiwibWFwQnVuZGxlU3luYyIsImdldFN0cmluZyIsImZhbGxiYWNrIiwiZ2V0TWVzc2FnZSIsImZvcm1hdCIsImlzUmVhY3RMb2NhbGl6YXRpb24iLCJwcm9wTmFtZSIsInByb3AiLCJjYWNoZWRQYXJzZU1hcmt1cCIsImNyZWF0ZVBhcnNlTWFya3VwIiwiY3JlYXRlRWxlbWVudCIsInBhcnNlTWFya3VwIiwiaW5uZXJIVE1MIiwiQXJyYXkiLCJjaGlsZE5vZGVzIiwiTG9jYWxpemF0aW9uUHJvdmlkZXIiLCJTeW1ib2wiLCJpdGVyYXRvciIsImwxMG4iLCJnZXRDaGlsZENvbnRleHQiLCJjaGlsZENvbnRleHRUeXBlcyIsIlByb3BUeXBlcyIsInByb3BUeXBlcyIsImlzUmVxdWlyZWQiLCJpc0l0ZXJhYmxlIiwiY29tcG9uZW50TmFtZSIsIndpdGhMb2NhbGl6YXRpb24iLCJJbm5lciIsIldpdGhMb2NhbGl6YXRpb24iLCJmb3JjZVVwZGF0ZSIsImRpc3BsYXlOYW1lIiwiY29udGV4dFR5cGVzIiwib21pdHRlZENsb3NlVGFncyIsImFyZWEiLCJiYXNlIiwiY29sIiwiZW1iZWQiLCJociIsImltZyIsImtleWdlbiIsInRyYWNrIiwid2JyIiwidm9pZEVsZW1lbnRUYWdzIiwibWVudWl0ZW0iLCJyZU1hcmt1cCIsInRvQXJndW1lbnRzIiwiZWxlbXMiLCJwcm9wbmFtZSIsInByb3B2YWwiLCJzdWJzdHIiLCJpc1ZhbGlkRWxlbWVudCIsInRvTG93ZXJDYXNlIiwiTG9jYWxpemVkIiwiYXR0cnMiLCJlbGVtIiwiaXNBcnJheSIsIm1lc3NhZ2VWYWx1ZSIsImxvY2FsaXplZFByb3BzIiwiYWxsb3dlZCIsImhhc093blByb3BlcnR5IiwiVk9JRF9FTEVNRU5UUyIsInRlc3QiLCJ0cmFuc2xhdGlvbk5vZGVzIiwidHJhbnNsYXRlZENoaWxkcmVuIiwiY2hpbGROb2RlIiwibm9kZVR5cGUiLCJURVhUX05PREUiLCJ0ZXh0Q29udGVudCIsImxvY2FsTmFtZSIsInNvdXJjZUNoaWxkIiwiQUxMT1dFRF9TVFlMRV9UQUdTIiwiQnV0dG9uIiwidGFnIiwiYm9yZGVyIiwiQ29uZGl0aW9uYWxXcmFwcGVyIiwiY29uZGl0aW9uIiwid3JhcCIsIlNuaXBwZXRCYXNlIiwib25CbG9ja0NsaWNrZWQiLCJvbkRpc21pc3NDbGlja2VkIiwic2V0QmxvY2tCdXR0b25SZWYiLCJvbkJsb2NrQnV0dG9uTW91c2VFbnRlciIsIm9uQmxvY2tCdXR0b25Nb3VzZUxlYXZlIiwiYmxvY2tCdXR0b25Ib3ZlciIsImJsb2NrQnV0dG9uUmVmIiwib25EaXNtaXNzIiwicmVuZGVyRGlzbWlzc0J1dHRvbiIsImZvb3RlckRpc21pc3MiLCJzY2VuZTJfZGlzbWlzc19idXR0b25fdGV4dCIsImJsb2NrX2J1dHRvbl90ZXh0Iiwic2NoZW1hIiwicHJvcGVydGllcyIsImRlZmF1bHQiLCJjb250YWluZXJDbGFzc05hbWUiLCJ0ZXh0U3R5bGUiLCJERUZBVUxUX0lDT05fUEFUSCIsIlNpbXBsZVNuaXBwZXQiLCJvbkJ1dHRvbkNsaWNrIiwiYnV0dG9uX3VybCIsImJ1dHRvbl9hY3Rpb25fYXJncyIsIl9zaG91bGRSZW5kZXJCdXR0b24iLCJyZW5kZXJUaXRsZSIsInJlbmRlclRpdGxlSWNvbiIsInRpdGxlSWNvbkxpZ2h0IiwidGl0bGVfaWNvbiIsInRpdGxlSWNvbkRhcmsiLCJ0aXRsZV9pY29uX2RhcmtfdGhlbWUiLCJyZW5kZXJCdXR0b24iLCJidXR0b25fY29sb3IiLCJidXR0b25fYmFja2dyb3VuZF9jb2xvciIsIndyYXBTZWN0aW9uSGVhZGVyIiwid3JhcFNuaXBwZXRDb250ZW50IiwicmVuZGVyU2VjdGlvbkhlYWRlciIsInNlY3Rpb25fdGl0bGVfaWNvbiIsInNlY3Rpb25fdGl0bGVfdGV4dCIsInNlY3Rpb25UaXRsZUljb25MaWdodCIsInNlY3Rpb25UaXRsZUljb25EYXJrIiwic2VjdGlvbl90aXRsZV9pY29uX2RhcmtfdGhlbWUiLCJzZWN0aW9uVGl0bGVVUkwiLCJzZWN0aW9uX3RpdGxlX3VybCIsInNlY3Rpb25IZWFkZXIiLCJ0YWxsIiwiaWNvbl9hbHRfdGV4dCIsImljb25fZGFya190aGVtZSIsImV4dHJhQ29udGVudCIsIkVPWVNuaXBwZXRCYXNlIiwiaGFuZGxlU3VibWl0Iiwic2V0RnJlcXVlbmN5VmFsdWUiLCJmcmVxdWVuY3lDaGVja2JveCIsInN1Ym1pdCIsInJlbmRlckRvbmF0aW9ucyIsImZpZWxkTmFtZXMiLCJudW1iZXJGb3JtYXQiLCJJbnRsIiwiTnVtYmVyRm9ybWF0IiwibG9jYWxlIiwibmF2aWdhdG9yIiwibGFuZ3VhZ2UiLCJjdXJyZW5jeSIsImN1cnJlbmN5X2NvZGUiLCJtaW5pbXVtRnJhY3Rpb25EaWdpdHMiLCJzZWxlY3RlZF9idXR0b24iLCJidG5TdHlsZSIsImNvbG9yIiwiZG9uYXRpb25VUkxQYXJhbXMiLCJwYXJhbXNTdGFydEluZGV4IiwiZG9uYXRpb25fZm9ybV91cmwiLCJmb3JtX21ldGhvZCIsImlkeCIsImZpZWxkIiwiYnV0dG9uX25hbWUiLCJhbW91bnQiLCJtb250aGx5X2NoZWNrYm94X2xhYmVsX3RleHQiLCJ0ZXh0X2NvbG9yIiwiYmFja2dyb3VuZF9jb2xvciIsImhpZ2hsaWdodF9jb2xvciIsIkVPWVNuaXBwZXQiLCJleHRlbmRlZENvbnRlbnQiLCJTdWJtaXRGb3JtU25pcHBldCIsImV4cGFuZFNuaXBwZXQiLCJoYW5kbGVTdWJtaXRBdHRlbXB0IiwiZXhwYW5kZWQiLCJzdWJtaXRBdHRlbXB0ZWQiLCJzaWdudXBTdWJtaXR0ZWQiLCJzaWdudXBTdWNjZXNzIiwiZGlzYWJsZUZvcm0iLCJqc29uIiwicHJldmVudERpc21pc3MiLCJmb3JtRGF0YSIsInByb2Nlc3NGb3JtRGF0YSIsIm1haW5JbnB1dCIsIkZvcm1EYXRhIiwiZmV0Y2hSZXF1ZXN0IiwiUmVxdWVzdCIsIm1ldGhvZCIsImNyZWRlbnRpYWxzIiwicmVzcG9uc2UiLCJmZXRjaCIsImVyciIsInN0YXR1cyIsInJlbmRlckhpZGRlbkZvcm1JbnB1dHMiLCJoaWRkZW5faW5wdXRzIiwicmVuZGVyRGlzY2xhaW1lciIsInNjZW5lMl9kaXNjbGFpbWVyX2h0bWwiLCJyZW5kZXJGb3JtUHJpdmFjeU5vdGljZSIsInNjZW5lMl9wcml2YWN5X2h0bWwiLCJyZW5kZXJTaWdudXBTdWJtaXR0ZWQiLCJpc1N1Y2Nlc3MiLCJzdWNjZXNzVGl0bGUiLCJzdWNjZXNzX3RpdGxlIiwiYm9keVRleHQiLCJzdWNjZXNzX3RleHQiLCJlcnJvcl90ZXh0IiwicmV0cnlCdXR0b25UZXh0Iiwic2NlbmUxX2J1dHRvbl9sYWJlbCIsInZhbGlkYXRlSW5wdXQiLCJzZXRDdXN0b21WYWxpZGl0eSIsInJlbmRlcklucHV0IiwicGxhY2hvbGRlciIsInNjZW5lMl9lbWFpbF9wbGFjZWhvbGRlcl90ZXh0Iiwic2NlbmUyX2lucHV0X3BsYWNlaG9sZGVyIiwiaW5wdXRUeXBlIiwicmVuZGVyU2lnbnVwVmlldyIsImNvbnRhaW5lckNsYXNzIiwic2NlbmUyX2ljb24iLCJzY2VuZTJfaWNvbl9hbHRfdGV4dCIsInNjZW5lMl9pY29uX2RhcmtfdGhlbWUiLCJzY2VuZTJfdGl0bGUiLCJzY2VuZTJfdGV4dCIsImZvcm1fYWN0aW9uIiwic2NlbmUyX2J1dHRvbl9sYWJlbCIsImdldEZpcnN0U2NlbmVDb250ZW50IiwiRlhBU2lnbnVwU25pcHBldCIsInVzZXJBZ2VudCIsImZpcmVmb3hfdmVyc2lvbiIsImVudHJ5cG9pbnQiLCJzZXJ2aWNlIiwidXRtX2NvbnRlbnQiLCJ1dG1fdGVybSIsIk5ld3NsZXR0ZXJTbmlwcGV0Iiwic2NlbmUyX25ld3NsZXR0ZXIiLCJuZXdzbGV0dGVycyIsImZtdCIsInNvdXJjZV91cmwiLCJpc0VtYWlsT3JQaG9uZU51bWJlciIsInZhbCIsImVtYWlsX3JlIiwiY2hlY2tfZW1haWwiLCJjaGVja19waG9uZSIsImlzTmFOIiwiaW5jbHVkZV9zbXMiLCJtZXNzYWdlX2lkX3NtcyIsImNvdW50cnkiLCJtZXNzYWdlX2lkX2VtYWlsIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiYWRkRGVmYXVsdFZhbHVlcyIsIlNlbmRUb0RldmljZVNuaXBwZXQiLCJwcm9wc1dpdGhEZWZhdWx0cyIsIlNpbXBsZUJlbG93U2VhcmNoU25pcHBldCIsInNpbXBsZV9zbmlwcGV0IiwibmV3c2xldHRlcl9zbmlwcGV0IiwiZnhhX3NpZ251cF9zbmlwcGV0Iiwic2VuZF90b19kZXZpY2Vfc25pcHBldCIsImVveV9zbmlwcGV0Iiwic2ltcGxlX2JlbG93X3NlYXJjaF9zbmlwcGV0IiwiRmx1ZW50VHlwZSIsIm9wdHMiLCJ2YWx1ZU9mIiwiRmx1ZW50Tm9uZSIsIkZsdWVudE51bWJlciIsInBhcnNlRmxvYXQiLCJuZiIsIl9tZW1vaXplSW50bE9iamVjdCIsIkZsdWVudERhdGVUaW1lIiwiZHRmIiwiRGF0ZVRpbWVGb3JtYXQiLCJhcmciLCJtZXJnZSIsImFyZ29wdHMiLCJ1bndyYXBwZWQiLCJvcHQiLCJNQVhfUExBQ0VBQkxFX0xFTkdUSCIsIkZTSSIsIlBESSIsInNlbGVjdG9yIiwiY2F0ZWdvcnkiLCJQbHVyYWxSdWxlcyIsInNlbGVjdCIsImdldERlZmF1bHQiLCJzY29wZSIsInZhcmlhbnRzIiwic3RhciIsIlR5cGUiLCJSYW5nZUVycm9yIiwiZ2V0QXJndW1lbnRzIiwicG9zaXRpb25hbCIsIm5hbWVkIiwiZXhwciIsIl90cmFuc2Zvcm0iLCJQYXR0ZXJuIiwicHJlY2lzaW9uIiwiVmFyaWFibGVSZWZlcmVuY2UiLCJNZXNzYWdlUmVmZXJlbmNlIiwiVGVybVJlZmVyZW5jZSIsIkZ1bmN0aW9uUmVmZXJlbmNlIiwiU2VsZWN0RXhwcmVzc2lvbiIsImluc2lkZVRlcm1SZWZlcmVuY2UiLCJSZWZlcmVuY2VFcnJvciIsIlR5cGVFcnJvciIsImF0dHIiLCJfbWVzc2FnZXMiLCJhdHRyaWJ1dGUiLCJ0ZXJtIiwiX3Rlcm1zIiwia2V5YXJncyIsImxvY2FsIiwiX2Z1bmN0aW9ucyIsImJ1aWx0aW5zIiwic2VsIiwidmFyaWFudCIsInB0biIsImRpcnR5IiwiaGFzIiwidXNlSXNvbGF0aW5nIiwiX3VzZUlzb2xhdGluZyIsInBhcnQiLCJyZXNvbHZlIiwiV2Vha1NldCIsIkZsdWVudEVycm9yIiwiUkVfTUVTU0FHRV9TVEFSVCIsIlJFX0FUVFJJQlVURV9TVEFSVCIsIlJFX1ZBUklBTlRfU1RBUlQiLCJSRV9OVU1CRVJfTElURVJBTCIsIlJFX0lERU5USUZJRVIiLCJSRV9SRUZFUkVOQ0UiLCJSRV9GVU5DVElPTl9OQU1FIiwiUkVfVEVYVF9SVU4iLCJSRV9TVFJJTkdfUlVOIiwiUkVfU1RSSU5HX0VTQ0FQRSIsIlJFX1VOSUNPREVfRVNDQVBFIiwiUkVfTEVBRElOR19ORVdMSU5FUyIsIlJFX1RSQUlMSU5HX1NQQUNFUyIsIlJFX0JMQU5LX0xJTkVTIiwiUkVfSU5ERU5UIiwiVE9LRU5fQlJBQ0VfT1BFTiIsIlRPS0VOX0JSQUNFX0NMT1NFIiwiVE9LRU5fQlJBQ0tFVF9PUEVOIiwiVE9LRU5fQlJBQ0tFVF9DTE9TRSIsIlRPS0VOX1BBUkVOX09QRU4iLCJUT0tFTl9BUlJPVyIsIlRPS0VOX0NPTE9OIiwiVE9LRU5fQ09NTUEiLCJUT0tFTl9CTEFOSyIsIk1BWF9QTEFDRUFCTEVTIiwiRmx1ZW50UmVzb3VyY2UiLCJNYXAiLCJmcm9tU3RyaW5nIiwibGFzdEluZGV4IiwicmVzb3VyY2UiLCJjdXJzb3IiLCJleGVjIiwic2V0IiwicGFyc2VNZXNzYWdlIiwicmUiLCJjb25zdW1lQ2hhciIsImNoYXIiLCJlcnJvckNsYXNzIiwiY29uc3VtZVRva2VuIiwibWF0Y2gxIiwicGFyc2VQYXR0ZXJuIiwicGFyc2VBdHRyaWJ1dGVzIiwicGFyc2VQYXR0ZXJuRWxlbWVudHMiLCJJbmZpbml0eSIsImluZGVudCIsInBhcnNlSW5kZW50IiwidHJpbSIsImNvbW1vbkluZGVudCIsInBsYWNlYWJsZUNvdW50IiwicGFyc2VQbGFjZWFibGUiLCJtaW4iLCJiYWtlZCIsInBhcnNlSW5saW5lRXhwcmVzc2lvbiIsInBhcnNlVmFyaWFudHMiLCJzaWdpbCIsInBhcnNlQXJndW1lbnRzIiwicGFyc2VMaXRlcmFsIiwicGFyc2VBcmd1bWVudCIsImNvdW50IiwicGFyc2VWYXJpYW50S2V5IiwicGFyc2VOdW1iZXJMaXRlcmFsIiwicGFyc2VTdHJpbmdMaXRlcmFsIiwiZnJhY3Rpb24iLCJwYXJzZUVzY2FwZVNlcXVlbmNlIiwiY29kZXBvaW50NCIsImNvZGVwb2ludDYiLCJjb2RlcG9pbnQiLCJTdHJpbmciLCJmcm9tQ29kZVBvaW50Iiwic3RhcnQiLCJtYWtlSW5kZW50IiwiYmxhbmsiLCJGbHVlbnRCdW5kbGUiLCJsb2NhbGVzIiwiZnVuY3Rpb25zIiwidHJhbnNmb3JtIiwiX2ludGxzIiwiV2Vha01hcCIsImhhc01lc3NhZ2UiLCJhZGRNZXNzYWdlcyIsInJlcyIsImFkZFJlc291cmNlIiwiYWxsb3dPdmVycmlkZXMiLCJjdG9yIiwiY2FjaGUiLCJub25CbGFuayIsImxpbmUiLCJjb3VudEluZGVudCIsImZ0bCIsInN0cmluZ3MiLCJjb2RlIiwibGluZXMiLCJpbmRlbnRzIiwiY29tbW9uIiwiUmVnRXhwIiwiUklDSF9URVhUX0NPTkZJRyIsImFtb19odG1sIiwicHJpdmFjeV9odG1sIiwiZGlzY2xhaW1lcl9odG1sIiwiYXR0cnNUb1RyeSIsInN0cmluZyIsInBvcCIsIkRlZHVwZSIsImNyZWF0ZUtleSIsImRlZmF1bHRDcmVhdGVLZXkiLCJncm91cCIsImdyb3VwcyIsImdsb2JhbEtleXMiLCJ2YWx1ZU1hcCIsIlRPUF9TSVRFU19ERUZBVUxUX1JPV1MiLCJkZWR1cGUiLCJJTklUSUFMX1NUQVRFIiwiQVNSb3V0ZXIiLCJTbmlwcGV0cyIsImxvYWRlZCIsImJsb2NrZWQiLCJBU19ST1VURVJfSU5JVElBTElaRUQiLCJpbnNlcnRQaW5uZWQiLCJwaW5uZWQiLCJwaW5uZWRVcmxzIiwibmV3TGlua3MiLCJwaW5JbmRleCIsImhhc01hdGNoIiwibmV3Um93cyIsIlRPUF9TSVRFU19VUERBVEVEIiwiVE9QX1NJVEVTX1BSRUZTX1VQREFURUQiLCJwcmV2aWV3UmVzcG9uc2UiLCJQUkVWSUVXX1JFU1BPTlNFIiwicHJldmlld1VybCIsIlBSRVZJRVdfUkVRVUVTVCIsIlBSRVZJRVdfUkVRVUVTVF9DQU5DRUwiLCJTQ1JFRU5TSE9UX1VQREFURUQiLCJQTEFDRVNfQk9PS01BUktfQURERUQiLCJib29rbWFya0d1aWQiLCJib29rbWFya1RpdGxlIiwiZGF0ZUFkZGVkIiwiYm9va21hcmtEYXRlQ3JlYXRlZCIsIlBMQUNFU19CT09LTUFSS19SRU1PVkVEIiwibmV3U2l0ZSIsIlBMQUNFU19MSU5LX0RFTEVURUQiLCJVUERBVEVfU0VBUkNIX1NIT1JUQ1VUUyIsIlNOSVBQRVRTX1BSRVZJRVdfTU9ERSIsIkRJQUxPR19PUEVOIiwiREVMRVRFX0hJU1RPUllfVVJMIiwibmV3VmFsdWVzIiwiUFJFRlNfSU5JVElBTF9WQUxVRVMiLCJQUkVGX0NIQU5HRUQiLCJuZXdTdGF0ZSIsIlNFQ1RJT05fREVSRUdJU1RFUiIsIlNFQ1RJT05fUkVHSVNURVIiLCJTRUNUSU9OX1VQREFURSIsImRlZHVwZUNvbmZpZ3VyYXRpb25zIiwiZGVkdXBlQ29uZiIsImRlZHVwZWRSb3dzIiwiZGVkdXBlRnJvbSIsImRlZHVwZVNlY3Rpb25JZCIsImRlZHVwZVNlY3Rpb24iLCJTRUNUSU9OX1VQREFURV9DQVJEIiwiUExBQ0VTX1NBVkVEX1RPX1BPQ0tFVCIsIm9wZW5fdXJsIiwicG9ja2V0X2lkIiwiUExBQ0VTX0xJTktfQkxPQ0tFRCIsIkRFTEVURV9GUk9NX1BPQ0tFVCIsIkFSQ0hJVkVfRlJPTV9QT0NLRVQiLCJTTklQUEVUU19EQVRBIiwiU05JUFBFVF9CTE9DS0VEIiwiYmxvY2tMaXN0IiwiY29uY2F0IiwiU05JUFBFVFNfQkxPQ0tMSVNUX0NMRUFSRUQiLCJTTklQUEVUU19SRVNFVCIsIlBPQ0tFVF9XQUlUSU5HX0ZPUl9TUE9DIiwiUE9DS0VUX0xPR0dFRF9JTiIsIlBPQ0tFVF9DVEEiLCJjdGFfYnV0dG9uIiwiY3RhX3RleHQiLCJjdGFfdXJsIiwidXNlX2N0YSIsImlzTm90UmVhZHkiLCJoYW5kbGVTaXRlcyIsImFjY3VtdWxhdG9yIiwiZmVlZF91cmwiLCJESVNDT1ZFUllfU1RSRUFNX0NPTkZJR19DSEFOR0UiLCJESVNDT1ZFUllfU1RSRUFNX0NPTkZJR19TRVRVUCIsIkRJU0NPVkVSWV9TVFJFQU1fTEFZT1VUX1VQREFURSIsIkRJU0NPVkVSWV9TVFJFQU1fTEFZT1VUX1JFU0VUIiwiRElTQ09WRVJZX1NUUkVBTV9GRUVEU19VUERBVEUiLCJESVNDT1ZFUllfU1RSRUFNX0ZFRURfVVBEQVRFIiwibmV3RGF0YSIsIkRJU0NPVkVSWV9TVFJFQU1fU1BPQ1NfQ0FQUyIsIkRJU0NPVkVSWV9TVFJFQU1fU1BPQ1NfRU5EUE9JTlQiLCJESVNDT1ZFUllfU1RSRUFNX1NQT0NTX1VQREFURSIsIkRJU0NPVkVSWV9TVFJFQU1fU1BPQ19CTE9DS0VEIiwiRElTQ09WRVJZX1NUUkVBTV9MSU5LX0JMT0NLRUQiLCJpdGVtcyIsImFkZFBvY2tldEluZm8iLCJ1cGRhdGVCb29rbWFya0luZm8iLCJyZW1vdmVCb29rbWFya0luZm8iLCJTSE9XX1NFQVJDSCIsImNhcmRDb250ZXh0VHlwZXMiLCJoaXN0b3J5IiwiZmx1ZW50SUQiLCJib29rbWFyayIsInRyZW5kaW5nIiwicG9ja2V0IiwiZG93bmxvYWQiLCJnSW1hZ2VMb2FkaW5nIiwiX0NhcmQiLCJhY3RpdmVDYXJkIiwiaW1hZ2VMb2FkZWQiLCJjYXJkSW1hZ2UiLCJvbk1lbnVCdXR0b25VcGRhdGUiLCJtYXliZUxvYWRJbWFnZSIsImltYWdlVXJsIiwibG9hZGVyUHJvbWlzZSIsIlByb21pc2UiLCJyZWplY3QiLCJsb2FkZXIiLCJJbWFnZSIsInNyYyIsImNhdGNoIiwidGhlbiIsIlNIT1dfRE9XTkxPQURfRklMRSIsIldFQkVYVF9DTElDSyIsImNsaWNrIiwiaGFzSW1hZ2UiLCJwbGFjZWhvbGRlciIsImRlc2NyaXB0aW9uIiwiQ2FyZCIsInBsYXRmb3JtIiwiUGxhY2Vob2xkZXJDYXJkIiwiSW50ZXJydXB0IiwiRkxVRU5UX0ZJTEVTIiwiaGVscGVycyIsInNlbGVjdEludGVycnVwdEFuZFRyaXBsZXRzIiwiaGFzSW50ZXJydXB0IiwiQm9vbGVhbiIsImhhc1RyaXBsZXRzIiwiaW50ZXJydXB0IiwidHJpcGxldHMiLCJhZGRGbHVlbnQiLCJmaWxlIiwiaGVhZCIsImFwcGVuZENoaWxkIiwicmVsIiwiZmV0Y2hGbG93UGFyYW1zIiwic2V0Rmxvd1BhcmFtcyIsIkZpcnN0UnVuIiwiZGlkTG9hZEZsb3dQYXJhbXMiLCJwcmV2TWVzc2FnZSIsImlzSW50ZXJydXB0VmlzaWJsZSIsImlzVHJpcGxldHNDb250YWluZXJWaXNpYmxlIiwiaXNUcmlwbGV0c0NvbnRlbnRWaXNpYmxlIiwiY2xvc2VJbnRlcnJ1cHQiLCJjbG9zZVRyaXBsZXRzIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwicHJldk1lc3NhZ2VJZCIsInJlbW92ZUhpZGVNYWluIiwiVG9wU2l0ZUZvcm1JbnB1dCIsInZhbGlkYXRpb25FcnJvciIsIm9uTW91bnQiLCJvbkNsZWFySWNvblByZXNzIiwic2hvdWxkRm9jdXMiLCJvbkNsZWFyIiwicmVuZGVyTG9hZGluZ09yQ2xvc2VCdXR0b24iLCJzaG93Q2xlYXJCdXR0b24iLCJsb2FkaW5nIiwidHlwZVVybCIsInRpdGxlSWQiLCJwbGFjZWhvbGRlcklkIiwiZXJyb3JNZXNzYWdlSWQiLCJUb3BTaXRlRm9ybSIsImN1c3RvbVNjcmVlbnNob3RVcmwiLCJzaG93Q3VzdG9tU2NyZWVuc2hvdEZvcm0iLCJvbkNsZWFyU2NyZWVuc2hvdElucHV0Iiwib25MYWJlbENoYW5nZSIsIm9uVXJsQ2hhbmdlIiwib25DbGVhclVybENsaWNrIiwib25Eb25lQnV0dG9uQ2xpY2siLCJvbkN1c3RvbVNjcmVlbnNob3RVcmxDaGFuZ2UiLCJvblByZXZpZXdCdXR0b25DbGljayIsIm9uRW5hYmxlU2NyZWVuc2hvdFVybEZvcm0iLCJ2YWxpZGF0ZVVybCIsIl91cGRhdGVDdXN0b21TY3JlZW5zaG90SW5wdXQiLCJ2YWxpZGF0ZUZvcm0iLCJjbGVhblVybCIsIlRPUF9TSVRFU19QSU4iLCJfdHJ5UGFyc2VVcmwiLCJ2YWxpZFByb3RvY29scyIsInVybE9iaiIsInZhbGlkYXRlQ3VzdG9tU2NyZWVuc2hvdFVybCIsInZhbGlkYXRlIiwiX3JlbmRlckN1c3RvbVNjcmVlbnNob3RJbnB1dCIsInJlcXVlc3RGYWlsZWQiLCJpc0xvYWRpbmciLCJzaG93QXNBZGQiLCJwcmV2aW91cyIsImNoYW5nZWQiLCJwcmV2aWV3TW9kZSIsInByZXZpZXdMaW5rIiwiX09wZW5JblByaXZhdGVXaW5kb3ciLCJPUEVOX1BSSVZBVEVfV0lORE9XIiwicmVmZXJyZXIiLCJMaW5rTWVudU9wdGlvbnMiLCJFbXB0eUl0ZW0iLCJSZW1vdmVCb29rbWFyayIsIkRFTEVURV9CT09LTUFSS19CWV9JRCIsIkFkZEJvb2ttYXJrIiwiQk9PS01BUktfVVJMIiwiT3BlbkluTmV3V2luZG93IiwiT1BFTl9ORVdfV0lORE9XIiwidHlwZWRCb251cyIsIkJsb2NrVXJsIiwiQkxPQ0tfVVJMIiwiYmxvY2siLCJXZWJFeHREaXNtaXNzIiwiV0VCRVhUX0RJU01JU1MiLCJEZWxldGVVcmwiLCJpc0VuYWJsZWQiLCJzaXRlSW5mbyIsImZvcmNlQmxvY2siLCJTaG93RmlsZSIsIk9wZW5GaWxlIiwiT1BFTl9ET1dOTE9BRF9GSUxFIiwiQ29weURvd25sb2FkTGluayIsIkNPUFlfRE9XTkxPQURfTElOSyIsIkdvVG9Eb3dubG9hZFBhZ2UiLCJSZW1vdmVEb3dubG9hZCIsIlJFTU9WRV9ET1dOTE9BRF9GSUxFIiwiUGluVG9wU2l0ZSIsIlVucGluVG9wU2l0ZSIsIlRPUF9TSVRFU19VTlBJTiIsIlNhdmVUb1BvY2tldCIsIlNBVkVfVE9fUE9DS0VUIiwic2F2ZSIsIkRlbGV0ZUZyb21Qb2NrZXQiLCJBcmNoaXZlRnJvbVBvY2tldCIsIkVkaXRUb3BTaXRlIiwiQ2hlY2tCb29rbWFyayIsIkNoZWNrUGluVG9wU2l0ZSIsIkNoZWNrU2F2ZWRUb1BvY2tldCIsIkNoZWNrQm9va21hcmtPckFyY2hpdmUiLCJPcGVuSW5Qcml2YXRlV2luZG93IiwiREVGQVVMVF9TSVRFX01FTlVfT1BUSU9OUyIsIl9MaW5rTWVudSIsImlzUHJpdmF0ZUJyb3dzaW5nRW5hYmxlZCIsImlzRGVmYXVsdCIsInVzZXJFdmVudERhdGEiLCJnZXRTdGF0ZSIsIkxpbmtNZW51IiwiRFNJbWFnZSIsIm9uT3B0aW1pemVkSW1hZ2VFcnJvciIsIm9uTm9uT3B0aW1pemVkSW1hZ2VFcnJvciIsImlzU2VlbiIsIm9wdGltaXplZEltYWdlRmFpbGVkIiwib25TZWVuIiwib3B0aW1pemUiLCJjb250YWluZXJXaWR0aCIsImZpbmRET01Ob2RlIiwiY2xpZW50V2lkdGgiLCJjb250YWluZXJIZWlnaHQiLCJjbGllbnRIZWlnaHQiLCJvYnNlcnZlciIsInJlZm9ybWF0SW1hZ2VVUkwiLCJoZWlnaHQiLCJjbGFzc05hbWVzIiwiZXh0cmFDbGFzc05hbWVzIiwicmF3U291cmNlIiwic291cmNlMngiLCJiYXNlU291cmNlIiwibm9uT3B0aW1pemVkSW1hZ2VGYWlsZWQiLCJEU0xpbmtNZW51Iiwib25NZW51U2hvdyIsImNyZWF0ZVJlZiIsImRzTGlua01lbnVIb3N0RGl2IiwiY3VycmVudCIsInBhcmVudEVsZW1lbnQiLCJuZXh0QW5pbWF0aW9uRnJhbWUiLCJzY3JvbGxNYXhYIiwiVE9QX1NUT1JJRVNfQ09OVEVYVF9NRU5VX09QVElPTlMiLCJTYWZlQW5jaG9yIiwiRFNDYXJkIiwiaW1hZ2Vfc3JjIiwicmF3X2ltYWdlX3NyYyIsImV4Y2VycHQiLCJQbGFjZWhvbGRlckRTQ2FyZCIsIkRTRW1wdHlTdGF0ZSIsIm9uUmVzZXQiLCJ0aW1lb3V0IiwiY2xlYXJUaW1lb3V0Iiwid2FpdGluZyIsIkRJU0NPVkVSWV9TVFJFQU1fUkVUUllfRkVFRCIsInJlbmRlclN0YXRlIiwiQ2FyZEdyaWQiLCJyZW5kZXJDYXJkcyIsInJlY3MiLCJyZWMiLCJjYW1wYWlnbl9pZCIsImRvbWFpbiIsImRpdmlzaWJpbGl0eSIsImlzRW1wdHkiLCJEU01lc3NhZ2UiLCJsaW5rX3RleHQiLCJsaW5rX3VybCIsIkxpc3RJdGVtIiwiUGxhY2Vob2xkZXJMaXN0SXRlbSIsIl9MaXN0IiwicmVuZGVyTGlzdCIsInJlY1N0YXJ0aW5nUG9pbnQiLCJyZWNNYXJrdXAiLCJsaXN0U3R5bGVzIiwiZnVsbFdpZHRoIiwiaGFzQm9yZGVycyIsImhhc0ltYWdlcyIsImhhc051bWJlcnMiLCJMaXN0IiwiSGVybyIsImhlcm9SZWMiLCJyZW5kZXJIZXJvIiwib3RoZXJSZWNzIiwiaGVyb0NhcmQiLCJsaXN0Iiwic3ViQ29tcG9uZW50VHlwZSIsIl9IaWdobGlnaHRzIiwiSGlnaGxpZ2h0cyIsIkhvcml6b250YWxSdWxlIiwiTmF2aWdhdGlvbiIsImFsaWdubWVudCIsIlNlY3Rpb25UaXRsZSIsInNlbGVjdExheW91dFJlbmRlciIsInJpY2tSb2xsQ2FjaGUiLCJzcG9jSW5kZXgiLCJidWZmZXJSb2xsQ2FjaGUiLCJjaG9zZW5TcG9jcyIsInVuY2hvc2VuU3BvY3MiLCJyb2xsRm9yU3BvY3MiLCJzcG9jc0NvbmZpZyIsInBvc2l0aW9uIiwicG9zaXRpb25zIiwicmlja1JvbGwiLCJyYW5kb20iLCJwcm9iYWJpbGl0eSIsIkRTX0NPTVBPTkVOVFMiLCJmaWx0ZXJBcnJheSIsInBsYWNlaG9sZGVyQ29tcG9uZW50IiwiaGFuZGxlQ29tcG9uZW50Iiwib2Zmc2V0IiwiaGFzUmVjcyIsInJlbmRlckxheW91dCIsInJlbmRlcmVkTGF5b3V0QXJyYXkiLCJjIiwibGF5b3V0UmVuZGVyIiwic3BvY3NGaWxsIiwiY2hvc2VuU3BvY3NGaWxsIiwicmVhc29uIiwiZGlzcGxheWVkIiwiZnVsbF9yZWNhbGMiLCJ1bmNob3NlblNwb2NzRmlsbCIsIm91dE9mUG9zaXRpb25TcG9jc0ZpbGwiLCJBTExPV0VEX0NTU19VUkxfUFJFRklYRVMiLCJEVU1NWV9DU1NfU0VMRUNUT1IiLCJpc0FsbG93ZWRDU1MiLCJwcm9wZXJ0eSIsInVybHMiLCJldmVyeSIsInByZWZpeCIsIl9EaXNjb3ZlcnlTdHJlYW1CYXNlIiwib25TdHlsZU1vdW50Iiwic2hlZXQiLCJzdHlsZXMiLCJzZWxlY3RvcnMiLCJkZWNsYXJhdGlvbnMiLCJpbnNlcnRSdWxlIiwicnVsZSIsImNzc1J1bGVzIiwicmVtb3ZlUHJvcGVydHkiLCJzZWxlY3RvclRleHQiLCJlbWJlZFdpZHRoIiwiZnVsbF93aWR0aCIsImhhc19pbWFnZXMiLCJoYXNfbnVtYmVycyIsInJlbmRlclN0eWxlcyIsIm9sZFByb3BzIiwiX3Nwb2NzRmlsbFNlbnQiLCJzcG9jX2ZpbGxzIiwiY29sbGFwc2libGUiLCJleHRyYWN0Q29tcG9uZW50IiwidG9wU3RvcmllcyIsIkRpc2NvdmVyeVN0cmVhbUJhc2UiXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxrREFBMEMsZ0NB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bUIsR0FBR3BuRCx1Q0FBTyxDQUFDM0IsS0FBSyxLQUFLO0FBQ25EWSxpQkFBZSxFQUFFWixLQUFLLENBQUNZLGVBRDRCO0FBRW5EcEIsT0FBSyxFQUFFUSxLQUFLLENBQUNSLEtBRnNDO0FBR25Ed0IsVUFBUSxFQUFFaEIsS0FBSyxDQUFDZ0I7QUFIbUMsQ0FBTCxDQUFOLENBQVAsQ0FJL0J5bUQsdUNBSitCLENBQTVCLEMiLCJmaWxlIjoiYWN0aXZpdHktc3RyZWFtLmJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTtcbiIsIi8qIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXMgZmlsZSxcbiAqIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uICovXG5cbmltcG9ydCB7IGFjdGlvbkNyZWF0b3JzIGFzIGFjLCBhY3Rpb25UeXBlcyBhcyBhdCB9IGZyb20gXCJjb21tb24vQWN0aW9ucy5qc21cIjtcbmltcG9ydCB7IEJhc2UgfSBmcm9tIFwiY29udGVudC1zcmMvY29tcG9uZW50cy9CYXNlL0Jhc2VcIjtcbmltcG9ydCB7IERldGVjdFVzZXJTZXNzaW9uU3RhcnQgfSBmcm9tIFwiY29udGVudC1zcmMvbGliL2RldGVjdC11c2VyLXNlc3Npb24tc3RhcnRcIjtcbmltcG9ydCB7IGluaXRTdG9yZSB9IGZyb20gXCJjb250ZW50LXNyYy9saWIvaW5pdC1zdG9yZVwiO1xuaW1wb3J0IHsgUHJvdmlkZXIgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBSZWFjdERPTSBmcm9tIFwicmVhY3QtZG9tXCI7XG5pbXBvcnQgeyByZWR1Y2VycyB9IGZyb20gXCJjb21tb24vUmVkdWNlcnMuanNtXCI7XG5cbmNvbnN0IHN0b3JlID0gaW5pdFN0b3JlKHJlZHVjZXJzKTtcblxubmV3IERldGVjdFVzZXJTZXNzaW9uU3RhcnQoc3RvcmUpLnNlbmRFdmVudE9yQWRkTGlzdGVuZXIoKTtcblxuc3RvcmUuZGlzcGF0Y2goYWMuQWxzb1RvTWFpbih7IHR5cGU6IGF0Lk5FV19UQUJfU1RBVEVfUkVRVUVTVCB9KSk7XG5cblJlYWN0RE9NLmh5ZHJhdGUoXG4gIDxQcm92aWRlciBzdG9yZT17c3RvcmV9PlxuICAgIDxCYXNlXG4gICAgICBpc0ZpcnN0cnVuPXtnbG9iYWwuZG9jdW1lbnQubG9jYXRpb24uaHJlZiA9PT0gXCJhYm91dDp3ZWxjb21lXCJ9XG4gICAgICBsb2NhbGU9e2dsb2JhbC5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQubGFuZ31cbiAgICAgIHN0cmluZ3M9e2dsb2JhbC5nQWN0aXZpdHlTdHJlYW1TdHJpbmdzfVxuICAgIC8+XG4gIDwvUHJvdmlkZXI+LFxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJvb3RcIilcbik7XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCIvKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzXG4gKiBmaWxlLCBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbnRoaXMuTUFJTl9NRVNTQUdFX1RZUEUgPSBcIkFjdGl2aXR5U3RyZWFtOk1haW5cIjtcbnRoaXMuQ09OVEVOVF9NRVNTQUdFX1RZUEUgPSBcIkFjdGl2aXR5U3RyZWFtOkNvbnRlbnRcIjtcbnRoaXMuUFJFTE9BRF9NRVNTQUdFX1RZUEUgPSBcIkFjdGl2aXR5U3RyZWFtOlByZWxvYWRlZEJyb3dzZXJcIjtcbnRoaXMuVUlfQ09ERSA9IDE7XG50aGlzLkJBQ0tHUk9VTkRfUFJPQ0VTUyA9IDI7XG5cbi8qKlxuICogZ2xvYmFsSW1wb3J0Q29udGV4dCAtIEFyZSB3ZSBpbiBVSSBjb2RlIChpLmUuIHJlYWN0LCBhIGRvbSkgb3Igc29tZSBraW5kIG9mIGJhY2tncm91bmQgcHJvY2Vzcz9cbiAqICAgICAgICAgICAgICAgICAgICAgICBVc2UgdGhpcyBpbiBhY3Rpb24gY3JlYXRvcnMgaWYgeW91IG5lZWQgZGlmZmVyZW50IGxvZ2ljXG4gKiAgICAgICAgICAgICAgICAgICAgICAgZm9yIHVpL2JhY2tncm91bmQgcHJvY2Vzc2VzLlxuICovXG5jb25zdCBnbG9iYWxJbXBvcnRDb250ZXh0ID1cbiAgdHlwZW9mIFdpbmRvdyA9PT0gXCJ1bmRlZmluZWRcIiA/IEJBQ0tHUk9VTkRfUFJPQ0VTUyA6IFVJX0NPREU7XG4vLyBFeHBvcnQgZm9yIHRlc3RzXG50aGlzLmdsb2JhbEltcG9ydENvbnRleHQgPSBnbG9iYWxJbXBvcnRDb250ZXh0O1xuXG4vLyBDcmVhdGUgYW4gb2JqZWN0IHRoYXQgYXZvaWRzIGFjY2lkZW50YWwgZGlmZmVyaW5nIGtleS92YWx1ZSBwYWlyczpcbi8vIHtcbi8vICAgSU5JVDogXCJJTklUXCIsXG4vLyAgIFVOSU5JVDogXCJVTklOSVRcIlxuLy8gfVxuY29uc3QgYWN0aW9uVHlwZXMgPSB7fTtcbmZvciAoY29uc3QgdHlwZSBvZiBbXG4gIFwiQURET05TX0lORk9fUkVRVUVTVFwiLFxuICBcIkFERE9OU19JTkZPX1JFU1BPTlNFXCIsXG4gIFwiQVJDSElWRV9GUk9NX1BPQ0tFVFwiLFxuICBcIkFTX1JPVVRFUl9JTklUSUFMSVpFRFwiLFxuICBcIkFTX1JPVVRFUl9QUkVGX0NIQU5HRURcIixcbiAgXCJBU19ST1VURVJfVEFSR0VUSU5HX1VQREFURVwiLFxuICBcIkFTX1JPVVRFUl9URUxFTUVUUllfVVNFUl9FVkVOVFwiLFxuICBcIkJMT0NLX1VSTFwiLFxuICBcIkJPT0tNQVJLX1VSTFwiLFxuICBcIkNPUFlfRE9XTkxPQURfTElOS1wiLFxuICBcIkRFTEVURV9CT09LTUFSS19CWV9JRFwiLFxuICBcIkRFTEVURV9GUk9NX1BPQ0tFVFwiLFxuICBcIkRFTEVURV9ISVNUT1JZX1VSTFwiLFxuICBcIkRJQUxPR19DQU5DRUxcIixcbiAgXCJESUFMT0dfT1BFTlwiLFxuICBcIkRJU0NPVkVSWV9TVFJFQU1fQ09ORklHX0NIQU5HRVwiLFxuICBcIkRJU0NPVkVSWV9TVFJFQU1fQ09ORklHX1NFVFVQXCIsXG4gIFwiRElTQ09WRVJZX1NUUkVBTV9DT05GSUdfU0VUX1ZBTFVFXCIsXG4gIFwiRElTQ09WRVJZX1NUUkVBTV9GRUVEU19VUERBVEVcIixcbiAgXCJESVNDT1ZFUllfU1RSRUFNX0ZFRURfVVBEQVRFXCIsXG4gIFwiRElTQ09WRVJZX1NUUkVBTV9JTVBSRVNTSU9OX1NUQVRTXCIsXG4gIFwiRElTQ09WRVJZX1NUUkVBTV9MQVlPVVRfUkVTRVRcIixcbiAgXCJESVNDT1ZFUllfU1RSRUFNX0xBWU9VVF9VUERBVEVcIixcbiAgXCJESVNDT1ZFUllfU1RSRUFNX0xJTktfQkxPQ0tFRFwiLFxuICBcIkRJU0NPVkVSWV9TVFJFQU1fTE9BREVEX0NPTlRFTlRcIixcbiAgXCJESVNDT1ZFUllfU1RSRUFNX1JFVFJZX0ZFRURcIixcbiAgXCJESVNDT1ZFUllfU1RSRUFNX1NQT0NTX0NBUFNcIixcbiAgXCJESVNDT1ZFUllfU1RSRUFNX1NQT0NTX0VORFBPSU5UXCIsXG4gIFwiRElTQ09WRVJZX1NUUkVBTV9TUE9DU19GSUxMXCIsXG4gIFwiRElTQ09WRVJZX1NUUkVBTV9TUE9DU19VUERBVEVcIixcbiAgXCJESVNDT1ZFUllfU1RSRUFNX1NQT0NfQkxPQ0tFRFwiLFxuICBcIkRJU0NPVkVSWV9TVFJFQU1fU1BPQ19JTVBSRVNTSU9OXCIsXG4gIFwiRE9XTkxPQURfQ0hBTkdFRFwiLFxuICBcIkZBS0VfRk9DVVNfU0VBUkNIXCIsXG4gIFwiRklMTF9TRUFSQ0hfVEVSTVwiLFxuICBcIkhBTkRPRkZfU0VBUkNIX1RPX0FXRVNPTUVCQVJcIixcbiAgXCJISURFX1NFQVJDSFwiLFxuICBcIklOSVRcIixcbiAgXCJORVdfVEFCX0lOSVRcIixcbiAgXCJORVdfVEFCX0lOSVRJQUxfU1RBVEVcIixcbiAgXCJORVdfVEFCX0xPQURcIixcbiAgXCJORVdfVEFCX1JFSFlEUkFURURcIixcbiAgXCJORVdfVEFCX1NUQVRFX1JFUVVFU1RcIixcbiAgXCJORVdfVEFCX1VOTE9BRFwiLFxuICBcIk9QRU5fRE9XTkxPQURfRklMRVwiLFxuICBcIk9QRU5fTElOS1wiLFxuICBcIk9QRU5fTkVXX1dJTkRPV1wiLFxuICBcIk9QRU5fUFJJVkFURV9XSU5ET1dcIixcbiAgXCJPUEVOX1dFQkVYVF9TRVRUSU5HU1wiLFxuICBcIlBMQUNFU19CT09LTUFSS19BRERFRFwiLFxuICBcIlBMQUNFU19CT09LTUFSS19SRU1PVkVEXCIsXG4gIFwiUExBQ0VTX0hJU1RPUllfQ0xFQVJFRFwiLFxuICBcIlBMQUNFU19MSU5LU19DSEFOR0VEXCIsXG4gIFwiUExBQ0VTX0xJTktfQkxPQ0tFRFwiLFxuICBcIlBMQUNFU19MSU5LX0RFTEVURURcIixcbiAgXCJQTEFDRVNfU0FWRURfVE9fUE9DS0VUXCIsXG4gIFwiUE9DS0VUX0NUQVwiLFxuICBcIlBPQ0tFVF9MSU5LX0RFTEVURURfT1JfQVJDSElWRURcIixcbiAgXCJQT0NLRVRfTE9HR0VEX0lOXCIsXG4gIFwiUE9DS0VUX1dBSVRJTkdfRk9SX1NQT0NcIixcbiAgXCJQUkVGU19JTklUSUFMX1ZBTFVFU1wiLFxuICBcIlBSRUZfQ0hBTkdFRFwiLFxuICBcIlBSRVZJRVdfUkVRVUVTVFwiLFxuICBcIlBSRVZJRVdfUkVRVUVTVF9DQU5DRUxcIixcbiAgXCJQUkVWSUVXX1JFU1BPTlNFXCIsXG4gIFwiUkVNT1ZFX0RPV05MT0FEX0ZJTEVcIixcbiAgXCJSSUNIX0lDT05fTUlTU0lOR1wiLFxuICBcIlNBVkVfU0VTU0lPTl9QRVJGX0RBVEFcIixcbiAgXCJTQVZFX1RPX1BPQ0tFVFwiLFxuICBcIlNDUkVFTlNIT1RfVVBEQVRFRFwiLFxuICBcIlNFQ1RJT05fREVSRUdJU1RFUlwiLFxuICBcIlNFQ1RJT05fRElTQUJMRVwiLFxuICBcIlNFQ1RJT05fRU5BQkxFXCIsXG4gIFwiU0VDVElPTl9NT1ZFXCIsXG4gIFwiU0VDVElPTl9PUFRJT05TX0NIQU5HRURcIixcbiAgXCJTRUNUSU9OX1JFR0lTVEVSXCIsXG4gIFwiU0VDVElPTl9VUERBVEVcIixcbiAgXCJTRUNUSU9OX1VQREFURV9DQVJEXCIsXG4gIFwiU0VUVElOR1NfQ0xPU0VcIixcbiAgXCJTRVRUSU5HU19PUEVOXCIsXG4gIFwiU0VUX1BSRUZcIixcbiAgXCJTSE9XX0RPV05MT0FEX0ZJTEVcIixcbiAgXCJTSE9XX0ZJUkVGT1hfQUNDT1VOVFNcIixcbiAgXCJTSE9XX1NFQVJDSFwiLFxuICBcIlNLSVBQRURfU0lHTklOXCIsXG4gIFwiU05JUFBFVFNfQkxPQ0tMSVNUX0NMRUFSRURcIixcbiAgXCJTTklQUEVUU19CTE9DS0xJU1RfVVBEQVRFRFwiLFxuICBcIlNOSVBQRVRTX0RBVEFcIixcbiAgXCJTTklQUEVUU19QUkVWSUVXX01PREVcIixcbiAgXCJTTklQUEVUU19SRVNFVFwiLFxuICBcIlNOSVBQRVRfQkxPQ0tFRFwiLFxuICBcIlNVQk1JVF9FTUFJTFwiLFxuICBcIlNZU1RFTV9USUNLXCIsXG4gIFwiVEVMRU1FVFJZX0lNUFJFU1NJT05fU1RBVFNcIixcbiAgXCJURUxFTUVUUllfUEVSRk9STUFOQ0VfRVZFTlRcIixcbiAgXCJURUxFTUVUUllfVU5ERVNJUkVEX0VWRU5UXCIsXG4gIFwiVEVMRU1FVFJZX1VTRVJfRVZFTlRcIixcbiAgXCJUT1BfU0lURVNfQ0FOQ0VMX0VESVRcIixcbiAgXCJUT1BfU0lURVNfQ0xPU0VfU0VBUkNIX1NIT1JUQ1VUU19NT0RBTFwiLFxuICBcIlRPUF9TSVRFU19FRElUXCIsXG4gIFwiVE9QX1NJVEVTX0lOU0VSVFwiLFxuICBcIlRPUF9TSVRFU19PUEVOX1NFQVJDSF9TSE9SVENVVFNfTU9EQUxcIixcbiAgXCJUT1BfU0lURVNfUElOXCIsXG4gIFwiVE9QX1NJVEVTX1BSRUZTX1VQREFURURcIixcbiAgXCJUT1BfU0lURVNfVU5QSU5cIixcbiAgXCJUT1BfU0lURVNfVVBEQVRFRFwiLFxuICBcIlRPVEFMX0JPT0tNQVJLU19SRVFVRVNUXCIsXG4gIFwiVE9UQUxfQk9PS01BUktTX1JFU1BPTlNFXCIsXG4gIFwiVFJBSUxIRUFEX0VOUk9MTF9FVkVOVFwiLFxuICBcIlVOSU5JVFwiLFxuICBcIlVQREFURV9QSU5ORURfU0VBUkNIX1NIT1JUQ1VUU1wiLFxuICBcIlVQREFURV9TRUFSQ0hfU0hPUlRDVVRTXCIsXG4gIFwiVVBEQVRFX1NFQ1RJT05fUFJFRlNcIixcbiAgXCJXRUJFWFRfQ0xJQ0tcIixcbiAgXCJXRUJFWFRfRElTTUlTU1wiLFxuXSkge1xuICBhY3Rpb25UeXBlc1t0eXBlXSA9IHR5cGU7XG59XG5cbi8vIFRoZXNlIGFyZSBhY2NlcHRhYmxlIGFjdGlvbnMgZm9yIEFTIFJvdXRlciBtZXNzYWdlcyB0byBoYXZlLiBUaGV5IGNhbiBzaG93IHVwXG4vLyBhcyBjYWxsLXRvLWFjdGlvbiBidXR0b25zIGluIHNuaXBwZXRzLCBvbmJvYXJkaW5nIHRvdXIsIGV0Yy5cbmNvbnN0IEFTUm91dGVyQWN0aW9ucyA9IHt9O1xuZm9yIChjb25zdCB0eXBlIG9mIFtcbiAgXCJJTlNUQUxMX0FERE9OX0ZST01fVVJMXCIsXG4gIFwiT1BFTl9BUFBMSUNBVElPTlNfTUVOVVwiLFxuICBcIk9QRU5fUFJJVkFURV9CUk9XU0VSX1dJTkRPV1wiLFxuICBcIk9QRU5fVVJMXCIsXG4gIFwiT1BFTl9BQk9VVF9QQUdFXCIsXG4gIFwiT1BFTl9QUkVGRVJFTkNFU19QQUdFXCIsXG4gIFwiU0hPV19GSVJFRk9YX0FDQ09VTlRTXCIsXG4gIFwiUElOX0NVUlJFTlRfVEFCXCIsXG5dKSB7XG4gIEFTUm91dGVyQWN0aW9uc1t0eXBlXSA9IHR5cGU7XG59XG5cbi8vIEhlbHBlciBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgcm91dGVkIGFjdGlvbnMgYmV0d2VlbiBjb250ZW50IGFuZCBtYWluXG4vLyBOb3QgaW50ZW5kZWQgdG8gYmUgdXNlZCBieSBjb25zdW1lcnNcbmZ1bmN0aW9uIF9Sb3V0ZU1lc3NhZ2UoYWN0aW9uLCBvcHRpb25zKSB7XG4gIGNvbnN0IG1ldGEgPSBhY3Rpb24ubWV0YSA/IHsgLi4uYWN0aW9uLm1ldGEgfSA6IHt9O1xuICBpZiAoIW9wdGlvbnMgfHwgIW9wdGlvbnMuZnJvbSB8fCAhb3B0aW9ucy50bykge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIFwiUm91dGVkIE1lc3NhZ2VzIG11c3QgaGF2ZSBvcHRpb25zIGFzIHRoZSBzZWNvbmQgcGFyYW1ldGVyLCBhbmQgbXVzdCBhdCBsZWFzdCBpbmNsdWRlIGEgLmZyb20gYW5kIC50byBwcm9wZXJ0eS5cIlxuICAgICk7XG4gIH1cbiAgLy8gRm9yIGVhY2ggb2YgdGhlc2UgZmllbGRzLCBpZiB0aGV5IGFyZSBwYXNzZWQgYXMgYW4gb3B0aW9uLFxuICAvLyBhZGQgdGhlbSB0byB0aGUgYWN0aW9uLiBJZiB0aGV5IGFyZSBub3QgZGVmaW5lZCwgcmVtb3ZlIHRoZW0uXG4gIFtcImZyb21cIiwgXCJ0b1wiLCBcInRvVGFyZ2V0XCIsIFwiZnJvbVRhcmdldFwiLCBcInNraXBNYWluXCIsIFwic2tpcExvY2FsXCJdLmZvckVhY2goXG4gICAgbyA9PiB7XG4gICAgICBpZiAodHlwZW9mIG9wdGlvbnNbb10gIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgbWV0YVtvXSA9IG9wdGlvbnNbb107XG4gICAgICB9IGVsc2UgaWYgKG1ldGFbb10pIHtcbiAgICAgICAgZGVsZXRlIG1ldGFbb107XG4gICAgICB9XG4gICAgfVxuICApO1xuICByZXR1cm4geyAuLi5hY3Rpb24sIG1ldGEgfTtcbn1cblxuLyoqXG4gKiBBbHNvVG9NYWluIC0gQ3JlYXRlcyBhIG1lc3NhZ2UgdGhhdCB3aWxsIGJlIGRpc3BhdGNoZWQgbG9jYWxseSBhbmQgYWxzbyBzZW50IHRvIHRoZSBNYWluIHByb2Nlc3MuXG4gKlxuICogQHBhcmFtICB7b2JqZWN0fSBhY3Rpb24gQW55IHJlZHV4IGFjdGlvbiAocmVxdWlyZWQpXG4gKiBAcGFyYW0gIHtvYmplY3R9IG9wdGlvbnNcbiAqIEBwYXJhbSAge2Jvb2x9ICAgc2tpcExvY2FsIFVzZWQgYnkgT25seVRvTWFpbiB0byBza2lwIHRoZSBtYWluIHJlZHVjZXJcbiAqIEBwYXJhbSAge3N0cmluZ30gZnJvbVRhcmdldCBUaGUgaWQgb2YgdGhlIGNvbnRlbnQgcG9ydCBmcm9tIHdoaWNoIHRoZSBhY3Rpb24gb3JpZ2luYXRlZC4gKG9wdGlvbmFsKVxuICogQHJldHVybiB7b2JqZWN0fSBBbiBhY3Rpb24gd2l0aCBhZGRlZCAubWV0YSBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIEFsc29Ub01haW4oYWN0aW9uLCBmcm9tVGFyZ2V0LCBza2lwTG9jYWwpIHtcbiAgcmV0dXJuIF9Sb3V0ZU1lc3NhZ2UoYWN0aW9uLCB7XG4gICAgZnJvbTogQ09OVEVOVF9NRVNTQUdFX1RZUEUsXG4gICAgdG86IE1BSU5fTUVTU0FHRV9UWVBFLFxuICAgIGZyb21UYXJnZXQsXG4gICAgc2tpcExvY2FsLFxuICB9KTtcbn1cblxuLyoqXG4gKiBPbmx5VG9NYWluIC0gQ3JlYXRlcyBhIG1lc3NhZ2UgdGhhdCB3aWxsIGJlIHNlbnQgdG8gdGhlIE1haW4gcHJvY2VzcyBhbmQgc2tpcCB0aGUgbG9jYWwgcmVkdWNlci5cbiAqXG4gKiBAcGFyYW0gIHtvYmplY3R9IGFjdGlvbiBBbnkgcmVkdXggYWN0aW9uIChyZXF1aXJlZClcbiAqIEBwYXJhbSAge29iamVjdH0gb3B0aW9uc1xuICogQHBhcmFtICB7c3RyaW5nfSBmcm9tVGFyZ2V0IFRoZSBpZCBvZiB0aGUgY29udGVudCBwb3J0IGZyb20gd2hpY2ggdGhlIGFjdGlvbiBvcmlnaW5hdGVkLiAob3B0aW9uYWwpXG4gKiBAcmV0dXJuIHtvYmplY3R9IEFuIGFjdGlvbiB3aXRoIGFkZGVkIC5tZXRhIHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gT25seVRvTWFpbihhY3Rpb24sIGZyb21UYXJnZXQpIHtcbiAgcmV0dXJuIEFsc29Ub01haW4oYWN0aW9uLCBmcm9tVGFyZ2V0LCB0cnVlKTtcbn1cblxuLyoqXG4gKiBCcm9hZGNhc3RUb0NvbnRlbnQgLSBDcmVhdGVzIGEgbWVzc2FnZSB0aGF0IHdpbGwgYmUgZGlzcGF0Y2hlZCB0byBtYWluIGFuZCBzZW50IHRvIEFMTCBjb250ZW50IHByb2Nlc3Nlcy5cbiAqXG4gKiBAcGFyYW0gIHtvYmplY3R9IGFjdGlvbiBBbnkgcmVkdXggYWN0aW9uIChyZXF1aXJlZClcbiAqIEByZXR1cm4ge29iamVjdH0gQW4gYWN0aW9uIHdpdGggYWRkZWQgLm1ldGEgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBCcm9hZGNhc3RUb0NvbnRlbnQoYWN0aW9uKSB7XG4gIHJldHVybiBfUm91dGVNZXNzYWdlKGFjdGlvbiwge1xuICAgIGZyb206IE1BSU5fTUVTU0FHRV9UWVBFLFxuICAgIHRvOiBDT05URU5UX01FU1NBR0VfVFlQRSxcbiAgfSk7XG59XG5cbi8qKlxuICogQWxzb1RvT25lQ29udGVudCAtIENyZWF0ZXMgYSBtZXNzYWdlIHRoYXQgd2lsbCBiZSB3aWxsIGJlIGRpc3BhdGNoZWQgdG8gdGhlIG1haW4gc3RvcmVcbiAqICAgICAgICAgICAgICAgICAgICBhbmQgYWxzbyBzZW50IHRvIGEgcGFydGljdWxhciBDb250ZW50IHByb2Nlc3MuXG4gKlxuICogQHBhcmFtICB7b2JqZWN0fSBhY3Rpb24gQW55IHJlZHV4IGFjdGlvbiAocmVxdWlyZWQpXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHRhcmdldCBUaGUgaWQgb2YgYSBjb250ZW50IHBvcnRcbiAqIEBwYXJhbSAge2Jvb2x9IHNraXBNYWluIFVzZWQgYnkgT25seVRvT25lQ29udGVudCB0byBza2lwIHRoZSBtYWluIHByb2Nlc3NcbiAqIEByZXR1cm4ge29iamVjdH0gQW4gYWN0aW9uIHdpdGggYWRkZWQgLm1ldGEgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBBbHNvVG9PbmVDb250ZW50KGFjdGlvbiwgdGFyZ2V0LCBza2lwTWFpbikge1xuICBpZiAoIXRhcmdldCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIFwiWW91IG11c3QgcHJvdmlkZSBhIHRhcmdldCBJRCBhcyB0aGUgc2Vjb25kIHBhcmFtZXRlciBvZiBBbHNvVG9PbmVDb250ZW50LiBJZiB5b3Ugd2FudCB0byBzZW5kIHRvIGFsbCBjb250ZW50IHByb2Nlc3NlcywgdXNlIEJyb2FkY2FzdFRvQ29udGVudFwiXG4gICAgKTtcbiAgfVxuICByZXR1cm4gX1JvdXRlTWVzc2FnZShhY3Rpb24sIHtcbiAgICBmcm9tOiBNQUlOX01FU1NBR0VfVFlQRSxcbiAgICB0bzogQ09OVEVOVF9NRVNTQUdFX1RZUEUsXG4gICAgdG9UYXJnZXQ6IHRhcmdldCxcbiAgICBza2lwTWFpbixcbiAgfSk7XG59XG5cbi8qKlxuICogT25seVRvT25lQ29udGVudCAtIENyZWF0ZXMgYSBtZXNzYWdlIHRoYXQgd2lsbCBiZSBzZW50IHRvIGEgcGFydGljdWxhciBDb250ZW50IHByb2Nlc3NcbiAqICAgICAgICAgICAgICAgICAgICBhbmQgc2tpcCB0aGUgbWFpbiByZWR1Y2VyLlxuICpcbiAqIEBwYXJhbSAge29iamVjdH0gYWN0aW9uIEFueSByZWR1eCBhY3Rpb24gKHJlcXVpcmVkKVxuICogQHBhcmFtICB7c3RyaW5nfSB0YXJnZXQgVGhlIGlkIG9mIGEgY29udGVudCBwb3J0XG4gKiBAcmV0dXJuIHtvYmplY3R9IEFuIGFjdGlvbiB3aXRoIGFkZGVkIC5tZXRhIHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gT25seVRvT25lQ29udGVudChhY3Rpb24sIHRhcmdldCkge1xuICByZXR1cm4gQWxzb1RvT25lQ29udGVudChhY3Rpb24sIHRhcmdldCwgdHJ1ZSk7XG59XG5cbi8qKlxuICogQWxzb1RvUHJlbG9hZGVkIC0gQ3JlYXRlcyBhIG1lc3NhZ2UgdGhhdCBkaXNwYXRjaGVkIHRvIHRoZSBtYWluIHJlZHVjZXIgYW5kIGFsc28gc2VudCB0byB0aGUgcHJlbG9hZGVkIHRhYi5cbiAqXG4gKiBAcGFyYW0gIHtvYmplY3R9IGFjdGlvbiBBbnkgcmVkdXggYWN0aW9uIChyZXF1aXJlZClcbiAqIEByZXR1cm4ge29iamVjdH0gQW4gYWN0aW9uIHdpdGggYWRkZWQgLm1ldGEgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBBbHNvVG9QcmVsb2FkZWQoYWN0aW9uKSB7XG4gIHJldHVybiBfUm91dGVNZXNzYWdlKGFjdGlvbiwge1xuICAgIGZyb206IE1BSU5fTUVTU0FHRV9UWVBFLFxuICAgIHRvOiBQUkVMT0FEX01FU1NBR0VfVFlQRSxcbiAgfSk7XG59XG5cbi8qKlxuICogVXNlckV2ZW50IC0gQSB0ZWxlbWV0cnkgcGluZyBpbmRpY2F0aW5nIGEgdXNlciBhY3Rpb24uIFRoaXMgc2hvdWxkIG9ubHlcbiAqICAgICAgICAgICAgICAgICAgIGJlIHNlbnQgZnJvbSB0aGUgVUkgZHVyaW5nIGEgdXNlciBzZXNzaW9uLlxuICpcbiAqIEBwYXJhbSAge29iamVjdH0gZGF0YSBGaWVsZHMgdG8gaW5jbHVkZSBpbiB0aGUgcGluZyAoc291cmNlLCBldGMuKVxuICogQHJldHVybiB7b2JqZWN0fSBBbiBBbHNvVG9NYWluIGFjdGlvblxuICovXG5mdW5jdGlvbiBVc2VyRXZlbnQoZGF0YSkge1xuICByZXR1cm4gQWxzb1RvTWFpbih7XG4gICAgdHlwZTogYWN0aW9uVHlwZXMuVEVMRU1FVFJZX1VTRVJfRVZFTlQsXG4gICAgZGF0YSxcbiAgfSk7XG59XG5cbi8qKlxuICogQVNSb3V0ZXJVc2VyRXZlbnQgLSBBIHRlbGVtZXRyeSBwaW5nIGluZGljYXRpbmcgYSB1c2VyIGFjdGlvbiBmcm9tIEFTIHJvdXRlci4gVGhpcyBzaG91bGQgb25seVxuICogICAgICAgICAgICAgICAgICAgICBiZSBzZW50IGZyb20gdGhlIFVJIGR1cmluZyBhIHVzZXIgc2Vzc2lvbi5cbiAqXG4gKiBAcGFyYW0gIHtvYmplY3R9IGRhdGEgRmllbGRzIHRvIGluY2x1ZGUgaW4gdGhlIHBpbmcgKHNvdXJjZSwgZXRjLilcbiAqIEByZXR1cm4ge29iamVjdH0gQW4gQWxzb1RvTWFpbiBhY3Rpb25cbiAqL1xuZnVuY3Rpb24gQVNSb3V0ZXJVc2VyRXZlbnQoZGF0YSkge1xuICByZXR1cm4gQWxzb1RvTWFpbih7XG4gICAgdHlwZTogYWN0aW9uVHlwZXMuQVNfUk9VVEVSX1RFTEVNRVRSWV9VU0VSX0VWRU5ULFxuICAgIGRhdGEsXG4gIH0pO1xufVxuXG4vKipcbiAqIERpc2NvdmVyeVN0cmVhbVNwb2NzRmlsbCAtIEEgdGVsZW1ldHJ5IHBpbmcgaW5kaWNhdGluZyBhIFNQT0NTIEZpbGwgZXZlbnQuXG4gKlxuICogQHBhcmFtICB7b2JqZWN0fSBkYXRhIEZpZWxkcyB0byBpbmNsdWRlIGluIHRoZSBwaW5nIChzcG9jX2ZpbGxzLCBldGMuKVxuICogQHBhcmFtICB7aW50fSBpbXBvcnRDb250ZXh0IChGb3IgdGVzdGluZykgT3ZlcnJpZGUgdGhlIGltcG9ydCBjb250ZXh0IGZvciB0ZXN0aW5nLlxuICogQHJldHVybiB7b2JqZWN0fSBBbiBBbHNvVG9NYWluIGFjdGlvblxuICovXG5mdW5jdGlvbiBEaXNjb3ZlcnlTdHJlYW1TcG9jc0ZpbGwoZGF0YSwgaW1wb3J0Q29udGV4dCA9IGdsb2JhbEltcG9ydENvbnRleHQpIHtcbiAgY29uc3QgYWN0aW9uID0ge1xuICAgIHR5cGU6IGFjdGlvblR5cGVzLkRJU0NPVkVSWV9TVFJFQU1fU1BPQ1NfRklMTCxcbiAgICBkYXRhLFxuICB9O1xuICByZXR1cm4gaW1wb3J0Q29udGV4dCA9PT0gVUlfQ09ERSA/IEFsc29Ub01haW4oYWN0aW9uKSA6IGFjdGlvbjtcbn1cblxuLyoqXG4gKiBVbmRlc2lyZWRFdmVudCAtIEEgdGVsZW1ldHJ5IHBpbmcgaW5kaWNhdGluZyBhbiB1bmRlc2lyZWQgc3RhdGUuXG4gKlxuICogQHBhcmFtICB7b2JqZWN0fSBkYXRhIEZpZWxkcyB0byBpbmNsdWRlIGluIHRoZSBwaW5nICh2YWx1ZSwgZXRjLilcbiAqIEBwYXJhbSAge2ludH0gaW1wb3J0Q29udGV4dCAoRm9yIHRlc3RpbmcpIE92ZXJyaWRlIHRoZSBpbXBvcnQgY29udGV4dCBmb3IgdGVzdGluZy5cbiAqIEByZXR1cm4ge29iamVjdH0gQW4gYWN0aW9uLiBGb3IgVUkgY29kZSwgYSBBbHNvVG9NYWluIGFjdGlvbi5cbiAqL1xuZnVuY3Rpb24gVW5kZXNpcmVkRXZlbnQoZGF0YSwgaW1wb3J0Q29udGV4dCA9IGdsb2JhbEltcG9ydENvbnRleHQpIHtcbiAgY29uc3QgYWN0aW9uID0ge1xuICAgIHR5cGU6IGFjdGlvblR5cGVzLlRFTEVNRVRSWV9VTkRFU0lSRURfRVZFTlQsXG4gICAgZGF0YSxcbiAgfTtcbiAgcmV0dXJuIGltcG9ydENvbnRleHQgPT09IFVJX0NPREUgPyBBbHNvVG9NYWluKGFjdGlvbikgOiBhY3Rpb247XG59XG5cbi8qKlxuICogUGVyZkV2ZW50IC0gQSB0ZWxlbWV0cnkgcGluZyBpbmRpY2F0aW5nIGEgcGVyZm9ybWFuY2UtcmVsYXRlZCBldmVudC5cbiAqXG4gKiBAcGFyYW0gIHtvYmplY3R9IGRhdGEgRmllbGRzIHRvIGluY2x1ZGUgaW4gdGhlIHBpbmcgKHZhbHVlLCBldGMuKVxuICogQHBhcmFtICB7aW50fSBpbXBvcnRDb250ZXh0IChGb3IgdGVzdGluZykgT3ZlcnJpZGUgdGhlIGltcG9ydCBjb250ZXh0IGZvciB0ZXN0aW5nLlxuICogQHJldHVybiB7b2JqZWN0fSBBbiBhY3Rpb24uIEZvciBVSSBjb2RlLCBhIEFsc29Ub01haW4gYWN0aW9uLlxuICovXG5mdW5jdGlvbiBQZXJmRXZlbnQoZGF0YSwgaW1wb3J0Q29udGV4dCA9IGdsb2JhbEltcG9ydENvbnRleHQpIHtcbiAgY29uc3QgYWN0aW9uID0ge1xuICAgIHR5cGU6IGFjdGlvblR5cGVzLlRFTEVNRVRSWV9QRVJGT1JNQU5DRV9FVkVOVCxcbiAgICBkYXRhLFxuICB9O1xuICByZXR1cm4gaW1wb3J0Q29udGV4dCA9PT0gVUlfQ09ERSA/IEFsc29Ub01haW4oYWN0aW9uKSA6IGFjdGlvbjtcbn1cblxuLyoqXG4gKiBJbXByZXNzaW9uU3RhdHMgLSBBIHRlbGVtZXRyeSBwaW5nIGluZGljYXRpbmcgYW4gaW1wcmVzc2lvbiBzdGF0cy5cbiAqXG4gKiBAcGFyYW0gIHtvYmplY3R9IGRhdGEgRmllbGRzIHRvIGluY2x1ZGUgaW4gdGhlIHBpbmdcbiAqIEBwYXJhbSAge2ludH0gaW1wb3J0Q29udGV4dCAoRm9yIHRlc3RpbmcpIE92ZXJyaWRlIHRoZSBpbXBvcnQgY29udGV4dCBmb3IgdGVzdGluZy5cbiAqICNyZXR1cm4ge29iamVjdH0gQW4gYWN0aW9uLiBGb3IgVUkgY29kZSwgYSBBbHNvVG9NYWluIGFjdGlvbi5cbiAqL1xuZnVuY3Rpb24gSW1wcmVzc2lvblN0YXRzKGRhdGEsIGltcG9ydENvbnRleHQgPSBnbG9iYWxJbXBvcnRDb250ZXh0KSB7XG4gIGNvbnN0IGFjdGlvbiA9IHtcbiAgICB0eXBlOiBhY3Rpb25UeXBlcy5URUxFTUVUUllfSU1QUkVTU0lPTl9TVEFUUyxcbiAgICBkYXRhLFxuICB9O1xuICByZXR1cm4gaW1wb3J0Q29udGV4dCA9PT0gVUlfQ09ERSA/IEFsc29Ub01haW4oYWN0aW9uKSA6IGFjdGlvbjtcbn1cblxuLyoqXG4gKiBEaXNjb3ZlcnlTdHJlYW1JbXByZXNzaW9uU3RhdHMgLSBBIHRlbGVtZXRyeSBwaW5nIGluZGljYXRpbmcgYW4gaW1wcmVzc2lvbiBzdGF0cyBpbiBEaXNjb3ZlcnkgU3RyZWFtLlxuICpcbiAqIEBwYXJhbSAge29iamVjdH0gZGF0YSBGaWVsZHMgdG8gaW5jbHVkZSBpbiB0aGUgcGluZ1xuICogQHBhcmFtICB7aW50fSBpbXBvcnRDb250ZXh0IChGb3IgdGVzdGluZykgT3ZlcnJpZGUgdGhlIGltcG9ydCBjb250ZXh0IGZvciB0ZXN0aW5nLlxuICogI3JldHVybiB7b2JqZWN0fSBBbiBhY3Rpb24uIEZvciBVSSBjb2RlLCBhIEFsc29Ub01haW4gYWN0aW9uLlxuICovXG5mdW5jdGlvbiBEaXNjb3ZlcnlTdHJlYW1JbXByZXNzaW9uU3RhdHMoXG4gIGRhdGEsXG4gIGltcG9ydENvbnRleHQgPSBnbG9iYWxJbXBvcnRDb250ZXh0XG4pIHtcbiAgY29uc3QgYWN0aW9uID0ge1xuICAgIHR5cGU6IGFjdGlvblR5cGVzLkRJU0NPVkVSWV9TVFJFQU1fSU1QUkVTU0lPTl9TVEFUUyxcbiAgICBkYXRhLFxuICB9O1xuICByZXR1cm4gaW1wb3J0Q29udGV4dCA9PT0gVUlfQ09ERSA/IEFsc29Ub01haW4oYWN0aW9uKSA6IGFjdGlvbjtcbn1cblxuLyoqXG4gKiBEaXNjb3ZlcnlTdHJlYW1Mb2FkZWRDb250ZW50IC0gQSB0ZWxlbWV0cnkgcGluZyBpbmRpY2F0aW5nIGEgY29udGVudCBnZXRzIGxvYWRlZCBpbiBEaXNjb3ZlcnkgU3RyZWFtLlxuICpcbiAqIEBwYXJhbSAge29iamVjdH0gZGF0YSBGaWVsZHMgdG8gaW5jbHVkZSBpbiB0aGUgcGluZ1xuICogQHBhcmFtICB7aW50fSBpbXBvcnRDb250ZXh0IChGb3IgdGVzdGluZykgT3ZlcnJpZGUgdGhlIGltcG9ydCBjb250ZXh0IGZvciB0ZXN0aW5nLlxuICogI3JldHVybiB7b2JqZWN0fSBBbiBhY3Rpb24uIEZvciBVSSBjb2RlLCBhIEFsc29Ub01haW4gYWN0aW9uLlxuICovXG5mdW5jdGlvbiBEaXNjb3ZlcnlTdHJlYW1Mb2FkZWRDb250ZW50KFxuICBkYXRhLFxuICBpbXBvcnRDb250ZXh0ID0gZ2xvYmFsSW1wb3J0Q29udGV4dFxuKSB7XG4gIGNvbnN0IGFjdGlvbiA9IHtcbiAgICB0eXBlOiBhY3Rpb25UeXBlcy5ESVNDT1ZFUllfU1RSRUFNX0xPQURFRF9DT05URU5ULFxuICAgIGRhdGEsXG4gIH07XG4gIHJldHVybiBpbXBvcnRDb250ZXh0ID09PSBVSV9DT0RFID8gQWxzb1RvTWFpbihhY3Rpb24pIDogYWN0aW9uO1xufVxuXG5mdW5jdGlvbiBTZXRQcmVmKG5hbWUsIHZhbHVlLCBpbXBvcnRDb250ZXh0ID0gZ2xvYmFsSW1wb3J0Q29udGV4dCkge1xuICBjb25zdCBhY3Rpb24gPSB7IHR5cGU6IGFjdGlvblR5cGVzLlNFVF9QUkVGLCBkYXRhOiB7IG5hbWUsIHZhbHVlIH0gfTtcbiAgcmV0dXJuIGltcG9ydENvbnRleHQgPT09IFVJX0NPREUgPyBBbHNvVG9NYWluKGFjdGlvbikgOiBhY3Rpb247XG59XG5cbmZ1bmN0aW9uIFdlYkV4dEV2ZW50KHR5cGUsIGRhdGEsIGltcG9ydENvbnRleHQgPSBnbG9iYWxJbXBvcnRDb250ZXh0KSB7XG4gIGlmICghZGF0YSB8fCAhZGF0YS5zb3VyY2UpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnV2ViRXh0RXZlbnQgYWN0aW9ucyBzaG91bGQgaW5jbHVkZSBhIHByb3BlcnR5IFwic291cmNlXCIsIHRoZSBpZCBvZiB0aGUgd2ViZXh0ZW5zaW9uIHRoYXQgc2hvdWxkIHJlY2VpdmUgdGhlIGV2ZW50LidcbiAgICApO1xuICB9XG4gIGNvbnN0IGFjdGlvbiA9IHsgdHlwZSwgZGF0YSB9O1xuICByZXR1cm4gaW1wb3J0Q29udGV4dCA9PT0gVUlfQ09ERSA/IEFsc29Ub01haW4oYWN0aW9uKSA6IGFjdGlvbjtcbn1cblxudGhpcy5hY3Rpb25UeXBlcyA9IGFjdGlvblR5cGVzO1xudGhpcy5BU1JvdXRlckFjdGlvbnMgPSBBU1JvdXRlckFjdGlvbnM7XG5cbnRoaXMuYWN0aW9uQ3JlYXRvcnMgPSB7XG4gIEJyb2FkY2FzdFRvQ29udGVudCxcbiAgVXNlckV2ZW50LFxuICBBU1JvdXRlclVzZXJFdmVudCxcbiAgVW5kZXNpcmVkRXZlbnQsXG4gIFBlcmZFdmVudCxcbiAgSW1wcmVzc2lvblN0YXRzLFxuICBBbHNvVG9PbmVDb250ZW50LFxuICBPbmx5VG9PbmVDb250ZW50LFxuICBBbHNvVG9NYWluLFxuICBPbmx5VG9NYWluLFxuICBBbHNvVG9QcmVsb2FkZWQsXG4gIFNldFByZWYsXG4gIFdlYkV4dEV2ZW50LFxuICBEaXNjb3ZlcnlTdHJlYW1JbXByZXNzaW9uU3RhdHMsXG4gIERpc2NvdmVyeVN0cmVhbUxvYWRlZENvbnRlbnQsXG4gIERpc2NvdmVyeVN0cmVhbVNwb2NzRmlsbCxcbn07XG5cbi8vIFRoZXNlIGFyZSBoZWxwZXJzIHRvIHRlc3QgZm9yIGNlcnRhaW4ga2luZHMgb2YgYWN0aW9uc1xudGhpcy5hY3Rpb25VdGlscyA9IHtcbiAgaXNTZW5kVG9NYWluKGFjdGlvbikge1xuICAgIGlmICghYWN0aW9uLm1ldGEpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIGFjdGlvbi5tZXRhLnRvID09PSBNQUlOX01FU1NBR0VfVFlQRSAmJlxuICAgICAgYWN0aW9uLm1ldGEuZnJvbSA9PT0gQ09OVEVOVF9NRVNTQUdFX1RZUEVcbiAgICApO1xuICB9LFxuICBpc0Jyb2FkY2FzdFRvQ29udGVudChhY3Rpb24pIHtcbiAgICBpZiAoIWFjdGlvbi5tZXRhKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChhY3Rpb24ubWV0YS50byA9PT0gQ09OVEVOVF9NRVNTQUdFX1RZUEUgJiYgIWFjdGlvbi5tZXRhLnRvVGFyZ2V0KSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuICBpc1NlbmRUb09uZUNvbnRlbnQoYWN0aW9uKSB7XG4gICAgaWYgKCFhY3Rpb24ubWV0YSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoYWN0aW9uLm1ldGEudG8gPT09IENPTlRFTlRfTUVTU0FHRV9UWVBFICYmIGFjdGlvbi5tZXRhLnRvVGFyZ2V0KSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuICBpc1NlbmRUb1ByZWxvYWRlZChhY3Rpb24pIHtcbiAgICBpZiAoIWFjdGlvbi5tZXRhKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiAoXG4gICAgICBhY3Rpb24ubWV0YS50byA9PT0gUFJFTE9BRF9NRVNTQUdFX1RZUEUgJiZcbiAgICAgIGFjdGlvbi5tZXRhLmZyb20gPT09IE1BSU5fTUVTU0FHRV9UWVBFXG4gICAgKTtcbiAgfSxcbiAgaXNGcm9tTWFpbihhY3Rpb24pIHtcbiAgICBpZiAoIWFjdGlvbi5tZXRhKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiAoXG4gICAgICBhY3Rpb24ubWV0YS5mcm9tID09PSBNQUlOX01FU1NBR0VfVFlQRSAmJlxuICAgICAgYWN0aW9uLm1ldGEudG8gPT09IENPTlRFTlRfTUVTU0FHRV9UWVBFXG4gICAgKTtcbiAgfSxcbiAgZ2V0UG9ydElkT2ZTZW5kZXIoYWN0aW9uKSB7XG4gICAgcmV0dXJuIChhY3Rpb24ubWV0YSAmJiBhY3Rpb24ubWV0YS5mcm9tVGFyZ2V0KSB8fCBudWxsO1xuICB9LFxuICBfUm91dGVNZXNzYWdlLFxufTtcblxuY29uc3QgRVhQT1JURURfU1lNQk9MUyA9IFtcbiAgXCJhY3Rpb25UeXBlc1wiLFxuICBcImFjdGlvbkNyZWF0b3JzXCIsXG4gIFwiYWN0aW9uVXRpbHNcIixcbiAgXCJBU1JvdXRlckFjdGlvbnNcIixcbiAgXCJnbG9iYWxJbXBvcnRDb250ZXh0XCIsXG4gIFwiVUlfQ09ERVwiLFxuICBcIkJBQ0tHUk9VTkRfUFJPQ0VTU1wiLFxuICBcIk1BSU5fTUVTU0FHRV9UWVBFXCIsXG4gIFwiQ09OVEVOVF9NRVNTQUdFX1RZUEVcIixcbiAgXCJQUkVMT0FEX01FU1NBR0VfVFlQRVwiLFxuXTtcbiIsIi8qIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXMgZmlsZSxcbiAqIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uICovXG5cbmltcG9ydCB7IGFjdGlvbkNyZWF0b3JzIGFzIGFjLCBhY3Rpb25UeXBlcyBhcyBhdCB9IGZyb20gXCJjb21tb24vQWN0aW9ucy5qc21cIjtcbmltcG9ydCB7IEFTUm91dGVyQWRtaW4gfSBmcm9tIFwiY29udGVudC1zcmMvY29tcG9uZW50cy9BU1JvdXRlckFkbWluL0FTUm91dGVyQWRtaW5cIjtcbmltcG9ydCB7IEFTUm91dGVyVUlTdXJmYWNlIH0gZnJvbSBcIi4uLy4uL2Fzcm91dGVyL2Fzcm91dGVyLWNvbnRlbnRcIjtcbmltcG9ydCB7IENvbmZpcm1EaWFsb2cgfSBmcm9tIFwiY29udGVudC1zcmMvY29tcG9uZW50cy9Db25maXJtRGlhbG9nL0NvbmZpcm1EaWFsb2dcIjtcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcbmltcG9ydCB7IERpc2NvdmVyeVN0cmVhbUJhc2UgfSBmcm9tIFwiY29udGVudC1zcmMvY29tcG9uZW50cy9EaXNjb3ZlcnlTdHJlYW1CYXNlL0Rpc2NvdmVyeVN0cmVhbUJhc2VcIjtcbmltcG9ydCB7IEVycm9yQm91bmRhcnkgfSBmcm9tIFwiY29udGVudC1zcmMvY29tcG9uZW50cy9FcnJvckJvdW5kYXJ5L0Vycm9yQm91bmRhcnlcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IFNlYXJjaCB9IGZyb20gXCJjb250ZW50LXNyYy9jb21wb25lbnRzL1NlYXJjaC9TZWFyY2hcIjtcbmltcG9ydCB7IFNlY3Rpb25zIH0gZnJvbSBcImNvbnRlbnQtc3JjL2NvbXBvbmVudHMvU2VjdGlvbnMvU2VjdGlvbnNcIjtcblxuY29uc3QgUHJlZnNCdXR0b24gPSBwcm9wcyA9PiAoXG4gIDxkaXYgY2xhc3NOYW1lPVwicHJlZnMtYnV0dG9uXCI+XG4gICAgPGJ1dHRvblxuICAgICAgY2xhc3NOYW1lPVwiaWNvbiBpY29uLXNldHRpbmdzXCJcbiAgICAgIG9uQ2xpY2s9e3Byb3BzLm9uQ2xpY2t9XG4gICAgICBkYXRhLWwxMG4taWQ9XCJuZXd0YWItc2V0dGluZ3MtYnV0dG9uXCJcbiAgICAvPlxuICA8L2Rpdj5cbik7XG5cbi8vIFJldHVybnMgYSBmdW5jdGlvbiB3aWxsIG5vdCBiZSBjb250aW51b3VzbHkgdHJpZ2dlcmVkIHdoZW4gY2FsbGVkLiBUaGVcbi8vIGZ1bmN0aW9uIHdpbGwgYmUgdHJpZ2dlcmVkIGlmIGNhbGxlZCBhZ2FpbiBhZnRlciBgd2FpdGAgbWlsbGlzZWNvbmRzLlxuZnVuY3Rpb24gZGVib3VuY2UoZnVuYywgd2FpdCkge1xuICBsZXQgdGltZXI7XG4gIHJldHVybiAoLi4uYXJncykgPT4ge1xuICAgIGlmICh0aW1lcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCB3YWtlVXAgPSAoKSA9PiB7XG4gICAgICB0aW1lciA9IG51bGw7XG4gICAgfTtcblxuICAgIHRpbWVyID0gc2V0VGltZW91dCh3YWtlVXAsIHdhaXQpO1xuICAgIGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gIH07XG59XG5cbmV4cG9ydCBjbGFzcyBfQmFzZSBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMuaXNGaXJzdHJ1bikge1xuICAgICAgZ2xvYmFsLmRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZChcIndlbGNvbWVcIiwgXCJoaWRlLW1haW5cIik7XG4gICAgfVxuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy51cGRhdGVUaGVtZSgpO1xuICB9XG5cbiAgY29tcG9uZW50V2lsbFVwZGF0ZSgpIHtcbiAgICB0aGlzLnVwZGF0ZVRoZW1lKCk7XG4gIH1cblxuICB1cGRhdGVUaGVtZSgpIHtcbiAgICBjb25zdCBib2R5Q2xhc3NOYW1lID0gW1xuICAgICAgXCJhY3Rpdml0eS1zdHJlYW1cIixcbiAgICAgIC8vIElmIHdlIHNraXBwZWQgdGhlIGFib3V0OndlbGNvbWUgb3ZlcmxheSBhbmQgcmVtb3ZlZCB0aGUgQ1NTIGNsYXNzZXNcbiAgICAgIC8vIHdlIGRvbid0IHdhbnQgdG8gYWRkIHRoZW0gYmFjayB0byB0aGUgQWN0aXZpdHkgU3RyZWFtIHZpZXdcbiAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmNvbnRhaW5zKFwid2VsY29tZVwiKSA/IFwid2VsY29tZVwiIDogXCJcIixcbiAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmNvbnRhaW5zKFwiaGlkZS1tYWluXCIpID8gXCJoaWRlLW1haW5cIiA6IFwiXCIsXG4gICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5jb250YWlucyhcImlubGluZS1vbmJvYXJkaW5nXCIpXG4gICAgICAgID8gXCJpbmxpbmUtb25ib2FyZGluZ1wiXG4gICAgICAgIDogXCJcIixcbiAgICBdXG4gICAgICAuZmlsdGVyKHYgPT4gdilcbiAgICAgIC5qb2luKFwiIFwiKTtcbiAgICBnbG9iYWwuZG9jdW1lbnQuYm9keS5jbGFzc05hbWUgPSBib2R5Q2xhc3NOYW1lO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgcHJvcHMgfSA9IHRoaXM7XG4gICAgY29uc3QgeyBBcHAgfSA9IHByb3BzO1xuICAgIGNvbnN0IGlzRGV2dG9vbHNFbmFibGVkID0gcHJvcHMuUHJlZnMudmFsdWVzW1wiYXNyb3V0ZXIuZGV2dG9vbHNFbmFibGVkXCJdO1xuXG4gICAgaWYgKCFBcHAuaW5pdGlhbGl6ZWQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICA8RXJyb3JCb3VuZGFyeSBjbGFzc05hbWU9XCJiYXNlLWNvbnRlbnQtZmFsbGJhY2tcIj5cbiAgICAgICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgICAgIDxCYXNlQ29udGVudCB7Li4udGhpcy5wcm9wc30gLz5cbiAgICAgICAgICB7aXNEZXZ0b29sc0VuYWJsZWQgPyA8QVNSb3V0ZXJBZG1pbiAvPiA6IG51bGx9XG4gICAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gICAgICA8L0Vycm9yQm91bmRhcnk+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQmFzZUNvbnRlbnQgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5vcGVuUHJlZmVyZW5jZXMgPSB0aGlzLm9wZW5QcmVmZXJlbmNlcy5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25XaW5kb3dTY3JvbGwgPSBkZWJvdW5jZSh0aGlzLm9uV2luZG93U2Nyb2xsLmJpbmQodGhpcyksIDUpO1xuICAgIHRoaXMuc3RhdGUgPSB7IGZpeGVkU2VhcmNoOiBmYWxzZSB9O1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIiwgdGhpcy5vbldpbmRvd1Njcm9sbCk7XG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBnbG9iYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCB0aGlzLm9uV2luZG93U2Nyb2xsKTtcbiAgfVxuXG4gIG9uV2luZG93U2Nyb2xsKCkge1xuICAgIGNvbnN0IFNDUk9MTF9USFJFU0hPTEQgPSAzNDtcbiAgICBpZiAoZ2xvYmFsLnNjcm9sbFkgPiBTQ1JPTExfVEhSRVNIT0xEICYmICF0aGlzLnN0YXRlLmZpeGVkU2VhcmNoKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgZml4ZWRTZWFyY2g6IHRydWUgfSk7XG4gICAgfSBlbHNlIGlmIChnbG9iYWwuc2Nyb2xsWSA8PSBTQ1JPTExfVEhSRVNIT0xEICYmIHRoaXMuc3RhdGUuZml4ZWRTZWFyY2gpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBmaXhlZFNlYXJjaDogZmFsc2UgfSk7XG4gICAgfVxuICB9XG5cbiAgb3BlblByZWZlcmVuY2VzKCkge1xuICAgIHRoaXMucHJvcHMuZGlzcGF0Y2goYWMuT25seVRvTWFpbih7IHR5cGU6IGF0LlNFVFRJTkdTX09QRU4gfSkpO1xuICAgIHRoaXMucHJvcHMuZGlzcGF0Y2goYWMuVXNlckV2ZW50KHsgZXZlbnQ6IFwiT1BFTl9ORVdUQUJfUFJFRlNcIiB9KSk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBwcm9wcyB9ID0gdGhpcztcbiAgICBjb25zdCB7IEFwcCB9ID0gcHJvcHM7XG4gICAgY29uc3QgeyBpbml0aWFsaXplZCB9ID0gQXBwO1xuICAgIGNvbnN0IHByZWZzID0gcHJvcHMuUHJlZnMudmFsdWVzO1xuXG4gICAgY29uc3QgaXNEaXNjb3ZlcnlTdHJlYW0gPVxuICAgICAgcHJvcHMuRGlzY292ZXJ5U3RyZWFtLmNvbmZpZyAmJiBwcm9wcy5EaXNjb3ZlcnlTdHJlYW0uY29uZmlnLmVuYWJsZWQ7XG4gICAgbGV0IGZpbHRlcmVkU2VjdGlvbnMgPSBwcm9wcy5TZWN0aW9ucztcblxuICAgIC8vIEZpbHRlciBvdXQgaGlnaGxpZ2h0cyBmb3IgRFNcbiAgICBpZiAoaXNEaXNjb3ZlcnlTdHJlYW0pIHtcbiAgICAgIGZpbHRlcmVkU2VjdGlvbnMgPSBmaWx0ZXJlZFNlY3Rpb25zLmZpbHRlcihcbiAgICAgICAgc2VjdGlvbiA9PiBzZWN0aW9uLmlkICE9PSBcImhpZ2hsaWdodHNcIlxuICAgICAgKTtcbiAgICB9XG4gICAgY29uc3Qgbm9TZWN0aW9uc0VuYWJsZWQgPVxuICAgICAgIXByZWZzW1wiZmVlZHMudG9wc2l0ZXNcIl0gJiZcbiAgICAgIGZpbHRlcmVkU2VjdGlvbnMuZmlsdGVyKHNlY3Rpb24gPT4gc2VjdGlvbi5lbmFibGVkKS5sZW5ndGggPT09IDA7XG4gICAgY29uc3Qgc2VhcmNoSGFuZG9mZkVuYWJsZWQgPSBwcmVmc1tcImltcHJvdmVzZWFyY2guaGFuZG9mZlRvQXdlc29tZWJhclwiXTtcblxuICAgIGNvbnN0IG91dGVyQ2xhc3NOYW1lID0gW1xuICAgICAgXCJvdXRlci13cmFwcGVyXCIsXG4gICAgICBpc0Rpc2NvdmVyeVN0cmVhbSAmJiBcImRzLW91dGVyLXdyYXBwZXItc2VhcmNoLWFsaWdubWVudFwiLFxuICAgICAgaXNEaXNjb3ZlcnlTdHJlYW0gJiYgXCJkcy1vdXRlci13cmFwcGVyLWJyZWFrcG9pbnQtb3ZlcnJpZGVcIixcbiAgICAgIHByZWZzLnNob3dTZWFyY2ggJiZcbiAgICAgICAgdGhpcy5zdGF0ZS5maXhlZFNlYXJjaCAmJlxuICAgICAgICAhbm9TZWN0aW9uc0VuYWJsZWQgJiZcbiAgICAgICAgXCJmaXhlZC1zZWFyY2hcIixcbiAgICAgIHByZWZzLnNob3dTZWFyY2ggJiYgbm9TZWN0aW9uc0VuYWJsZWQgJiYgXCJvbmx5LXNlYXJjaFwiLFxuICAgIF1cbiAgICAgIC5maWx0ZXIodiA9PiB2KVxuICAgICAgLmpvaW4oXCIgXCIpO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtvdXRlckNsYXNzTmFtZX0+XG4gICAgICAgICAgPG1haW4+XG4gICAgICAgICAgICB7cHJlZnMuc2hvd1NlYXJjaCAmJiAoXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibm9uLWNvbGxhcHNpYmxlLXNlY3Rpb25cIj5cbiAgICAgICAgICAgICAgICA8RXJyb3JCb3VuZGFyeT5cbiAgICAgICAgICAgICAgICAgIDxTZWFyY2hcbiAgICAgICAgICAgICAgICAgICAgc2hvd0xvZ289e25vU2VjdGlvbnNFbmFibGVkfVxuICAgICAgICAgICAgICAgICAgICBoYW5kb2ZmRW5hYmxlZD17c2VhcmNoSGFuZG9mZkVuYWJsZWR9XG4gICAgICAgICAgICAgICAgICAgIHsuLi5wcm9wcy5TZWFyY2h9XG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDwvRXJyb3JCb3VuZGFyeT5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApfVxuICAgICAgICAgICAgPEFTUm91dGVyVUlTdXJmYWNlXG4gICAgICAgICAgICAgIGZ4YUVuZHBvaW50PXt0aGlzLnByb3BzLlByZWZzLnZhbHVlcy5meGFfZW5kcG9pbnR9XG4gICAgICAgICAgICAgIGRpc3BhdGNoPXt0aGlzLnByb3BzLmRpc3BhdGNofVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtgYm9keS13cmFwcGVyJHtpbml0aWFsaXplZCA/IFwiIG9uXCIgOiBcIlwifWB9PlxuICAgICAgICAgICAgICB7aXNEaXNjb3ZlcnlTdHJlYW0gPyAoXG4gICAgICAgICAgICAgICAgPEVycm9yQm91bmRhcnkgY2xhc3NOYW1lPVwiYm9yZGVybGVzcy1lcnJvclwiPlxuICAgICAgICAgICAgICAgICAgPERpc2NvdmVyeVN0cmVhbUJhc2UgLz5cbiAgICAgICAgICAgICAgICA8L0Vycm9yQm91bmRhcnk+XG4gICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgPFNlY3Rpb25zIC8+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgIDxQcmVmc0J1dHRvbiBvbkNsaWNrPXt0aGlzLm9wZW5QcmVmZXJlbmNlc30gLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPENvbmZpcm1EaWFsb2cgLz5cbiAgICAgICAgICA8L21haW4+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgQmFzZSA9IGNvbm5lY3Qoc3RhdGUgPT4gKHtcbiAgQXBwOiBzdGF0ZS5BcHAsXG4gIFByZWZzOiBzdGF0ZS5QcmVmcyxcbiAgU2VjdGlvbnM6IHN0YXRlLlNlY3Rpb25zLFxuICBEaXNjb3ZlcnlTdHJlYW06IHN0YXRlLkRpc2NvdmVyeVN0cmVhbSxcbiAgU2VhcmNoOiBzdGF0ZS5TZWFyY2gsXG59KSkoX0Jhc2UpO1xuIiwiLyogVGhpcyBTb3VyY2UgQ29kZSBGb3JtIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBNb3ppbGxhIFB1YmxpY1xuICogTGljZW5zZSwgdi4gMi4wLiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBmaWxlLFxuICogWW91IGNhbiBvYnRhaW4gb25lIGF0IGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy4gKi9cblxuaW1wb3J0IHsgYWN0aW9uQ3JlYXRvcnMgYXMgYWMsIGFjdGlvblR5cGVzIGFzIGF0IH0gZnJvbSBcImNvbW1vbi9BY3Rpb25zLmpzbVwiO1xuaW1wb3J0IHsgQVNSb3V0ZXJVdGlscyB9IGZyb20gXCIuLi8uLi9hc3JvdXRlci9hc3JvdXRlci1jb250ZW50XCI7XG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XG5pbXBvcnQgeyBNb2RhbE92ZXJsYXkgfSBmcm9tIFwiLi4vLi4vYXNyb3V0ZXIvY29tcG9uZW50cy9Nb2RhbE92ZXJsYXkvTW9kYWxPdmVybGF5XCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBTaW1wbGVIYXNoUm91dGVyIH0gZnJvbSBcIi4vU2ltcGxlSGFzaFJvdXRlclwiO1xuXG5jb25zdCBSb3cgPSBwcm9wcyA9PiAoXG4gIDx0ciBjbGFzc05hbWU9XCJtZXNzYWdlLWl0ZW1cIiB7Li4ucHJvcHN9PlxuICAgIHtwcm9wcy5jaGlsZHJlbn1cbiAgPC90cj5cbik7XG5cbmZ1bmN0aW9uIHJlbGF0aXZlVGltZSh0aW1lc3RhbXApIHtcbiAgaWYgKCF0aW1lc3RhbXApIHtcbiAgICByZXR1cm4gXCJcIjtcbiAgfVxuICBjb25zdCBzZWNvbmRzID0gTWF0aC5mbG9vcigoRGF0ZS5ub3coKSAtIHRpbWVzdGFtcCkgLyAxMDAwKTtcbiAgY29uc3QgbWludXRlcyA9IE1hdGguZmxvb3IoKERhdGUubm93KCkgLSB0aW1lc3RhbXApIC8gNjAwMDApO1xuICBpZiAoc2Vjb25kcyA8IDIpIHtcbiAgICByZXR1cm4gXCJqdXN0IG5vd1wiO1xuICB9IGVsc2UgaWYgKHNlY29uZHMgPCA2MCkge1xuICAgIHJldHVybiBgJHtzZWNvbmRzfSBzZWNvbmRzIGFnb2A7XG4gIH0gZWxzZSBpZiAobWludXRlcyA9PT0gMSkge1xuICAgIHJldHVybiBcIjEgbWludXRlIGFnb1wiO1xuICB9IGVsc2UgaWYgKG1pbnV0ZXMgPCA2MDApIHtcbiAgICByZXR1cm4gYCR7bWludXRlc30gbWludXRlcyBhZ29gO1xuICB9XG4gIHJldHVybiBuZXcgRGF0ZSh0aW1lc3RhbXApLnRvTG9jYWxlU3RyaW5nKCk7XG59XG5cbmNvbnN0IExBWU9VVF9WQVJJQU5UUyA9IHtcbiAgYmFzaWM6IFwiQmFzaWMgZGVmYXVsdCBsYXlvdXQgKG9uIGJ5IGRlZmF1bHQgaW4gbmlnaHRseSlcIixcbiAgXCJkZXYtdGVzdC1hbGxcIjpcbiAgICBcIkEgbGl0dGxlIGJpdCBvZiBldmVyeXRoaW5nLiBHb29kIGxheW91dCBmb3IgdGVzdGluZyBhbGwgY29tcG9uZW50c1wiLFxuICBcImRldi10ZXN0LWZlZWRzXCI6IFwiU3RyZXNzIHRlc3RpbmcgZm9yIHNsb3cgZmVlZHNcIixcbn07XG5cbmV4cG9ydCBjbGFzcyBUb2dnbGVTdG9yeUJ1dHRvbiBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLmhhbmRsZUNsaWNrID0gdGhpcy5oYW5kbGVDbGljay5iaW5kKHRoaXMpO1xuICB9XG5cbiAgaGFuZGxlQ2xpY2soKSB7XG4gICAgdGhpcy5wcm9wcy5vbkNsaWNrKHRoaXMucHJvcHMuc3RvcnkpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiA8YnV0dG9uIG9uQ2xpY2s9e3RoaXMuaGFuZGxlQ2xpY2t9PmNvbGxhcHNlL29wZW48L2J1dHRvbj47XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIERpc2NvdmVyeVN0cmVhbUFkbWluIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMub25FbmFibGVUb2dnbGUgPSB0aGlzLm9uRW5hYmxlVG9nZ2xlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5jaGFuZ2VFbmRwb2ludFZhcmlhbnQgPSB0aGlzLmNoYW5nZUVuZHBvaW50VmFyaWFudC5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25TdG9yeVRvZ2dsZSA9IHRoaXMub25TdG9yeVRvZ2dsZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICB0b2dnbGVkU3Rvcmllczoge30sXG4gICAgfTtcbiAgfVxuXG4gIHNldENvbmZpZ1ZhbHVlKG5hbWUsIHZhbHVlKSB7XG4gICAgdGhpcy5wcm9wcy5kaXNwYXRjaChcbiAgICAgIGFjLk9ubHlUb01haW4oe1xuICAgICAgICB0eXBlOiBhdC5ESVNDT1ZFUllfU1RSRUFNX0NPTkZJR19TRVRfVkFMVUUsXG4gICAgICAgIGRhdGE6IHsgbmFtZSwgdmFsdWUgfSxcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIG9uRW5hYmxlVG9nZ2xlKGV2ZW50KSB7XG4gICAgdGhpcy5zZXRDb25maWdWYWx1ZShcImVuYWJsZWRcIiwgZXZlbnQudGFyZ2V0LmNoZWNrZWQpO1xuICB9XG5cbiAgY2hhbmdlRW5kcG9pbnRWYXJpYW50KGV2ZW50KSB7XG4gICAgY29uc3QgZW5kcG9pbnQgPSB0aGlzLnByb3BzLnN0YXRlLmNvbmZpZy5sYXlvdXRfZW5kcG9pbnQ7XG4gICAgaWYgKGVuZHBvaW50KSB7XG4gICAgICB0aGlzLnNldENvbmZpZ1ZhbHVlKFxuICAgICAgICBcImxheW91dF9lbmRwb2ludFwiLFxuICAgICAgICBlbmRwb2ludC5yZXBsYWNlKFxuICAgICAgICAgIC9sYXlvdXRfdmFyaWFudD0uKy8sXG4gICAgICAgICAgYGxheW91dF92YXJpYW50PSR7ZXZlbnQudGFyZ2V0LnZhbHVlfWBcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICByZW5kZXJDb21wb25lbnQod2lkdGgsIGNvbXBvbmVudCkge1xuICAgIHJldHVybiAoXG4gICAgICA8dGFibGU+XG4gICAgICAgIDx0Ym9keT5cbiAgICAgICAgICA8Um93PlxuICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm1pblwiPlR5cGU8L3RkPlxuICAgICAgICAgICAgPHRkPntjb21wb25lbnQudHlwZX08L3RkPlxuICAgICAgICAgIDwvUm93PlxuICAgICAgICAgIDxSb3c+XG4gICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibWluXCI+V2lkdGg8L3RkPlxuICAgICAgICAgICAgPHRkPnt3aWR0aH08L3RkPlxuICAgICAgICAgIDwvUm93PlxuICAgICAgICAgIHtjb21wb25lbnQuZmVlZCAmJiB0aGlzLnJlbmRlckZlZWQoY29tcG9uZW50LmZlZWQpfVxuICAgICAgICA8L3Rib2R5PlxuICAgICAgPC90YWJsZT5cbiAgICApO1xuICB9XG5cbiAgaXNDdXJyZW50VmFyaWFudChpZCkge1xuICAgIGNvbnN0IGVuZHBvaW50ID0gdGhpcy5wcm9wcy5zdGF0ZS5jb25maWcubGF5b3V0X2VuZHBvaW50O1xuICAgIGNvbnN0IGlzTWF0Y2ggPSBlbmRwb2ludCAmJiAhIWVuZHBvaW50Lm1hdGNoKGBsYXlvdXRfdmFyaWFudD0ke2lkfWApO1xuICAgIHJldHVybiBpc01hdGNoO1xuICB9XG5cbiAgcmVuZGVyRmVlZERhdGEodXJsKSB7XG4gICAgY29uc3QgeyBmZWVkcyB9ID0gdGhpcy5wcm9wcy5zdGF0ZTtcbiAgICBjb25zdCBmZWVkID0gZmVlZHMuZGF0YVt1cmxdLmRhdGE7XG4gICAgcmV0dXJuIChcbiAgICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgICAgPGg0PkZlZWQgdXJsOiB7dXJsfTwvaDQ+XG4gICAgICAgIDx0YWJsZT5cbiAgICAgICAgICA8dGJvZHk+XG4gICAgICAgICAgICB7ZmVlZC5yZWNvbW1lbmRhdGlvbnMubWFwKHN0b3J5ID0+IHRoaXMucmVuZGVyU3RvcnlEYXRhKHN0b3J5KSl9XG4gICAgICAgICAgPC90Ym9keT5cbiAgICAgICAgPC90YWJsZT5cbiAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlckZlZWRzRGF0YSgpIHtcbiAgICBjb25zdCB7IGZlZWRzIH0gPSB0aGlzLnByb3BzLnN0YXRlO1xuICAgIHJldHVybiAoXG4gICAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICAgIHtPYmplY3Qua2V5cyhmZWVkcy5kYXRhKS5tYXAodXJsID0+IHRoaXMucmVuZGVyRmVlZERhdGEodXJsKSl9XG4gICAgICA8L1JlYWN0LkZyYWdtZW50PlxuICAgICk7XG4gIH1cblxuICByZW5kZXJTcG9jcygpIHtcbiAgICBjb25zdCB7IHNwb2NzIH0gPSB0aGlzLnByb3BzLnN0YXRlO1xuICAgIGxldCBzcG9jc0RhdGEgPSBbXTtcbiAgICBpZiAoc3BvY3MuZGF0YSAmJiBzcG9jcy5kYXRhLnNwb2NzICYmIHNwb2NzLmRhdGEuc3BvY3MubGVuZ3RoKSB7XG4gICAgICBzcG9jc0RhdGEgPSBzcG9jcy5kYXRhLnNwb2NzO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICAgIDx0YWJsZT5cbiAgICAgICAgICA8dGJvZHk+XG4gICAgICAgICAgICA8Um93PlxuICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibWluXCI+c3BvY3NfZW5kcG9pbnQ8L3RkPlxuICAgICAgICAgICAgICA8dGQ+e3Nwb2NzLnNwb2NzX2VuZHBvaW50fTwvdGQ+XG4gICAgICAgICAgICA8L1Jvdz5cbiAgICAgICAgICAgIDxSb3c+XG4gICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJtaW5cIj5EYXRhIGxhc3QgZmV0Y2hlZDwvdGQ+XG4gICAgICAgICAgICAgIDx0ZD57cmVsYXRpdmVUaW1lKHNwb2NzLmxhc3RVcGRhdGVkKX08L3RkPlxuICAgICAgICAgICAgPC9Sb3c+XG4gICAgICAgICAgPC90Ym9keT5cbiAgICAgICAgPC90YWJsZT5cbiAgICAgICAgPGg0PlNwb2MgZGF0YTwvaDQ+XG4gICAgICAgIDx0YWJsZT5cbiAgICAgICAgICA8dGJvZHk+e3Nwb2NzRGF0YS5tYXAoc3BvYyA9PiB0aGlzLnJlbmRlclN0b3J5RGF0YShzcG9jKSl9PC90Ym9keT5cbiAgICAgICAgPC90YWJsZT5cbiAgICAgICAgPGg0PlNwb2MgZnJlcXVlbmN5IGNhcHM8L2g0PlxuICAgICAgICA8dGFibGU+XG4gICAgICAgICAgPHRib2R5PlxuICAgICAgICAgICAge3Nwb2NzLmZyZXF1ZW5jeV9jYXBzLm1hcChzcG9jID0+IHRoaXMucmVuZGVyU3RvcnlEYXRhKHNwb2MpKX1cbiAgICAgICAgICA8L3Rib2R5PlxuICAgICAgICA8L3RhYmxlPlxuICAgICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgICApO1xuICB9XG5cbiAgb25TdG9yeVRvZ2dsZShzdG9yeSkge1xuICAgIGNvbnN0IHsgdG9nZ2xlZFN0b3JpZXMgfSA9IHRoaXMuc3RhdGU7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICB0b2dnbGVkU3Rvcmllczoge1xuICAgICAgICAuLi50b2dnbGVkU3RvcmllcyxcbiAgICAgICAgW3N0b3J5LmlkXTogIXRvZ2dsZWRTdG9yaWVzW3N0b3J5LmlkXSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cblxuICByZW5kZXJTdG9yeURhdGEoc3RvcnkpIHtcbiAgICBsZXQgc3RvcnlEYXRhID0gXCJcIjtcbiAgICBpZiAodGhpcy5zdGF0ZS50b2dnbGVkU3Rvcmllc1tzdG9yeS5pZF0pIHtcbiAgICAgIHN0b3J5RGF0YSA9IEpTT04uc3RyaW5naWZ5KHN0b3J5LCBudWxsLCAyKTtcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIDx0ciBjbGFzc05hbWU9XCJtZXNzYWdlLWl0ZW1cIiBrZXk9e3N0b3J5LmlkfT5cbiAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm1lc3NhZ2UtaWRcIj5cbiAgICAgICAgICA8c3Bhbj5cbiAgICAgICAgICAgIHtzdG9yeS5pZH0gPGJyIC8+XG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgIDxUb2dnbGVTdG9yeUJ1dHRvbiBzdG9yeT17c3Rvcnl9IG9uQ2xpY2s9e3RoaXMub25TdG9yeVRvZ2dsZX0gLz5cbiAgICAgICAgPC90ZD5cbiAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm1lc3NhZ2Utc3VtbWFyeVwiPlxuICAgICAgICAgIDxwcmU+e3N0b3J5RGF0YX08L3ByZT5cbiAgICAgICAgPC90ZD5cbiAgICAgIDwvdHI+XG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlckZlZWQoZmVlZCkge1xuICAgIGNvbnN0IHsgZmVlZHMgfSA9IHRoaXMucHJvcHMuc3RhdGU7XG4gICAgaWYgKCFmZWVkLnVybCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiAoXG4gICAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICAgIDxSb3c+XG4gICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm1pblwiPkZlZWQgdXJsPC90ZD5cbiAgICAgICAgICA8dGQ+e2ZlZWQudXJsfTwvdGQ+XG4gICAgICAgIDwvUm93PlxuICAgICAgICA8Um93PlxuICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJtaW5cIj5EYXRhIGxhc3QgZmV0Y2hlZDwvdGQ+XG4gICAgICAgICAgPHRkPlxuICAgICAgICAgICAge3JlbGF0aXZlVGltZShcbiAgICAgICAgICAgICAgZmVlZHMuZGF0YVtmZWVkLnVybF0gPyBmZWVkcy5kYXRhW2ZlZWQudXJsXS5sYXN0VXBkYXRlZCA6IG51bGxcbiAgICAgICAgICAgICkgfHwgXCIobm8gZGF0YSlcIn1cbiAgICAgICAgICA8L3RkPlxuICAgICAgICA8L1Jvdz5cbiAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGNvbmZpZywgbGFzdFVwZGF0ZWQsIGxheW91dCB9ID0gdGhpcy5wcm9wcy5zdGF0ZTtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkc0VuYWJsZWRcIj5cbiAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgIHR5cGU9XCJjaGVja2JveFwiXG4gICAgICAgICAgICBjaGVja2VkPXtjb25maWcuZW5hYmxlZH1cbiAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLm9uRW5hYmxlVG9nZ2xlfVxuICAgICAgICAgIC8+e1wiIFwifVxuICAgICAgICAgIGVuYWJsZWR7XCIgXCJ9XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8aDM+RW5kcG9pbnQgdmFyaWFudDwvaDM+XG4gICAgICAgIDxwPlxuICAgICAgICAgIFlvdSBjYW4gYWxzbyBjaGFuZ2UgdGhpcyBtYW51YWxseSBieSBjaGFuZ2luZyB0aGlzIHByZWY6e1wiIFwifVxuICAgICAgICAgIDxjb2RlPmJyb3dzZXIubmV3dGFicGFnZS5hY3Rpdml0eS1zdHJlYW0uZGlzY292ZXJ5c3RyZWFtLmNvbmZpZzwvY29kZT5cbiAgICAgICAgPC9wPlxuICAgICAgICA8dGFibGUgc3R5bGU9e2NvbmZpZy5lbmFibGVkID8gbnVsbCA6IHsgb3BhY2l0eTogMC41IH19PlxuICAgICAgICAgIDx0Ym9keT5cbiAgICAgICAgICAgIHtPYmplY3Qua2V5cyhMQVlPVVRfVkFSSUFOVFMpLm1hcChpZCA9PiAoXG4gICAgICAgICAgICAgIDxSb3cga2V5PXtpZH0+XG4gICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm1pblwiPlxuICAgICAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgICAgIHR5cGU9XCJyYWRpb1wiXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlPXtpZH1cbiAgICAgICAgICAgICAgICAgICAgY2hlY2tlZD17dGhpcy5pc0N1cnJlbnRWYXJpYW50KGlkKX1cbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMuY2hhbmdlRW5kcG9pbnRWYXJpYW50fVxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJtaW5cIj57aWR9PC90ZD5cbiAgICAgICAgICAgICAgICA8dGQ+e0xBWU9VVF9WQVJJQU5UU1tpZF19PC90ZD5cbiAgICAgICAgICAgICAgPC9Sb3c+XG4gICAgICAgICAgICApKX1cbiAgICAgICAgICA8L3Rib2R5PlxuICAgICAgICA8L3RhYmxlPlxuXG4gICAgICAgIDxoMz5DYWNoaW5nIGluZm88L2gzPlxuICAgICAgICA8dGFibGUgc3R5bGU9e2NvbmZpZy5lbmFibGVkID8gbnVsbCA6IHsgb3BhY2l0eTogMC41IH19PlxuICAgICAgICAgIDx0Ym9keT5cbiAgICAgICAgICAgIDxSb3c+XG4gICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJtaW5cIj5EYXRhIGxhc3QgZmV0Y2hlZDwvdGQ+XG4gICAgICAgICAgICAgIDx0ZD57cmVsYXRpdmVUaW1lKGxhc3RVcGRhdGVkKSB8fCBcIihubyBkYXRhKVwifTwvdGQ+XG4gICAgICAgICAgICA8L1Jvdz5cbiAgICAgICAgICA8L3Rib2R5PlxuICAgICAgICA8L3RhYmxlPlxuXG4gICAgICAgIDxoMz5MYXlvdXQ8L2gzPlxuXG4gICAgICAgIHtsYXlvdXQubWFwKChyb3csIHJvd0luZGV4KSA9PiAoXG4gICAgICAgICAgPGRpdiBrZXk9e2Byb3ctJHtyb3dJbmRleH1gfT5cbiAgICAgICAgICAgIHtyb3cuY29tcG9uZW50cy5tYXAoKGNvbXBvbmVudCwgY29tcG9uZW50SW5kZXgpID0+IChcbiAgICAgICAgICAgICAgPGRpdiBrZXk9e2Bjb21wb25lbnQtJHtjb21wb25lbnRJbmRleH1gfSBjbGFzc05hbWU9XCJkcy1jb21wb25lbnRcIj5cbiAgICAgICAgICAgICAgICB7dGhpcy5yZW5kZXJDb21wb25lbnQocm93LndpZHRoLCBjb21wb25lbnQpfVxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICkpfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApKX1cblxuICAgICAgICA8aDM+RmVlZHMgRGF0YTwvaDM+XG4gICAgICAgIHt0aGlzLnJlbmRlckZlZWRzRGF0YSgpfVxuXG4gICAgICAgIDxoMz5TcG9jczwvaDM+XG4gICAgICAgIHt0aGlzLnJlbmRlclNwb2NzKCl9XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBBU1JvdXRlckFkbWluSW5uZXIgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5vbk1lc3NhZ2UgPSB0aGlzLm9uTWVzc2FnZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuaGFuZGxlRW5hYmxlZFRvZ2dsZSA9IHRoaXMuaGFuZGxlRW5hYmxlZFRvZ2dsZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuaGFuZGxlVXNlclByZWZUb2dnbGUgPSB0aGlzLmhhbmRsZVVzZXJQcmVmVG9nZ2xlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbkNoYW5nZU1lc3NhZ2VGaWx0ZXIgPSB0aGlzLm9uQ2hhbmdlTWVzc2FnZUZpbHRlci5iaW5kKHRoaXMpO1xuICAgIHRoaXMuZmluZE90aGVyQnVuZGxlZE1lc3NhZ2VzT2ZTYW1lVGVtcGxhdGUgPSB0aGlzLmZpbmRPdGhlckJ1bmRsZWRNZXNzYWdlc09mU2FtZVRlbXBsYXRlLmJpbmQoXG4gICAgICB0aGlzXG4gICAgKTtcbiAgICB0aGlzLmhhbmRsZUV4cHJlc3Npb25FdmFsID0gdGhpcy5oYW5kbGVFeHByZXNzaW9uRXZhbC5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25DaGFuZ2VUYXJnZXRpbmdQYXJhbWV0ZXJzID0gdGhpcy5vbkNoYW5nZVRhcmdldGluZ1BhcmFtZXRlcnMuYmluZChcbiAgICAgIHRoaXNcbiAgICApO1xuICAgIHRoaXMub25DaGFuZ2VBdHRyaWJ1dGlvblBhcmFtZXRlcnMgPSB0aGlzLm9uQ2hhbmdlQXR0cmlidXRpb25QYXJhbWV0ZXJzLmJpbmQoXG4gICAgICB0aGlzXG4gICAgKTtcbiAgICB0aGlzLnNldEF0dHJpYnV0aW9uID0gdGhpcy5zZXRBdHRyaWJ1dGlvbi5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25Db3B5VGFyZ2V0aW5nUGFyYW1zID0gdGhpcy5vbkNvcHlUYXJnZXRpbmdQYXJhbXMuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uUGFzdGVUYXJnZXRpbmdQYXJhbXMgPSB0aGlzLm9uUGFzdGVUYXJnZXRpbmdQYXJhbXMuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uTmV3VGFyZ2V0aW5nUGFyYW1zID0gdGhpcy5vbk5ld1RhcmdldGluZ1BhcmFtcy5iaW5kKHRoaXMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBtZXNzYWdlRmlsdGVyOiBcImFsbFwiLFxuICAgICAgZXZhbHVhdGlvblN0YXR1czoge30sXG4gICAgICBzdHJpbmdUYXJnZXRpbmdQYXJhbWV0ZXJzOiBudWxsLFxuICAgICAgbmV3U3RyaW5nVGFyZ2V0aW5nUGFyYW1ldGVyczogbnVsbCxcbiAgICAgIGNvcGllZFRvQ2xpcGJvYXJkOiBmYWxzZSxcbiAgICAgIHBhc3RlRnJvbUNsaXBib2FyZDogZmFsc2UsXG4gICAgICBhdHRyaWJ1dGlvblBhcmFtZXRlcnM6IHtcbiAgICAgICAgc291cmNlOiBcImFkZG9ucy5tb3ppbGxhLm9yZ1wiLFxuICAgICAgICBjYW1wYWlnbjogXCJub24tZngtYnV0dG9uXCIsXG4gICAgICAgIGNvbnRlbnQ6IFwiaXJpZGl1bUBwYXJ0aWNsZWNvcmUuZ2l0aHViLmlvXCIsXG4gICAgICB9LFxuICAgIH07XG4gIH1cblxuICBvbk1lc3NhZ2UoeyBkYXRhOiBhY3Rpb24gfSkge1xuICAgIGlmIChhY3Rpb24udHlwZSA9PT0gXCJBRE1JTl9TRVRfU1RBVEVcIikge1xuICAgICAgdGhpcy5zZXRTdGF0ZShhY3Rpb24uZGF0YSk7XG4gICAgICBpZiAoIXRoaXMuc3RhdGUuc3RyaW5nVGFyZ2V0aW5nUGFyYW1ldGVycykge1xuICAgICAgICBjb25zdCBzdHJpbmdUYXJnZXRpbmdQYXJhbWV0ZXJzID0ge307XG4gICAgICAgIGZvciAoY29uc3QgcGFyYW0gb2YgT2JqZWN0LmtleXMoYWN0aW9uLmRhdGEudGFyZ2V0aW5nUGFyYW1ldGVycykpIHtcbiAgICAgICAgICBzdHJpbmdUYXJnZXRpbmdQYXJhbWV0ZXJzW3BhcmFtXSA9IEpTT04uc3RyaW5naWZ5KFxuICAgICAgICAgICAgYWN0aW9uLmRhdGEudGFyZ2V0aW5nUGFyYW1ldGVyc1twYXJhbV0sXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgMlxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHN0cmluZ1RhcmdldGluZ1BhcmFtZXRlcnMgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIGNvbnN0IGVuZHBvaW50ID0gQVNSb3V0ZXJVdGlscy5nZXRQcmV2aWV3RW5kcG9pbnQoKTtcbiAgICBBU1JvdXRlclV0aWxzLnNlbmRNZXNzYWdlKHtcbiAgICAgIHR5cGU6IFwiQURNSU5fQ09OTkVDVF9TVEFURVwiLFxuICAgICAgZGF0YTogeyBlbmRwb2ludCB9LFxuICAgIH0pO1xuICAgIEFTUm91dGVyVXRpbHMuYWRkTGlzdGVuZXIodGhpcy5vbk1lc3NhZ2UpO1xuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgQVNSb3V0ZXJVdGlscy5yZW1vdmVMaXN0ZW5lcih0aGlzLm9uTWVzc2FnZSk7XG4gIH1cblxuICBmaW5kT3RoZXJCdW5kbGVkTWVzc2FnZXNPZlNhbWVUZW1wbGF0ZSh0ZW1wbGF0ZSkge1xuICAgIHJldHVybiB0aGlzLnN0YXRlLm1lc3NhZ2VzLmZpbHRlcihcbiAgICAgIG1zZyA9PiBtc2cudGVtcGxhdGUgPT09IHRlbXBsYXRlICYmIG1zZy5idW5kbGVkXG4gICAgKTtcbiAgfVxuXG4gIGhhbmRsZUJsb2NrKG1zZykge1xuICAgIGlmIChtc2cuYnVuZGxlZCkge1xuICAgICAgLy8gSWYgd2UgYXJlIGJsb2NraW5nIGEgbWVzc2FnZSB0aGF0IGJlbG9uZ3MgdG8gYSBidW5kbGUsIGJsb2NrIGFsbCBvdGhlciBtZXNzYWdlcyB0aGF0IGFyZSBidW5kbGVkIG9mIHRoYXQgc2FtZSB0ZW1wbGF0ZVxuICAgICAgbGV0IGJ1bmRsZSA9IHRoaXMuZmluZE90aGVyQnVuZGxlZE1lc3NhZ2VzT2ZTYW1lVGVtcGxhdGUobXNnLnRlbXBsYXRlKTtcbiAgICAgIHJldHVybiAoKSA9PiBBU1JvdXRlclV0aWxzLmJsb2NrQnVuZGxlKGJ1bmRsZSk7XG4gICAgfVxuICAgIHJldHVybiAoKSA9PiBBU1JvdXRlclV0aWxzLmJsb2NrQnlJZChtc2cuaWQpO1xuICB9XG5cbiAgaGFuZGxlVW5ibG9jayhtc2cpIHtcbiAgICBpZiAobXNnLmJ1bmRsZWQpIHtcbiAgICAgIC8vIElmIHdlIGFyZSB1bmJsb2NraW5nIGEgbWVzc2FnZSB0aGF0IGJlbG9uZ3MgdG8gYSBidW5kbGUsIHVuYmxvY2sgYWxsIG90aGVyIG1lc3NhZ2VzIHRoYXQgYXJlIGJ1bmRsZWQgb2YgdGhhdCBzYW1lIHRlbXBsYXRlXG4gICAgICBsZXQgYnVuZGxlID0gdGhpcy5maW5kT3RoZXJCdW5kbGVkTWVzc2FnZXNPZlNhbWVUZW1wbGF0ZShtc2cudGVtcGxhdGUpO1xuICAgICAgcmV0dXJuICgpID0+IEFTUm91dGVyVXRpbHMudW5ibG9ja0J1bmRsZShidW5kbGUpO1xuICAgIH1cbiAgICByZXR1cm4gKCkgPT4gQVNSb3V0ZXJVdGlscy51bmJsb2NrQnlJZChtc2cuaWQpO1xuICB9XG5cbiAgaGFuZGxlT3ZlcnJpZGUoaWQpIHtcbiAgICByZXR1cm4gKCkgPT4gQVNSb3V0ZXJVdGlscy5vdmVycmlkZU1lc3NhZ2UoaWQpO1xuICB9XG5cbiAgZXhwaXJlQ2FjaGUoKSB7XG4gICAgQVNSb3V0ZXJVdGlscy5zZW5kTWVzc2FnZSh7IHR5cGU6IFwiRVhQSVJFX1FVRVJZX0NBQ0hFXCIgfSk7XG4gIH1cblxuICByZXNldFByZWYoKSB7XG4gICAgQVNSb3V0ZXJVdGlscy5zZW5kTWVzc2FnZSh7IHR5cGU6IFwiUkVTRVRfUFJPVklERVJfUFJFRlwiIH0pO1xuICB9XG5cbiAgaGFuZGxlRXhwcmVzc2lvbkV2YWwoKSB7XG4gICAgY29uc3QgY29udGV4dCA9IHt9O1xuICAgIGZvciAoY29uc3QgcGFyYW0gb2YgT2JqZWN0LmtleXModGhpcy5zdGF0ZS5zdHJpbmdUYXJnZXRpbmdQYXJhbWV0ZXJzKSkge1xuICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLnN0YXRlLnN0cmluZ1RhcmdldGluZ1BhcmFtZXRlcnNbcGFyYW1dO1xuICAgICAgY29udGV4dFtwYXJhbV0gPSB2YWx1ZSA/IEpTT04ucGFyc2UodmFsdWUpIDogbnVsbDtcbiAgICB9XG4gICAgQVNSb3V0ZXJVdGlscy5zZW5kTWVzc2FnZSh7XG4gICAgICB0eXBlOiBcIkVWQUxVQVRFX0pFWExfRVhQUkVTU0lPTlwiLFxuICAgICAgZGF0YToge1xuICAgICAgICBleHByZXNzaW9uOiB0aGlzLnJlZnMuZXhwcmVzc2lvbklucHV0LnZhbHVlLFxuICAgICAgICBjb250ZXh0LFxuICAgICAgfSxcbiAgICB9KTtcbiAgfVxuXG4gIG9uQ2hhbmdlVGFyZ2V0aW5nUGFyYW1ldGVycyhldmVudCkge1xuICAgIGNvbnN0IHsgbmFtZSB9ID0gZXZlbnQudGFyZ2V0O1xuICAgIGNvbnN0IHsgdmFsdWUgfSA9IGV2ZW50LnRhcmdldDtcblxuICAgIHRoaXMuc2V0U3RhdGUoKHsgc3RyaW5nVGFyZ2V0aW5nUGFyYW1ldGVycyB9KSA9PiB7XG4gICAgICBsZXQgdGFyZ2V0aW5nUGFyYW1ldGVyc0Vycm9yID0gbnVsbDtcbiAgICAgIGNvbnN0IHVwZGF0ZWRQYXJhbWV0ZXJzID0geyAuLi5zdHJpbmdUYXJnZXRpbmdQYXJhbWV0ZXJzIH07XG4gICAgICB1cGRhdGVkUGFyYW1ldGVyc1tuYW1lXSA9IHZhbHVlO1xuICAgICAgdHJ5IHtcbiAgICAgICAgSlNPTi5wYXJzZSh2YWx1ZSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGBFcnJvciBwYXJzaW5nIHZhbHVlIG9mIHBhcmFtZXRlciAke25hbWV9YCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICAgICAgICB0YXJnZXRpbmdQYXJhbWV0ZXJzRXJyb3IgPSB7IGlkOiBuYW1lIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNvcGllZFRvQ2xpcGJvYXJkOiBmYWxzZSxcbiAgICAgICAgZXZhbHVhdGlvblN0YXR1czoge30sXG4gICAgICAgIHN0cmluZ1RhcmdldGluZ1BhcmFtZXRlcnM6IHVwZGF0ZWRQYXJhbWV0ZXJzLFxuICAgICAgICB0YXJnZXRpbmdQYXJhbWV0ZXJzRXJyb3IsXG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgaGFuZGxlRW5hYmxlZFRvZ2dsZShldmVudCkge1xuICAgIGNvbnN0IHByb3ZpZGVyID0gdGhpcy5zdGF0ZS5wcm92aWRlclByZWZzLmZpbmQoXG4gICAgICBwID0+IHAuaWQgPT09IGV2ZW50LnRhcmdldC5kYXRhc2V0LnByb3ZpZGVyXG4gICAgKTtcbiAgICBjb25zdCB1c2VyUHJlZkluZm8gPSB0aGlzLnN0YXRlLnVzZXJQcmVmcztcblxuICAgIGNvbnN0IGlzVXNlckVuYWJsZWQgPVxuICAgICAgcHJvdmlkZXIuaWQgaW4gdXNlclByZWZJbmZvID8gdXNlclByZWZJbmZvW3Byb3ZpZGVyLmlkXSA6IHRydWU7XG4gICAgY29uc3QgaXNTeXN0ZW1FbmFibGVkID0gcHJvdmlkZXIuZW5hYmxlZDtcbiAgICBjb25zdCBpc0VuYWJsaW5nID0gZXZlbnQudGFyZ2V0LmNoZWNrZWQ7XG5cbiAgICBpZiAoaXNFbmFibGluZykge1xuICAgICAgaWYgKCFpc1VzZXJFbmFibGVkKSB7XG4gICAgICAgIEFTUm91dGVyVXRpbHMuc2VuZE1lc3NhZ2Uoe1xuICAgICAgICAgIHR5cGU6IFwiU0VUX1BST1ZJREVSX1VTRVJfUFJFRlwiLFxuICAgICAgICAgIGRhdGE6IHsgaWQ6IHByb3ZpZGVyLmlkLCB2YWx1ZTogdHJ1ZSB9LFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmICghaXNTeXN0ZW1FbmFibGVkKSB7XG4gICAgICAgIEFTUm91dGVyVXRpbHMuc2VuZE1lc3NhZ2Uoe1xuICAgICAgICAgIHR5cGU6IFwiRU5BQkxFX1BST1ZJREVSXCIsXG4gICAgICAgICAgZGF0YTogcHJvdmlkZXIuaWQsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBBU1JvdXRlclV0aWxzLnNlbmRNZXNzYWdlKHtcbiAgICAgICAgdHlwZTogXCJESVNBQkxFX1BST1ZJREVSXCIsXG4gICAgICAgIGRhdGE6IHByb3ZpZGVyLmlkLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhpcy5zZXRTdGF0ZSh7IG1lc3NhZ2VGaWx0ZXI6IFwiYWxsXCIgfSk7XG4gIH1cblxuICBoYW5kbGVVc2VyUHJlZlRvZ2dsZShldmVudCkge1xuICAgIGNvbnN0IGFjdGlvbiA9IHtcbiAgICAgIHR5cGU6IFwiU0VUX1BST1ZJREVSX1VTRVJfUFJFRlwiLFxuICAgICAgZGF0YTogeyBpZDogZXZlbnQudGFyZ2V0LmRhdGFzZXQucHJvdmlkZXIsIHZhbHVlOiBldmVudC50YXJnZXQuY2hlY2tlZCB9LFxuICAgIH07XG4gICAgQVNSb3V0ZXJVdGlscy5zZW5kTWVzc2FnZShhY3Rpb24pO1xuICAgIHRoaXMuc2V0U3RhdGUoeyBtZXNzYWdlRmlsdGVyOiBcImFsbFwiIH0pO1xuICB9XG5cbiAgb25DaGFuZ2VNZXNzYWdlRmlsdGVyKGV2ZW50KSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IG1lc3NhZ2VGaWx0ZXI6IGV2ZW50LnRhcmdldC52YWx1ZSB9KTtcbiAgfVxuXG4gIC8vIFNpbXVsYXRlIGEgY29weSBldmVudCB0aGF0IHNldHMgdG8gY2xpcGJvYXJkIGFsbCB0YXJnZXRpbmcgcGFyYW10ZXJzIGFuZCB2YWx1ZXNcbiAgb25Db3B5VGFyZ2V0aW5nUGFyYW1zKGV2ZW50KSB7XG4gICAgY29uc3Qgc3RyaW5nVGFyZ2V0aW5nUGFyYW1ldGVycyA9IHtcbiAgICAgIC4uLnRoaXMuc3RhdGUuc3RyaW5nVGFyZ2V0aW5nUGFyYW1ldGVycyxcbiAgICB9O1xuICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0cmluZ1RhcmdldGluZ1BhcmFtZXRlcnMpKSB7XG4gICAgICAvLyBJZiB0aGUgdmFsdWUgaXMgbm90IHNldCB0aGUgcGFyYW1ldGVyIHdpbGwgYmUgbG9zdCB3aGVuIHdlIHN0cmluZ2lmeVxuICAgICAgaWYgKHN0cmluZ1RhcmdldGluZ1BhcmFtZXRlcnNba2V5XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHN0cmluZ1RhcmdldGluZ1BhcmFtZXRlcnNba2V5XSA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHNldENsaXBib2FyZERhdGEgPSBlID0+IHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGUuY2xpcGJvYXJkRGF0YS5zZXREYXRhKFxuICAgICAgICBcInRleHRcIixcbiAgICAgICAgSlNPTi5zdHJpbmdpZnkoc3RyaW5nVGFyZ2V0aW5nUGFyYW1ldGVycywgbnVsbCwgMilcbiAgICAgICk7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwiY29weVwiLCBzZXRDbGlwYm9hcmREYXRhKTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBjb3BpZWRUb0NsaXBib2FyZDogdHJ1ZSB9KTtcbiAgICB9O1xuXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNvcHlcIiwgc2V0Q2xpcGJvYXJkRGF0YSk7XG5cbiAgICBkb2N1bWVudC5leGVjQ29tbWFuZChcImNvcHlcIik7XG4gIH1cblxuICAvLyBDb3B5IGFsbCBjbGlwYm9hcmQgZGF0YSB0byB0YXJnZXRpbmcgcGFyYW1ldGVyc1xuICBvblBhc3RlVGFyZ2V0aW5nUGFyYW1zKGV2ZW50KSB7XG4gICAgdGhpcy5zZXRTdGF0ZSgoeyBwYXN0ZUZyb21DbGlwYm9hcmQgfSkgPT4gKHtcbiAgICAgIHBhc3RlRnJvbUNsaXBib2FyZDogIXBhc3RlRnJvbUNsaXBib2FyZCxcbiAgICAgIG5ld1N0cmluZ1RhcmdldGluZ1BhcmFtZXRlcnM6IFwiXCIsXG4gICAgfSkpO1xuICB9XG5cbiAgb25OZXdUYXJnZXRpbmdQYXJhbXMoZXZlbnQpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgbmV3U3RyaW5nVGFyZ2V0aW5nUGFyYW1ldGVyczogZXZlbnQudGFyZ2V0LnZhbHVlIH0pO1xuICAgIGV2ZW50LnRhcmdldC5jbGFzc0xpc3QucmVtb3ZlKFwiZXJyb3JTdGF0ZVwiKTtcbiAgICB0aGlzLnJlZnMudGFyZ2V0aW5nUGFyYW1zRXZhbC5pbm5lclRleHQgPSBcIlwiO1xuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHN0cmluZ1RhcmdldGluZ1BhcmFtZXRlcnMgPSBKU09OLnBhcnNlKGV2ZW50LnRhcmdldC52YWx1ZSk7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgc3RyaW5nVGFyZ2V0aW5nUGFyYW1ldGVycyB9KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBldmVudC50YXJnZXQuY2xhc3NMaXN0LmFkZChcImVycm9yU3RhdGVcIik7XG4gICAgICB0aGlzLnJlZnMudGFyZ2V0aW5nUGFyYW1zRXZhbC5pbm5lclRleHQgPSBlLm1lc3NhZ2U7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyTWVzc2FnZUl0ZW0obXNnKSB7XG4gICAgY29uc3QgaXNDdXJyZW50ID0gbXNnLmlkID09PSB0aGlzLnN0YXRlLmxhc3RNZXNzYWdlSWQ7XG4gICAgY29uc3QgaXNCbG9ja2VkID1cbiAgICAgIHRoaXMuc3RhdGUubWVzc2FnZUJsb2NrTGlzdC5pbmNsdWRlcyhtc2cuaWQpIHx8XG4gICAgICB0aGlzLnN0YXRlLm1lc3NhZ2VCbG9ja0xpc3QuaW5jbHVkZXMobXNnLmNhbXBhaWduKTtcbiAgICBjb25zdCBpbXByZXNzaW9ucyA9IHRoaXMuc3RhdGUubWVzc2FnZUltcHJlc3Npb25zW21zZy5pZF1cbiAgICAgID8gdGhpcy5zdGF0ZS5tZXNzYWdlSW1wcmVzc2lvbnNbbXNnLmlkXS5sZW5ndGhcbiAgICAgIDogMDtcblxuICAgIGxldCBpdGVtQ2xhc3NOYW1lID0gXCJtZXNzYWdlLWl0ZW1cIjtcbiAgICBpZiAoaXNDdXJyZW50KSB7XG4gICAgICBpdGVtQ2xhc3NOYW1lICs9IFwiIGN1cnJlbnRcIjtcbiAgICB9XG4gICAgaWYgKGlzQmxvY2tlZCkge1xuICAgICAgaXRlbUNsYXNzTmFtZSArPSBcIiBibG9ja2VkXCI7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDx0ciBjbGFzc05hbWU9e2l0ZW1DbGFzc05hbWV9IGtleT17bXNnLmlkfT5cbiAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm1lc3NhZ2UtaWRcIj5cbiAgICAgICAgICA8c3Bhbj5cbiAgICAgICAgICAgIHttc2cuaWR9IDxiciAvPlxuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPC90ZD5cbiAgICAgICAgPHRkPlxuICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgIGNsYXNzTmFtZT17YGJ1dHRvbiAke2lzQmxvY2tlZCA/IFwiXCIgOiBcIiBwcmltYXJ5XCJ9YH1cbiAgICAgICAgICAgIG9uQ2xpY2s9e1xuICAgICAgICAgICAgICBpc0Jsb2NrZWQgPyB0aGlzLmhhbmRsZVVuYmxvY2sobXNnKSA6IHRoaXMuaGFuZGxlQmxvY2sobXNnKVxuICAgICAgICAgICAgfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtpc0Jsb2NrZWQgPyBcIlVuYmxvY2tcIiA6IFwiQmxvY2tcIn1cbiAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICB7aXNCbG9ja2VkID8gbnVsbCA6IChcbiAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiYnV0dG9uXCIgb25DbGljaz17dGhpcy5oYW5kbGVPdmVycmlkZShtc2cuaWQpfT5cbiAgICAgICAgICAgICAgU2hvd1xuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgKX1cbiAgICAgICAgICA8YnIgLz4oe2ltcHJlc3Npb25zfSBpbXByZXNzaW9ucylcbiAgICAgICAgPC90ZD5cbiAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm1lc3NhZ2Utc3VtbWFyeVwiPlxuICAgICAgICAgIDxwcmU+e0pTT04uc3RyaW5naWZ5KG1zZywgbnVsbCwgMil9PC9wcmU+XG4gICAgICAgIDwvdGQ+XG4gICAgICA8L3RyPlxuICAgICk7XG4gIH1cblxuICByZW5kZXJNZXNzYWdlcygpIHtcbiAgICBpZiAoIXRoaXMuc3RhdGUubWVzc2FnZXMpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjb25zdCBtZXNzYWdlc1RvU2hvdyA9XG4gICAgICB0aGlzLnN0YXRlLm1lc3NhZ2VGaWx0ZXIgPT09IFwiYWxsXCJcbiAgICAgICAgPyB0aGlzLnN0YXRlLm1lc3NhZ2VzXG4gICAgICAgIDogdGhpcy5zdGF0ZS5tZXNzYWdlcy5maWx0ZXIoXG4gICAgICAgICAgICBtZXNzYWdlID0+IG1lc3NhZ2UucHJvdmlkZXIgPT09IHRoaXMuc3RhdGUubWVzc2FnZUZpbHRlclxuICAgICAgICAgICk7XG4gICAgcmV0dXJuIChcbiAgICAgIDx0YWJsZT5cbiAgICAgICAgPHRib2R5PnttZXNzYWdlc1RvU2hvdy5tYXAobXNnID0+IHRoaXMucmVuZGVyTWVzc2FnZUl0ZW0obXNnKSl9PC90Ym9keT5cbiAgICAgIDwvdGFibGU+XG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlck1lc3NhZ2VGaWx0ZXIoKSB7XG4gICAgaWYgKCF0aGlzLnN0YXRlLnByb3ZpZGVycykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiAoXG4gICAgICA8cD5cbiAgICAgICAgey8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmV0dGllci9wcmV0dGllciAqL31cbiAgICAgIFNob3cgbWVzc2FnZXMgZnJvbXtcIiBcIn1cbiAgICAgIHsvKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUganN4LWExMXkvbm8tb25jaGFuZ2UgKi99XG4gICAgICAgIDxzZWxlY3RcbiAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5tZXNzYWdlRmlsdGVyfVxuICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLm9uQ2hhbmdlTWVzc2FnZUZpbHRlcn1cbiAgICAgICAgPlxuICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJhbGxcIj5hbGwgcHJvdmlkZXJzPC9vcHRpb24+XG4gICAgICAgICAge3RoaXMuc3RhdGUucHJvdmlkZXJzLm1hcChwcm92aWRlciA9PiAoXG4gICAgICAgICAgICA8b3B0aW9uIGtleT17cHJvdmlkZXIuaWR9IHZhbHVlPXtwcm92aWRlci5pZH0+XG4gICAgICAgICAgICAgIHtwcm92aWRlci5pZH1cbiAgICAgICAgICAgIDwvb3B0aW9uPlxuICAgICAgICAgICkpfVxuICAgICAgICA8L3NlbGVjdD5cbiAgICAgIDwvcD5cbiAgICApO1xuICB9XG5cbiAgcmVuZGVyVGFibGVIZWFkKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8dGhlYWQ+XG4gICAgICAgIDx0ciBjbGFzc05hbWU9XCJtZXNzYWdlLWl0ZW1cIj5cbiAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibWluXCIgLz5cbiAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwibWluXCI+UHJvdmlkZXIgSUQ8L3RkPlxuICAgICAgICAgIDx0ZD5Tb3VyY2U8L3RkPlxuICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJtaW5cIj5Db2hvcnQ8L3RkPlxuICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJtaW5cIj5MYXN0IFVwZGF0ZWQ8L3RkPlxuICAgICAgICA8L3RyPlxuICAgICAgPC90aGVhZD5cbiAgICApO1xuICB9XG5cbiAgcmVuZGVyUHJvdmlkZXJzKCkge1xuICAgIGNvbnN0IHByb3ZpZGVyc0NvbmZpZyA9IHRoaXMuc3RhdGUucHJvdmlkZXJQcmVmcztcbiAgICBjb25zdCBwcm92aWRlckluZm8gPSB0aGlzLnN0YXRlLnByb3ZpZGVycztcbiAgICBjb25zdCB1c2VyUHJlZkluZm8gPSB0aGlzLnN0YXRlLnVzZXJQcmVmcztcblxuICAgIHJldHVybiAoXG4gICAgICA8dGFibGU+XG4gICAgICAgIHt0aGlzLnJlbmRlclRhYmxlSGVhZCgpfVxuICAgICAgICA8dGJvZHk+XG4gICAgICAgICAge3Byb3ZpZGVyc0NvbmZpZy5tYXAoKHByb3ZpZGVyLCBpKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpc1Rlc3RQcm92aWRlciA9IHByb3ZpZGVyLmlkLmluY2x1ZGVzKFwiX2xvY2FsX3Rlc3RpbmdcIik7XG4gICAgICAgICAgICBjb25zdCBpbmZvID0gcHJvdmlkZXJJbmZvLmZpbmQocCA9PiBwLmlkID09PSBwcm92aWRlci5pZCkgfHwge307XG4gICAgICAgICAgICBjb25zdCBpc1VzZXJFbmFibGVkID1cbiAgICAgICAgICAgICAgcHJvdmlkZXIuaWQgaW4gdXNlclByZWZJbmZvID8gdXNlclByZWZJbmZvW3Byb3ZpZGVyLmlkXSA6IHRydWU7XG4gICAgICAgICAgICBjb25zdCBpc1N5c3RlbUVuYWJsZWQgPSBpc1Rlc3RQcm92aWRlciB8fCBwcm92aWRlci5lbmFibGVkO1xuXG4gICAgICAgICAgICBsZXQgbGFiZWwgPSBcImxvY2FsXCI7XG4gICAgICAgICAgICBpZiAocHJvdmlkZXIudHlwZSA9PT0gXCJyZW1vdGVcIikge1xuICAgICAgICAgICAgICBsYWJlbCA9IChcbiAgICAgICAgICAgICAgICA8c3Bhbj5cbiAgICAgICAgICAgICAgICAgIGVuZHBvaW50IChcbiAgICAgICAgICAgICAgICAgIDxhXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInByb3ZpZGVyVXJsXCJcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICAgICAgICAgICAgaHJlZj17aW5mby51cmx9XG4gICAgICAgICAgICAgICAgICAgIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIlxuICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICB7aW5mby51cmx9XG4gICAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChwcm92aWRlci50eXBlID09PSBcInJlbW90ZS1zZXR0aW5nc1wiKSB7XG4gICAgICAgICAgICAgIGxhYmVsID0gYHJlbW90ZSBzZXR0aW5ncyAoJHtwcm92aWRlci5idWNrZXR9KWA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCByZWFzb25zRGlzYWJsZWQgPSBbXTtcbiAgICAgICAgICAgIGlmICghaXNTeXN0ZW1FbmFibGVkKSB7XG4gICAgICAgICAgICAgIHJlYXNvbnNEaXNhYmxlZC5wdXNoKFwic3lzdGVtIHByZWZcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWlzVXNlckVuYWJsZWQpIHtcbiAgICAgICAgICAgICAgcmVhc29uc0Rpc2FibGVkLnB1c2goXCJ1c2VyIHByZWZcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocmVhc29uc0Rpc2FibGVkLmxlbmd0aCkge1xuICAgICAgICAgICAgICBsYWJlbCA9IGBkaXNhYmxlZCB2aWEgJHtyZWFzb25zRGlzYWJsZWQuam9pbihcIiwgXCIpfWA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgIDx0ciBjbGFzc05hbWU9XCJtZXNzYWdlLWl0ZW1cIiBrZXk9e2l9PlxuICAgICAgICAgICAgICAgIDx0ZD5cbiAgICAgICAgICAgICAgICAgIHtpc1Rlc3RQcm92aWRlciA/IChcbiAgICAgICAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgICAgICAgdHlwZT1cImNoZWNrYm94XCJcbiAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZD17dHJ1ZX1cbiAgICAgICAgICAgICAgICAgICAgICByZWFkT25seT17dHJ1ZX1cbiAgICAgICAgICAgICAgICAgICAgICBjaGVja2VkPXt0cnVlfVxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgICAgICAgdHlwZT1cImNoZWNrYm94XCJcbiAgICAgICAgICAgICAgICAgICAgICBkYXRhLXByb3ZpZGVyPXtwcm92aWRlci5pZH1cbiAgICAgICAgICAgICAgICAgICAgICBjaGVja2VkPXtpc1VzZXJFbmFibGVkICYmIGlzU3lzdGVtRW5hYmxlZH1cbiAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5oYW5kbGVFbmFibGVkVG9nZ2xlfVxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgICAgIDx0ZD57cHJvdmlkZXIuaWR9PC90ZD5cbiAgICAgICAgICAgICAgICA8dGQ+XG4gICAgICAgICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2Bzb3VyY2VMYWJlbCR7XG4gICAgICAgICAgICAgICAgICAgICAgaXNVc2VyRW5hYmxlZCAmJiBpc1N5c3RlbUVuYWJsZWQgPyBcIlwiIDogXCIgaXNEaXNhYmxlZFwiXG4gICAgICAgICAgICAgICAgICAgIH1gfVxuICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICB7bGFiZWx9XG4gICAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgICAgICA8dGQ+e3Byb3ZpZGVyLmNvaG9ydH08L3RkPlxuICAgICAgICAgICAgICAgIDx0ZCBzdHlsZT17eyB3aGl0ZVNwYWNlOiBcIm5vd3JhcFwiIH19PlxuICAgICAgICAgICAgICAgICAge2luZm8ubGFzdFVwZGF0ZWRcbiAgICAgICAgICAgICAgICAgICAgPyBuZXcgRGF0ZShpbmZvLmxhc3RVcGRhdGVkKS50b0xvY2FsZVN0cmluZygpXG4gICAgICAgICAgICAgICAgICAgIDogXCJcIn1cbiAgICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9KX1cbiAgICAgICAgPC90Ym9keT5cbiAgICAgIDwvdGFibGU+XG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlclBhc3RlTW9kYWwoKSB7XG4gICAgaWYgKCF0aGlzLnN0YXRlLnBhc3RlRnJvbUNsaXBib2FyZCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IGVycm9ycyA9XG4gICAgICB0aGlzLnJlZnMudGFyZ2V0aW5nUGFyYW1zRXZhbCAmJlxuICAgICAgdGhpcy5yZWZzLnRhcmdldGluZ1BhcmFtc0V2YWwuaW5uZXJUZXh0Lmxlbmd0aDtcbiAgICByZXR1cm4gKFxuICAgICAgPE1vZGFsT3ZlcmxheVxuICAgICAgICBpbm5lclN0eWxlPVwicGFzdGVNb2RhbFwiXG4gICAgICAgIHRpdGxlPVwiTmV3IHRhcmdldGluZyBwYXJhbWV0ZXJzXCJcbiAgICAgICAgYnV0dG9uX2xhYmVsPXtlcnJvcnMgPyBcIkNhbmNlbFwiIDogXCJEb25lXCJ9XG4gICAgICAgIG9uRGlzbWlzc0J1bmRsZT17dGhpcy5vblBhc3RlVGFyZ2V0aW5nUGFyYW1zfVxuICAgICAgPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9uYm9hcmRpbmdNZXNzYWdlXCI+XG4gICAgICAgICAgPHA+XG4gICAgICAgICAgICA8dGV4dGFyZWFcbiAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMub25OZXdUYXJnZXRpbmdQYXJhbXN9XG4gICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLm5ld1N0cmluZ1RhcmdldGluZ1BhcmFtZXRlcnN9XG4gICAgICAgICAgICAgIHJvd3M9XCIyMFwiXG4gICAgICAgICAgICAgIGNvbHM9XCI2MFwiXG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvcD5cbiAgICAgICAgICA8cCByZWY9XCJ0YXJnZXRpbmdQYXJhbXNFdmFsXCIgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L01vZGFsT3ZlcmxheT5cbiAgICApO1xuICB9XG5cbiAgcmVuZGVyVGFyZ2V0aW5nUGFyYW1ldGVycygpIHtcbiAgICAvLyBUaGVyZSB3YXMgbm8gZXJyb3IgYW5kIHRoZSByZXN1bHQgaXMgdHJ1dGh5XG4gICAgY29uc3Qgc3VjY2VzcyA9XG4gICAgICB0aGlzLnN0YXRlLmV2YWx1YXRpb25TdGF0dXMuc3VjY2VzcyAmJlxuICAgICAgISF0aGlzLnN0YXRlLmV2YWx1YXRpb25TdGF0dXMucmVzdWx0O1xuICAgIGNvbnN0IHJlc3VsdCA9XG4gICAgICBKU09OLnN0cmluZ2lmeSh0aGlzLnN0YXRlLmV2YWx1YXRpb25TdGF0dXMucmVzdWx0LCBudWxsLCAyKSB8fFxuICAgICAgXCIoRW1wdHkgcmVzdWx0KVwiO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDx0YWJsZT5cbiAgICAgICAgPHRib2R5PlxuICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgIDx0ZD5cbiAgICAgICAgICAgICAgPGgyPkV2YWx1YXRlIEpFWEwgZXhwcmVzc2lvbjwvaDI+XG4gICAgICAgICAgICA8L3RkPlxuICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgPHRyPlxuICAgICAgICAgICAgPHRkPlxuICAgICAgICAgICAgICA8cD5cbiAgICAgICAgICAgICAgICA8dGV4dGFyZWFcbiAgICAgICAgICAgICAgICAgIHJlZj1cImV4cHJlc3Npb25JbnB1dFwiXG4gICAgICAgICAgICAgICAgICByb3dzPVwiMTBcIlxuICAgICAgICAgICAgICAgICAgY29scz1cIjYwXCJcbiAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiRXZhbHVhdGUgSkVYTCBleHByZXNzaW9ucyBhbmQgbW9jayBwYXJhbWV0ZXJzIGJ5IGNoYW5naW5nIHRoZWlyIHZhbHVlcyBiZWxvd1wiXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICA8cD5cbiAgICAgICAgICAgICAgICBTdGF0dXM6e1wiIFwifVxuICAgICAgICAgICAgICAgIDxzcGFuIHJlZj1cImV2YWx1YXRpb25TdGF0dXNcIj5cbiAgICAgICAgICAgICAgICAgIHtzdWNjZXNzID8gXCLinIVcIiA6IFwi4p2MXCJ9LCBSZXN1bHQ6IHtyZXN1bHR9XG4gICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgPHRkPlxuICAgICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiQVNSb3V0ZXJCdXR0b24gc2Vjb25kYXJ5XCJcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLmhhbmRsZUV4cHJlc3Npb25FdmFsfVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgRXZhbHVhdGVcbiAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8L3RkPlxuICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgPHRyPlxuICAgICAgICAgICAgPHRkPlxuICAgICAgICAgICAgICA8aDI+TW9kaWZ5IHRhcmdldGluZyBwYXJhbWV0ZXJzPC9oMj5cbiAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgPC90cj5cbiAgICAgICAgICA8dHI+XG4gICAgICAgICAgICA8dGQ+XG4gICAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJBU1JvdXRlckJ1dHRvbiBzZWNvbmRhcnlcIlxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMub25Db3B5VGFyZ2V0aW5nUGFyYW1zfVxuICAgICAgICAgICAgICAgIGRpc2FibGVkPXt0aGlzLnN0YXRlLmNvcGllZFRvQ2xpcGJvYXJkfVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAge3RoaXMuc3RhdGUuY29waWVkVG9DbGlwYm9hcmRcbiAgICAgICAgICAgICAgICAgID8gXCJQYXJhbWV0ZXJzIGNvcGllZCFcIlxuICAgICAgICAgICAgICAgICAgOiBcIkNvcHkgcGFyYW1ldGVyc1wifVxuICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIkFTUm91dGVyQnV0dG9uIHNlY29uZGFyeVwiXG4gICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5vblBhc3RlVGFyZ2V0aW5nUGFyYW1zfVxuICAgICAgICAgICAgICAgIGRpc2FibGVkPXt0aGlzLnN0YXRlLnBhc3RlRnJvbUNsaXBib2FyZH1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIFBhc3RlIHBhcmFtZXRlcnNcbiAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8L3RkPlxuICAgICAgICAgIDwvdHI+XG4gICAgICAgICAge3RoaXMuc3RhdGUuc3RyaW5nVGFyZ2V0aW5nUGFyYW1ldGVycyAmJlxuICAgICAgICAgICAgT2JqZWN0LmtleXModGhpcy5zdGF0ZS5zdHJpbmdUYXJnZXRpbmdQYXJhbWV0ZXJzKS5tYXAoXG4gICAgICAgICAgICAgIChwYXJhbSwgaSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5zdGF0ZS5zdHJpbmdUYXJnZXRpbmdQYXJhbWV0ZXJzW3BhcmFtXTtcbiAgICAgICAgICAgICAgICBjb25zdCBlcnJvclN0YXRlID1cbiAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUudGFyZ2V0aW5nUGFyYW1ldGVyc0Vycm9yICYmXG4gICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLnRhcmdldGluZ1BhcmFtZXRlcnNFcnJvci5pZCA9PT0gcGFyYW07XG4gICAgICAgICAgICAgICAgY29uc3QgY2xhc3NOYW1lID0gZXJyb3JTdGF0ZSA/IFwiZXJyb3JTdGF0ZVwiIDogXCJcIjtcbiAgICAgICAgICAgICAgICBjb25zdCBpbnB1dENvbXAgPVxuICAgICAgICAgICAgICAgICAgKHZhbHVlICYmIHZhbHVlLmxlbmd0aCkgPiAzMCA/IChcbiAgICAgICAgICAgICAgICAgICAgPHRleHRhcmVhXG4gICAgICAgICAgICAgICAgICAgICAgbmFtZT17cGFyYW19XG4gICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWV9XG4gICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3ZhbHVlfVxuICAgICAgICAgICAgICAgICAgICAgIHJvd3M9XCIxMFwiXG4gICAgICAgICAgICAgICAgICAgICAgY29scz1cIjYwXCJcbiAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vbkNoYW5nZVRhcmdldGluZ1BhcmFtZXRlcnN9XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICAgICAgICBuYW1lPXtwYXJhbX1cbiAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZX1cbiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dmFsdWV9XG4gICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMub25DaGFuZ2VUYXJnZXRpbmdQYXJhbWV0ZXJzfVxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICA8dHIga2V5PXtpfT5cbiAgICAgICAgICAgICAgICAgICAgPHRkPntwYXJhbX08L3RkPlxuICAgICAgICAgICAgICAgICAgICA8dGQ+e2lucHV0Q29tcH08L3RkPlxuICAgICAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApfVxuICAgICAgICA8L3Rib2R5PlxuICAgICAgPC90YWJsZT5cbiAgICApO1xuICB9XG5cbiAgb25DaGFuZ2VBdHRyaWJ1dGlvblBhcmFtZXRlcnMoZXZlbnQpIHtcbiAgICBjb25zdCB7IG5hbWUsIHZhbHVlIH0gPSBldmVudC50YXJnZXQ7XG5cbiAgICB0aGlzLnNldFN0YXRlKCh7IGF0dHJpYnV0aW9uUGFyYW1ldGVycyB9KSA9PiB7XG4gICAgICBjb25zdCB1cGRhdGVkUGFyYW1ldGVycyA9IHsgLi4uYXR0cmlidXRpb25QYXJhbWV0ZXJzIH07XG4gICAgICB1cGRhdGVkUGFyYW1ldGVyc1tuYW1lXSA9IHZhbHVlO1xuXG4gICAgICByZXR1cm4geyBhdHRyaWJ1dGlvblBhcmFtZXRlcnM6IHVwZGF0ZWRQYXJhbWV0ZXJzIH07XG4gICAgfSk7XG4gIH1cblxuICBzZXRBdHRyaWJ1dGlvbihlKSB7XG4gICAgQVNSb3V0ZXJVdGlscy5zZW5kTWVzc2FnZSh7XG4gICAgICB0eXBlOiBcIkZPUkNFX0FUVFJJQlVUSU9OXCIsXG4gICAgICBkYXRhOiB0aGlzLnN0YXRlLmF0dHJpYnV0aW9uUGFyYW1ldGVycyxcbiAgICB9KTtcbiAgfVxuXG4gIHJlbmRlclBvY2tldFN0b3J5KHN0b3J5KSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDx0ciBjbGFzc05hbWU9XCJtZXNzYWdlLWl0ZW1cIiBrZXk9e3N0b3J5Lmd1aWR9PlxuICAgICAgICA8dGQgY2xhc3NOYW1lPVwibWVzc2FnZS1pZFwiPlxuICAgICAgICAgIDxzcGFuPlxuICAgICAgICAgICAge3N0b3J5Lmd1aWR9IDxiciAvPlxuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPC90ZD5cbiAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm1lc3NhZ2Utc3VtbWFyeVwiPlxuICAgICAgICAgIDxwcmU+e0pTT04uc3RyaW5naWZ5KHN0b3J5LCBudWxsLCAyKX08L3ByZT5cbiAgICAgICAgPC90ZD5cbiAgICAgIDwvdHI+XG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlclBvY2tldFN0b3JpZXMoKSB7XG4gICAgY29uc3QgeyByb3dzIH0gPVxuICAgICAgdGhpcy5wcm9wcy5TZWN0aW9ucy5maW5kKFNlY3Rpb24gPT4gU2VjdGlvbi5pZCA9PT0gXCJ0b3BzdG9yaWVzXCIpIHx8IHt9O1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDx0YWJsZT5cbiAgICAgICAgPHRib2R5PlxuICAgICAgICAgIHtyb3dzICYmIHJvd3MubWFwKHN0b3J5ID0+IHRoaXMucmVuZGVyUG9ja2V0U3Rvcnkoc3RvcnkpKX1cbiAgICAgICAgPC90Ym9keT5cbiAgICAgIDwvdGFibGU+XG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlckRpc2NvdmVyeVN0cmVhbSgpIHtcbiAgICBjb25zdCB7IGNvbmZpZyB9ID0gdGhpcy5wcm9wcy5EaXNjb3ZlcnlTdHJlYW07XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdj5cbiAgICAgICAgPHRhYmxlPlxuICAgICAgICAgIDx0Ym9keT5cbiAgICAgICAgICAgIDx0ciBjbGFzc05hbWU9XCJtZXNzYWdlLWl0ZW1cIj5cbiAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm1pblwiPkVuYWJsZWQ8L3RkPlxuICAgICAgICAgICAgICA8dGQ+e2NvbmZpZy5lbmFibGVkID8gXCJ5ZXNcIiA6IFwibm9cIn08L3RkPlxuICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgIDx0ciBjbGFzc05hbWU9XCJtZXNzYWdlLWl0ZW1cIj5cbiAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cIm1pblwiPkVuZHBvaW50PC90ZD5cbiAgICAgICAgICAgICAgPHRkPntjb25maWcuZW5kcG9pbnQgfHwgXCIoZW1wdHkpXCJ9PC90ZD5cbiAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgPC90Ym9keT5cbiAgICAgICAgPC90YWJsZT5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cblxuICByZW5kZXJBdHRyaWJ1dGlvblBhcmFtZXJzKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2PlxuICAgICAgICA8aDI+IEF0dHJpYnV0aW9uIFBhcmFtZXRlcnMgPC9oMj5cbiAgICAgICAgPHA+XG4gICAgICAgICAge1wiIFwifVxuICAgICAgICAgIFRoaXMgZm9yY2VzIHRoZSBicm93c2VyIHRvIHNldCBzb21lIGF0dHJpYnV0aW9uIHBhcmFtZXRlcnMsIHVzZWZ1bCBmb3JcbiAgICAgICAgICB0ZXN0aW5nIHRoZSBSZXR1cm4gVG8gQU1PIGZlYXR1cmUuIENsaWNraW5nIG9uICdGb3JjZSBBdHRyaWJ1dGlvbicsXG4gICAgICAgICAgd2l0aCB0aGUgZGVmYXVsdCB2YWx1ZXMgaW4gZWFjaCBmaWVsZCwgd2lsbCBkZW1vIHRoZSBSZXR1cm4gVG8gQU1PXG4gICAgICAgICAgZmxvdyB3aXRoIHRoZSBhZGRvbiBjYWxsZWQgJ0lyaWRpdW0gZm9yIFlvdXR1YmUnLiBJZiB5b3Ugd2lzaCB0byB0cnlcbiAgICAgICAgICBkaWZmZXJlbnQgYXR0cmlidXRpb24gcGFyYW1ldGVycywgZW50ZXIgdGhlbSBpbiB0aGUgdGV4dCBib3hlcy4gSWYgeW91XG4gICAgICAgICAgd2lzaCB0byB0cnkgYSBkaWZmZXJlbnQgYWRkb24gd2l0aCB0aGUgUmV0dXJuIFRvIEFNTyBmbG93LCBtYWtlIHN1cmVcbiAgICAgICAgICB0aGUgJ2NvbnRlbnQnIHRleHQgYm94IGhhcyB0aGUgYWRkb24gR1VJRCwgdGhlbiBjbGljayAnRm9yY2VcbiAgICAgICAgICBBdHRyaWJ1dGlvbicuXG4gICAgICAgIDwvcD5cbiAgICAgICAgPHRhYmxlPlxuICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgIDx0ZD5cbiAgICAgICAgICAgICAgPGI+IFNvdXJjZSA8L2I+XG4gICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgPHRkPlxuICAgICAgICAgICAgICB7XCIgXCJ9XG4gICAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgICAgICBuYW1lPVwic291cmNlXCJcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cImFkZG9ucy5tb3ppbGxhLm9yZ1wiXG4gICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUuYXR0cmlidXRpb25QYXJhbWV0ZXJzLnNvdXJjZX1cbiAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vbkNoYW5nZUF0dHJpYnV0aW9uUGFyYW1ldGVyc31cbiAgICAgICAgICAgICAgLz57XCIgXCJ9XG4gICAgICAgICAgICA8L3RkPlxuICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgPHRyPlxuICAgICAgICAgICAgPHRkPlxuICAgICAgICAgICAgICA8Yj4gQ2FtcGFpZ24gPC9iPlxuICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgIDx0ZD5cbiAgICAgICAgICAgICAge1wiIFwifVxuICAgICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICAgICAgbmFtZT1cImNhbXBhaWduXCJcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIm5vbi1meC1idXR0b25cIlxuICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLmF0dHJpYnV0aW9uUGFyYW1ldGVycy5jYW1wYWlnbn1cbiAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vbkNoYW5nZUF0dHJpYnV0aW9uUGFyYW1ldGVyc31cbiAgICAgICAgICAgICAgLz57XCIgXCJ9XG4gICAgICAgICAgICA8L3RkPlxuICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgPHRyPlxuICAgICAgICAgICAgPHRkPlxuICAgICAgICAgICAgICA8Yj4gQ29udGVudCA8L2I+XG4gICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgPHRkPlxuICAgICAgICAgICAgICB7XCIgXCJ9XG4gICAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgICAgICBuYW1lPVwiY29udGVudFwiXG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJpcmlkaXVtQHBhcnRpY2xlY29yZS5naXRodWIuaW9cIlxuICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLmF0dHJpYnV0aW9uUGFyYW1ldGVycy5jb250ZW50fVxuICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLm9uQ2hhbmdlQXR0cmlidXRpb25QYXJhbWV0ZXJzfVxuICAgICAgICAgICAgICAvPntcIiBcIn1cbiAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgPC90cj5cbiAgICAgICAgICA8dHI+XG4gICAgICAgICAgICA8dGQ+XG4gICAgICAgICAgICAgIHtcIiBcIn1cbiAgICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIkFTUm91dGVyQnV0dG9uIHByaW1hcnkgYnV0dG9uXCJcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLnNldEF0dHJpYnV0aW9ufVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAge1wiIFwifVxuICAgICAgICAgICAgICAgIEZvcmNlIEF0dHJpYnV0aW9ue1wiIFwifVxuICAgICAgICAgICAgICA8L2J1dHRvbj57XCIgXCJ9XG4gICAgICAgICAgICA8L3RkPlxuICAgICAgICAgIDwvdHI+XG4gICAgICAgIDwvdGFibGU+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG5cbiAgcmVuZGVyRXJyb3JNZXNzYWdlKHsgaWQsIGVycm9ycyB9KSB7XG4gICAgY29uc3QgcHJvdmlkZXJJZCA9IDx0ZCByb3dTcGFuPXtlcnJvcnMubGVuZ3RofT57aWR9PC90ZD47XG4gICAgLy8gLnJldmVyc2UoKSBzbyB0aGF0IHRoZSBsYXN0IGVycm9yIChtb3N0IHJlY2VudCkgaXMgZmlyc3RcbiAgICByZXR1cm4gZXJyb3JzXG4gICAgICAubWFwKCh7IGVycm9yLCB0aW1lc3RhbXAgfSwgY2VsbEtleSkgPT4gKFxuICAgICAgICA8dHIga2V5PXtjZWxsS2V5fT5cbiAgICAgICAgICB7Y2VsbEtleSA9PT0gZXJyb3JzLmxlbmd0aCAtIDEgPyBwcm92aWRlcklkIDogbnVsbH1cbiAgICAgICAgICA8dGQ+e2Vycm9yLm1lc3NhZ2V9PC90ZD5cbiAgICAgICAgICA8dGQ+e3JlbGF0aXZlVGltZSh0aW1lc3RhbXApfTwvdGQ+XG4gICAgICAgIDwvdHI+XG4gICAgICApKVxuICAgICAgLnJldmVyc2UoKTtcbiAgfVxuXG4gIHJlbmRlckVycm9ycygpIHtcbiAgICBjb25zdCBwcm92aWRlcnNXaXRoRXJyb3JzID1cbiAgICAgIHRoaXMuc3RhdGUucHJvdmlkZXJzICYmXG4gICAgICB0aGlzLnN0YXRlLnByb3ZpZGVycy5maWx0ZXIocCA9PiBwLmVycm9ycyAmJiBwLmVycm9ycy5sZW5ndGgpO1xuXG4gICAgaWYgKHByb3ZpZGVyc1dpdGhFcnJvcnMgJiYgcHJvdmlkZXJzV2l0aEVycm9ycy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDx0YWJsZSBjbGFzc05hbWU9XCJlcnJvclJlcG9ydGluZ1wiPlxuICAgICAgICAgIDx0aGVhZD5cbiAgICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgICAgPHRoPlByb3ZpZGVyIElEPC90aD5cbiAgICAgICAgICAgICAgPHRoPk1lc3NhZ2U8L3RoPlxuICAgICAgICAgICAgICA8dGg+VGltZXN0YW1wPC90aD5cbiAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgPC90aGVhZD5cbiAgICAgICAgICA8dGJvZHk+e3Byb3ZpZGVyc1dpdGhFcnJvcnMubWFwKHRoaXMucmVuZGVyRXJyb3JNZXNzYWdlKX08L3Rib2R5PlxuICAgICAgICA8L3RhYmxlPlxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gPHA+Tm8gZXJyb3JzPC9wPjtcbiAgfVxuXG4gIHJlbmRlclRyYWlsaGVhZEluZm8oKSB7XG4gICAgY29uc3Qge1xuICAgICAgdHJhaWxoZWFkSW50ZXJydXB0LFxuICAgICAgdHJhaWxoZWFkVHJpcGxldCxcbiAgICAgIHRyYWlsaGVhZEluaXRpYWxpemVkLFxuICAgIH0gPSB0aGlzLnN0YXRlO1xuICAgIHJldHVybiB0cmFpbGhlYWRJbml0aWFsaXplZCA/IChcbiAgICAgIDx0YWJsZSBjbGFzc05hbWU9XCJtaW5pbWFsLXRhYmxlXCI+XG4gICAgICAgIDx0Ym9keT5cbiAgICAgICAgICA8dHI+XG4gICAgICAgICAgICA8dGQ+SW50ZXJydXB0IGJyYW5jaDwvdGQ+XG4gICAgICAgICAgICA8dGQ+e3RyYWlsaGVhZEludGVycnVwdH08L3RkPlxuICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgPHRyPlxuICAgICAgICAgICAgPHRkPlRyaXBsZXQgYnJhbmNoPC90ZD5cbiAgICAgICAgICAgIDx0ZD57dHJhaWxoZWFkVHJpcGxldH08L3RkPlxuICAgICAgICAgIDwvdHI+XG4gICAgICAgIDwvdGJvZHk+XG4gICAgICA8L3RhYmxlPlxuICAgICkgOiAoXG4gICAgICA8cD5cbiAgICAgICAgVHJhaWxoZWFkIGlzIG5vdCBpbml0aWFsaXplZC4gVG8gdXBkYXRlIHRoZXNlIHZhbHVlcywgbG9hZFxuICAgICAgICBhYm91dDp3ZWxjb21lLlxuICAgICAgPC9wPlxuICAgICk7XG4gIH1cblxuICBnZXRTZWN0aW9uKCkge1xuICAgIGNvbnN0IFtzZWN0aW9uXSA9IHRoaXMucHJvcHMubG9jYXRpb24ucm91dGVzO1xuICAgIHN3aXRjaCAoc2VjdGlvbikge1xuICAgICAgY2FzZSBcInRhcmdldGluZ1wiOlxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgICAgICAgIDxoMj5UYXJnZXRpbmcgVXRpbGl0aWVzPC9oMj5cbiAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiYnV0dG9uXCIgb25DbGljaz17dGhpcy5leHBpcmVDYWNoZX0+XG4gICAgICAgICAgICAgIEV4cGlyZSBDYWNoZVxuICAgICAgICAgICAgPC9idXR0b24+e1wiIFwifVxuICAgICAgICAgICAgKFRoaXMgZXhwaXJlcyB0aGUgY2FjaGUgaW4gQVNSIFRhcmdldGluZyBmb3IgYm9va21hcmtzIGFuZCB0b3BcbiAgICAgICAgICAgIHNpdGVzKVxuICAgICAgICAgICAge3RoaXMucmVuZGVyVGFyZ2V0aW5nUGFyYW1ldGVycygpfVxuICAgICAgICAgICAge3RoaXMucmVuZGVyQXR0cmlidXRpb25QYXJhbWVycygpfVxuICAgICAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gICAgICAgICk7XG4gICAgICBjYXNlIFwicG9ja2V0XCI6XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgICAgICAgPGgyPlBvY2tldDwvaDI+XG4gICAgICAgICAgICB7dGhpcy5yZW5kZXJQb2NrZXRTdG9yaWVzKCl9XG4gICAgICAgICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgICAgICAgKTtcbiAgICAgIGNhc2UgXCJkc1wiOlxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgICAgICAgIDxoMj5EaXNjb3ZlcnkgU3RyZWFtPC9oMj5cbiAgICAgICAgICAgIDxEaXNjb3ZlcnlTdHJlYW1BZG1pblxuICAgICAgICAgICAgICBzdGF0ZT17dGhpcy5wcm9wcy5EaXNjb3ZlcnlTdHJlYW19XG4gICAgICAgICAgICAgIG90aGVyUHJlZnM9e3RoaXMucHJvcHMuUHJlZnMudmFsdWVzfVxuICAgICAgICAgICAgICBkaXNwYXRjaD17dGhpcy5wcm9wcy5kaXNwYXRjaH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgICAgICAgKTtcbiAgICAgIGNhc2UgXCJlcnJvcnNcIjpcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICAgICAgICA8aDI+QVNSb3V0ZXIgRXJyb3JzPC9oMj5cbiAgICAgICAgICAgIHt0aGlzLnJlbmRlckVycm9ycygpfVxuICAgICAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gICAgICAgICk7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgICAgICAgIDxoMj5cbiAgICAgICAgICAgICAgTWVzc2FnZSBQcm92aWRlcnN7XCIgXCJ9XG4gICAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgICB0aXRsZT1cIlJlc3RvcmUgYWxsIHByb3ZpZGVyIHNldHRpbmdzIHRoYXQgc2hpcCB3aXRoIEZpcmVmb3hcIlxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImJ1dHRvblwiXG4gICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5yZXNldFByZWZ9XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICBSZXN0b3JlIGRlZmF1bHQgcHJlZnNcbiAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8L2gyPlxuICAgICAgICAgICAge3RoaXMuc3RhdGUucHJvdmlkZXJzID8gdGhpcy5yZW5kZXJQcm92aWRlcnMoKSA6IG51bGx9XG4gICAgICAgICAgICA8aDI+VHJhaWxoZWFkPC9oMj5cbiAgICAgICAgICAgIHt0aGlzLnJlbmRlclRyYWlsaGVhZEluZm8oKX1cbiAgICAgICAgICAgIDxoMj5NZXNzYWdlczwvaDI+XG4gICAgICAgICAgICB7dGhpcy5yZW5kZXJNZXNzYWdlRmlsdGVyKCl9XG4gICAgICAgICAgICB7dGhpcy5yZW5kZXJNZXNzYWdlcygpfVxuICAgICAgICAgICAge3RoaXMucmVuZGVyUGFzdGVNb2RhbCgpfVxuICAgICAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gICAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2XG4gICAgICAgIGNsYXNzTmFtZT17YGFzcm91dGVyLWFkbWluICR7XG4gICAgICAgICAgdGhpcy5wcm9wcy5jb2xsYXBzZWQgPyBcImNvbGxhcHNlZFwiIDogXCJleHBhbmRlZFwiXG4gICAgICAgIH1gfVxuICAgICAgPlxuICAgICAgICA8YXNpZGUgY2xhc3NOYW1lPVwic2lkZWJhclwiPlxuICAgICAgICAgIDx1bD5cbiAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgPGEgaHJlZj1cIiNkZXZ0b29sc1wiPkdlbmVyYWw8L2E+XG4gICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICA8YSBocmVmPVwiI2RldnRvb2xzLXRhcmdldGluZ1wiPlRhcmdldGluZzwvYT5cbiAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgIDxhIGhyZWY9XCIjZGV2dG9vbHMtcG9ja2V0XCI+UG9ja2V0PC9hPlxuICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgPGEgaHJlZj1cIiNkZXZ0b29scy1kc1wiPkRpc2NvdmVyeSBTdHJlYW08L2E+XG4gICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICA8YSBocmVmPVwiI2RldnRvb2xzLWVycm9yc1wiPkVycm9yczwvYT5cbiAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgPC91bD5cbiAgICAgICAgPC9hc2lkZT5cbiAgICAgICAgPG1haW4gY2xhc3NOYW1lPVwibWFpbi1wYW5lbFwiPlxuICAgICAgICAgIDxoMT5BUyBSb3V0ZXIgQWRtaW48L2gxPlxuXG4gICAgICAgICAgPHAgY2xhc3NOYW1lPVwiaGVscExpbmtcIj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImljb24gaWNvbi1zbWFsbC1zcGFjZXIgaWNvbi1pbmZvXCIgLz57XCIgXCJ9XG4gICAgICAgICAgICA8c3Bhbj5cbiAgICAgICAgICAgICAgTmVlZCBoZWxwIHVzaW5nIHRoZXNlIHRvb2xzPyBDaGVjayBvdXQgb3Vye1wiIFwifVxuICAgICAgICAgICAgICA8YVxuICAgICAgICAgICAgICAgIHRhcmdldD1cImJsYW5rXCJcbiAgICAgICAgICAgICAgICBocmVmPVwiaHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvYWN0aXZpdHktc3RyZWFtL2Jsb2IvbWFzdGVyL2NvbnRlbnQtc3JjL2Fzcm91dGVyL2RvY3MvZGVidWdnaW5nLWRvY3MubWRcIlxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgZG9jdW1lbnRhdGlvblxuICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgPC9wPlxuXG4gICAgICAgICAge3RoaXMuZ2V0U2VjdGlvbigpfVxuICAgICAgICA8L21haW4+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDb2xsYXBzZVRvZ2dsZSBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLm9uQ29sbGFwc2VUb2dnbGUgPSB0aGlzLm9uQ29sbGFwc2VUb2dnbGUuYmluZCh0aGlzKTtcbiAgICB0aGlzLnN0YXRlID0geyBjb2xsYXBzZWQ6IGZhbHNlIH07XG4gIH1cblxuICBnZXQgcmVuZGVyQWRtaW4oKSB7XG4gICAgY29uc3QgeyBwcm9wcyB9ID0gdGhpcztcbiAgICByZXR1cm4gKFxuICAgICAgcHJvcHMubG9jYXRpb24uaGFzaCAmJlxuICAgICAgKHByb3BzLmxvY2F0aW9uLmhhc2guc3RhcnRzV2l0aChcIiNhc3JvdXRlclwiKSB8fFxuICAgICAgICBwcm9wcy5sb2NhdGlvbi5oYXNoLnN0YXJ0c1dpdGgoXCIjZGV2dG9vbHNcIikpXG4gICAgKTtcbiAgfVxuXG4gIG9uQ29sbGFwc2VUb2dnbGUoZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB0aGlzLnNldFN0YXRlKHN0YXRlID0+ICh7IGNvbGxhcHNlZDogIXN0YXRlLmNvbGxhcHNlZCB9KSk7XG4gIH1cblxuICBzZXRCb2R5Q2xhc3MoKSB7XG4gICAgaWYgKHRoaXMucmVuZGVyQWRtaW4gJiYgIXRoaXMuc3RhdGUuY29sbGFwc2VkKSB7XG4gICAgICBnbG9iYWwuZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKFwibm8tc2Nyb2xsXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnbG9iYWwuZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKFwibm8tc2Nyb2xsXCIpO1xuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMuc2V0Qm9keUNsYXNzKCk7XG4gIH1cblxuICBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgdGhpcy5zZXRCb2R5Q2xhc3MoKTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIGdsb2JhbC5kb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoXCJuby1zY3JvbGxcIik7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBwcm9wcyB9ID0gdGhpcztcbiAgICBjb25zdCB7IHJlbmRlckFkbWluIH0gPSB0aGlzO1xuICAgIGNvbnN0IGlzQ29sbGFwc2VkID0gdGhpcy5zdGF0ZS5jb2xsYXBzZWQgfHwgIXJlbmRlckFkbWluO1xuICAgIGNvbnN0IGxhYmVsID0gYCR7aXNDb2xsYXBzZWQgPyBcIkV4cGFuZFwiIDogXCJDb2xsYXBzZVwifSBkZXZ0b29sc2A7XG4gICAgcmV0dXJuIChcbiAgICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgICAgPGFcbiAgICAgICAgICBocmVmPVwiI2RldnRvb2xzXCJcbiAgICAgICAgICB0aXRsZT17bGFiZWx9XG4gICAgICAgICAgYXJpYS1sYWJlbD17bGFiZWx9XG4gICAgICAgICAgY2xhc3NOYW1lPXtgYXNyb3V0ZXItdG9nZ2xlICR7XG4gICAgICAgICAgICBpc0NvbGxhcHNlZCA/IFwiY29sbGFwc2VkXCIgOiBcImV4cGFuZGVkXCJcbiAgICAgICAgICB9YH1cbiAgICAgICAgICBvbkNsaWNrPXt0aGlzLnJlbmRlckFkbWluID8gdGhpcy5vbkNvbGxhcHNlVG9nZ2xlIDogbnVsbH1cbiAgICAgICAgPlxuICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImljb24gaWNvbi1kZXZ0b29sc1wiIC8+XG4gICAgICAgIDwvYT5cbiAgICAgICAge3JlbmRlckFkbWluID8gKFxuICAgICAgICAgIDxBU1JvdXRlckFkbWluSW5uZXIgey4uLnByb3BzfSBjb2xsYXBzZWQ9e3RoaXMuc3RhdGUuY29sbGFwc2VkfSAvPlxuICAgICAgICApIDogbnVsbH1cbiAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gICAgKTtcbiAgfVxufVxuXG5jb25zdCBfQVNSb3V0ZXJBZG1pbiA9IHByb3BzID0+IChcbiAgPFNpbXBsZUhhc2hSb3V0ZXI+XG4gICAgPENvbGxhcHNlVG9nZ2xlIHsuLi5wcm9wc30gLz5cbiAgPC9TaW1wbGVIYXNoUm91dGVyPlxuKTtcblxuZXhwb3J0IGNvbnN0IEFTUm91dGVyQWRtaW4gPSBjb25uZWN0KHN0YXRlID0+ICh7XG4gIFNlY3Rpb25zOiBzdGF0ZS5TZWN0aW9ucyxcbiAgRGlzY292ZXJ5U3RyZWFtOiBzdGF0ZS5EaXNjb3ZlcnlTdHJlYW0sXG4gIFByZWZzOiBzdGF0ZS5QcmVmcyxcbn0pKShfQVNSb3V0ZXJBZG1pbik7XG4iLCIvKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIGZpbGUsXG4gKiBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLiAqL1xuXG5pbXBvcnQgeyBhY3Rpb25DcmVhdG9ycyBhcyBhYyB9IGZyb20gXCJjb21tb24vQWN0aW9ucy5qc21cIjtcbmltcG9ydCB7IE9VVEdPSU5HX01FU1NBR0VfTkFNRSBhcyBBU19HRU5FUkFMX09VVEdPSU5HX01FU1NBR0VfTkFNRSB9IGZyb20gXCJjb250ZW50LXNyYy9saWIvaW5pdC1zdG9yZVwiO1xuaW1wb3J0IHsgZ2VuZXJhdGVCdW5kbGVzIH0gZnJvbSBcIi4vcmljaC10ZXh0LXN0cmluZ3NcIjtcbmltcG9ydCB7IEltcHJlc3Npb25zV3JhcHBlciB9IGZyb20gXCIuL2NvbXBvbmVudHMvSW1wcmVzc2lvbnNXcmFwcGVyL0ltcHJlc3Npb25zV3JhcHBlclwiO1xuaW1wb3J0IHsgTG9jYWxpemF0aW9uUHJvdmlkZXIgfSBmcm9tIFwiZmx1ZW50LXJlYWN0XCI7XG5pbXBvcnQgeyBORVdUQUJfREFSS19USEVNRSB9IGZyb20gXCJjb250ZW50LXNyYy9saWIvY29uc3RhbnRzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUmVhY3RET00gZnJvbSBcInJlYWN0LWRvbVwiO1xuaW1wb3J0IHsgU25pcHBldHNUZW1wbGF0ZXMgfSBmcm9tIFwiLi90ZW1wbGF0ZXMvdGVtcGxhdGUtbWFuaWZlc3RcIjtcbmltcG9ydCB7IEZpcnN0UnVuIH0gZnJvbSBcIi4vdGVtcGxhdGVzL0ZpcnN0UnVuL0ZpcnN0UnVuXCI7XG5cbmNvbnN0IElOQ09NSU5HX01FU1NBR0VfTkFNRSA9IFwiQVNSb3V0ZXI6cGFyZW50LXRvLWNoaWxkXCI7XG5jb25zdCBPVVRHT0lOR19NRVNTQUdFX05BTUUgPSBcIkFTUm91dGVyOmNoaWxkLXRvLXBhcmVudFwiO1xuY29uc3QgVEVNUExBVEVTX0FCT1ZFX1BBR0UgPSBbXG4gIFwidHJhaWxoZWFkXCIsXG4gIFwiZnhhX292ZXJsYXlcIixcbiAgXCJyZXR1cm5fdG9fYW1vX292ZXJsYXlcIixcbl07XG5jb25zdCBGSVJTVF9SVU5fVEVNUExBVEVTID0gVEVNUExBVEVTX0FCT1ZFX1BBR0U7XG5jb25zdCBURU1QTEFURVNfQkVMT1dfU0VBUkNIID0gW1wic2ltcGxlX2JlbG93X3NlYXJjaF9zbmlwcGV0XCJdO1xuXG5leHBvcnQgY29uc3QgQVNSb3V0ZXJVdGlscyA9IHtcbiAgYWRkTGlzdGVuZXIobGlzdGVuZXIpIHtcbiAgICBpZiAoZ2xvYmFsLlJQTUFkZE1lc3NhZ2VMaXN0ZW5lcikge1xuICAgICAgZ2xvYmFsLlJQTUFkZE1lc3NhZ2VMaXN0ZW5lcihJTkNPTUlOR19NRVNTQUdFX05BTUUsIGxpc3RlbmVyKTtcbiAgICB9XG4gIH0sXG4gIHJlbW92ZUxpc3RlbmVyKGxpc3RlbmVyKSB7XG4gICAgaWYgKGdsb2JhbC5SUE1SZW1vdmVNZXNzYWdlTGlzdGVuZXIpIHtcbiAgICAgIGdsb2JhbC5SUE1SZW1vdmVNZXNzYWdlTGlzdGVuZXIoSU5DT01JTkdfTUVTU0FHRV9OQU1FLCBsaXN0ZW5lcik7XG4gICAgfVxuICB9LFxuICBzZW5kTWVzc2FnZShhY3Rpb24pIHtcbiAgICBpZiAoZ2xvYmFsLlJQTVNlbmRBc3luY01lc3NhZ2UpIHtcbiAgICAgIGdsb2JhbC5SUE1TZW5kQXN5bmNNZXNzYWdlKE9VVEdPSU5HX01FU1NBR0VfTkFNRSwgYWN0aW9uKTtcbiAgICB9XG4gIH0sXG4gIGJsb2NrQnlJZChpZCwgb3B0aW9ucykge1xuICAgIEFTUm91dGVyVXRpbHMuc2VuZE1lc3NhZ2Uoe1xuICAgICAgdHlwZTogXCJCTE9DS19NRVNTQUdFX0JZX0lEXCIsXG4gICAgICBkYXRhOiB7IGlkLCAuLi5vcHRpb25zIH0sXG4gICAgfSk7XG4gIH0sXG4gIGRpc21pc3NCeUlkKGlkKSB7XG4gICAgQVNSb3V0ZXJVdGlscy5zZW5kTWVzc2FnZSh7IHR5cGU6IFwiRElTTUlTU19NRVNTQUdFX0JZX0lEXCIsIGRhdGE6IHsgaWQgfSB9KTtcbiAgfSxcbiAgZXhlY3V0ZUFjdGlvbihidXR0b25fYWN0aW9uKSB7XG4gICAgQVNSb3V0ZXJVdGlscy5zZW5kTWVzc2FnZSh7XG4gICAgICB0eXBlOiBcIlVTRVJfQUNUSU9OXCIsXG4gICAgICBkYXRhOiBidXR0b25fYWN0aW9uLFxuICAgIH0pO1xuICB9LFxuICB1bmJsb2NrQnlJZChpZCkge1xuICAgIEFTUm91dGVyVXRpbHMuc2VuZE1lc3NhZ2UoeyB0eXBlOiBcIlVOQkxPQ0tfTUVTU0FHRV9CWV9JRFwiLCBkYXRhOiB7IGlkIH0gfSk7XG4gIH0sXG4gIHVuYmxvY2tCdW5kbGUoYnVuZGxlKSB7XG4gICAgQVNSb3V0ZXJVdGlscy5zZW5kTWVzc2FnZSh7IHR5cGU6IFwiVU5CTE9DS19CVU5ETEVcIiwgZGF0YTogeyBidW5kbGUgfSB9KTtcbiAgfSxcbiAgb3ZlcnJpZGVNZXNzYWdlKGlkKSB7XG4gICAgQVNSb3V0ZXJVdGlscy5zZW5kTWVzc2FnZSh7IHR5cGU6IFwiT1ZFUlJJREVfTUVTU0FHRVwiLCBkYXRhOiB7IGlkIH0gfSk7XG4gIH0sXG4gIHNlbmRUZWxlbWV0cnkocGluZykge1xuICAgIGlmIChnbG9iYWwuUlBNU2VuZEFzeW5jTWVzc2FnZSkge1xuICAgICAgY29uc3QgcGF5bG9hZCA9IGFjLkFTUm91dGVyVXNlckV2ZW50KHBpbmcpO1xuICAgICAgZ2xvYmFsLlJQTVNlbmRBc3luY01lc3NhZ2UoQVNfR0VORVJBTF9PVVRHT0lOR19NRVNTQUdFX05BTUUsIHBheWxvYWQpO1xuICAgIH1cbiAgfSxcbiAgZ2V0UHJldmlld0VuZHBvaW50KCkge1xuICAgIGlmIChnbG9iYWwubG9jYXRpb24gJiYgZ2xvYmFsLmxvY2F0aW9uLmhyZWYuaW5jbHVkZXMoXCJlbmRwb2ludFwiKSkge1xuICAgICAgY29uc3QgcGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyhcbiAgICAgICAgZ2xvYmFsLmxvY2F0aW9uLmhyZWYuc2xpY2UoZ2xvYmFsLmxvY2F0aW9uLmhyZWYuaW5kZXhPZihcImVuZHBvaW50XCIpKVxuICAgICAgKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGVuZHBvaW50ID0gbmV3IFVSTChwYXJhbXMuZ2V0KFwiZW5kcG9pbnRcIikpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHVybDogZW5kcG9pbnQuaHJlZixcbiAgICAgICAgICBzbmlwcGV0SWQ6IHBhcmFtcy5nZXQoXCJzbmlwcGV0SWRcIiksXG4gICAgICAgICAgdGhlbWU6IHRoaXMuZ2V0UHJldmlld1RoZW1lKCksXG4gICAgICAgIH07XG4gICAgICB9IGNhdGNoIChlKSB7fVxuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9LFxuICBnZXRQcmV2aWV3VGhlbWUoKSB7XG4gICAgcmV0dXJuIG5ldyBVUkxTZWFyY2hQYXJhbXMoXG4gICAgICBnbG9iYWwubG9jYXRpb24uaHJlZi5zbGljZShnbG9iYWwubG9jYXRpb24uaHJlZi5pbmRleE9mKFwidGhlbWVcIikpXG4gICAgKS5nZXQoXCJ0aGVtZVwiKTtcbiAgfSxcbn07XG5cbi8vIE5vdGU6IG5leHRQcm9wcy9wcmV2UHJvcHMgcmVmZXIgdG8gcHJvcHMgcGFzc2VkIHRvIDxJbXByZXNzaW9uc1dyYXBwZXIgLz4sIG5vdCA8QVNSb3V0ZXJVSVN1cmZhY2UgLz5cbmZ1bmN0aW9uIHNob3VsZFNlbmRJbXByZXNzaW9uT25VcGRhdGUobmV4dFByb3BzLCBwcmV2UHJvcHMpIHtcbiAgcmV0dXJuIChcbiAgICBuZXh0UHJvcHMubWVzc2FnZS5pZCAmJlxuICAgICghcHJldlByb3BzLm1lc3NhZ2UgfHwgcHJldlByb3BzLm1lc3NhZ2UuaWQgIT09IG5leHRQcm9wcy5tZXNzYWdlLmlkKVxuICApO1xufVxuXG5leHBvcnQgY2xhc3MgQVNSb3V0ZXJVSVN1cmZhY2UgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5vbk1lc3NhZ2VGcm9tUGFyZW50ID0gdGhpcy5vbk1lc3NhZ2VGcm9tUGFyZW50LmJpbmQodGhpcyk7XG4gICAgdGhpcy5zZW5kQ2xpY2sgPSB0aGlzLnNlbmRDbGljay5iaW5kKHRoaXMpO1xuICAgIHRoaXMuc2VuZEltcHJlc3Npb24gPSB0aGlzLnNlbmRJbXByZXNzaW9uLmJpbmQodGhpcyk7XG4gICAgdGhpcy5zZW5kVXNlckFjdGlvblRlbGVtZXRyeSA9IHRoaXMuc2VuZFVzZXJBY3Rpb25UZWxlbWV0cnkuYmluZCh0aGlzKTtcbiAgICB0aGlzLnN0YXRlID0geyBtZXNzYWdlOiB7fSB9O1xuICAgIGlmIChwcm9wcy5kb2N1bWVudCkge1xuICAgICAgdGhpcy5oZWFkZXJQb3J0YWwgPSBwcm9wcy5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChcbiAgICAgICAgXCJoZWFkZXItYXNyb3V0ZXItY29udGFpbmVyXCJcbiAgICAgICk7XG4gICAgICB0aGlzLmZvb3RlclBvcnRhbCA9IHByb3BzLmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxuICAgICAgICBcImZvb3Rlci1hc3JvdXRlci1jb250YWluZXJcIlxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBzZW5kVXNlckFjdGlvblRlbGVtZXRyeShleHRyYVByb3BzID0ge30pIHtcbiAgICBjb25zdCB7IG1lc3NhZ2UgfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgZXZlbnRUeXBlID0gYCR7bWVzc2FnZS5wcm92aWRlcn1fdXNlcl9ldmVudGA7XG4gICAgQVNSb3V0ZXJVdGlscy5zZW5kVGVsZW1ldHJ5KHtcbiAgICAgIG1lc3NhZ2VfaWQ6IG1lc3NhZ2UuaWQsXG4gICAgICBzb3VyY2U6IGV4dHJhUHJvcHMuaWQsXG4gICAgICBhY3Rpb246IGV2ZW50VHlwZSxcbiAgICAgIC4uLmV4dHJhUHJvcHMsXG4gICAgfSk7XG4gIH1cblxuICBzZW5kSW1wcmVzc2lvbihleHRyYVByb3BzKSB7XG4gICAgaWYgKHRoaXMuc3RhdGUubWVzc2FnZS5wcm92aWRlciA9PT0gXCJwcmV2aWV3XCIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBBU1JvdXRlclV0aWxzLnNlbmRNZXNzYWdlKHsgdHlwZTogXCJJTVBSRVNTSU9OXCIsIGRhdGE6IHRoaXMuc3RhdGUubWVzc2FnZSB9KTtcbiAgICB0aGlzLnNlbmRVc2VyQWN0aW9uVGVsZW1ldHJ5KHsgZXZlbnQ6IFwiSU1QUkVTU0lPTlwiLCAuLi5leHRyYVByb3BzIH0pO1xuICB9XG5cbiAgLy8gSWYgbGluayBoYXMgYSBgbWV0cmljYCBkYXRhIGF0dHJpYnV0ZSBzZW5kIGl0IGFzIHBhcnQgb2YgdGhlIGB2YWx1ZWBcbiAgLy8gdGVsZW1ldHJ5IGZpZWxkIHdoaWNoIGNhbiBoYXZlIGFyYml0cmFyeSB2YWx1ZXMuXG4gIC8vIFVzZWQgZm9yIHJvdXRlciBtZXNzYWdlcyB3aXRoIGxpbmtzIGFzIHBhcnQgb2YgdGhlIGNvbnRlbnQuXG4gIHNlbmRDbGljayhldmVudCkge1xuICAgIGNvbnN0IG1ldHJpYyA9IHtcbiAgICAgIHZhbHVlOiBldmVudC50YXJnZXQuZGF0YXNldC5tZXRyaWMsXG4gICAgICAvLyBVc2VkIGZvciB0aGUgYHNvdXJjZWAgb2YgdGhlIGV2ZW50LiBOZWVkZWQgdG8gZGlmZmVyZW50aWF0ZVxuICAgICAgLy8gZnJvbSBvdGhlciBzbmlwcGV0IG9yIG9uYm9hcmRpbmcgZXZlbnRzIHRoYXQgbWF5IG9jY3VyLlxuICAgICAgaWQ6IFwiTkVXVEFCX0ZPT1RFUl9CQVJfQ09OVEVOVFwiLFxuICAgIH07XG4gICAgY29uc3QgYWN0aW9uID0ge1xuICAgICAgdHlwZTogZXZlbnQudGFyZ2V0LmRhdGFzZXQuYWN0aW9uLFxuICAgICAgZGF0YTogeyBhcmdzOiBldmVudC50YXJnZXQuZGF0YXNldC5hcmdzIH0sXG4gICAgfTtcbiAgICBpZiAoYWN0aW9uLnR5cGUpIHtcbiAgICAgIEFTUm91dGVyVXRpbHMuZXhlY3V0ZUFjdGlvbihhY3Rpb24pO1xuICAgIH1cbiAgICBpZiAoXG4gICAgICAhdGhpcy5zdGF0ZS5tZXNzYWdlLmNvbnRlbnQuZG9fbm90X2F1dG9ibG9jayAmJlxuICAgICAgIWV2ZW50LnRhcmdldC5kYXRhc2V0LmRvX25vdF9hdXRvYmxvY2tcbiAgICApIHtcbiAgICAgIEFTUm91dGVyVXRpbHMuYmxvY2tCeUlkKHRoaXMuc3RhdGUubWVzc2FnZS5pZCk7XG4gICAgfVxuICAgIGlmICh0aGlzLnN0YXRlLm1lc3NhZ2UucHJvdmlkZXIgIT09IFwicHJldmlld1wiKSB7XG4gICAgICB0aGlzLnNlbmRVc2VyQWN0aW9uVGVsZW1ldHJ5KHsgZXZlbnQ6IFwiQ0xJQ0tfQlVUVE9OXCIsIC4uLm1ldHJpYyB9KTtcbiAgICB9XG4gIH1cblxuICBvbkJsb2NrQnlJZChpZCkge1xuICAgIHJldHVybiBvcHRpb25zID0+IEFTUm91dGVyVXRpbHMuYmxvY2tCeUlkKGlkLCBvcHRpb25zKTtcbiAgfVxuXG4gIG9uRGlzbWlzc0J5SWQoaWQpIHtcbiAgICByZXR1cm4gKCkgPT4gQVNSb3V0ZXJVdGlscy5kaXNtaXNzQnlJZChpZCk7XG4gIH1cblxuICBjbGVhck1lc3NhZ2UoaWQpIHtcbiAgICBpZiAoaWQgPT09IHRoaXMuc3RhdGUubWVzc2FnZS5pZCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IG1lc3NhZ2U6IHt9IH0pO1xuICAgICAgLy8gUmVtb3ZlIGFueSBzdHlsZXMgcmVsYXRlZCB0byB0aGUgUlRBTU8gbWVzc2FnZVxuICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKFwid2VsY29tZVwiLCBcImhpZGUtbWFpblwiLCBcImFtb1wiKTtcbiAgICB9XG4gIH1cblxuICBvbk1lc3NhZ2VGcm9tUGFyZW50KHsgZGF0YTogYWN0aW9uIH0pIHtcbiAgICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgICBjYXNlIFwiU0VUX01FU1NBR0VcIjpcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IG1lc3NhZ2U6IGFjdGlvbi5kYXRhIH0pO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJDTEVBUl9NRVNTQUdFXCI6XG4gICAgICAgIHRoaXMuY2xlYXJNZXNzYWdlKGFjdGlvbi5kYXRhLmlkKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiQ0xFQVJfUFJPVklERVJcIjpcbiAgICAgICAgaWYgKGFjdGlvbi5kYXRhLmlkID09PSB0aGlzLnN0YXRlLm1lc3NhZ2UucHJvdmlkZXIpIHtcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgbWVzc2FnZToge30gfSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiQ0xFQVJfQUxMXCI6XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBtZXNzYWdlOiB7fSB9KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiQVNfUk9VVEVSX1RBUkdFVElOR19VUERBVEVcIjpcbiAgICAgICAgYWN0aW9uLmRhdGEuZm9yRWFjaChpZCA9PiB0aGlzLmNsZWFyTWVzc2FnZShpZCkpO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgY29uc3QgZW5kcG9pbnQgPSBBU1JvdXRlclV0aWxzLmdldFByZXZpZXdFbmRwb2ludCgpO1xuICAgIGlmIChlbmRwb2ludCAmJiBlbmRwb2ludC50aGVtZSA9PT0gXCJkYXJrXCIpIHtcbiAgICAgIGdsb2JhbC53aW5kb3cuZGlzcGF0Y2hFdmVudChcbiAgICAgICAgbmV3IEN1c3RvbUV2ZW50KFwiTGlnaHR3ZWlnaHRUaGVtZTpTZXRcIiwge1xuICAgICAgICAgIGRldGFpbDogeyBkYXRhOiBORVdUQUJfREFSS19USEVNRSB9LFxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9XG4gICAgQVNSb3V0ZXJVdGlscy5hZGRMaXN0ZW5lcih0aGlzLm9uTWVzc2FnZUZyb21QYXJlbnQpO1xuXG4gICAgLy8gSWYgd2UgYXJlIGxvYWRpbmcgYWJvdXQ6d2VsY29tZSB3ZSB3YW50IHRvIHRyaWdnZXIgdGhlIG9uYm9hcmRpbmcgbWVzc2FnZXNcbiAgICBpZiAoXG4gICAgICB0aGlzLnByb3BzLmRvY3VtZW50ICYmXG4gICAgICB0aGlzLnByb3BzLmRvY3VtZW50LmxvY2F0aW9uLmhyZWYgPT09IFwiYWJvdXQ6d2VsY29tZVwiXG4gICAgKSB7XG4gICAgICBBU1JvdXRlclV0aWxzLnNlbmRNZXNzYWdlKHtcbiAgICAgICAgdHlwZTogXCJUUklHR0VSXCIsXG4gICAgICAgIGRhdGE6IHsgdHJpZ2dlcjogeyBpZDogXCJmaXJzdFJ1blwiIH0gfSxcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBBU1JvdXRlclV0aWxzLnNlbmRNZXNzYWdlKHtcbiAgICAgICAgdHlwZTogXCJTTklQUEVUU19SRVFVRVNUXCIsXG4gICAgICAgIGRhdGE6IHsgZW5kcG9pbnQgfSxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIEFTUm91dGVyVXRpbHMucmVtb3ZlTGlzdGVuZXIodGhpcy5vbk1lc3NhZ2VGcm9tUGFyZW50KTtcbiAgfVxuXG4gIHJlbmRlclNuaXBwZXRzKCkge1xuICAgIGNvbnN0IHsgbWVzc2FnZSB9ID0gdGhpcy5zdGF0ZTtcbiAgICBpZiAoIVNuaXBwZXRzVGVtcGxhdGVzW21lc3NhZ2UudGVtcGxhdGVdKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgU25pcHBldENvbXBvbmVudCA9IFNuaXBwZXRzVGVtcGxhdGVzW21lc3NhZ2UudGVtcGxhdGVdO1xuICAgIGNvbnN0IHsgY29udGVudCB9ID0gdGhpcy5zdGF0ZS5tZXNzYWdlO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxJbXByZXNzaW9uc1dyYXBwZXJcbiAgICAgICAgaWQ9XCJORVdUQUJfRk9PVEVSX0JBUlwiXG4gICAgICAgIG1lc3NhZ2U9e3RoaXMuc3RhdGUubWVzc2FnZX1cbiAgICAgICAgc2VuZEltcHJlc3Npb249e3RoaXMuc2VuZEltcHJlc3Npb259XG4gICAgICAgIHNob3VsZFNlbmRJbXByZXNzaW9uT25VcGRhdGU9e3Nob3VsZFNlbmRJbXByZXNzaW9uT25VcGRhdGV9XG4gICAgICAgIC8vIFRoaXMgaGVscHMgd2l0aCB0ZXN0aW5nXG4gICAgICAgIGRvY3VtZW50PXt0aGlzLnByb3BzLmRvY3VtZW50fVxuICAgICAgPlxuICAgICAgICA8TG9jYWxpemF0aW9uUHJvdmlkZXIgYnVuZGxlcz17Z2VuZXJhdGVCdW5kbGVzKGNvbnRlbnQpfT5cbiAgICAgICAgICA8U25pcHBldENvbXBvbmVudFxuICAgICAgICAgICAgey4uLnRoaXMuc3RhdGUubWVzc2FnZX1cbiAgICAgICAgICAgIFVJU3VyZmFjZT1cIk5FV1RBQl9GT09URVJfQkFSXCJcbiAgICAgICAgICAgIG9uQmxvY2s9e3RoaXMub25CbG9ja0J5SWQodGhpcy5zdGF0ZS5tZXNzYWdlLmlkKX1cbiAgICAgICAgICAgIG9uRGlzbWlzcz17dGhpcy5vbkRpc21pc3NCeUlkKHRoaXMuc3RhdGUubWVzc2FnZS5pZCl9XG4gICAgICAgICAgICBvbkFjdGlvbj17QVNSb3V0ZXJVdGlscy5leGVjdXRlQWN0aW9ufVxuICAgICAgICAgICAgc2VuZENsaWNrPXt0aGlzLnNlbmRDbGlja31cbiAgICAgICAgICAgIHNlbmRVc2VyQWN0aW9uVGVsZW1ldHJ5PXt0aGlzLnNlbmRVc2VyQWN0aW9uVGVsZW1ldHJ5fVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvTG9jYWxpemF0aW9uUHJvdmlkZXI+XG4gICAgICA8L0ltcHJlc3Npb25zV3JhcHBlcj5cbiAgICApO1xuICB9XG5cbiAgcmVuZGVyUHJldmlld0Jhbm5lcigpIHtcbiAgICBpZiAodGhpcy5zdGF0ZS5tZXNzYWdlLnByb3ZpZGVyICE9PSBcInByZXZpZXdcIikge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwic25pcHBldHMtcHJldmlldy1iYW5uZXJcIj5cbiAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiaWNvbiBpY29uLXNtYWxsLXNwYWNlciBpY29uLWluZm9cIiAvPlxuICAgICAgICA8c3Bhbj5QcmV2aWV3IFB1cnBvc2VzIE9ubHk8L3NwYW4+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG5cbiAgcmVuZGVyRmlyc3RSdW4oKSB7XG4gICAgY29uc3QgeyBtZXNzYWdlIH0gPSB0aGlzLnN0YXRlO1xuICAgIGlmIChGSVJTVF9SVU5fVEVNUExBVEVTLmluY2x1ZGVzKG1lc3NhZ2UudGVtcGxhdGUpKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8Rmlyc3RSdW5cbiAgICAgICAgICBkb2N1bWVudD17dGhpcy5wcm9wcy5kb2N1bWVudH1cbiAgICAgICAgICBtZXNzYWdlPXttZXNzYWdlfVxuICAgICAgICAgIHNlbmRVc2VyQWN0aW9uVGVsZW1ldHJ5PXt0aGlzLnNlbmRVc2VyQWN0aW9uVGVsZW1ldHJ5fVxuICAgICAgICAgIGV4ZWN1dGVBY3Rpb249e0FTUm91dGVyVXRpbHMuZXhlY3V0ZUFjdGlvbn1cbiAgICAgICAgICBkaXNwYXRjaD17dGhpcy5wcm9wcy5kaXNwYXRjaH1cbiAgICAgICAgICBvbkRpc21pc3M9e3RoaXMub25EaXNtaXNzQnlJZCh0aGlzLnN0YXRlLm1lc3NhZ2UuaWQpfVxuICAgICAgICAgIGZ4YUVuZHBvaW50PXt0aGlzLnByb3BzLmZ4YUVuZHBvaW50fVxuICAgICAgICAvPlxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBtZXNzYWdlIH0gPSB0aGlzLnN0YXRlO1xuICAgIGlmICghbWVzc2FnZS5pZCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IHNob3VsZFJlbmRlckJlbG93U2VhcmNoID0gVEVNUExBVEVTX0JFTE9XX1NFQVJDSC5pbmNsdWRlcyhcbiAgICAgIG1lc3NhZ2UudGVtcGxhdGVcbiAgICApO1xuICAgIGNvbnN0IHNob3VsZFJlbmRlckluSGVhZGVyID0gVEVNUExBVEVTX0FCT1ZFX1BBR0UuaW5jbHVkZXMoXG4gICAgICBtZXNzYWdlLnRlbXBsYXRlXG4gICAgKTtcblxuICAgIHJldHVybiBzaG91bGRSZW5kZXJCZWxvd1NlYXJjaCA/IChcbiAgICAgIC8vIFJlbmRlciBzcGVjaWFsIGJlbG93IHNlYXJjaCBzbmlwcGV0cyBpbiBwbGFjZTtcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYmVsb3ctc2VhcmNoLXNuaXBwZXRcIj57dGhpcy5yZW5kZXJTbmlwcGV0cygpfTwvZGl2PlxuICAgICkgOiAoXG4gICAgICAvLyBGb3Igb25ib2FyZGluZywgcmVndWxhciBzbmlwcGV0cyBldGMuIHdlIHNob3VsZCByZW5kZXJcbiAgICAgIC8vIGV2ZXJ5dGhpbmcgaW4gb3VyIGZvb3RlciBjb250YWluZXIuXG4gICAgICBSZWFjdERPTS5jcmVhdGVQb3J0YWwoXG4gICAgICAgIDw+XG4gICAgICAgICAge3RoaXMucmVuZGVyUHJldmlld0Jhbm5lcigpfVxuICAgICAgICAgIHt0aGlzLnJlbmRlckZpcnN0UnVuKCl9XG4gICAgICAgICAge3RoaXMucmVuZGVyU25pcHBldHMoKX1cbiAgICAgICAgPC8+LFxuICAgICAgICBzaG91bGRSZW5kZXJJbkhlYWRlciA/IHRoaXMuaGVhZGVyUG9ydGFsIDogdGhpcy5mb290ZXJQb3J0YWxcbiAgICAgIClcbiAgICApO1xuICB9XG59XG5cbkFTUm91dGVyVUlTdXJmYWNlLmRlZmF1bHRQcm9wcyA9IHsgZG9jdW1lbnQ6IGdsb2JhbC5kb2N1bWVudCB9O1xuIiwiLyogVGhpcyBTb3VyY2UgQ29kZSBGb3JtIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBNb3ppbGxhIFB1YmxpY1xuICogTGljZW5zZSwgdi4gMi4wLiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBmaWxlLFxuICogWW91IGNhbiBvYnRhaW4gb25lIGF0IGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy4gKi9cblxuLyogZXNsaW50LWVudiBtb3ppbGxhL2ZyYW1lLXNjcmlwdCAqL1xuXG5pbXBvcnQge1xuICBhY3Rpb25DcmVhdG9ycyBhcyBhYyxcbiAgYWN0aW9uVHlwZXMgYXMgYXQsXG4gIGFjdGlvblV0aWxzIGFzIGF1LFxufSBmcm9tIFwiY29tbW9uL0FjdGlvbnMuanNtXCI7XG5pbXBvcnQgeyBhcHBseU1pZGRsZXdhcmUsIGNvbWJpbmVSZWR1Y2VycywgY3JlYXRlU3RvcmUgfSBmcm9tIFwicmVkdXhcIjtcblxuZXhwb3J0IGNvbnN0IE1FUkdFX1NUT1JFX0FDVElPTiA9IFwiTkVXX1RBQl9JTklUSUFMX1NUQVRFXCI7XG5leHBvcnQgY29uc3QgT1VUR09JTkdfTUVTU0FHRV9OQU1FID0gXCJBY3Rpdml0eVN0cmVhbTpDb250ZW50VG9NYWluXCI7XG5leHBvcnQgY29uc3QgSU5DT01JTkdfTUVTU0FHRV9OQU1FID0gXCJBY3Rpdml0eVN0cmVhbTpNYWluVG9Db250ZW50XCI7XG5leHBvcnQgY29uc3QgRUFSTFlfUVVFVUVEX0FDVElPTlMgPSBbYXQuU0FWRV9TRVNTSU9OX1BFUkZfREFUQV07XG5cbi8qKlxuICogQSBoaWdoZXItb3JkZXIgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhIHJlZHVjZXIgdGhhdCwgb24gTUVSR0VfU1RPUkUgYWN0aW9uLFxuICogd2lsbCByZXR1cm4gdGhlIGFjdGlvbi5kYXRhIG9iamVjdCBtZXJnZWQgaW50byB0aGUgcHJldmlvdXMgc3RhdGUuXG4gKlxuICogRm9yIGFsbCBvdGhlciBhY3Rpb25zLCBpdCBtZXJlbHkgY2FsbHMgbWFpblJlZHVjZXIuXG4gKlxuICogQmVjYXVzZSB3ZSB3YW50IHRoaXMgdG8gbWVyZ2UgdGhlIGVudGlyZSBzdGF0ZSBvYmplY3QsIGl0J3Mgd3JpdHRlbiBhcyBhXG4gKiBoaWdoZXIgb3JkZXIgZnVuY3Rpb24gd2hpY2ggdGFrZXMgdGhlIG1haW4gcmVkdWNlciAoaXRzZWxmIG9mdGVuIGEgY2FsbCB0b1xuICogY29tYmluZVJlZHVjZXJzKSBhcyBhIHBhcmFtZXRlci5cbiAqXG4gKiBAcGFyYW0gIHtmdW5jdGlvbn0gbWFpblJlZHVjZXIgcmVkdWNlciB0byBjYWxsIGlmIGFjdGlvbiAhPSBNRVJHRV9TVE9SRV9BQ1RJT05cbiAqIEByZXR1cm4ge2Z1bmN0aW9ufSAgICAgICAgICAgICBhIHJlZHVjZXIgdGhhdCwgb24gTUVSR0VfU1RPUkVfQUNUSU9OIGFjdGlvbixcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWxsIHJldHVybiB0aGUgYWN0aW9uLmRhdGEgb2JqZWN0IG1lcmdlZFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludG8gdGhlIHByZXZpb3VzIHN0YXRlLCBhbmQgdGhlIHJlc3VsdFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mIGNhbGxpbmcgbWFpblJlZHVjZXIgb3RoZXJ3aXNlLlxuICovXG5mdW5jdGlvbiBtZXJnZVN0YXRlUmVkdWNlcihtYWluUmVkdWNlcikge1xuICByZXR1cm4gKHByZXZTdGF0ZSwgYWN0aW9uKSA9PiB7XG4gICAgaWYgKGFjdGlvbi50eXBlID09PSBNRVJHRV9TVE9SRV9BQ1RJT04pIHtcbiAgICAgIHJldHVybiB7IC4uLnByZXZTdGF0ZSwgLi4uYWN0aW9uLmRhdGEgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWFpblJlZHVjZXIocHJldlN0YXRlLCBhY3Rpb24pO1xuICB9O1xufVxuXG4vKipcbiAqIG1lc3NhZ2VNaWRkbGV3YXJlIC0gTWlkZGxld2FyZSB0aGF0IGxvb2tzIGZvciBTZW50VG9NYWluIHR5cGUgYWN0aW9ucywgYW5kIHNlbmRzIHRoZW0gaWYgbmVjZXNzYXJ5XG4gKi9cbmNvbnN0IG1lc3NhZ2VNaWRkbGV3YXJlID0gc3RvcmUgPT4gbmV4dCA9PiBhY3Rpb24gPT4ge1xuICBjb25zdCBza2lwTG9jYWwgPSBhY3Rpb24ubWV0YSAmJiBhY3Rpb24ubWV0YS5za2lwTG9jYWw7XG4gIGlmIChhdS5pc1NlbmRUb01haW4oYWN0aW9uKSkge1xuICAgIFJQTVNlbmRBc3luY01lc3NhZ2UoT1VUR09JTkdfTUVTU0FHRV9OQU1FLCBhY3Rpb24pO1xuICB9XG4gIGlmICghc2tpcExvY2FsKSB7XG4gICAgbmV4dChhY3Rpb24pO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgcmVoeWRyYXRpb25NaWRkbGV3YXJlID0gc3RvcmUgPT4gbmV4dCA9PiBhY3Rpb24gPT4ge1xuICBpZiAoc3RvcmUuX2RpZFJlaHlkcmF0ZSkge1xuICAgIHJldHVybiBuZXh0KGFjdGlvbik7XG4gIH1cblxuICBjb25zdCBpc01lcmdlU3RvcmVBY3Rpb24gPSBhY3Rpb24udHlwZSA9PT0gTUVSR0VfU1RPUkVfQUNUSU9OO1xuICBjb25zdCBpc1JlaHlkcmF0aW9uUmVxdWVzdCA9IGFjdGlvbi50eXBlID09PSBhdC5ORVdfVEFCX1NUQVRFX1JFUVVFU1Q7XG5cbiAgaWYgKGlzUmVoeWRyYXRpb25SZXF1ZXN0KSB7XG4gICAgc3RvcmUuX2RpZFJlcXVlc3RJbml0aWFsU3RhdGUgPSB0cnVlO1xuICAgIHJldHVybiBuZXh0KGFjdGlvbik7XG4gIH1cblxuICBpZiAoaXNNZXJnZVN0b3JlQWN0aW9uKSB7XG4gICAgc3RvcmUuX2RpZFJlaHlkcmF0ZSA9IHRydWU7XG4gICAgcmV0dXJuIG5leHQoYWN0aW9uKTtcbiAgfVxuXG4gIC8vIElmIGluaXQgaGFwcGVuZWQgYWZ0ZXIgb3VyIHJlcXVlc3Qgd2FzIG1hZGUsIHdlIG5lZWQgdG8gcmUtcmVxdWVzdFxuICBpZiAoc3RvcmUuX2RpZFJlcXVlc3RJbml0aWFsU3RhdGUgJiYgYWN0aW9uLnR5cGUgPT09IGF0LklOSVQpIHtcbiAgICByZXR1cm4gbmV4dChhYy5BbHNvVG9NYWluKHsgdHlwZTogYXQuTkVXX1RBQl9TVEFURV9SRVFVRVNUIH0pKTtcbiAgfVxuXG4gIGlmIChcbiAgICBhdS5pc0Jyb2FkY2FzdFRvQ29udGVudChhY3Rpb24pIHx8XG4gICAgYXUuaXNTZW5kVG9PbmVDb250ZW50KGFjdGlvbikgfHxcbiAgICBhdS5pc1NlbmRUb1ByZWxvYWRlZChhY3Rpb24pXG4gICkge1xuICAgIC8vIE5vdGUgdGhhdCBhY3Rpb25zIHJlY2VpdmVkIGJlZm9yZSBkaWRSZWh5ZHJhdGUgd2lsbCBub3QgYmUgZGlzcGF0Y2hlZFxuICAgIC8vIGJlY2F1c2UgdGhpcyBjb3VsZCBuZWdhdGl2ZWx5IGFmZmVjdCBwcmVsb2FkaW5nIGFuZCB0aGUgdGhlIHN0YXRlXG4gICAgLy8gd2lsbCBiZSByZXBsYWNlZCBieSByZWh5ZHJhdGlvbiBhbnl3YXkuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gbmV4dChhY3Rpb24pO1xufTtcblxuLyoqXG4gKiBUaGlzIG1pZGRsZXdhcmUgcXVldWVzIHVwIGFsbCB0aGUgRUFSTFlfUVVFVUVEX0FDVElPTlMgdW50aWwgaXQgcmVjZWl2ZXNcbiAqIHRoZSBmaXJzdCBhY3Rpb24gZnJvbSBtYWluLiBUaGlzIGlzIHVzZWZ1bCBmb3IgdGhvc2UgYWN0aW9ucyBmb3IgbWFpbiB3aGljaFxuICogcmVxdWlyZSBoaWdoZXIgcmVsaWFiaWxpdHksIGkuZS4gdGhlIGFjdGlvbiB3aWxsIG5vdCBiZSBsb3N0IGluIHRoZSBjYXNlXG4gKiB0aGF0IGl0IGdldHMgc2VudCBiZWZvcmUgdGhlIG1haW4gaXMgcmVhZHkgdG8gcmVjZWl2ZSBpdC4gQ29udmVyc2VseSwgYW55XG4gKiBhY3Rpb25zIGFsbG93ZWQgZWFybHkgYXJlIGFjY2VwdGVkIHRvIGJlIGlnbm9yYWJsZSBvciByZS1zZW5kYWJsZS5cbiAqL1xuZXhwb3J0IGNvbnN0IHF1ZXVlRWFybHlNZXNzYWdlTWlkZGxld2FyZSA9IHN0b3JlID0+IG5leHQgPT4gYWN0aW9uID0+IHtcbiAgaWYgKHN0b3JlLl9yZWNlaXZlZEZyb21NYWluKSB7XG4gICAgbmV4dChhY3Rpb24pO1xuICB9IGVsc2UgaWYgKGF1LmlzRnJvbU1haW4oYWN0aW9uKSkge1xuICAgIG5leHQoYWN0aW9uKTtcbiAgICBzdG9yZS5fcmVjZWl2ZWRGcm9tTWFpbiA9IHRydWU7XG4gICAgLy8gU2VuZGluZyBvdXQgYWxsIHRoZSBlYXJseSBhY3Rpb25zIGFzIG1haW4gaXMgcmVhZHkgbm93XG4gICAgaWYgKHN0b3JlLl9lYXJseUFjdGlvblF1ZXVlKSB7XG4gICAgICBzdG9yZS5fZWFybHlBY3Rpb25RdWV1ZS5mb3JFYWNoKG5leHQpO1xuICAgICAgc3RvcmUuX2Vhcmx5QWN0aW9uUXVldWUgPSBbXTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoRUFSTFlfUVVFVUVEX0FDVElPTlMuaW5jbHVkZXMoYWN0aW9uLnR5cGUpKSB7XG4gICAgc3RvcmUuX2Vhcmx5QWN0aW9uUXVldWUgPSBzdG9yZS5fZWFybHlBY3Rpb25RdWV1ZSB8fCBbXTtcbiAgICBzdG9yZS5fZWFybHlBY3Rpb25RdWV1ZS5wdXNoKGFjdGlvbik7XG4gIH0gZWxzZSB7XG4gICAgLy8gTGV0IGFueSBvdGhlciB0eXBlIG9mIGFjdGlvbiBnbyB0aHJvdWdoXG4gICAgbmV4dChhY3Rpb24pO1xuICB9XG59O1xuXG4vKipcbiAqIGluaXRTdG9yZSAtIENyZWF0ZSBhIHN0b3JlIGFuZCBsaXN0ZW4gZm9yIGluY29taW5nIGFjdGlvbnNcbiAqXG4gKiBAcGFyYW0gIHtvYmplY3R9IHJlZHVjZXJzIEFuIG9iamVjdCBjb250YWluaW5nIFJlZHV4IHJlZHVjZXJzXG4gKiBAcGFyYW0gIHtvYmplY3R9IGludGlhbFN0YXRlIChvcHRpb25hbCkgVGhlIGluaXRpYWwgc3RhdGUgb2YgdGhlIHN0b3JlLCBpZiBkZXNpcmVkXG4gKiBAcmV0dXJuIHtvYmplY3R9ICAgICAgICAgIEEgcmVkdXggc3RvcmVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluaXRTdG9yZShyZWR1Y2Vycykge1xuICBjb25zdCBzdG9yZSA9IGNyZWF0ZVN0b3JlKFxuICAgIG1lcmdlU3RhdGVSZWR1Y2VyKGNvbWJpbmVSZWR1Y2VycyhyZWR1Y2VycykpLFxuICAgIGdsb2JhbC5SUE1BZGRNZXNzYWdlTGlzdGVuZXIgJiZcbiAgICAgIGFwcGx5TWlkZGxld2FyZShcbiAgICAgICAgcmVoeWRyYXRpb25NaWRkbGV3YXJlLFxuICAgICAgICBxdWV1ZUVhcmx5TWVzc2FnZU1pZGRsZXdhcmUsXG4gICAgICAgIG1lc3NhZ2VNaWRkbGV3YXJlXG4gICAgICApXG4gICk7XG5cbiAgc3RvcmUuX2RpZFJlaHlkcmF0ZSA9IGZhbHNlO1xuICBzdG9yZS5fZGlkUmVxdWVzdEluaXRpYWxTdGF0ZSA9IGZhbHNlO1xuXG4gIGlmIChnbG9iYWwuUlBNQWRkTWVzc2FnZUxpc3RlbmVyKSB7XG4gICAgZ2xvYmFsLlJQTUFkZE1lc3NhZ2VMaXN0ZW5lcihJTkNPTUlOR19NRVNTQUdFX05BTUUsIG1zZyA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBzdG9yZS5kaXNwYXRjaChtc2cuZGF0YSk7XG4gICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiQ29udGVudCBtc2c6XCIsIG1zZywgXCJEaXNwYXRjaCBlcnJvcjogXCIsIGV4KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgICAgIGR1bXAoXG4gICAgICAgICAgYENvbnRlbnQgbXNnOiAke0pTT04uc3RyaW5naWZ5KG1zZyl9XFxuRGlzcGF0Y2ggZXJyb3I6ICR7ZXh9XFxuJHtcbiAgICAgICAgICAgIGV4LnN0YWNrXG4gICAgICAgICAgfWBcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBzdG9yZTtcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gUmVkdXg7IiwiLyogVGhpcyBTb3VyY2UgQ29kZSBGb3JtIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBNb3ppbGxhIFB1YmxpY1xuICogTGljZW5zZSwgdi4gMi4wLiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBmaWxlLFxuICogWW91IGNhbiBvYnRhaW4gb25lIGF0IGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy4gKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuXG5leHBvcnQgY29uc3QgVklTSUJMRSA9IFwidmlzaWJsZVwiO1xuZXhwb3J0IGNvbnN0IFZJU0lCSUxJVFlfQ0hBTkdFX0VWRU5UID0gXCJ2aXNpYmlsaXR5Y2hhbmdlXCI7XG5cbi8qKlxuICogQ29tcG9uZW50IHdyYXBwZXIgdXNlZCB0byBzZW5kIHRlbGVtZXRyeSBwaW5ncyBvbiBldmVyeSBpbXByZXNzaW9uLlxuICovXG5leHBvcnQgY2xhc3MgSW1wcmVzc2lvbnNXcmFwcGVyIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gIC8vIFRoaXMgc2VuZHMgYW4gZXZlbnQgd2hlbiBhIHVzZXIgc2VlcyBhIHNldCBvZiBuZXcgY29udGVudC4gSWYgY29udGVudFxuICAvLyBjaGFuZ2VzIHdoaWxlIHRoZSBwYWdlIGlzIGhpZGRlbiAoaS5lLiBwcmVsb2FkZWQgb3Igb24gYSBoaWRkZW4gdGFiKSxcbiAgLy8gb25seSBzZW5kIHRoZSBldmVudCBpZiB0aGUgcGFnZSBiZWNvbWVzIHZpc2libGUgYWdhaW4uXG4gIHNlbmRJbXByZXNzaW9uT3JBZGRMaXN0ZW5lcigpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5kb2N1bWVudC52aXNpYmlsaXR5U3RhdGUgPT09IFZJU0lCTEUpIHtcbiAgICAgIHRoaXMucHJvcHMuc2VuZEltcHJlc3Npb24oeyBpZDogdGhpcy5wcm9wcy5pZCB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gV2Ugc2hvdWxkIG9ubHkgZXZlciBzZW5kIHRoZSBsYXRlc3QgaW1wcmVzc2lvbiBzdGF0cyBwaW5nLCBzbyByZW1vdmUgYW55XG4gICAgICAvLyBvbGRlciBsaXN0ZW5lcnMuXG4gICAgICBpZiAodGhpcy5fb25WaXNpYmlsaXR5Q2hhbmdlKSB7XG4gICAgICAgIHRoaXMucHJvcHMuZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgICBWSVNJQklMSVRZX0NIQU5HRV9FVkVOVCxcbiAgICAgICAgICB0aGlzLl9vblZpc2liaWxpdHlDaGFuZ2VcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgLy8gV2hlbiB0aGUgcGFnZSBiZWNvbWVzIHZpc2libGUsIHNlbmQgdGhlIGltcHJlc3Npb24gc3RhdHMgcGluZyBpZiB0aGUgc2VjdGlvbiBpc24ndCBjb2xsYXBzZWQuXG4gICAgICB0aGlzLl9vblZpc2liaWxpdHlDaGFuZ2UgPSAoKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLmRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSA9PT0gVklTSUJMRSkge1xuICAgICAgICAgIHRoaXMucHJvcHMuc2VuZEltcHJlc3Npb24oeyBpZDogdGhpcy5wcm9wcy5pZCB9KTtcbiAgICAgICAgICB0aGlzLnByb3BzLmRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgICAgICAgICBWSVNJQklMSVRZX0NIQU5HRV9FVkVOVCxcbiAgICAgICAgICAgIHRoaXMuX29uVmlzaWJpbGl0eUNoYW5nZVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB0aGlzLnByb3BzLmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAgIFZJU0lCSUxJVFlfQ0hBTkdFX0VWRU5ULFxuICAgICAgICB0aGlzLl9vblZpc2liaWxpdHlDaGFuZ2VcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMuX29uVmlzaWJpbGl0eUNoYW5nZSkge1xuICAgICAgdGhpcy5wcm9wcy5kb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFxuICAgICAgICBWSVNJQklMSVRZX0NIQU5HRV9FVkVOVCxcbiAgICAgICAgdGhpcy5fb25WaXNpYmlsaXR5Q2hhbmdlXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGlmICh0aGlzLnByb3BzLnNlbmRPbk1vdW50KSB7XG4gICAgICB0aGlzLnNlbmRJbXByZXNzaW9uT3JBZGRMaXN0ZW5lcigpO1xuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5zaG91bGRTZW5kSW1wcmVzc2lvbk9uVXBkYXRlKHRoaXMucHJvcHMsIHByZXZQcm9wcykpIHtcbiAgICAgIHRoaXMuc2VuZEltcHJlc3Npb25PckFkZExpc3RlbmVyKCk7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICB9XG59XG5cbkltcHJlc3Npb25zV3JhcHBlci5kZWZhdWx0UHJvcHMgPSB7XG4gIGRvY3VtZW50OiBnbG9iYWwuZG9jdW1lbnQsXG4gIHNlbmRPbk1vdW50OiB0cnVlLFxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gUmVhY3Q7IiwibW9kdWxlLmV4cG9ydHMgPSBQcm9wVHlwZXM7IiwiLyogVGhpcyBTb3VyY2UgQ29kZSBGb3JtIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBNb3ppbGxhIFB1YmxpY1xuICogTGljZW5zZSwgdi4gMi4wLiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBmaWxlLFxuICogWW91IGNhbiBvYnRhaW4gb25lIGF0IGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy4gKi9cblxuZXhwb3J0IGNvbnN0IElTX05FV1RBQiA9XG4gIGdsb2JhbC5kb2N1bWVudCAmJiBnbG9iYWwuZG9jdW1lbnQuZG9jdW1lbnRVUkkgPT09IFwiYWJvdXQ6bmV3dGFiXCI7XG5leHBvcnQgY29uc3QgTkVXVEFCX0RBUktfVEhFTUUgPSB7XG4gIG50cF9iYWNrZ3JvdW5kOiB7XG4gICAgcjogNDIsXG4gICAgZzogNDIsXG4gICAgYjogNDYsXG4gICAgYTogMSxcbiAgfSxcbiAgbnRwX3RleHQ6IHtcbiAgICByOiAyNDksXG4gICAgZzogMjQ5LFxuICAgIGI6IDI1MCxcbiAgICBhOiAxLFxuICB9LFxuICBzaWRlYmFyOiB7XG4gICAgcjogNTYsXG4gICAgZzogNTYsXG4gICAgYjogNjEsXG4gICAgYTogMSxcbiAgfSxcbiAgc2lkZWJhcl90ZXh0OiB7XG4gICAgcjogMjQ5LFxuICAgIGc6IDI0OSxcbiAgICBiOiAyNTAsXG4gICAgYTogMSxcbiAgfSxcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NOyIsIi8qIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXMgZmlsZSxcbiAqIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uICovXG5cbmltcG9ydCB7IExvY2FsaXplZCB9IGZyb20gXCJmbHVlbnQtcmVhY3RcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IFJJQ0hfVEVYVF9LRVlTIH0gZnJvbSBcIi4uLy4uL3JpY2gtdGV4dC1zdHJpbmdzXCI7XG5pbXBvcnQgeyBzYWZlVVJJIH0gZnJvbSBcIi4uLy4uL3RlbXBsYXRlLXV0aWxzXCI7XG5cbi8vIEVsZW1lbnRzIGFsbG93ZWQgaW4gc25pcHBldCBjb250ZW50XG5jb25zdCBBTExPV0VEX1RBR1MgPSB7XG4gIGI6IDxiIC8+LFxuICBpOiA8aSAvPixcbiAgdTogPHUgLz4sXG4gIHN0cm9uZzogPHN0cm9uZyAvPixcbiAgZW06IDxlbSAvPixcbiAgYnI6IDxiciAvPixcbn07XG5cbi8qKlxuICogVHJhbnNmb3JtIGFuIG9iamVjdCAodGFnIG5hbWU6IHt1cmx9KSBpbnRvICh0YWcgbmFtZTogYW5jaG9yKSB3aGVyZSB0aGUgdXJsXG4gKiBpcyB1c2VkIGFzIGhyZWYsIGluIG9yZGVyIHRvIHJlbmRlciBsaW5rcyBpbnNpZGUgYSBGbHVlbnQuTG9jYWxpemVkIGNvbXBvbmVudC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRMaW5rcyhcbiAgbGlua3MsXG4gIHNlbmRDbGljayxcbiAgZG9Ob3RBdXRvQmxvY2ssXG4gIG9wZW5OZXdXaW5kb3cgPSBmYWxzZVxuKSB7XG4gIGlmIChsaW5rcykge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhsaW5rcykucmVkdWNlKChhY2MsIGxpbmtUYWcpID0+IHtcbiAgICAgIGNvbnN0IHsgYWN0aW9uIH0gPSBsaW5rc1tsaW5rVGFnXTtcbiAgICAgIC8vIFNldHRpbmcgdGhlIHZhbHVlIHRvIGZhbHNlIHdpbGwgbm90IGluY2x1ZGUgdGhlIGF0dHJpYnV0ZSBpbiB0aGUgYW5jaG9yXG4gICAgICBjb25zdCB1cmwgPSBhY3Rpb24gPyBmYWxzZSA6IHNhZmVVUkkobGlua3NbbGlua1RhZ10udXJsKTtcblxuICAgICAgYWNjW2xpbmtUYWddID0gKFxuICAgICAgICAvLyBlc2xpbnQgd2FzIGdldHRpbmcgYSBmYWxzZSBwb3NpdGl2ZSBjYXVzZWQgYnkgdGhlIGR5bmFtaWMgaW5qZWN0aW9uXG4gICAgICAgIC8vIG9mIGNvbnRlbnQuXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBqc3gtYTExeS9hbmNob3ItaGFzLWNvbnRlbnRcbiAgICAgICAgPGFcbiAgICAgICAgICBocmVmPXt1cmx9XG4gICAgICAgICAgdGFyZ2V0PXtvcGVuTmV3V2luZG93ID8gXCJfYmxhbmtcIiA6IFwiXCJ9XG4gICAgICAgICAgZGF0YS1tZXRyaWM9e2xpbmtzW2xpbmtUYWddLm1ldHJpY31cbiAgICAgICAgICBkYXRhLWFjdGlvbj17YWN0aW9ufVxuICAgICAgICAgIGRhdGEtYXJncz17bGlua3NbbGlua1RhZ10uYXJnc31cbiAgICAgICAgICBkYXRhLWRvX25vdF9hdXRvYmxvY2s9e2RvTm90QXV0b0Jsb2NrfVxuICAgICAgICAgIG9uQ2xpY2s9e3NlbmRDbGlja31cbiAgICAgICAgLz5cbiAgICAgICk7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIE1lc3NhZ2Ugd3JhcHBlciB1c2VkIHRvIHNhbml0aXplIG1hcmt1cCBhbmQgcmVuZGVyIEhUTUwuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBSaWNoVGV4dChwcm9wcykge1xuICBpZiAoIVJJQ0hfVEVYVF9LRVlTLmluY2x1ZGVzKHByb3BzLmxvY2FsaXphdGlvbl9pZCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgQVNSb3V0ZXI6ICR7XG4gICAgICAgIHByb3BzLmxvY2FsaXphdGlvbl9pZFxuICAgICAgfSBpcyBub3QgYSB2YWxpZCByaWNoIHRleHQgcHJvcGVydHkuIElmIHlvdSB3YW50IGl0IHRvIGJlIHByb2Nlc3NlZCwgeW91IG5lZWQgdG8gYWRkIGl0IHRvIGFzcm91dGVyL3JpY2gtdGV4dC1zdHJpbmdzLmpzYFxuICAgICk7XG4gIH1cbiAgcmV0dXJuIChcbiAgICA8TG9jYWxpemVkXG4gICAgICBpZD17cHJvcHMubG9jYWxpemF0aW9uX2lkfVxuICAgICAgey4uLkFMTE9XRURfVEFHU31cbiAgICAgIHsuLi5wcm9wcy5jdXN0b21FbGVtZW50c31cbiAgICAgIHsuLi5jb252ZXJ0TGlua3MoXG4gICAgICAgIHByb3BzLmxpbmtzLFxuICAgICAgICBwcm9wcy5zZW5kQ2xpY2ssXG4gICAgICAgIHByb3BzLmRvTm90QXV0b0Jsb2NrLFxuICAgICAgICBwcm9wcy5vcGVuTmV3V2luZG93XG4gICAgICApfVxuICAgID5cbiAgICAgIDxzcGFuPntwcm9wcy50ZXh0fTwvc3Bhbj5cbiAgICA8L0xvY2FsaXplZD5cbiAgKTtcbn1cbiIsIi8qIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXMgZmlsZSxcbiAqIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzYWZlVVJJKHVybCkge1xuICBpZiAoIXVybCkge1xuICAgIHJldHVybiBcIlwiO1xuICB9XG4gIGNvbnN0IHsgcHJvdG9jb2wgfSA9IG5ldyBVUkwodXJsKTtcbiAgY29uc3QgaXNBbGxvd2VkID0gW1xuICAgIFwiaHR0cDpcIixcbiAgICBcImh0dHBzOlwiLFxuICAgIFwiZGF0YTpcIixcbiAgICBcInJlc291cmNlOlwiLFxuICAgIFwiY2hyb21lOlwiLFxuICBdLmluY2x1ZGVzKHByb3RvY29sKTtcbiAgaWYgKCFpc0FsbG93ZWQpIHtcbiAgICBjb25zb2xlLndhcm4oYFRoZSBwcm90b2NvbCAke3Byb3RvY29sfSBpcyBub3QgYWxsb3dlZCBmb3IgdGVtcGxhdGUgVVJMcy5gKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gIH1cbiAgcmV0dXJuIGlzQWxsb3dlZCA/IHVybCA6IFwiXCI7XG59XG4iLCIvKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIGZpbGUsXG4gKiBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLiAqL1xuXG5pbXBvcnQgeyBhY3Rpb25DcmVhdG9ycyBhcyBhYyB9IGZyb20gXCJjb21tb24vQWN0aW9ucy5qc21cIjtcbmltcG9ydCB7IE1vZGFsT3ZlcmxheVdyYXBwZXIgfSBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy9Nb2RhbE92ZXJsYXkvTW9kYWxPdmVybGF5XCI7XG5pbXBvcnQgeyBhZGRVdG1QYXJhbXMgfSBmcm9tIFwiLi4vRmlyc3RSdW4vYWRkVXRtUGFyYW1zXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbi8vIEZyb20gcmVzb3VyY2U6Ly9kZXZ0b29scy9jbGllbnQvc2hhcmVkL2ZvY3VzLmpzXG5jb25zdCBGT0NVU0FCTEVfU0VMRUNUT1IgPSBbXG4gIFwiYVtocmVmXTpub3QoW3RhYmluZGV4PSctMSddKVwiLFxuICBcImJ1dHRvbjpub3QoW2Rpc2FibGVkXSk6bm90KFt0YWJpbmRleD0nLTEnXSlcIixcbiAgXCJpZnJhbWU6bm90KFt0YWJpbmRleD0nLTEnXSlcIixcbiAgXCJpbnB1dDpub3QoW2Rpc2FibGVkXSk6bm90KFt0YWJpbmRleD0nLTEnXSlcIixcbiAgXCJzZWxlY3Q6bm90KFtkaXNhYmxlZF0pOm5vdChbdGFiaW5kZXg9Jy0xJ10pXCIsXG4gIFwidGV4dGFyZWE6bm90KFtkaXNhYmxlZF0pOm5vdChbdGFiaW5kZXg9Jy0xJ10pXCIsXG4gIFwiW3RhYmluZGV4XTpub3QoW3RhYmluZGV4PSctMSddKVwiLFxuXS5qb2luKFwiLCBcIik7XG5cbmV4cG9ydCBjbGFzcyBUcmFpbGhlYWQgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5jbG9zZU1vZGFsID0gdGhpcy5jbG9zZU1vZGFsLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbklucHV0Q2hhbmdlID0gdGhpcy5vbklucHV0Q2hhbmdlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vblN0YXJ0Qmx1ciA9IHRoaXMub25TdGFydEJsdXIuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uU3VibWl0ID0gdGhpcy5vblN1Ym1pdC5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25JbnB1dEludmFsaWQgPSB0aGlzLm9uSW5wdXRJbnZhbGlkLmJpbmQodGhpcyk7XG5cbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgZW1haWxJbnB1dDogXCJcIixcbiAgICB9O1xuICB9XG5cbiAgZ2V0IGRpYWxvZygpIHtcbiAgICByZXR1cm4gdGhpcy5wcm9wcy5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRyYWlsaGVhZERpYWxvZ1wiKTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIC8vIFdlIG5lZWQgdG8gcmVtb3ZlIGhpZGUtbWFpbiBzaW5jZSB3ZSBzaG91bGQgc2hvdyBpdCB1bmRlcm5lYXRoIGV2ZXJ5dGhpbmcgdGhhdCBoYXMgcmVuZGVyZWRcbiAgICB0aGlzLnByb3BzLmRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZShcImhpZGUtbWFpblwiKTtcblxuICAgIC8vIFRoZSByZXN0IG9mIHRoZSBwYWdlIGlzIFwiaGlkZGVuXCIgdG8gc2NyZWVuIHJlYWRlcnMgd2hlbiB0aGUgbW9kYWwgaXMgb3BlblxuICAgIHRoaXMucHJvcHMuZG9jdW1lbnRcbiAgICAgIC5nZXRFbGVtZW50QnlJZChcInJvb3RcIilcbiAgICAgIC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWhpZGRlblwiLCBcInRydWVcIik7XG4gICAgLy8gU3RhcnQgd2l0aCBmb2N1cyBpbiB0aGUgZW1haWwgaW5wdXQgYm94XG4gICAgY29uc3QgaW5wdXQgPSB0aGlzLmRpYWxvZy5xdWVyeVNlbGVjdG9yKFwiaW5wdXRbbmFtZT1lbWFpbF1cIik7XG4gICAgaWYgKGlucHV0KSB7XG4gICAgICBpbnB1dC5mb2N1cygpO1xuICAgIH1cbiAgfVxuXG4gIG9uSW5wdXRDaGFuZ2UoZSkge1xuICAgIGxldCBlcnJvciA9IGUudGFyZ2V0LnByZXZpb3VzU2libGluZztcbiAgICB0aGlzLnNldFN0YXRlKHsgZW1haWxJbnB1dDogZS50YXJnZXQudmFsdWUgfSk7XG4gICAgZXJyb3IuY2xhc3NMaXN0LnJlbW92ZShcImFjdGl2ZVwiKTtcbiAgICBlLnRhcmdldC5jbGFzc0xpc3QucmVtb3ZlKFwiaW52YWxpZFwiKTtcbiAgfVxuXG4gIG9uU3RhcnRCbHVyKGV2ZW50KSB7XG4gICAgLy8gTWFrZSBzdXJlIGZvY3VzIHN0YXlzIHdpdGhpbiB0aGUgZGlhbG9nIHdoZW4gdGFiYmluZyBmcm9tIHRoZSBidXR0b25cbiAgICBjb25zdCB7IGRpYWxvZyB9ID0gdGhpcztcbiAgICBpZiAoXG4gICAgICBldmVudC5yZWxhdGVkVGFyZ2V0ICYmXG4gICAgICAhKFxuICAgICAgICBkaWFsb2cuY29tcGFyZURvY3VtZW50UG9zaXRpb24oZXZlbnQucmVsYXRlZFRhcmdldCkgJlxuICAgICAgICBkaWFsb2cuRE9DVU1FTlRfUE9TSVRJT05fQ09OVEFJTkVEX0JZXG4gICAgICApXG4gICAgKSB7XG4gICAgICBkaWFsb2cucXVlcnlTZWxlY3RvcihGT0NVU0FCTEVfU0VMRUNUT1IpLmZvY3VzKCk7XG4gICAgfVxuICB9XG5cbiAgb25TdWJtaXQoZXZlbnQpIHtcbiAgICAvLyBEeW5hbWljYWxseSByZXF1aXJlIHRoZSBlbWFpbCBvbiBzdWJtaXNzaW9uIHNvIHNjcmVlbiByZWFkZXJzIGRvbid0IHJlYWRcbiAgICAvLyBvdXQgaXQncyBhbHdheXMgcmVxdWlyZWQgYmVjYXVzZSB0aGVyZSdzIGFsc28gd2F5cyB0byBza2lwIHRoZSBtb2RhbFxuICAgIGNvbnN0IHsgZW1haWwgfSA9IGV2ZW50LnRhcmdldC5lbGVtZW50cztcbiAgICBpZiAoIWVtYWlsLnZhbHVlLmxlbmd0aCkge1xuICAgICAgZW1haWwucmVxdWlyZWQgPSB0cnVlO1xuICAgICAgZW1haWwuY2hlY2tWYWxpZGl0eSgpO1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnByb3BzLmRpc3BhdGNoKFxuICAgICAgYWMuVXNlckV2ZW50KHsgZXZlbnQ6IFwiU1VCTUlUX0VNQUlMXCIsIC4uLnRoaXMuX2dldEZvcm1JbmZvKCkgfSlcbiAgICApO1xuXG4gICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJ2aXNpYmlsaXR5Y2hhbmdlXCIsIHRoaXMuY2xvc2VNb2RhbCk7XG4gIH1cblxuICBjbG9zZU1vZGFsKGV2KSB7XG4gICAgZ2xvYmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ2aXNpYmlsaXR5Y2hhbmdlXCIsIHRoaXMuY2xvc2VNb2RhbCk7XG4gICAgdGhpcy5wcm9wcy5kb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoXCJ3ZWxjb21lXCIpO1xuICAgIHRoaXMucHJvcHMuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyb290XCIpLnJlbW92ZUF0dHJpYnV0ZShcImFyaWEtaGlkZGVuXCIpO1xuICAgIHRoaXMucHJvcHMub25OZXh0U2NlbmUoKTtcblxuICAgIC8vIElmIGNsb3NlTW9kYWwoKSB3YXMgdHJpZ2dlcmVkIGJ5IGEgdmlzaWJpbGl0eWNoYW5nZSBldmVudCwgdGhlIHVzZXIgYWN0dWFsbHlcbiAgICAvLyBzdWJtaXR0ZWQgdGhlIGVtYWlsIGZvcm0gc28gd2UgZG9uJ3Qgc2VuZCBhIFNLSVBQRURfU0lHTklOIHBpbmcuXG4gICAgaWYgKCFldiB8fCBldi50eXBlICE9PSBcInZpc2liaWxpdHljaGFuZ2VcIikge1xuICAgICAgdGhpcy5wcm9wcy5kaXNwYXRjaChcbiAgICAgICAgYWMuVXNlckV2ZW50KHsgZXZlbnQ6IFwiU0tJUFBFRF9TSUdOSU5cIiwgLi4udGhpcy5fZ2V0Rm9ybUluZm8oKSB9KVxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBCdWcgMTE5MDg4MiAtIEZvY3VzIGluIGEgZGlzYXBwZWFyaW5nIGRpYWxvZyBjb25mdXNlcyBzY3JlZW4gcmVhZGVyc1xuICAgIHRoaXMucHJvcHMuZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5ibHVyKCk7XG4gIH1cblxuICAvKipcbiAgICogUmVwb3J0IHRvIHRlbGVtZXRyeSBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBmb3JtIHN1Ym1pc3Npb24uXG4gICAqL1xuICBfZ2V0Rm9ybUluZm8oKSB7XG4gICAgY29uc3QgdmFsdWUgPSB7IGhhc19mbG93X3BhcmFtczogdGhpcy5wcm9wcy5mbG93UGFyYW1zLmZsb3dJZC5sZW5ndGggPiAwIH07XG4gICAgcmV0dXJuIHsgdmFsdWUgfTtcbiAgfVxuXG4gIG9uSW5wdXRJbnZhbGlkKGUpIHtcbiAgICBsZXQgZXJyb3IgPSBlLnRhcmdldC5wcmV2aW91c1NpYmxpbmc7XG4gICAgZXJyb3IuY2xhc3NMaXN0LmFkZChcImFjdGl2ZVwiKTtcbiAgICBlLnRhcmdldC5jbGFzc0xpc3QuYWRkKFwiaW52YWxpZFwiKTtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7IC8vIE92ZXJyaWRlIGJ1aWx0LWluIGZvcm0gdmFsaWRhdGlvbiBwb3B1cFxuICAgIGUudGFyZ2V0LmZvY3VzKCk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBwcm9wcyB9ID0gdGhpcztcbiAgICBjb25zdCB7IFVUTVRlcm0gfSA9IHByb3BzO1xuICAgIGNvbnN0IHsgY29udGVudCB9ID0gcHJvcHMubWVzc2FnZTtcbiAgICBjb25zdCBpbm5lckNsYXNzTmFtZSA9IFtcInRyYWlsaGVhZFwiLCBjb250ZW50ICYmIGNvbnRlbnQuY2xhc3NOYW1lXVxuICAgICAgLmZpbHRlcih2ID0+IHYpXG4gICAgICAuam9pbihcIiBcIik7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPE1vZGFsT3ZlcmxheVdyYXBwZXJcbiAgICAgICAgaW5uZXJDbGFzc05hbWU9e2lubmVyQ2xhc3NOYW1lfVxuICAgICAgICBvbkNsb3NlPXt0aGlzLmNsb3NlTW9kYWx9XG4gICAgICAgIGlkPVwidHJhaWxoZWFkRGlhbG9nXCJcbiAgICAgICAgaGVhZGVySWQ9XCJ0cmFpbGhlYWRIZWFkZXJcIlxuICAgICAgPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRyYWlsaGVhZElubmVyXCI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0cmFpbGhlYWRDb250ZW50XCI+XG4gICAgICAgICAgICA8aDEgZGF0YS1sMTBuLWlkPXtjb250ZW50LnRpdGxlLnN0cmluZ19pZH0gaWQ9XCJ0cmFpbGhlYWRIZWFkZXJcIiAvPlxuICAgICAgICAgICAge2NvbnRlbnQuc3VidGl0bGUgJiYgKFxuICAgICAgICAgICAgICA8cCBkYXRhLWwxMG4taWQ9e2NvbnRlbnQuc3VidGl0bGUuc3RyaW5nX2lkfSAvPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDx1bCBjbGFzc05hbWU9XCJ0cmFpbGhlYWRCZW5lZml0c1wiPlxuICAgICAgICAgICAgICB7Y29udGVudC5iZW5lZml0cy5tYXAoaXRlbSA9PiAoXG4gICAgICAgICAgICAgICAgPGxpIGtleT17aXRlbS5pZH0gY2xhc3NOYW1lPXtpdGVtLmlkfT5cbiAgICAgICAgICAgICAgICAgIDxoMyBkYXRhLWwxMG4taWQ9e2l0ZW0udGl0bGUuc3RyaW5nX2lkfSAvPlxuICAgICAgICAgICAgICAgICAgPHAgZGF0YS1sMTBuLWlkPXtpdGVtLnRleHQuc3RyaW5nX2lkfSAvPlxuICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICAgIDxhXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cInRyYWlsaGVhZExlYXJuXCJcbiAgICAgICAgICAgICAgZGF0YS1sMTBuLWlkPXtjb250ZW50LmxlYXJuLnRleHQuc3RyaW5nX2lkfVxuICAgICAgICAgICAgICBocmVmPXthZGRVdG1QYXJhbXMoY29udGVudC5sZWFybi51cmwsIFVUTVRlcm0pfVxuICAgICAgICAgICAgICB0YXJnZXQ9XCJfYmxhbmtcIlxuICAgICAgICAgICAgICByZWw9XCJub29wZW5lciBub3JlZmVycmVyXCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgcm9sZT1cImdyb3VwXCJcbiAgICAgICAgICAgIGFyaWEtbGFiZWxsZWRieT1cImpvaW5Gb3JtSGVhZGVyXCJcbiAgICAgICAgICAgIGFyaWEtZGVzY3JpYmVkYnk9XCJqb2luRm9ybUJvZHlcIlxuICAgICAgICAgICAgY2xhc3NOYW1lPVwidHJhaWxoZWFkRm9ybVwiXG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGgzXG4gICAgICAgICAgICAgIGlkPVwiam9pbkZvcm1IZWFkZXJcIlxuICAgICAgICAgICAgICBkYXRhLWwxMG4taWQ9e2NvbnRlbnQuZm9ybS50aXRsZS5zdHJpbmdfaWR9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPHAgaWQ9XCJqb2luRm9ybUJvZHlcIiBkYXRhLWwxMG4taWQ9e2NvbnRlbnQuZm9ybS50ZXh0LnN0cmluZ19pZH0gLz5cbiAgICAgICAgICAgIDxmb3JtXG4gICAgICAgICAgICAgIG1ldGhvZD1cImdldFwiXG4gICAgICAgICAgICAgIGFjdGlvbj17dGhpcy5wcm9wcy5meGFFbmRwb2ludH1cbiAgICAgICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICAgICAgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlclwiXG4gICAgICAgICAgICAgIG9uU3VibWl0PXt0aGlzLm9uU3VibWl0fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8aW5wdXQgbmFtZT1cInNlcnZpY2VcIiB0eXBlPVwiaGlkZGVuXCIgdmFsdWU9XCJzeW5jXCIgLz5cbiAgICAgICAgICAgICAgPGlucHV0IG5hbWU9XCJhY3Rpb25cIiB0eXBlPVwiaGlkZGVuXCIgdmFsdWU9XCJlbWFpbFwiIC8+XG4gICAgICAgICAgICAgIDxpbnB1dCBuYW1lPVwiY29udGV4dFwiIHR5cGU9XCJoaWRkZW5cIiB2YWx1ZT1cImZ4X2Rlc2t0b3BfdjNcIiAvPlxuICAgICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICBuYW1lPVwiZW50cnlwb2ludFwiXG4gICAgICAgICAgICAgICAgdHlwZT1cImhpZGRlblwiXG4gICAgICAgICAgICAgICAgdmFsdWU9XCJhY3Rpdml0eS1zdHJlYW0tZmlyc3RydW5cIlxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8aW5wdXQgbmFtZT1cInV0bV9zb3VyY2VcIiB0eXBlPVwiaGlkZGVuXCIgdmFsdWU9XCJhY3Rpdml0eS1zdHJlYW1cIiAvPlxuICAgICAgICAgICAgICA8aW5wdXQgbmFtZT1cInV0bV9jYW1wYWlnblwiIHR5cGU9XCJoaWRkZW5cIiB2YWx1ZT1cImZpcnN0cnVuXCIgLz5cbiAgICAgICAgICAgICAgPGlucHV0IG5hbWU9XCJ1dG1fdGVybVwiIHR5cGU9XCJoaWRkZW5cIiB2YWx1ZT17VVRNVGVybX0gLz5cbiAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgbmFtZT1cImRldmljZV9pZFwiXG4gICAgICAgICAgICAgICAgdHlwZT1cImhpZGRlblwiXG4gICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMucHJvcHMuZmxvd1BhcmFtcy5kZXZpY2VJZH1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgbmFtZT1cImZsb3dfaWRcIlxuICAgICAgICAgICAgICAgIHR5cGU9XCJoaWRkZW5cIlxuICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnByb3BzLmZsb3dQYXJhbXMuZmxvd0lkfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICBuYW1lPVwiZmxvd19iZWdpbl90aW1lXCJcbiAgICAgICAgICAgICAgICB0eXBlPVwiaGlkZGVuXCJcbiAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5wcm9wcy5mbG93UGFyYW1zLmZsb3dCZWdpblRpbWV9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDxpbnB1dCBuYW1lPVwic3R5bGVcIiB0eXBlPVwiaGlkZGVuXCIgdmFsdWU9XCJ0cmFpbGhlYWRcIiAvPlxuICAgICAgICAgICAgICA8cFxuICAgICAgICAgICAgICAgIGRhdGEtbDEwbi1pZD1cIm9uYm9hcmRpbmctam9pbi1mb3JtLWVtYWlsLWVycm9yXCJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJlcnJvclwiXG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICAgIGRhdGEtbDEwbi1pZD17Y29udGVudC5mb3JtLmVtYWlsLnN0cmluZ19pZH1cbiAgICAgICAgICAgICAgICBuYW1lPVwiZW1haWxcIlxuICAgICAgICAgICAgICAgIHR5cGU9XCJlbWFpbFwiXG4gICAgICAgICAgICAgICAgb25JbnZhbGlkPXt0aGlzLm9uSW5wdXRJbnZhbGlkfVxuICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLm9uSW5wdXRDaGFuZ2V9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDxwXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwidHJhaWxoZWFkVGVybXNcIlxuICAgICAgICAgICAgICAgIGRhdGEtbDEwbi1pZD1cIm9uYm9hcmRpbmctam9pbi1mb3JtLWxlZ2FsXCJcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxhXG4gICAgICAgICAgICAgICAgICBkYXRhLWwxMG4tbmFtZT1cInRlcm1zXCJcbiAgICAgICAgICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgICAgICAgICAgICByZWw9XCJub29wZW5lciBub3JlZmVycmVyXCJcbiAgICAgICAgICAgICAgICAgIGhyZWY9e2FkZFV0bVBhcmFtcyhcbiAgICAgICAgICAgICAgICAgICAgXCJodHRwczovL2FjY291bnRzLmZpcmVmb3guY29tL2xlZ2FsL3Rlcm1zXCIsXG4gICAgICAgICAgICAgICAgICAgIFVUTVRlcm1cbiAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8YVxuICAgICAgICAgICAgICAgICAgZGF0YS1sMTBuLW5hbWU9XCJwcml2YWN5XCJcbiAgICAgICAgICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgICAgICAgICAgICByZWw9XCJub29wZW5lciBub3JlZmVycmVyXCJcbiAgICAgICAgICAgICAgICAgIGhyZWY9e2FkZFV0bVBhcmFtcyhcbiAgICAgICAgICAgICAgICAgICAgXCJodHRwczovL2FjY291bnRzLmZpcmVmb3guY29tL2xlZ2FsL3ByaXZhY3lcIixcbiAgICAgICAgICAgICAgICAgICAgVVRNVGVybVxuICAgICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgICBkYXRhLWwxMG4taWQ9e2NvbnRlbnQuZm9ybS5idXR0b24uc3RyaW5nX2lkfVxuICAgICAgICAgICAgICAgIHR5cGU9XCJzdWJtaXRcIlxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9mb3JtPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgY2xhc3NOYW1lPVwidHJhaWxoZWFkU3RhcnRcIlxuICAgICAgICAgIGRhdGEtbDEwbi1pZD17Y29udGVudC5za2lwQnV0dG9uLnN0cmluZ19pZH1cbiAgICAgICAgICBvbkJsdXI9e3RoaXMub25TdGFydEJsdXJ9XG4gICAgICAgICAgb25DbGljaz17dGhpcy5jbG9zZU1vZGFsfVxuICAgICAgICAvPlxuICAgICAgPC9Nb2RhbE92ZXJsYXlXcmFwcGVyPlxuICAgICk7XG4gIH1cbn1cblxuVHJhaWxoZWFkLmRlZmF1bHRQcm9wcyA9IHtcbiAgZmxvd1BhcmFtczogeyBkZXZpY2VJZDogXCJcIiwgZmxvd0lkOiBcIlwiLCBmbG93QmVnaW5UaW1lOiBcIlwiIH0sXG59O1xuIiwiLyogVGhpcyBTb3VyY2UgQ29kZSBGb3JtIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBNb3ppbGxhIFB1YmxpY1xuICogTGljZW5zZSwgdi4gMi4wLiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBmaWxlLFxuICogWW91IGNhbiBvYnRhaW4gb25lIGF0IGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy4gKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuXG5leHBvcnQgY2xhc3MgTW9kYWxPdmVybGF5V3JhcHBlciBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLm9uS2V5RG93biA9IHRoaXMub25LZXlEb3duLmJpbmQodGhpcyk7XG4gIH1cblxuICBvbktleURvd24oZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQua2V5ID09PSBcIkVzY2FwZVwiKSB7XG4gICAgICB0aGlzLnByb3BzLm9uQ2xvc2UoZXZlbnQpO1xuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB0aGlzLnByb3BzLmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMub25LZXlEb3duKTtcbiAgICB0aGlzLnByb3BzLmRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZChcIm1vZGFsLW9wZW5cIik7XG4gICAgdGhpcy5oZWFkZXIgPSB0aGlzLnByb3BzLmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxuICAgICAgXCJoZWFkZXItYXNyb3V0ZXItY29udGFpbmVyXCJcbiAgICApO1xuXG4gICAgaWYgKHRoaXMuaGVhZGVyKSB7XG4gICAgICB0aGlzLmhlYWRlci5jbGFzc0xpc3QuYWRkKFwibW9kYWwtc2Nyb2xsXCIpO1xuICAgICAgdGhpcy5wcm9wcy5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJvb3RcIikuY2xhc3NMaXN0LmFkZChcIm1vZGFsLWhlaWdodFwiKTtcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLnByb3BzLmRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMub25LZXlEb3duKTtcbiAgICB0aGlzLnByb3BzLmRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZShcIm1vZGFsLW9wZW5cIik7XG5cbiAgICBpZiAodGhpcy5oZWFkZXIpIHtcbiAgICAgIHRoaXMuaGVhZGVyLmNsYXNzTGlzdC5yZW1vdmUoXCJtb2RhbC1zY3JvbGxcIik7XG4gICAgICB0aGlzLnByb3BzLmRvY3VtZW50XG4gICAgICAgIC5nZXRFbGVtZW50QnlJZChcInJvb3RcIilcbiAgICAgICAgLmNsYXNzTGlzdC5yZW1vdmUoXCJtb2RhbC1oZWlnaHRcIik7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgcHJvcHMgfSA9IHRoaXM7XG4gICAgbGV0IGNsYXNzTmFtZSA9IHByb3BzLnVuc3R5bGVkID8gXCJcIiA6IFwibW9kYWxPdmVybGF5SW5uZXIgYWN0aXZlXCI7XG4gICAgaWYgKHByb3BzLmlubmVyQ2xhc3NOYW1lKSB7XG4gICAgICBjbGFzc05hbWUgKz0gYCAke3Byb3BzLmlubmVyQ2xhc3NOYW1lfWA7XG4gICAgfVxuICAgIHJldHVybiAoXG4gICAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjbGFzc05hbWU9XCJtb2RhbE92ZXJsYXlPdXRlciBhY3RpdmVcIlxuICAgICAgICAgIG9uQ2xpY2s9e3Byb3BzLm9uQ2xvc2V9XG4gICAgICAgICAgb25LZXlEb3duPXt0aGlzLm9uS2V5RG93bn1cbiAgICAgICAgICByb2xlPVwicHJlc2VudGF0aW9uXCJcbiAgICAgICAgLz5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lfVxuICAgICAgICAgIGFyaWEtbGFiZWxsZWRieT17cHJvcHMuaGVhZGVySWR9XG4gICAgICAgICAgaWQ9e3Byb3BzLmlkfVxuICAgICAgICAgIHJvbGU9XCJkaWFsb2dcIlxuICAgICAgICA+XG4gICAgICAgICAge3Byb3BzLmNoaWxkcmVufVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gICAgKTtcbiAgfVxufVxuXG5Nb2RhbE92ZXJsYXlXcmFwcGVyLmRlZmF1bHRQcm9wcyA9IHsgZG9jdW1lbnQ6IGdsb2JhbC5kb2N1bWVudCB9O1xuXG5leHBvcnQgY2xhc3MgTW9kYWxPdmVybGF5IGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IHRpdGxlLCBidXR0b25fbGFiZWwgfSA9IHRoaXMucHJvcHM7XG4gICAgcmV0dXJuIChcbiAgICAgIDxNb2RhbE92ZXJsYXlXcmFwcGVyIG9uQ2xvc2U9e3RoaXMucHJvcHMub25EaXNtaXNzQnVuZGxlfT5cbiAgICAgICAgPGgyPiB7dGl0bGV9IDwvaDI+XG4gICAgICAgIHt0aGlzLnByb3BzLmNoaWxkcmVufVxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZvb3RlclwiPlxuICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgIGNsYXNzTmFtZT1cImJ1dHRvbiBwcmltYXJ5IG1vZGFsQnV0dG9uXCJcbiAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMucHJvcHMub25EaXNtaXNzQnVuZGxlfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtcIiBcIn1cbiAgICAgICAgICAgIHtidXR0b25fbGFiZWx9e1wiIFwifVxuICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvTW9kYWxPdmVybGF5V3JhcHBlcj5cbiAgICApO1xuICB9XG59XG4iLCIvKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIGZpbGUsXG4gKiBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLiAqL1xuXG5jb25zdCBCQVNFX1BBUkFNUyA9IHtcbiAgdXRtX3NvdXJjZTogXCJhY3Rpdml0eS1zdHJlYW1cIixcbiAgdXRtX2NhbXBhaWduOiBcImZpcnN0cnVuXCIsXG4gIHV0bV9tZWRpdW06IFwicmVmZXJyYWxcIixcbn07XG5cbi8qKlxuICogVGFrZXMgaW4gYSB1cmwgYXMgYSBzdHJpbmcgb3IgVVJMIG9iamVjdCBhbmQgcmV0dXJucyBhIFVSTCBvYmplY3Qgd2l0aCB0aGVcbiAqIHV0bV8qIHBhcmFtZXRlcnMgYWRkZWQgdG8gaXQuIElmIGEgVVJMIG9iamVjdCBpcyBwYXNzZWQgaW4sIHRoZSBwYXJhZW1ldGVyc1xuICogYXJlIGFkZGVkIHRvIGl0ICh0aGUgcmV0dXJuIHZhbHVlIGNhbiBiZSBpZ25vcmVkIGluIHRoYXQgY2FzZSBhcyBpdCdzIHRoZVxuICogc2FtZSBvYmplY3QpLlxuICovXG5leHBvcnQgZnVuY3Rpb24gYWRkVXRtUGFyYW1zKHVybCwgdXRtVGVybSkge1xuICBsZXQgcmV0dXJuVXJsID0gdXJsO1xuICBpZiAodHlwZW9mIHJldHVyblVybCA9PT0gXCJzdHJpbmdcIikge1xuICAgIHJldHVyblVybCA9IG5ldyBVUkwodXJsKTtcbiAgfVxuICBPYmplY3Qua2V5cyhCQVNFX1BBUkFNUykuZm9yRWFjaChrZXkgPT4ge1xuICAgIHJldHVyblVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKGtleSwgQkFTRV9QQVJBTVNba2V5XSk7XG4gIH0pO1xuICByZXR1cm5Vcmwuc2VhcmNoUGFyYW1zLmFwcGVuZChcInV0bV90ZXJtXCIsIHV0bVRlcm0pO1xuICByZXR1cm4gcmV0dXJuVXJsO1xufVxuIiwiLyogVGhpcyBTb3VyY2UgQ29kZSBGb3JtIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBNb3ppbGxhIFB1YmxpY1xuICogTGljZW5zZSwgdi4gMi4wLiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBmaWxlLFxuICogWW91IGNhbiBvYnRhaW4gb25lIGF0IGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy4gKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgUmljaFRleHQgfSBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy9SaWNoVGV4dC9SaWNoVGV4dFwiO1xuXG4vLyBBbHQgdGV4dCBpZiBhdmFpbGFibGU7IGluIHRoZSBmdXR1cmUgdGhpcyBzaG91bGQgY29tZSBmcm9tIHRoZSBzZXJ2ZXIuIFNlZSBidWcgMTU1MTcxMVxuY29uc3QgSUNPTl9BTFRfVEVYVCA9IFwiXCI7XG5cbmV4cG9ydCBjbGFzcyBSZXR1cm5Ub0FNTyBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLm9uQ2xpY2tBZGRFeHRlbnNpb24gPSB0aGlzLm9uQ2xpY2tBZGRFeHRlbnNpb24uYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uQmxvY2tCdXR0b24gPSB0aGlzLm9uQmxvY2tCdXR0b24uYmluZCh0aGlzKTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICBnbG9iYWwuZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKFwiYW1vXCIpO1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5wcm9wcy5zZW5kVXNlckFjdGlvblRlbGVtZXRyeSh7XG4gICAgICBldmVudDogXCJJTVBSRVNTSU9OXCIsXG4gICAgICBpZDogdGhpcy5wcm9wcy5VSVN1cmZhY2UsXG4gICAgfSk7XG4gIH1cblxuICBvbkNsaWNrQWRkRXh0ZW5zaW9uKCkge1xuICAgIHRoaXMucHJvcHMub25BY3Rpb24odGhpcy5wcm9wcy5jb250ZW50LnByaW1hcnlfYnV0dG9uLmFjdGlvbik7XG4gICAgdGhpcy5wcm9wcy5zZW5kVXNlckFjdGlvblRlbGVtZXRyeSh7XG4gICAgICBldmVudDogXCJJTlNUQUxMXCIsXG4gICAgICBpZDogdGhpcy5wcm9wcy5VSVN1cmZhY2UsXG4gICAgfSk7XG4gIH1cblxuICBvbkJsb2NrQnV0dG9uKCkge1xuICAgIHRoaXMucHJvcHMub25CbG9jaygpO1xuICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZShcIndlbGNvbWVcIiwgXCJoaWRlLW1haW5cIiwgXCJhbW9cIik7XG4gICAgdGhpcy5wcm9wcy5zZW5kVXNlckFjdGlvblRlbGVtZXRyeSh7XG4gICAgICBldmVudDogXCJCTE9DS1wiLFxuICAgICAgaWQ6IHRoaXMucHJvcHMuVUlTdXJmYWNlLFxuICAgIH0pO1xuICB9XG5cbiAgcmVuZGVyVGV4dCgpIHtcbiAgICBjb25zdCBjdXN0b21FbGVtZW50ID0gKFxuICAgICAgPGltZ1xuICAgICAgICBzcmM9e3RoaXMucHJvcHMuY29udGVudC5hZGRvbl9pY29ufVxuICAgICAgICB3aWR0aD1cIjIwcHhcIlxuICAgICAgICBoZWlnaHQ9XCIyMHB4XCJcbiAgICAgICAgYWx0PXtJQ09OX0FMVF9URVhUfVxuICAgICAgLz5cbiAgICApO1xuICAgIHJldHVybiAoXG4gICAgICA8UmljaFRleHRcbiAgICAgICAgY3VzdG9tRWxlbWVudHM9e3sgaWNvbjogY3VzdG9tRWxlbWVudCB9fVxuICAgICAgICBhbW9faHRtbD17dGhpcy5wcm9wcy5jb250ZW50LnRleHR9XG4gICAgICAgIGxvY2FsaXphdGlvbl9pZD1cImFtb19odG1sXCJcbiAgICAgIC8+XG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGNvbnRlbnQgfSA9IHRoaXMucHJvcHM7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiUmV0dXJuVG9BTU9PdmVybGF5XCI+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgPGgyPiB7Y29udGVudC5oZWFkZXJ9IDwvaDI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJSZXR1cm5Ub0FNT0NvbnRhaW5lclwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJSZXR1cm5Ub0FNT0FkZG9uQ29udGVudHNcIj5cbiAgICAgICAgICAgICAgPHA+IHtjb250ZW50LnRpdGxlfSA8L3A+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiUmV0dXJuVG9BTU9UZXh0XCI+XG4gICAgICAgICAgICAgICAgPHNwYW4+IHt0aGlzLnJlbmRlclRleHQoKX0gPC9zcGFuPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMub25DbGlja0FkZEV4dGVuc2lvbn1cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJwdWZmeSBibHVlIFJldHVyblRvQU1PQWRkRXh0ZW5zaW9uXCJcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHtcIiBcIn1cbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJpY29uIGljb24tYWRkXCIgLz57XCIgXCJ9XG4gICAgICAgICAgICAgICAge2NvbnRlbnQucHJpbWFyeV9idXR0b24ubGFiZWx9e1wiIFwifVxuICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJSZXR1cm5Ub0FNT0ljb25cIiAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMub25CbG9ja0J1dHRvbn1cbiAgICAgICAgICAgIGNsYXNzTmFtZT1cImRlZmF1bHQgZ3JleSBSZXR1cm5Ub0FNT0dldFN0YXJ0ZWRcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtcIiBcIn1cbiAgICAgICAgICAgIHtjb250ZW50LnNlY29uZGFyeV9idXR0b24ubGFiZWx9e1wiIFwifVxuICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cbiIsIi8qIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXMgZmlsZSxcbiAqIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uICovXG5cbmltcG9ydCB7IGFjdGlvbkNyZWF0b3JzIGFzIGFjIH0gZnJvbSBcImNvbW1vbi9BY3Rpb25zLmpzbVwiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuXG5leHBvcnQgY2xhc3MgU3RhcnR1cE92ZXJsYXkgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5vbklucHV0Q2hhbmdlID0gdGhpcy5vbklucHV0Q2hhbmdlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vblN1Ym1pdCA9IHRoaXMub25TdWJtaXQuYmluZCh0aGlzKTtcbiAgICB0aGlzLmNsaWNrU2tpcCA9IHRoaXMuY2xpY2tTa2lwLmJpbmQodGhpcyk7XG4gICAgdGhpcy5yZW1vdmVPdmVybGF5ID0gdGhpcy5yZW1vdmVPdmVybGF5LmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbklucHV0SW52YWxpZCA9IHRoaXMub25JbnB1dEludmFsaWQuYmluZCh0aGlzKTtcblxuICAgIHRoaXMudXRtUGFyYW1zID1cbiAgICAgIFwidXRtX3NvdXJjZT1hY3Rpdml0eS1zdHJlYW0mdXRtX2NhbXBhaWduPWZpcnN0cnVuJnV0bV9tZWRpdW09cmVmZXJyYWwmdXRtX3Rlcm09dHJhaWxoZWFkLWNvbnRyb2xcIjtcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBzaG93OiBmYWxzZSxcbiAgICAgIGVtYWlsSW5wdXQ6IFwiXCIsXG4gICAgfTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICBnbG9iYWwuZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKFwiZnhhXCIpO1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgLy8gVGltZW91dCB0byBhbGxvdyB0aGUgc2NlbmUgdG8gcmVuZGVyIG9uY2UgYmVmb3JlIGF0dGFjaGluZyB0aGUgYXR0cmlidXRlXG4gICAgLy8gdG8gdHJpZ2dlciB0aGUgYW5pbWF0aW9uLlxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IHNob3c6IHRydWUgfSk7XG4gICAgfSwgMTApO1xuICB9XG5cbiAgcmVtb3ZlT3ZlcmxheSgpIHtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInZpc2liaWxpdHljaGFuZ2VcIiwgdGhpcy5yZW1vdmVPdmVybGF5KTtcbiAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoXCJoaWRlLW1haW5cIiwgXCJmeGFcIik7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IHNob3c6IGZhbHNlIH0pO1xuXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAvLyBBbGxvdyBzY3JvbGxpbmcgYW5kIGZ1bGx5IHJlbW92ZSBvdmVybGF5IGFmdGVyIGFuaW1hdGlvbiBmaW5pc2hlcy5cbiAgICAgIHRoaXMucHJvcHMub25CbG9jaygpO1xuICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKFwid2VsY29tZVwiKTtcbiAgICB9LCA0MDApO1xuICB9XG5cbiAgb25JbnB1dENoYW5nZShlKSB7XG4gICAgbGV0IGVycm9yID0gZS50YXJnZXQucHJldmlvdXNTaWJsaW5nO1xuICAgIHRoaXMuc2V0U3RhdGUoeyBlbWFpbElucHV0OiBlLnRhcmdldC52YWx1ZSB9KTtcbiAgICBlcnJvci5jbGFzc0xpc3QucmVtb3ZlKFwiYWN0aXZlXCIpO1xuICAgIGUudGFyZ2V0LmNsYXNzTGlzdC5yZW1vdmUoXCJpbnZhbGlkXCIpO1xuICB9XG5cbiAgb25TdWJtaXQoKSB7XG4gICAgdGhpcy5wcm9wcy5kaXNwYXRjaChcbiAgICAgIGFjLlVzZXJFdmVudCh7IGV2ZW50OiBcIlNVQk1JVF9FTUFJTFwiLCAuLi50aGlzLl9nZXRGb3JtSW5mbygpIH0pXG4gICAgKTtcblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidmlzaWJpbGl0eWNoYW5nZVwiLCB0aGlzLnJlbW92ZU92ZXJsYXkpO1xuICB9XG5cbiAgY2xpY2tTa2lwKCkge1xuICAgIHRoaXMucHJvcHMuZGlzcGF0Y2goXG4gICAgICBhYy5Vc2VyRXZlbnQoeyBldmVudDogXCJTS0lQUEVEX1NJR05JTlwiLCAuLi50aGlzLl9nZXRGb3JtSW5mbygpIH0pXG4gICAgKTtcbiAgICB0aGlzLnJlbW92ZU92ZXJsYXkoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXBvcnQgdG8gdGVsZW1ldHJ5IGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGZvcm0gc3VibWlzc2lvbi5cbiAgICovXG4gIF9nZXRGb3JtSW5mbygpIHtcbiAgICBjb25zdCB2YWx1ZSA9IHtcbiAgICAgIGhhc19mbG93X3BhcmFtczogdGhpcy5wcm9wcy5mbG93UGFyYW1zLmZsb3dJZC5sZW5ndGggPiAwLFxuICAgIH07XG4gICAgcmV0dXJuIHsgdmFsdWUgfTtcbiAgfVxuXG4gIG9uSW5wdXRJbnZhbGlkKGUpIHtcbiAgICBsZXQgZXJyb3IgPSBlLnRhcmdldC5wcmV2aW91c1NpYmxpbmc7XG4gICAgZXJyb3IuY2xhc3NMaXN0LmFkZChcImFjdGl2ZVwiKTtcbiAgICBlLnRhcmdldC5jbGFzc0xpc3QuYWRkKFwiaW52YWxpZFwiKTtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7IC8vIE92ZXJyaWRlIGJ1aWx0LWluIGZvcm0gdmFsaWRhdGlvbiBwb3B1cFxuICAgIGUudGFyZ2V0LmZvY3VzKCk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtgb3ZlcmxheS13cmFwcGVyICR7dGhpcy5zdGF0ZS5zaG93ID8gXCJzaG93XCIgOiBcIlwifWB9PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJhY2tncm91bmRcIiAvPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZpcnN0cnVuLXNjZW5lXCI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmeGFjY291bnRzLWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmaXJzdHJ1bi1sZWZ0LWRpdmlkZXJcIj5cbiAgICAgICAgICAgICAgPGgxXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZmlyc3RydW4tdGl0bGVcIlxuICAgICAgICAgICAgICAgIGRhdGEtbDEwbi1pZD1cIm9uYm9hcmRpbmctc3luYy13ZWxjb21lLWhlYWRlclwiXG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDxwXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZmlyc3RydW4tY29udGVudFwiXG4gICAgICAgICAgICAgICAgZGF0YS1sMTBuLWlkPVwib25ib2FyZGluZy1zeW5jLXdlbGNvbWUtY29udGVudFwiXG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDxhXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZmlyc3RydW4tbGlua1wiXG4gICAgICAgICAgICAgICAgaHJlZj17YGh0dHBzOi8vd3d3Lm1vemlsbGEub3JnL2ZpcmVmb3gvZmVhdHVyZXMvc3luYy8/JHtcbiAgICAgICAgICAgICAgICAgIHRoaXMudXRtUGFyYW1zXG4gICAgICAgICAgICAgICAgfWB9XG4gICAgICAgICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICAgICAgICByZWw9XCJub29wZW5lciBub3JlZmVycmVyXCJcbiAgICAgICAgICAgICAgICBkYXRhLWwxMG4taWQ9XCJvbmJvYXJkaW5nLXN5bmMtd2VsY29tZS1sZWFybi1tb3JlLWxpbmtcIlxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZpcnN0cnVuLXNpZ24taW5cIj5cbiAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwiZm9ybS1oZWFkZXJcIj5cbiAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLWwxMG4taWQ9XCJvbmJvYXJkaW5nLXN5bmMtZm9ybS1oZWFkZXJcIiAvPlxuICAgICAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJzdWItaGVhZGVyXCJcbiAgICAgICAgICAgICAgICAgIGRhdGEtbDEwbi1pZD1cIm9uYm9hcmRpbmctc3luYy1mb3JtLXN1Yi1oZWFkZXJcIlxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgPGZvcm1cbiAgICAgICAgICAgICAgICBtZXRob2Q9XCJnZXRcIlxuICAgICAgICAgICAgICAgIGFjdGlvbj17dGhpcy5wcm9wcy5meGFfZW5kcG9pbnR9XG4gICAgICAgICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICAgICAgICByZWw9XCJub29wZW5lciBub3JlZmVycmVyXCJcbiAgICAgICAgICAgICAgICBvblN1Ym1pdD17dGhpcy5vblN1Ym1pdH1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxpbnB1dCBuYW1lPVwic2VydmljZVwiIHR5cGU9XCJoaWRkZW5cIiB2YWx1ZT1cInN5bmNcIiAvPlxuICAgICAgICAgICAgICAgIDxpbnB1dCBuYW1lPVwiYWN0aW9uXCIgdHlwZT1cImhpZGRlblwiIHZhbHVlPVwiZW1haWxcIiAvPlxuICAgICAgICAgICAgICAgIDxpbnB1dCBuYW1lPVwiY29udGV4dFwiIHR5cGU9XCJoaWRkZW5cIiB2YWx1ZT1cImZ4X2Rlc2t0b3BfdjNcIiAvPlxuICAgICAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICAgICAgbmFtZT1cImVudHJ5cG9pbnRcIlxuICAgICAgICAgICAgICAgICAgdHlwZT1cImhpZGRlblwiXG4gICAgICAgICAgICAgICAgICB2YWx1ZT1cImFjdGl2aXR5LXN0cmVhbS1maXJzdHJ1blwiXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICAgIG5hbWU9XCJ1dG1fc291cmNlXCJcbiAgICAgICAgICAgICAgICAgIHR5cGU9XCJoaWRkZW5cIlxuICAgICAgICAgICAgICAgICAgdmFsdWU9XCJhY3Rpdml0eS1zdHJlYW1cIlxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPGlucHV0IG5hbWU9XCJ1dG1fY2FtcGFpZ25cIiB0eXBlPVwiaGlkZGVuXCIgdmFsdWU9XCJmaXJzdHJ1blwiIC8+XG4gICAgICAgICAgICAgICAgPGlucHV0IG5hbWU9XCJ1dG1fbWVkaXVtXCIgdHlwZT1cImhpZGRlblwiIHZhbHVlPVwicmVmZXJyYWxcIiAvPlxuICAgICAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICAgICAgbmFtZT1cInV0bV90ZXJtXCJcbiAgICAgICAgICAgICAgICAgIHR5cGU9XCJoaWRkZW5cIlxuICAgICAgICAgICAgICAgICAgdmFsdWU9XCJ0cmFpbGhlYWQtY29udHJvbFwiXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICAgIG5hbWU9XCJkZXZpY2VfaWRcIlxuICAgICAgICAgICAgICAgICAgdHlwZT1cImhpZGRlblwiXG4gICAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5wcm9wcy5mbG93UGFyYW1zLmRldmljZUlkfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgICBuYW1lPVwiZmxvd19pZFwiXG4gICAgICAgICAgICAgICAgICB0eXBlPVwiaGlkZGVuXCJcbiAgICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnByb3BzLmZsb3dQYXJhbXMuZmxvd0lkfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgICBuYW1lPVwiZmxvd19iZWdpbl90aW1lXCJcbiAgICAgICAgICAgICAgICAgIHR5cGU9XCJoaWRkZW5cIlxuICAgICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMucHJvcHMuZmxvd1BhcmFtcy5mbG93QmVnaW5UaW1lfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImVycm9yXCJcbiAgICAgICAgICAgICAgICAgIGRhdGEtbDEwbi1pZD1cIm9uYm9hcmRpbmctc3luYy1mb3JtLWludmFsaWQtaW5wdXRcIlxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJlbWFpbC1pbnB1dFwiXG4gICAgICAgICAgICAgICAgICBuYW1lPVwiZW1haWxcIlxuICAgICAgICAgICAgICAgICAgdHlwZT1cImVtYWlsXCJcbiAgICAgICAgICAgICAgICAgIHJlcXVpcmVkPXt0cnVlfVxuICAgICAgICAgICAgICAgICAgb25JbnZhbGlkPXt0aGlzLm9uSW5wdXRJbnZhbGlkfVxuICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMub25JbnB1dENoYW5nZX1cbiAgICAgICAgICAgICAgICAgIGRhdGEtbDEwbi1pZD1cIm9uYm9hcmRpbmctc3luYy1mb3JtLWlucHV0XCJcbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZXh0cmEtbGlua3NcIj5cbiAgICAgICAgICAgICAgICAgIDxwIGRhdGEtbDEwbi1pZD1cIm9uYm9hcmRpbmctc3luYy1sZWdhbC1ub3RpY2VcIj5cbiAgICAgICAgICAgICAgICAgICAgPGFcbiAgICAgICAgICAgICAgICAgICAgICBkYXRhLWwxMG4tbmFtZT1cInRlcm1zXCJcbiAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ9XCJfYmxhbmtcIlxuICAgICAgICAgICAgICAgICAgICAgIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIlxuICAgICAgICAgICAgICAgICAgICAgIGhyZWY9e2Ake3RoaXMucHJvcHMuZnhhX2VuZHBvaW50fS9sZWdhbC90ZXJtcz8ke1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51dG1QYXJhbXNcbiAgICAgICAgICAgICAgICAgICAgICB9YH1cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgPGFcbiAgICAgICAgICAgICAgICAgICAgICBkYXRhLWwxMG4tbmFtZT1cInByaXZhY3lcIlxuICAgICAgICAgICAgICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgICAgICAgICAgICAgICAgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlclwiXG4gICAgICAgICAgICAgICAgICAgICAgaHJlZj17YCR7dGhpcy5wcm9wcy5meGFfZW5kcG9pbnR9L2xlZ2FsL3ByaXZhY3k/JHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXRtUGFyYW1zXG4gICAgICAgICAgICAgICAgICAgICAgfWB9XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiY29udGludWUtYnV0dG9uXCJcbiAgICAgICAgICAgICAgICAgIHR5cGU9XCJzdWJtaXRcIlxuICAgICAgICAgICAgICAgICAgZGF0YS1sMTBuLWlkPVwib25ib2FyZGluZy1zeW5jLWZvcm0tY29udGludWUtYnV0dG9uXCJcbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8L2Zvcm0+XG4gICAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJza2lwLWJ1dHRvblwiXG4gICAgICAgICAgICAgICAgZGlzYWJsZWQ9eyEhdGhpcy5zdGF0ZS5lbWFpbElucHV0fVxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuY2xpY2tTa2lwfVxuICAgICAgICAgICAgICAgIGRhdGEtbDEwbi1pZD1cIm9uYm9hcmRpbmctc3luYy1mb3JtLXNraXAtbG9naW4tYnV0dG9uXCJcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cblxuU3RhcnR1cE92ZXJsYXkuZGVmYXVsdFByb3BzID0ge1xuICBmbG93UGFyYW1zOiB7IGRldmljZUlkOiBcIlwiLCBmbG93SWQ6IFwiXCIsIGZsb3dCZWdpblRpbWU6IFwiXCIgfSxcbn07XG4iLCIvKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIGZpbGUsXG4gKiBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLiAqL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBPbmJvYXJkaW5nQ2FyZCB9IGZyb20gXCIuLi8uLi90ZW1wbGF0ZXMvT25ib2FyZGluZ01lc3NhZ2UvT25ib2FyZGluZ01lc3NhZ2VcIjtcbmltcG9ydCB7IGFkZFV0bVBhcmFtcyB9IGZyb20gXCIuL2FkZFV0bVBhcmFtc1wiO1xuXG5leHBvcnQgY2xhc3MgVHJpcGxldHMgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5vbkNhcmRBY3Rpb24gPSB0aGlzLm9uQ2FyZEFjdGlvbi5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25IaWRlQ29udGFpbmVyID0gdGhpcy5vbkhpZGVDb250YWluZXIuYmluZCh0aGlzKTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICBnbG9iYWwuZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKFwiaW5saW5lLW9uYm9hcmRpbmdcIik7XG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLnByb3BzLmRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZShcImlubGluZS1vbmJvYXJkaW5nXCIpO1xuICB9XG5cbiAgb25DYXJkQWN0aW9uKGFjdGlvbikge1xuICAgIGxldCBhY3Rpb25VcGRhdGVzID0ge307XG4gICAgY29uc3QgeyBmbG93UGFyYW1zLCBVVE1UZXJtIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgaWYgKGFjdGlvbi50eXBlID09PSBcIk9QRU5fVVJMXCIpIHtcbiAgICAgIGxldCB1cmwgPSBuZXcgVVJMKGFjdGlvbi5kYXRhLmFyZ3MpO1xuICAgICAgYWRkVXRtUGFyYW1zKHVybCwgVVRNVGVybSk7XG5cbiAgICAgIGlmIChhY3Rpb24uYWRkRmxvd1BhcmFtcykge1xuICAgICAgICB1cmwuc2VhcmNoUGFyYW1zLmFwcGVuZChcImRldmljZV9pZFwiLCBmbG93UGFyYW1zLmRldmljZUlkKTtcbiAgICAgICAgdXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQoXCJmbG93X2lkXCIsIGZsb3dQYXJhbXMuZmxvd0lkKTtcbiAgICAgICAgdXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQoXCJmbG93X2JlZ2luX3RpbWVcIiwgZmxvd1BhcmFtcy5mbG93QmVnaW5UaW1lKTtcbiAgICAgIH1cblxuICAgICAgYWN0aW9uVXBkYXRlcyA9IHsgZGF0YTogeyAuLi5hY3Rpb24uZGF0YSwgYXJnczogdXJsLnRvU3RyaW5nKCkgfSB9O1xuICAgIH1cblxuICAgIHRoaXMucHJvcHMub25BY3Rpb24oeyAuLi5hY3Rpb24sIC4uLmFjdGlvblVwZGF0ZXMgfSk7XG4gIH1cblxuICBvbkhpZGVDb250YWluZXIoKSB7XG4gICAgY29uc3QgeyBzZW5kVXNlckFjdGlvblRlbGVtZXRyeSwgY2FyZHMsIGhpZGVDb250YWluZXIgfSA9IHRoaXMucHJvcHM7XG4gICAgaGlkZUNvbnRhaW5lcigpO1xuICAgIHNlbmRVc2VyQWN0aW9uVGVsZW1ldHJ5KHtcbiAgICAgIGV2ZW50OiBcIkRJU01JU1NcIixcbiAgICAgIGlkOiBcIm9uYm9hcmRpbmctY2FyZHNcIixcbiAgICAgIG1lc3NhZ2VfaWQ6IGNhcmRzLm1hcChtID0+IG0uaWQpLmpvaW4oXCIsXCIpLFxuICAgICAgYWN0aW9uOiBcIm9uYm9hcmRpbmdfdXNlcl9ldmVudFwiLFxuICAgIH0pO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGNhcmRzLFxuICAgICAgc2hvd0NhcmRQYW5lbCxcbiAgICAgIHNob3dDb250ZW50LFxuICAgICAgc2VuZFVzZXJBY3Rpb25UZWxlbWV0cnksXG4gICAgfSA9IHRoaXMucHJvcHM7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXZcbiAgICAgICAgY2xhc3NOYW1lPXtgdHJhaWxoZWFkQ2FyZHMgJHtzaG93Q2FyZFBhbmVsID8gXCJleHBhbmRlZFwiIDogXCJjb2xsYXBzZWRcIn1gfVxuICAgICAgPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRyYWlsaGVhZENhcmRzSW5uZXJcIiBhcmlhLWhpZGRlbj17IXNob3dDb250ZW50fT5cbiAgICAgICAgICA8aDEgZGF0YS1sMTBuLWlkPVwib25ib2FyZGluZy13ZWxjb21lLWhlYWRlclwiIC8+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2B0cmFpbGhlYWRDYXJkR3JpZCR7c2hvd0NvbnRlbnQgPyBcIiBzaG93XCIgOiBcIlwifWB9PlxuICAgICAgICAgICAge2NhcmRzLm1hcChjYXJkID0+IChcbiAgICAgICAgICAgICAgPE9uYm9hcmRpbmdDYXJkXG4gICAgICAgICAgICAgICAga2V5PXtjYXJkLmlkfVxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInRyYWlsaGVhZENhcmRcIlxuICAgICAgICAgICAgICAgIHNlbmRVc2VyQWN0aW9uVGVsZW1ldHJ5PXtzZW5kVXNlckFjdGlvblRlbGVtZXRyeX1cbiAgICAgICAgICAgICAgICBvbkFjdGlvbj17dGhpcy5vbkNhcmRBY3Rpb259XG4gICAgICAgICAgICAgICAgVUlTdXJmYWNlPVwiVFJBSUxIRUFEXCJcbiAgICAgICAgICAgICAgICB7Li4uY2FyZH1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICkpfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIHtzaG93Q2FyZFBhbmVsICYmIChcbiAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiaWNvbiBpY29uLWRpc21pc3NcIlxuICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLm9uSGlkZUNvbnRhaW5lcn1cbiAgICAgICAgICAgICAgZGF0YS1sMTBuLWlkPVwib25ib2FyZGluZy1jYXJkcy1kaXNtaXNzXCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKX1cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG4iLCIvKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIGZpbGUsXG4gKiBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLiAqL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbmV4cG9ydCBjbGFzcyBPbmJvYXJkaW5nQ2FyZCBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLm9uQ2xpY2sgPSB0aGlzLm9uQ2xpY2suYmluZCh0aGlzKTtcbiAgfVxuXG4gIG9uQ2xpY2soKSB7XG4gICAgY29uc3QgeyBwcm9wcyB9ID0gdGhpcztcbiAgICBjb25zdCBwaW5nID0ge1xuICAgICAgZXZlbnQ6IFwiQ0xJQ0tfQlVUVE9OXCIsXG4gICAgICBtZXNzYWdlX2lkOiBwcm9wcy5pZCxcbiAgICAgIGlkOiBwcm9wcy5VSVN1cmZhY2UsXG4gICAgfTtcbiAgICBwcm9wcy5zZW5kVXNlckFjdGlvblRlbGVtZXRyeShwaW5nKTtcbiAgICBwcm9wcy5vbkFjdGlvbihwcm9wcy5jb250ZW50LnByaW1hcnlfYnV0dG9uLmFjdGlvbik7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBjb250ZW50IH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IGNsYXNzTmFtZSA9IHRoaXMucHJvcHMuY2xhc3NOYW1lIHx8IFwib25ib2FyZGluZ01lc3NhZ2VcIjtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzTmFtZX0+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtgb25ib2FyZGluZ01lc3NhZ2VJbWFnZSAke2NvbnRlbnQuaWNvbn1gfSAvPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9uYm9hcmRpbmdDb250ZW50XCI+XG4gICAgICAgICAgPHNwYW4+XG4gICAgICAgICAgICA8aDNcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwib25ib2FyZGluZ1RpdGxlXCJcbiAgICAgICAgICAgICAgZGF0YS1sMTBuLWlkPXtjb250ZW50LnRpdGxlLnN0cmluZ19pZH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8cFxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJvbmJvYXJkaW5nVGV4dFwiXG4gICAgICAgICAgICAgIGRhdGEtbDEwbi1pZD17Y29udGVudC50ZXh0LnN0cmluZ19pZH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cIm9uYm9hcmRpbmdCdXR0b25Db250YWluZXJcIj5cbiAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgZGF0YS1sMTBuLWlkPXtjb250ZW50LnByaW1hcnlfYnV0dG9uLmxhYmVsLnN0cmluZ19pZH1cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYnV0dG9uIG9uYm9hcmRpbmdCdXR0b25cIlxuICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLm9uQ2xpY2t9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFJlYWN0UmVkdXg7IiwiLyogVGhpcyBTb3VyY2UgQ29kZSBGb3JtIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBNb3ppbGxhIFB1YmxpY1xuICogTGljZW5zZSwgdi4gMi4wLiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBmaWxlLFxuICogWW91IGNhbiBvYnRhaW4gb25lIGF0IGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy4gKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuXG5leHBvcnQgY2xhc3MgU2ltcGxlSGFzaFJvdXRlciBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLm9uSGFzaENoYW5nZSA9IHRoaXMub25IYXNoQ2hhbmdlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHsgaGFzaDogZ2xvYmFsLmxvY2F0aW9uLmhhc2ggfTtcbiAgfVxuXG4gIG9uSGFzaENoYW5nZSgpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgaGFzaDogZ2xvYmFsLmxvY2F0aW9uLmhhc2ggfSk7XG4gIH1cblxuICBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJoYXNoY2hhbmdlXCIsIHRoaXMub25IYXNoQ2hhbmdlKTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIGdsb2JhbC5yZW1vdmVFdmVudExpc3RlbmVyKFwiaGFzaGNoYW5nZVwiLCB0aGlzLm9uSGFzaENoYW5nZSk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgWywgLi4ucm91dGVzXSA9IHRoaXMuc3RhdGUuaGFzaC5zcGxpdChcIi1cIik7XG4gICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudCh0aGlzLnByb3BzLmNoaWxkcmVuLCB7XG4gICAgICBsb2NhdGlvbjoge1xuICAgICAgICBoYXNoOiB0aGlzLnN0YXRlLmhhc2gsXG4gICAgICAgIHJvdXRlcyxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cbn1cbiIsIi8qIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXMgZmlsZSxcbiAqIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uICovXG5cbmltcG9ydCB7IGFjdGlvbkNyZWF0b3JzIGFzIGFjLCBhY3Rpb25UeXBlcyB9IGZyb20gXCJjb21tb24vQWN0aW9ucy5qc21cIjtcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuLyoqXG4gKiBDb25maXJtRGlhbG9nIGNvbXBvbmVudC5cbiAqIE9uZSBwcmltYXJ5IGFjdGlvbiBidXR0b24sIG9uZSBjYW5jZWwgYnV0dG9uLlxuICpcbiAqIENvbnRlbnQgZGlzcGxheWVkIGlzIGNvbnRyb2xsZWQgYnkgYGRhdGFgIHByb3AgdGhlIGNvbXBvbmVudCByZWNlaXZlcy5cbiAqIEV4YW1wbGU6XG4gKiBkYXRhOiB7XG4gKiAgIC8vIEFueSBzb3J0IG9mIGRhdGEgbmVlZGVkIHRvIGJlIHBhc3NlZCBhcm91bmQgYnkgYWN0aW9ucy5cbiAqICAgcGF5bG9hZDogc2l0ZS51cmwsXG4gKiAgIC8vIFByaW1hcnkgYnV0dG9uIEFsc29Ub01haW4gYWN0aW9uLlxuICogICBhY3Rpb246IFwiREVMRVRFX0hJU1RPUllfVVJMXCIsXG4gKiAgIC8vIFByaW1hcnkgYnV0dG9uIFVTZXJFdmVudCBhY3Rpb24uXG4gKiAgIHVzZXJFdmVudDogXCJERUxFVEVcIixcbiAqICAgLy8gQXJyYXkgb2YgbG9jYWxlIGlkcyB0byBkaXNwbGF5LlxuICogICBtZXNzYWdlX2JvZHk6IFtcImNvbmZpcm1faGlzdG9yeV9kZWxldGVfcDFcIiwgXCJjb25maXJtX2hpc3RvcnlfZGVsZXRlX25vdGljZV9wMlwiXSxcbiAqICAgLy8gVGV4dCBmb3IgcHJpbWFyeSBidXR0b24uXG4gKiAgIGNvbmZpcm1fYnV0dG9uX3N0cmluZ19pZDogXCJtZW51X2FjdGlvbl9kZWxldGVcIlxuICogfSxcbiAqL1xuZXhwb3J0IGNsYXNzIF9Db25maXJtRGlhbG9nIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuX2hhbmRsZUNhbmNlbEJ0biA9IHRoaXMuX2hhbmRsZUNhbmNlbEJ0bi5iaW5kKHRoaXMpO1xuICAgIHRoaXMuX2hhbmRsZUNvbmZpcm1CdG4gPSB0aGlzLl9oYW5kbGVDb25maXJtQnRuLmJpbmQodGhpcyk7XG4gIH1cblxuICBfaGFuZGxlQ2FuY2VsQnRuKCkge1xuICAgIHRoaXMucHJvcHMuZGlzcGF0Y2goeyB0eXBlOiBhY3Rpb25UeXBlcy5ESUFMT0dfQ0FOQ0VMIH0pO1xuICAgIHRoaXMucHJvcHMuZGlzcGF0Y2goXG4gICAgICBhYy5Vc2VyRXZlbnQoe1xuICAgICAgICBldmVudDogYWN0aW9uVHlwZXMuRElBTE9HX0NBTkNFTCxcbiAgICAgICAgc291cmNlOiB0aGlzLnByb3BzLmRhdGEuZXZlbnRTb3VyY2UsXG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICBfaGFuZGxlQ29uZmlybUJ0bigpIHtcbiAgICB0aGlzLnByb3BzLmRhdGEub25Db25maXJtLmZvckVhY2godGhpcy5wcm9wcy5kaXNwYXRjaCk7XG4gIH1cblxuICBfcmVuZGVyTW9kYWxNZXNzYWdlKCkge1xuICAgIGNvbnN0IG1lc3NhZ2VfYm9keSA9IHRoaXMucHJvcHMuZGF0YS5ib2R5X3N0cmluZ19pZDtcblxuICAgIGlmICghbWVzc2FnZV9ib2R5KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPHNwYW4+XG4gICAgICAgIHttZXNzYWdlX2JvZHkubWFwKG1zZyA9PiAoXG4gICAgICAgICAgPHAga2V5PXttc2d9IGRhdGEtbDEwbi1pZD17bXNnfSAvPlxuICAgICAgICApKX1cbiAgICAgIDwvc3Bhbj5cbiAgICApO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGlmICghdGhpcy5wcm9wcy52aXNpYmxlKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb25maXJtYXRpb24tZGlhbG9nXCI+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjbGFzc05hbWU9XCJtb2RhbC1vdmVybGF5XCJcbiAgICAgICAgICBvbkNsaWNrPXt0aGlzLl9oYW5kbGVDYW5jZWxCdG59XG4gICAgICAgICAgcm9sZT1cInByZXNlbnRhdGlvblwiXG4gICAgICAgIC8+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibW9kYWxcIj5cbiAgICAgICAgICA8c2VjdGlvbiBjbGFzc05hbWU9XCJtb2RhbC1tZXNzYWdlXCI+XG4gICAgICAgICAgICB7dGhpcy5wcm9wcy5kYXRhLmljb24gJiYgKFxuICAgICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17YGljb24gaWNvbi1zcGFjZXIgaWNvbi0ke3RoaXMucHJvcHMuZGF0YS5pY29ufWB9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICApfVxuICAgICAgICAgICAge3RoaXMuX3JlbmRlck1vZGFsTWVzc2FnZSgpfVxuICAgICAgICAgIDwvc2VjdGlvbj5cbiAgICAgICAgICA8c2VjdGlvbiBjbGFzc05hbWU9XCJhY3Rpb25zXCI+XG4gICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuX2hhbmRsZUNhbmNlbEJ0bn1cbiAgICAgICAgICAgICAgZGF0YS1sMTBuLWlkPXt0aGlzLnByb3BzLmRhdGEuY2FuY2VsX2J1dHRvbl9zdHJpbmdfaWR9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJkb25lXCJcbiAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5faGFuZGxlQ29uZmlybUJ0bn1cbiAgICAgICAgICAgICAgZGF0YS1sMTBuLWlkPXt0aGlzLnByb3BzLmRhdGEuY29uZmlybV9idXR0b25fc3RyaW5nX2lkfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L3NlY3Rpb24+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgQ29uZmlybURpYWxvZyA9IGNvbm5lY3Qoc3RhdGUgPT4gc3RhdGUuRGlhbG9nKShfQ29uZmlybURpYWxvZyk7XG4iLCIvKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIGZpbGUsXG4gKiBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLiAqL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbmV4cG9ydCBjbGFzcyBDb250ZXh0TWVudSBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLmhpZGVDb250ZXh0ID0gdGhpcy5oaWRlQ29udGV4dC5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25TaG93ID0gdGhpcy5vblNob3cuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uQ2xpY2sgPSB0aGlzLm9uQ2xpY2suYmluZCh0aGlzKTtcbiAgfVxuXG4gIGhpZGVDb250ZXh0KCkge1xuICAgIHRoaXMucHJvcHMub25VcGRhdGUoZmFsc2UpO1xuICB9XG5cbiAgb25TaG93KCkge1xuICAgIGlmICh0aGlzLnByb3BzLm9uU2hvdykge1xuICAgICAgdGhpcy5wcm9wcy5vblNob3coKTtcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLm9uU2hvdygpO1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLmhpZGVDb250ZXh0KTtcbiAgICB9LCAwKTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIGdsb2JhbC5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5oaWRlQ29udGV4dCk7XG4gIH1cblxuICBvbkNsaWNrKGV2ZW50KSB7XG4gICAgLy8gRWF0IGFsbCBjbGlja3Mgb24gdGhlIGNvbnRleHQgbWVudSBzbyB0aGV5IGRvbid0IGJ1YmJsZSB1cCB0byB3aW5kb3cuXG4gICAgLy8gVGhpcyBwcmV2ZW50cyB0aGUgY29udGV4dCBtZW51IGZyb20gY2xvc2luZyB3aGVuIGNsaWNraW5nIGRpc2FibGVkIGl0ZW1zXG4gICAgLy8gb3IgdGhlIHNlcGFyYXRvcnMuXG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgLy8gRGlzYWJsaW5nIGZvY3VzIG9uIHRoZSBtZW51IHNwYW4gYWxsb3dzIHRoZSBmaXJzdCB0YWIgdG8gZm9jdXMgb24gdGhlIGZpcnN0IG1lbnUgaXRlbSBpbnN0ZWFkIG9mIHRoZSB3cmFwcGVyLlxuICAgIHJldHVybiAoXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUganN4LWExMXkvaW50ZXJhY3RpdmUtc3VwcG9ydHMtZm9jdXNcbiAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImNvbnRleHQtbWVudVwiPlxuICAgICAgICA8dWxcbiAgICAgICAgICByb2xlPVwibWVudVwiXG4gICAgICAgICAgb25DbGljaz17dGhpcy5vbkNsaWNrfVxuICAgICAgICAgIG9uS2V5RG93bj17dGhpcy5vbkNsaWNrfVxuICAgICAgICAgIGNsYXNzTmFtZT1cImNvbnRleHQtbWVudS1saXN0XCJcbiAgICAgICAgPlxuICAgICAgICAgIHt0aGlzLnByb3BzLm9wdGlvbnMubWFwKChvcHRpb24sIGkpID0+XG4gICAgICAgICAgICBvcHRpb24udHlwZSA9PT0gXCJzZXBhcmF0b3JcIiA/IChcbiAgICAgICAgICAgICAgPGxpIGtleT17aX0gY2xhc3NOYW1lPVwic2VwYXJhdG9yXCIgcm9sZT1cInNlcGFyYXRvclwiIC8+XG4gICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICBvcHRpb24udHlwZSAhPT0gXCJlbXB0eVwiICYmIChcbiAgICAgICAgICAgICAgICA8Q29udGV4dE1lbnVJdGVtXG4gICAgICAgICAgICAgICAgICBrZXk9e2l9XG4gICAgICAgICAgICAgICAgICBvcHRpb249e29wdGlvbn1cbiAgICAgICAgICAgICAgICAgIGhpZGVDb250ZXh0PXt0aGlzLmhpZGVDb250ZXh0fVxuICAgICAgICAgICAgICAgICAga2V5Ym9hcmRBY2Nlc3M9e3RoaXMucHJvcHMua2V5Ym9hcmRBY2Nlc3N9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKVxuICAgICAgICAgICl9XG4gICAgICAgIDwvdWw+XG4gICAgICA8L3NwYW4+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQ29udGV4dE1lbnVJdGVtIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMub25DbGljayA9IHRoaXMub25DbGljay5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25LZXlEb3duID0gdGhpcy5vbktleURvd24uYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uS2V5VXAgPSB0aGlzLm9uS2V5VXAuYmluZCh0aGlzKTtcbiAgICB0aGlzLmZvY3VzRmlyc3QgPSB0aGlzLmZvY3VzRmlyc3QuYmluZCh0aGlzKTtcbiAgfVxuXG4gIG9uQ2xpY2soKSB7XG4gICAgdGhpcy5wcm9wcy5oaWRlQ29udGV4dCgpO1xuICAgIHRoaXMucHJvcHMub3B0aW9uLm9uQ2xpY2soKTtcbiAgfVxuXG4gIC8vIEZvY3VzIHRoZSBmaXJzdCBtZW51IGl0ZW0gaWYgdGhlIG1lbnUgd2FzIGFjY2Vzc2VkIHZpYSB0aGUga2V5Ym9hcmQuXG4gIGZvY3VzRmlyc3QoYnV0dG9uKSB7XG4gICAgaWYgKHRoaXMucHJvcHMua2V5Ym9hcmRBY2Nlc3MgJiYgYnV0dG9uKSB7XG4gICAgICBidXR0b24uZm9jdXMoKTtcbiAgICB9XG4gIH1cblxuICAvLyBUaGlzIHNlbGVjdHMgdGhlIGNvcnJlY3Qgbm9kZSBiYXNlZCBvbiB0aGUga2V5IHByZXNzZWRcbiAgZm9jdXNTaWJsaW5nKHRhcmdldCwga2V5KSB7XG4gICAgY29uc3QgcGFyZW50ID0gdGFyZ2V0LnBhcmVudE5vZGU7XG4gICAgY29uc3QgY2xvc2VzdFNpYmxpbmdTZWxlY3RvciA9XG4gICAgICBrZXkgPT09IFwiQXJyb3dVcFwiID8gXCJwcmV2aW91c1NpYmxpbmdcIiA6IFwibmV4dFNpYmxpbmdcIjtcbiAgICBpZiAoIXBhcmVudFtjbG9zZXN0U2libGluZ1NlbGVjdG9yXSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAocGFyZW50W2Nsb3Nlc3RTaWJsaW5nU2VsZWN0b3JdLmZpcnN0RWxlbWVudENoaWxkKSB7XG4gICAgICBwYXJlbnRbY2xvc2VzdFNpYmxpbmdTZWxlY3Rvcl0uZmlyc3RFbGVtZW50Q2hpbGQuZm9jdXMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGFyZW50W2Nsb3Nlc3RTaWJsaW5nU2VsZWN0b3JdW1xuICAgICAgICBjbG9zZXN0U2libGluZ1NlbGVjdG9yXG4gICAgICBdLmZpcnN0RWxlbWVudENoaWxkLmZvY3VzKCk7XG4gICAgfVxuICB9XG5cbiAgb25LZXlEb3duKGV2ZW50KSB7XG4gICAgY29uc3QgeyBvcHRpb24gfSA9IHRoaXMucHJvcHM7XG4gICAgc3dpdGNoIChldmVudC5rZXkpIHtcbiAgICAgIGNhc2UgXCJUYWJcIjpcbiAgICAgICAgLy8gdGFiIGdvZXMgZG93biBpbiBjb250ZXh0IG1lbnUsIHNoaWZ0ICsgdGFiIGdvZXMgdXAgaW4gY29udGV4dCBtZW51XG4gICAgICAgIC8vIGlmIHdlJ3JlIG9uIHRoZSBsYXN0IGl0ZW0sIG9uZSBtb3JlIHRhYiB3aWxsIGNsb3NlIHRoZSBjb250ZXh0IG1lbnVcbiAgICAgICAgLy8gc2ltaWxhcmx5LCBpZiB3ZSdyZSBvbiB0aGUgZmlyc3QgaXRlbSwgb25lIG1vcmUgc2hpZnQgKyB0YWIgd2lsbCBjbG9zZSBpdFxuICAgICAgICBpZiAoXG4gICAgICAgICAgKGV2ZW50LnNoaWZ0S2V5ICYmIG9wdGlvbi5maXJzdCkgfHxcbiAgICAgICAgICAoIWV2ZW50LnNoaWZ0S2V5ICYmIG9wdGlvbi5sYXN0KVxuICAgICAgICApIHtcbiAgICAgICAgICB0aGlzLnByb3BzLmhpZGVDb250ZXh0KCk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiQXJyb3dVcFwiOlxuICAgICAgY2FzZSBcIkFycm93RG93blwiOlxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB0aGlzLmZvY3VzU2libGluZyhldmVudC50YXJnZXQsIGV2ZW50LmtleSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIkVudGVyXCI6XG4gICAgICBjYXNlIFwiIFwiOlxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB0aGlzLnByb3BzLmhpZGVDb250ZXh0KCk7XG4gICAgICAgIG9wdGlvbi5vbkNsaWNrKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIkVzY2FwZVwiOlxuICAgICAgICB0aGlzLnByb3BzLmhpZGVDb250ZXh0KCk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIC8vIFByZXZlbnRzIHRoZSBkZWZhdWx0IGJlaGF2aW9yIG9mIHNwYWNlYmFyXG4gIC8vIHNjcm9sbGluZyB0aGUgcGFnZSAmIGF1dG8tdHJpZ2dlcmluZyBidXR0b25zLlxuICBvbktleVVwKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LmtleSA9PT0gXCIgXCIpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgb3B0aW9uIH0gPSB0aGlzLnByb3BzO1xuICAgIHJldHVybiAoXG4gICAgICA8bGkgcm9sZT1cInByZXNlbnRhdGlvblwiIGNsYXNzTmFtZT1cImNvbnRleHQtbWVudS1pdGVtXCI+XG4gICAgICAgIDxidXR0b25cbiAgICAgICAgICBjbGFzc05hbWU9e29wdGlvbi5kaXNhYmxlZCA/IFwiZGlzYWJsZWRcIiA6IFwiXCJ9XG4gICAgICAgICAgcm9sZT1cIm1lbnVpdGVtXCJcbiAgICAgICAgICBvbkNsaWNrPXt0aGlzLm9uQ2xpY2t9XG4gICAgICAgICAgb25LZXlEb3duPXt0aGlzLm9uS2V5RG93bn1cbiAgICAgICAgICBvbktleVVwPXt0aGlzLm9uS2V5VXB9XG4gICAgICAgICAgcmVmPXtvcHRpb24uZmlyc3QgPyB0aGlzLmZvY3VzRmlyc3QgOiBudWxsfVxuICAgICAgICA+XG4gICAgICAgICAge29wdGlvbi5pY29uICYmIChcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT17YGljb24gaWNvbi1zcGFjZXIgaWNvbi0ke29wdGlvbi5pY29ufWB9IC8+XG4gICAgICAgICAgKX1cbiAgICAgICAgICA8c3BhbiBkYXRhLWwxMG4taWQ9e29wdGlvbi5zdHJpbmdfaWQgfHwgb3B0aW9uLmlkfSAvPlxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgIDwvbGk+XG4gICAgKTtcbiAgfVxufVxuIiwiLyogVGhpcyBTb3VyY2UgQ29kZSBGb3JtIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBNb3ppbGxhIFB1YmxpY1xuICogTGljZW5zZSwgdi4gMi4wLiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBmaWxlLFxuICogWW91IGNhbiBvYnRhaW4gb25lIGF0IGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy4gKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuXG5leHBvcnQgY2xhc3MgQ29udGV4dE1lbnVCdXR0b24gZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHNob3dDb250ZXh0TWVudTogZmFsc2UsXG4gICAgICBjb250ZXh0TWVudUtleWJvYXJkOiBmYWxzZSxcbiAgICB9O1xuICAgIHRoaXMub25DbGljayA9IHRoaXMub25DbGljay5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25LZXlEb3duID0gdGhpcy5vbktleURvd24uYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uVXBkYXRlID0gdGhpcy5vblVwZGF0ZS5iaW5kKHRoaXMpO1xuICB9XG5cbiAgb3BlbkNvbnRleHRNZW51KGlzS2V5Qm9hcmQsIGV2ZW50KSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25VcGRhdGUpIHtcbiAgICAgIHRoaXMucHJvcHMub25VcGRhdGUodHJ1ZSk7XG4gICAgfVxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgc2hvd0NvbnRleHRNZW51OiB0cnVlLFxuICAgICAgY29udGV4dE1lbnVLZXlib2FyZDogaXNLZXlCb2FyZCxcbiAgICB9KTtcbiAgfVxuXG4gIG9uQ2xpY2soZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHRoaXMub3BlbkNvbnRleHRNZW51KGZhbHNlLCBldmVudCk7XG4gIH1cblxuICBvbktleURvd24oZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQua2V5ID09PSBcIkVudGVyXCIgfHwgZXZlbnQua2V5ID09PSBcIiBcIikge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRoaXMub3BlbkNvbnRleHRNZW51KHRydWUsIGV2ZW50KTtcbiAgICB9XG4gIH1cblxuICBvblVwZGF0ZShzaG93Q29udGV4dE1lbnUpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vblVwZGF0ZSkge1xuICAgICAgdGhpcy5wcm9wcy5vblVwZGF0ZShzaG93Q29udGV4dE1lbnUpO1xuICAgIH1cbiAgICB0aGlzLnNldFN0YXRlKHsgc2hvd0NvbnRleHRNZW51IH0pO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgdG9vbHRpcEFyZ3MsIHRvb2x0aXAsIGNoaWxkcmVuLCByZWZGdW5jdGlvbiB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IHNob3dDb250ZXh0TWVudSwgY29udGV4dE1lbnVLZXlib2FyZCB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIHJldHVybiAoXG4gICAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICAgIDxidXR0b25cbiAgICAgICAgICBhcmlhLWhhc3BvcHVwPVwidHJ1ZVwiXG4gICAgICAgICAgZGF0YS1sMTBuLWlkPXt0b29sdGlwfVxuICAgICAgICAgIGRhdGEtbDEwbi1hcmdzPXt0b29sdGlwQXJncyA/IEpTT04uc3RyaW5naWZ5KHRvb2x0aXBBcmdzKSA6IG51bGx9XG4gICAgICAgICAgY2xhc3NOYW1lPVwiY29udGV4dC1tZW51LWJ1dHRvbiBpY29uXCJcbiAgICAgICAgICBvbktleURvd249e3RoaXMub25LZXlEb3dufVxuICAgICAgICAgIG9uQ2xpY2s9e3RoaXMub25DbGlja31cbiAgICAgICAgICByZWY9e3JlZkZ1bmN0aW9ufVxuICAgICAgICAvPlxuICAgICAgICB7c2hvd0NvbnRleHRNZW51XG4gICAgICAgICAgPyBSZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGRyZW4sIHtcbiAgICAgICAgICAgICAga2V5Ym9hcmRBY2Nlc3M6IGNvbnRleHRNZW51S2V5Ym9hcmQsXG4gICAgICAgICAgICAgIG9uVXBkYXRlOiB0aGlzLm9uVXBkYXRlLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICA6IG51bGx9XG4gICAgICA8L1JlYWN0LkZyYWdtZW50PlxuICAgICk7XG4gIH1cbn1cbiIsIi8qIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXMgZmlsZSxcbiAqIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uICovXG5cbmltcG9ydCB7IGFjdGlvbkNyZWF0b3JzIGFzIGFjLCBhY3Rpb25UeXBlcyBhcyBhdCB9IGZyb20gXCJjb21tb24vQWN0aW9ucy5qc21cIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuY29uc3QgVklTSUJMRSA9IFwidmlzaWJsZVwiO1xuY29uc3QgVklTSUJJTElUWV9DSEFOR0VfRVZFTlQgPSBcInZpc2liaWxpdHljaGFuZ2VcIjtcblxuLy8gUGVyIGFuYWx5dGljYWwgcmVxdWlyZW1lbnQsIHdlIHNldCB0aGUgbWluaW1hbCBpbnRlcnNlY3Rpb24gcmF0aW8gdG9cbi8vIDAuNSwgYW5kIGFuIGltcHJlc3Npb24gaXMgaWRlbnRpZmllZCB3aGVuIHRoZSB3cmFwcGVkIGl0ZW0gaGFzIGF0IGxlYXN0XG4vLyA1MCUgdmlzaWJpbGl0eS5cbi8vXG4vLyBUaGlzIGNvbnN0YW50IGlzIGV4cG9ydGVkIGZvciB1bml0IHRlc3RcbmV4cG9ydCBjb25zdCBJTlRFUlNFQ1RJT05fUkFUSU8gPSAwLjU7XG5cbi8qKlxuICogSW1wcmVzc2lvbiB3cmFwcGVyIGZvciBEaXNjb3ZlcnkgU3RyZWFtIHJlbGF0ZWQgUmVhY3QgY29tcG9uZW50cy5cbiAqXG4gKiBJdCBtYWtzZXMgdXNlIG9mIHRoZSBJbnRlcnNlY3Rpb24gT2JzZXJ2ZXIgQVBJIHRvIGRldGVjdCB0aGUgdmlzaWJpbGl0eSxcbiAqIGFuZCByZWxpZXMgb24gcGFnZSB2aXNpYmlsaXR5IHRvIGVuc3VyZSB0aGUgaW1wcmVzc2lvbiBpcyByZXBvcnRlZFxuICogb25seSB3aGVuIHRoZSBjb21wb25lbnQgaXMgdmlzaWJsZSBvbiB0aGUgcGFnZS5cbiAqXG4gKiBOb3RlOlxuICogICAqIFRoaXMgd3JhcHBlciBjb3VsZCBiZSB1c2VkIGVpdGhlciBhdCB0aGUgaW5kaXZpZHVhbCBjYXJkIGxldmVsLFxuICogICAgIG9yIGJ5IHRoZSBjYXJkIGNvbnRhaW5lciBjb21wb25lbnRzXG4gKiAgICogRWFjaCBpbXByZXNzaW9uIHdpbGwgYmUgc2VudCBvbmx5IG9uY2UgYXMgc29vbiBhcyB0aGUgZGVzaXJlZFxuICogICAgIHZpc2liaWxpdHkgaXMgZGV0ZWN0ZWRcbiAqICAgKiBCYXRjaGluZyBpcyBub3QgeWV0IGltcGxlbWVudGVkLCBoZW5jZSBpdCBtaWdodCBzZW5kIG11bHRpcGxlXG4gKiAgICAgaW1wcmVzc2lvbiBwaW5ncyBzZXBhcmF0ZWx5XG4gKi9cbmV4cG9ydCBjbGFzcyBJbXByZXNzaW9uU3RhdHMgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgLy8gVGhpcyBjaGVja3MgaWYgdGhlIGdpdmVuIGNhcmRzIGFyZSB0aGUgc2FtZSBhcyB0aG9zZSBpbiB0aGUgbGFzdCBpbXByZXNzaW9uIHBpbmcuXG4gIC8vIElmIHNvLCBpdCBzaG91bGQgbm90IHNlbmQgdGhlIHNhbWUgaW1wcmVzc2lvbiBwaW5nIGFnYWluLlxuICBfbmVlZHNJbXByZXNzaW9uU3RhdHMoY2FyZHMpIHtcbiAgICBpZiAoXG4gICAgICAhdGhpcy5pbXByZXNzaW9uQ2FyZEd1aWRzIHx8XG4gICAgICB0aGlzLmltcHJlc3Npb25DYXJkR3VpZHMubGVuZ3RoICE9PSBjYXJkcy5sZW5ndGhcbiAgICApIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2FyZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChjYXJkc1tpXS5pZCAhPT0gdGhpcy5pbXByZXNzaW9uQ2FyZEd1aWRzW2ldKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIF9kaXNwYXRjaEltcHJlc3Npb25TdGF0cygpIHtcbiAgICBjb25zdCB7IHByb3BzIH0gPSB0aGlzO1xuICAgIGNvbnN0IGNhcmRzID0gcHJvcHMucm93cztcblxuICAgIGlmICh0aGlzLnByb3BzLmNhbXBhaWduSWQpIHtcbiAgICAgIHRoaXMucHJvcHMuZGlzcGF0Y2goXG4gICAgICAgIGFjLk9ubHlUb01haW4oe1xuICAgICAgICAgIHR5cGU6IGF0LkRJU0NPVkVSWV9TVFJFQU1fU1BPQ19JTVBSRVNTSU9OLFxuICAgICAgICAgIGRhdGE6IHsgY2FtcGFpZ25JZDogdGhpcy5wcm9wcy5jYW1wYWlnbklkIH0sXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9uZWVkc0ltcHJlc3Npb25TdGF0cyhjYXJkcykpIHtcbiAgICAgIHByb3BzLmRpc3BhdGNoKFxuICAgICAgICBhYy5EaXNjb3ZlcnlTdHJlYW1JbXByZXNzaW9uU3RhdHMoe1xuICAgICAgICAgIHNvdXJjZTogcHJvcHMuc291cmNlLnRvVXBwZXJDYXNlKCksXG4gICAgICAgICAgdGlsZXM6IGNhcmRzLm1hcChsaW5rID0+ICh7XG4gICAgICAgICAgICBpZDogbGluay5pZCxcbiAgICAgICAgICAgIHBvczogbGluay5wb3MsXG4gICAgICAgICAgICAuLi4obGluay5zaGltID8geyBzaGltOiBsaW5rLnNoaW0gfSA6IHt9KSxcbiAgICAgICAgICB9KSksXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgICAgdGhpcy5pbXByZXNzaW9uQ2FyZEd1aWRzID0gY2FyZHMubWFwKGxpbmsgPT4gbGluay5pZCk7XG4gICAgfVxuICB9XG5cbiAgLy8gVGhpcyBjaGVja3MgaWYgdGhlIGdpdmVuIGNhcmRzIGFyZSB0aGUgc2FtZSBhcyB0aG9zZSBpbiB0aGUgbGFzdCBsb2FkZWQgY29udGVudCBwaW5nLlxuICAvLyBJZiBzbywgaXQgc2hvdWxkIG5vdCBzZW5kIHRoZSBzYW1lIGxvYWRlZCBjb250ZW50IHBpbmcgYWdhaW4uXG4gIF9uZWVkc0xvYWRlZENvbnRlbnQoY2FyZHMpIHtcbiAgICBpZiAoXG4gICAgICAhdGhpcy5sb2FkZWRDb250ZW50R3VpZHMgfHxcbiAgICAgIHRoaXMubG9hZGVkQ29udGVudEd1aWRzLmxlbmd0aCAhPT0gY2FyZHMubGVuZ3RoXG4gICAgKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNhcmRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoY2FyZHNbaV0uaWQgIT09IHRoaXMubG9hZGVkQ29udGVudEd1aWRzW2ldKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIF9kaXNwYXRjaExvYWRlZENvbnRlbnQoKSB7XG4gICAgY29uc3QgeyBwcm9wcyB9ID0gdGhpcztcbiAgICBjb25zdCBjYXJkcyA9IHByb3BzLnJvd3M7XG5cbiAgICBpZiAodGhpcy5fbmVlZHNMb2FkZWRDb250ZW50KGNhcmRzKSkge1xuICAgICAgcHJvcHMuZGlzcGF0Y2goXG4gICAgICAgIGFjLkRpc2NvdmVyeVN0cmVhbUxvYWRlZENvbnRlbnQoe1xuICAgICAgICAgIHNvdXJjZTogcHJvcHMuc291cmNlLnRvVXBwZXJDYXNlKCksXG4gICAgICAgICAgdGlsZXM6IGNhcmRzLm1hcChsaW5rID0+ICh7IGlkOiBsaW5rLmlkLCBwb3M6IGxpbmsucG9zIH0pKSxcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgICB0aGlzLmxvYWRlZENvbnRlbnRHdWlkcyA9IGNhcmRzLm1hcChsaW5rID0+IGxpbmsuaWQpO1xuICAgIH1cbiAgfVxuXG4gIHNldEltcHJlc3Npb25PYnNlcnZlck9yQWRkTGlzdGVuZXIoKSB7XG4gICAgY29uc3QgeyBwcm9wcyB9ID0gdGhpcztcblxuICAgIGlmICghcHJvcHMuZGlzcGF0Y2gpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAocHJvcHMuZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlID09PSBWSVNJQkxFKSB7XG4gICAgICAvLyBTZW5kIHRoZSBsb2FkZWQgY29udGVudCBwaW5nIG9uY2UgdGhlIHBhZ2UgaXMgdmlzaWJsZS5cbiAgICAgIHRoaXMuX2Rpc3BhdGNoTG9hZGVkQ29udGVudCgpO1xuICAgICAgdGhpcy5zZXRJbXByZXNzaW9uT2JzZXJ2ZXIoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gV2Ugc2hvdWxkIG9ubHkgZXZlciBzZW5kIHRoZSBsYXRlc3QgaW1wcmVzc2lvbiBzdGF0cyBwaW5nLCBzbyByZW1vdmUgYW55XG4gICAgICAvLyBvbGRlciBsaXN0ZW5lcnMuXG4gICAgICBpZiAodGhpcy5fb25WaXNpYmlsaXR5Q2hhbmdlKSB7XG4gICAgICAgIHByb3BzLmRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgICAgICAgVklTSUJJTElUWV9DSEFOR0VfRVZFTlQsXG4gICAgICAgICAgdGhpcy5fb25WaXNpYmlsaXR5Q2hhbmdlXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX29uVmlzaWJpbGl0eUNoYW5nZSA9ICgpID0+IHtcbiAgICAgICAgaWYgKHByb3BzLmRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSA9PT0gVklTSUJMRSkge1xuICAgICAgICAgIC8vIFNlbmQgdGhlIGxvYWRlZCBjb250ZW50IHBpbmcgb25jZSB0aGUgcGFnZSBpcyB2aXNpYmxlLlxuICAgICAgICAgIHRoaXMuX2Rpc3BhdGNoTG9hZGVkQ29udGVudCgpO1xuICAgICAgICAgIHRoaXMuc2V0SW1wcmVzc2lvbk9ic2VydmVyKCk7XG4gICAgICAgICAgcHJvcHMuZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgICAgIFZJU0lCSUxJVFlfQ0hBTkdFX0VWRU5ULFxuICAgICAgICAgICAgdGhpcy5fb25WaXNpYmlsaXR5Q2hhbmdlXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHByb3BzLmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAgIFZJU0lCSUxJVFlfQ0hBTkdFX0VWRU5ULFxuICAgICAgICB0aGlzLl9vblZpc2liaWxpdHlDaGFuZ2VcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNldCBhbiBpbXByZXNzaW9uIG9ic2VydmVyIGZvciB0aGUgd3JhcHBlZCBjb21wb25lbnQuIEl0IG1ha2VzIHVzZSBvZlxuICAgKiB0aGUgSW50ZXJzZWN0aW9uIE9ic2VydmVyIEFQSSB0byBkZXRlY3QgaWYgdGhlIHdyYXBwZWQgY29tcG9uZW50IGlzXG4gICAqIHZpc2libGUgd2l0aCBhIGRlc2lyZWQgcmF0aW8sIGFuZCBvbmx5IHNlbmRzIGltcHJlc3Npb24gaWYgdGhhdCdzIHRoZSBjYXNlLlxuICAgKlxuICAgKiBTZWUgbW9yZSBkZXRhaWxzIGFib3V0IEludGVyc2VjdGlvbiBPYnNlcnZlciBBUEkgYXQ6XG4gICAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9JbnRlcnNlY3Rpb25fT2JzZXJ2ZXJfQVBJXG4gICAqL1xuICBzZXRJbXByZXNzaW9uT2JzZXJ2ZXIoKSB7XG4gICAgY29uc3QgeyBwcm9wcyB9ID0gdGhpcztcblxuICAgIGlmICghcHJvcHMucm93cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9oYW5kbGVJbnRlcnNlY3QgPSBlbnRyaWVzID0+IHtcbiAgICAgIGlmIChcbiAgICAgICAgZW50cmllcy5zb21lKFxuICAgICAgICAgIGVudHJ5ID0+XG4gICAgICAgICAgICBlbnRyeS5pc0ludGVyc2VjdGluZyAmJlxuICAgICAgICAgICAgZW50cnkuaW50ZXJzZWN0aW9uUmF0aW8gPj0gSU5URVJTRUNUSU9OX1JBVElPXG4gICAgICAgIClcbiAgICAgICkge1xuICAgICAgICB0aGlzLl9kaXNwYXRjaEltcHJlc3Npb25TdGF0cygpO1xuICAgICAgICB0aGlzLmltcHJlc3Npb25PYnNlcnZlci51bm9ic2VydmUodGhpcy5yZWZzLmltcHJlc3Npb24pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBjb25zdCBvcHRpb25zID0geyB0aHJlc2hvbGQ6IElOVEVSU0VDVElPTl9SQVRJTyB9O1xuICAgIHRoaXMuaW1wcmVzc2lvbk9ic2VydmVyID0gbmV3IHByb3BzLkludGVyc2VjdGlvbk9ic2VydmVyKFxuICAgICAgdGhpcy5faGFuZGxlSW50ZXJzZWN0LFxuICAgICAgb3B0aW9uc1xuICAgICk7XG4gICAgdGhpcy5pbXByZXNzaW9uT2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLnJlZnMuaW1wcmVzc2lvbik7XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5yb3dzLmxlbmd0aCkge1xuICAgICAgdGhpcy5zZXRJbXByZXNzaW9uT2JzZXJ2ZXJPckFkZExpc3RlbmVyKCk7XG4gICAgfVxuICB9XG5cbiAgY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgIGlmICh0aGlzLnByb3BzLnJvd3MubGVuZ3RoICYmIHRoaXMucHJvcHMucm93cyAhPT0gcHJldlByb3BzLnJvd3MpIHtcbiAgICAgIHRoaXMuc2V0SW1wcmVzc2lvbk9ic2VydmVyT3JBZGRMaXN0ZW5lcigpO1xuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIGlmICh0aGlzLl9oYW5kbGVJbnRlcnNlY3QgJiYgdGhpcy5pbXByZXNzaW9uT2JzZXJ2ZXIpIHtcbiAgICAgIHRoaXMuaW1wcmVzc2lvbk9ic2VydmVyLnVub2JzZXJ2ZSh0aGlzLnJlZnMuaW1wcmVzc2lvbik7XG4gICAgfVxuICAgIGlmICh0aGlzLl9vblZpc2liaWxpdHlDaGFuZ2UpIHtcbiAgICAgIHRoaXMucHJvcHMuZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgVklTSUJJTElUWV9DSEFOR0VfRVZFTlQsXG4gICAgICAgIHRoaXMuX29uVmlzaWJpbGl0eUNoYW5nZVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgcmVmPXtcImltcHJlc3Npb25cIn0gY2xhc3NOYW1lPVwiaW1wcmVzc2lvbi1vYnNlcnZlclwiPlxuICAgICAgICB7dGhpcy5wcm9wcy5jaGlsZHJlbn1cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cblxuSW1wcmVzc2lvblN0YXRzLmRlZmF1bHRQcm9wcyA9IHtcbiAgSW50ZXJzZWN0aW9uT2JzZXJ2ZXI6IGdsb2JhbC5JbnRlcnNlY3Rpb25PYnNlcnZlcixcbiAgZG9jdW1lbnQ6IGdsb2JhbC5kb2N1bWVudCxcbiAgcm93czogW10sXG4gIHNvdXJjZTogXCJcIixcbn07XG4iLCIvKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIGZpbGUsXG4gKiBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLiAqL1xuXG5pbXBvcnQgeyBhY3Rpb25DcmVhdG9ycyBhcyBhYyB9IGZyb20gXCJjb21tb24vQWN0aW9ucy5qc21cIjtcbmltcG9ydCB7IEVycm9yQm91bmRhcnkgfSBmcm9tIFwiY29udGVudC1zcmMvY29tcG9uZW50cy9FcnJvckJvdW5kYXJ5L0Vycm9yQm91bmRhcnlcIjtcbmltcG9ydCB7IEZsdWVudE9yVGV4dCB9IGZyb20gXCJjb250ZW50LXNyYy9jb21wb25lbnRzL0ZsdWVudE9yVGV4dC9GbHVlbnRPclRleHRcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IFNlY3Rpb25NZW51IH0gZnJvbSBcImNvbnRlbnQtc3JjL2NvbXBvbmVudHMvU2VjdGlvbk1lbnUvU2VjdGlvbk1lbnVcIjtcbmltcG9ydCB7IFNlY3Rpb25NZW51T3B0aW9ucyB9IGZyb20gXCJjb250ZW50LXNyYy9saWIvc2VjdGlvbi1tZW51LW9wdGlvbnNcIjtcbmltcG9ydCB7IENvbnRleHRNZW51QnV0dG9uIH0gZnJvbSBcImNvbnRlbnQtc3JjL2NvbXBvbmVudHMvQ29udGV4dE1lbnUvQ29udGV4dE1lbnVCdXR0b25cIjtcblxuY29uc3QgVklTSUJMRSA9IFwidmlzaWJsZVwiO1xuY29uc3QgVklTSUJJTElUWV9DSEFOR0VfRVZFTlQgPSBcInZpc2liaWxpdHljaGFuZ2VcIjtcblxuZXhwb3J0IGNsYXNzIENvbGxhcHNpYmxlU2VjdGlvbiBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLm9uQm9keU1vdW50ID0gdGhpcy5vbkJvZHlNb3VudC5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25IZWFkZXJDbGljayA9IHRoaXMub25IZWFkZXJDbGljay5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25LZXlQcmVzcyA9IHRoaXMub25LZXlQcmVzcy5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25UcmFuc2l0aW9uRW5kID0gdGhpcy5vblRyYW5zaXRpb25FbmQuYmluZCh0aGlzKTtcbiAgICB0aGlzLmVuYWJsZU9yRGlzYWJsZUFuaW1hdGlvbiA9IHRoaXMuZW5hYmxlT3JEaXNhYmxlQW5pbWF0aW9uLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbk1lbnVCdXR0b25Nb3VzZUVudGVyID0gdGhpcy5vbk1lbnVCdXR0b25Nb3VzZUVudGVyLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbk1lbnVCdXR0b25Nb3VzZUxlYXZlID0gdGhpcy5vbk1lbnVCdXR0b25Nb3VzZUxlYXZlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbk1lbnVVcGRhdGUgPSB0aGlzLm9uTWVudVVwZGF0ZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBlbmFibGVBbmltYXRpb246IHRydWUsXG4gICAgICBpc0FuaW1hdGluZzogZmFsc2UsXG4gICAgICBtZW51QnV0dG9uSG92ZXI6IGZhbHNlLFxuICAgICAgc2hvd0NvbnRleHRNZW51OiBmYWxzZSxcbiAgICB9O1xuICAgIHRoaXMuc2V0Q29udGV4dE1lbnVCdXR0b25SZWYgPSB0aGlzLnNldENvbnRleHRNZW51QnV0dG9uUmVmLmJpbmQodGhpcyk7XG4gIH1cblxuICBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgdGhpcy5wcm9wcy5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgVklTSUJJTElUWV9DSEFOR0VfRVZFTlQsXG4gICAgICB0aGlzLmVuYWJsZU9yRGlzYWJsZUFuaW1hdGlvblxuICAgICk7XG4gIH1cblxuICBjb21wb25lbnRXaWxsVXBkYXRlKG5leHRQcm9wcykge1xuICAgIC8vIENoZWNrIGlmIHdlJ3JlIGFib3V0IHRvIGdvIGZyb20gZXhwYW5kZWQgdG8gY29sbGFwc2VkXG4gICAgaWYgKCF0aGlzLnByb3BzLmNvbGxhcHNlZCAmJiBuZXh0UHJvcHMuY29sbGFwc2VkKSB7XG4gICAgICAvLyBUaGlzIG5leHQgbGluZSBmb3JjZXMgYSBsYXlvdXQgZmx1c2ggb2YgdGhlIHNlY3Rpb24gYm9keSwgd2hpY2ggaGFzIGFcbiAgICAgIC8vIG1heC1oZWlnaHQgc3R5bGUgc2V0LCBzbyB0aGF0IHRoZSB1cGNvbWluZyBjb2xsYXBzZSBhbmltYXRpb24gY2FuXG4gICAgICAvLyBhbmltYXRlIGZyb20gdGhhdCBoZWlnaHQgdG8gdGhlIGNvbGxhcHNlZCBoZWlnaHQuIFdpdGhvdXQgdGhpcywgdGhlXG4gICAgICAvLyB1cGRhdGUgaXMgY29hbGVzY2VkIGFuZCB0aGVyZSdzIG5vIGFuaW1hdGlvbiBmcm9tIG5vLW1heC1oZWlnaHQgdG8gMC5cbiAgICAgIHRoaXMuc2VjdGlvbkJvZHkuc2Nyb2xsSGVpZ2h0OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC1leHByZXNzaW9uc1xuICAgIH1cbiAgfVxuXG4gIHNldENvbnRleHRNZW51QnV0dG9uUmVmKGVsZW1lbnQpIHtcbiAgICB0aGlzLmNvbnRleHRNZW51QnV0dG9uUmVmID0gZWxlbWVudDtcbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMuY29udGV4dE1lbnVCdXR0b25SZWYuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgIFwibW91c2VlbnRlclwiLFxuICAgICAgdGhpcy5vbk1lbnVCdXR0b25Nb3VzZUVudGVyXG4gICAgKTtcbiAgICB0aGlzLmNvbnRleHRNZW51QnV0dG9uUmVmLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICBcIm1vdXNlbGVhdmVcIixcbiAgICAgIHRoaXMub25NZW51QnV0dG9uTW91c2VMZWF2ZVxuICAgICk7XG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLnByb3BzLmRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgICBWSVNJQklMSVRZX0NIQU5HRV9FVkVOVCxcbiAgICAgIHRoaXMuZW5hYmxlT3JEaXNhYmxlQW5pbWF0aW9uXG4gICAgKTtcbiAgICB0aGlzLmNvbnRleHRNZW51QnV0dG9uUmVmLnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgICBcIm1vdXNlZW50ZXJcIixcbiAgICAgIHRoaXMub25NZW51QnV0dG9uTW91c2VFbnRlclxuICAgICk7XG4gICAgdGhpcy5jb250ZXh0TWVudUJ1dHRvblJlZi5yZW1vdmVFdmVudExpc3RlbmVyKFxuICAgICAgXCJtb3VzZWxlYXZlXCIsXG4gICAgICB0aGlzLm9uTWVudUJ1dHRvbk1vdXNlTGVhdmVcbiAgICApO1xuICB9XG5cbiAgZW5hYmxlT3JEaXNhYmxlQW5pbWF0aW9uKCkge1xuICAgIC8vIE9ubHkgYW5pbWF0ZSB0aGUgY29sbGFwc2UvZXhwYW5kIGZvciB2aXNpYmxlIHRhYnMuXG4gICAgY29uc3QgdmlzaWJsZSA9IHRoaXMucHJvcHMuZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlID09PSBWSVNJQkxFO1xuICAgIGlmICh0aGlzLnN0YXRlLmVuYWJsZUFuaW1hdGlvbiAhPT0gdmlzaWJsZSkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGVuYWJsZUFuaW1hdGlvbjogdmlzaWJsZSB9KTtcbiAgICB9XG4gIH1cblxuICBvbkJvZHlNb3VudChub2RlKSB7XG4gICAgdGhpcy5zZWN0aW9uQm9keSA9IG5vZGU7XG4gIH1cblxuICBvbkhlYWRlckNsaWNrKCkge1xuICAgIC8vIElmIHRoaXMuc2VjdGlvbkJvZHkgaXMgdW5zZXQsIGl0IG1lYW5zIHRoYXQgd2UncmUgaW4gc29tZSBzb3J0IG9mIGVycm9yXG4gICAgLy8gc3RhdGUsIHByb2JhYmx5IGRpc3BsYXlpbmcgdGhlIGVycm9yIGZhbGxiYWNrLCBzbyB3ZSB3b24ndCBiZSBhYmxlIHRvXG4gICAgLy8gY29tcHV0ZSB0aGUgaGVpZ2h0LCBhbmQgd2UgZG9uJ3Qgd2FudCB0byBwZXJzaXN0IHRoZSBwcmVmZXJlbmNlLlxuICAgIC8vIElmIHByb3BzLmNvbGxhcHNlZCBpcyB1bmRlZmluZWQgaGFuZGxlciBzaG91bGRuJ3QgZG8gYW55dGhpbmcuXG4gICAgaWYgKCF0aGlzLnNlY3Rpb25Cb2R5IHx8IHRoaXMucHJvcHMuY29sbGFwc2VkID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBHZXQgdGhlIGN1cnJlbnQgaGVpZ2h0IG9mIHRoZSBib2R5IHNvIG1heC1oZWlnaHQgdHJhbnNpdGlvbnMgY2FuIHdvcmtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGlzQW5pbWF0aW5nOiB0cnVlLFxuICAgICAgbWF4SGVpZ2h0OiBgJHt0aGlzLl9nZXRTZWN0aW9uQm9keUhlaWdodCgpfXB4YCxcbiAgICB9KTtcbiAgICBjb25zdCB7IGFjdGlvbiwgdXNlckV2ZW50IH0gPSBTZWN0aW9uTWVudU9wdGlvbnMuQ2hlY2tDb2xsYXBzZWQodGhpcy5wcm9wcyk7XG4gICAgdGhpcy5wcm9wcy5kaXNwYXRjaChhY3Rpb24pO1xuICAgIHRoaXMucHJvcHMuZGlzcGF0Y2goXG4gICAgICBhYy5Vc2VyRXZlbnQoe1xuICAgICAgICBldmVudDogdXNlckV2ZW50LFxuICAgICAgICBzb3VyY2U6IHRoaXMucHJvcHMuc291cmNlLFxuICAgICAgfSlcbiAgICApO1xuICB9XG5cbiAgb25LZXlQcmVzcyhldmVudCkge1xuICAgIGlmIChldmVudC5rZXkgPT09IFwiRW50ZXJcIiB8fCBldmVudC5rZXkgPT09IFwiIFwiKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgdGhpcy5vbkhlYWRlckNsaWNrKCk7XG4gICAgfVxuICB9XG5cbiAgX2dldFNlY3Rpb25Cb2R5SGVpZ2h0KCkge1xuICAgIGNvbnN0IGRpdiA9IHRoaXMuc2VjdGlvbkJvZHk7XG4gICAgaWYgKGRpdi5zdHlsZS5kaXNwbGF5ID09PSBcIm5vbmVcIikge1xuICAgICAgLy8gSWYgdGhlIGRpdiBpc24ndCBkaXNwbGF5ZWQsIHdlIGNhbid0IGdldCBpdCdzIGhlaWdodC4gU28gd2UgZGlzcGxheSBpdFxuICAgICAgLy8gdG8gZ2V0IHRoZSBoZWlnaHQgKGl0IGRvZXNuJ3Qgc2hvdyB1cCBiZWNhdXNlIG1heC1oZWlnaHQgaXMgc2V0IHRvIDBweFxuICAgICAgLy8gaW4gQ1NTKS4gV2UgZG9uJ3QgdW5kbyB0aGlzIGJlY2F1c2Ugd2UgYXJlIGFib3V0IHRvIGV4cGFuZCB0aGUgc2VjdGlvbi5cbiAgICAgIGRpdi5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgIH1cbiAgICByZXR1cm4gZGl2LnNjcm9sbEhlaWdodDtcbiAgfVxuXG4gIG9uVHJhbnNpdGlvbkVuZChldmVudCkge1xuICAgIC8vIE9ubHkgdXBkYXRlIHRoZSBhbmltYXRpbmcgc3RhdGUgZm9yIG91ciBvd24gdHJhbnNpdGlvbiAobm90IGEgY2hpbGQncylcbiAgICBpZiAoZXZlbnQudGFyZ2V0ID09PSBldmVudC5jdXJyZW50VGFyZ2V0KSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgaXNBbmltYXRpbmc6IGZhbHNlIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlckljb24oKSB7XG4gICAgY29uc3QgeyBpY29uIH0gPSB0aGlzLnByb3BzO1xuICAgIGlmIChpY29uICYmIGljb24uc3RhcnRzV2l0aChcIm1vei1leHRlbnNpb246Ly9cIikpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxzcGFuXG4gICAgICAgICAgY2xhc3NOYW1lPVwiaWNvbiBpY29uLXNtYWxsLXNwYWNlclwiXG4gICAgICAgICAgc3R5bGU9e3sgYmFja2dyb3VuZEltYWdlOiBgdXJsKCcke2ljb259JylgIH19XG4gICAgICAgIC8+XG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gKFxuICAgICAgPHNwYW5cbiAgICAgICAgY2xhc3NOYW1lPXtgaWNvbiBpY29uLXNtYWxsLXNwYWNlciBpY29uLSR7aWNvbiB8fCBcIndlYmV4dGVuc2lvblwifWB9XG4gICAgICAvPlxuICAgICk7XG4gIH1cblxuICBvbk1lbnVCdXR0b25Nb3VzZUVudGVyKCkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBtZW51QnV0dG9uSG92ZXI6IHRydWUgfSk7XG4gIH1cblxuICBvbk1lbnVCdXR0b25Nb3VzZUxlYXZlKCkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBtZW51QnV0dG9uSG92ZXI6IGZhbHNlIH0pO1xuICB9XG5cbiAgb25NZW51VXBkYXRlKHNob3dDb250ZXh0TWVudSkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBzaG93Q29udGV4dE1lbnUgfSk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgaXNDb2xsYXBzaWJsZSA9IHRoaXMucHJvcHMuY29sbGFwc2VkICE9PSB1bmRlZmluZWQ7XG4gICAgY29uc3Qge1xuICAgICAgZW5hYmxlQW5pbWF0aW9uLFxuICAgICAgaXNBbmltYXRpbmcsXG4gICAgICBtYXhIZWlnaHQsXG4gICAgICBtZW51QnV0dG9uSG92ZXIsXG4gICAgICBzaG93Q29udGV4dE1lbnUsXG4gICAgfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3Qge1xuICAgICAgaWQsXG4gICAgICBldmVudFNvdXJjZSxcbiAgICAgIGNvbGxhcHNlZCxcbiAgICAgIGxlYXJuTW9yZSxcbiAgICAgIHRpdGxlLFxuICAgICAgZXh0cmFNZW51T3B0aW9ucyxcbiAgICAgIHNob3dQcmVmTmFtZSxcbiAgICAgIHByaXZhY3lOb3RpY2VVUkwsXG4gICAgICBkaXNwYXRjaCxcbiAgICAgIGlzRml4ZWQsXG4gICAgICBpc0ZpcnN0LFxuICAgICAgaXNMYXN0LFxuICAgICAgaXNXZWJFeHRlbnNpb24sXG4gICAgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgYWN0aXZlID0gbWVudUJ1dHRvbkhvdmVyIHx8IHNob3dDb250ZXh0TWVudTtcbiAgICBsZXQgYm9keVN0eWxlO1xuICAgIGlmIChpc0FuaW1hdGluZyAmJiAhY29sbGFwc2VkKSB7XG4gICAgICBib2R5U3R5bGUgPSB7IG1heEhlaWdodCB9O1xuICAgIH0gZWxzZSBpZiAoIWlzQW5pbWF0aW5nICYmIGNvbGxhcHNlZCkge1xuICAgICAgYm9keVN0eWxlID0geyBkaXNwbGF5OiBcIm5vbmVcIiB9O1xuICAgIH1cbiAgICByZXR1cm4gKFxuICAgICAgPHNlY3Rpb25cbiAgICAgICAgY2xhc3NOYW1lPXtgY29sbGFwc2libGUtc2VjdGlvbiAke3RoaXMucHJvcHMuY2xhc3NOYW1lfSR7XG4gICAgICAgICAgZW5hYmxlQW5pbWF0aW9uID8gXCIgYW5pbWF0aW9uLWVuYWJsZWRcIiA6IFwiXCJcbiAgICAgICAgfSR7Y29sbGFwc2VkID8gXCIgY29sbGFwc2VkXCIgOiBcIlwifSR7YWN0aXZlID8gXCIgYWN0aXZlXCIgOiBcIlwifWB9XG4gICAgICAgIGFyaWEtZXhwYW5kZWQ9eyFjb2xsYXBzZWR9XG4gICAgICAgIC8vIE5vdGU6IGRhdGEtc2VjdGlvbi1pZCBpcyB1c2VkIGZvciB3ZWIgZXh0ZW5zaW9uIGFwaSB0ZXN0cyBpbiBtb3ppbGxhIGNlbnRyYWxcbiAgICAgICAgZGF0YS1zZWN0aW9uLWlkPXtpZH1cbiAgICAgID5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzZWN0aW9uLXRvcC1iYXJcIj5cbiAgICAgICAgICA8aDMgY2xhc3NOYW1lPVwic2VjdGlvbi10aXRsZVwiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiY2xpY2stdGFyZ2V0LWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICB7LyogQ2xpY2stdGFyZ2V0cyB0aGF0IHRvZ2dsZSBhIGNvbGxhcHNpYmxlIHNlY3Rpb24gc2hvdWxkIGhhdmUgYW4gYXJpYS1leHBhbmRlZCBhdHRyaWJ1dGU7IHNlZSBidWcgMTU1MzIzNCAqL31cbiAgICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJjbGljay10YXJnZXRcIlxuICAgICAgICAgICAgICAgIHJvbGU9XCJidXR0b25cIlxuICAgICAgICAgICAgICAgIHRhYkluZGV4PVwiMFwiXG4gICAgICAgICAgICAgICAgb25LZXlQcmVzcz17dGhpcy5vbktleVByZXNzfVxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMub25IZWFkZXJDbGlja31cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHt0aGlzLnJlbmRlckljb24oKX1cbiAgICAgICAgICAgICAgICA8Rmx1ZW50T3JUZXh0IG1lc3NhZ2U9e3RpdGxlfSAvPlxuICAgICAgICAgICAgICAgIHtpc0NvbGxhcHNpYmxlICYmIChcbiAgICAgICAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgICAgICAgIGRhdGEtbDEwbi1pZD17XG4gICAgICAgICAgICAgICAgICAgICAgY29sbGFwc2VkXG4gICAgICAgICAgICAgICAgICAgICAgICA/IFwibmV3dGFiLXNlY3Rpb24tZXhwYW5kLXNlY3Rpb24tbGFiZWxcIlxuICAgICAgICAgICAgICAgICAgICAgICAgOiBcIm5ld3RhYi1zZWN0aW9uLWNvbGxhcHNlLXNlY3Rpb24tbGFiZWxcIlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17YGNvbGxhcHNpYmxlLWFycm93IGljb24gJHtcbiAgICAgICAgICAgICAgICAgICAgICBjb2xsYXBzZWRcbiAgICAgICAgICAgICAgICAgICAgICAgID8gXCJpY29uLWFycm93aGVhZC1mb3J3YXJkLXNtYWxsXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogXCJpY29uLWFycm93aGVhZC1kb3duLXNtYWxsXCJcbiAgICAgICAgICAgICAgICAgICAgfWB9XG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwibGVhcm4tbW9yZS1saW5rLXdyYXBwZXJcIj5cbiAgICAgICAgICAgICAgICB7bGVhcm5Nb3JlICYmIChcbiAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImxlYXJuLW1vcmUtbGlua1wiPlxuICAgICAgICAgICAgICAgICAgICA8Rmx1ZW50T3JUZXh0IG1lc3NhZ2U9e2xlYXJuTW9yZS5saW5rLm1lc3NhZ2V9PlxuICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9e2xlYXJuTW9yZS5saW5rLmhyZWZ9IC8+XG4gICAgICAgICAgICAgICAgICAgIDwvRmx1ZW50T3JUZXh0PlxuICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8L2gzPlxuICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8Q29udGV4dE1lbnVCdXR0b25cbiAgICAgICAgICAgICAgdG9vbHRpcD1cIm5ld3RhYi1tZW51LXNlY3Rpb24tdG9vbHRpcFwiXG4gICAgICAgICAgICAgIG9uVXBkYXRlPXt0aGlzLm9uTWVudVVwZGF0ZX1cbiAgICAgICAgICAgICAgcmVmRnVuY3Rpb249e3RoaXMuc2V0Q29udGV4dE1lbnVCdXR0b25SZWZ9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxTZWN0aW9uTWVudVxuICAgICAgICAgICAgICAgIGlkPXtpZH1cbiAgICAgICAgICAgICAgICBleHRyYU9wdGlvbnM9e2V4dHJhTWVudU9wdGlvbnN9XG4gICAgICAgICAgICAgICAgZXZlbnRTb3VyY2U9e2V2ZW50U291cmNlfVxuICAgICAgICAgICAgICAgIHNob3dQcmVmTmFtZT17c2hvd1ByZWZOYW1lfVxuICAgICAgICAgICAgICAgIHByaXZhY3lOb3RpY2VVUkw9e3ByaXZhY3lOb3RpY2VVUkx9XG4gICAgICAgICAgICAgICAgY29sbGFwc2VkPXtjb2xsYXBzZWR9XG4gICAgICAgICAgICAgICAgaXNGaXhlZD17aXNGaXhlZH1cbiAgICAgICAgICAgICAgICBpc0ZpcnN0PXtpc0ZpcnN0fVxuICAgICAgICAgICAgICAgIGlzTGFzdD17aXNMYXN0fVxuICAgICAgICAgICAgICAgIGRpc3BhdGNoPXtkaXNwYXRjaH1cbiAgICAgICAgICAgICAgICBpc1dlYkV4dGVuc2lvbj17aXNXZWJFeHRlbnNpb259XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L0NvbnRleHRNZW51QnV0dG9uPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPEVycm9yQm91bmRhcnkgY2xhc3NOYW1lPVwic2VjdGlvbi1ib2R5LWZhbGxiYWNrXCI+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY2xhc3NOYW1lPXtgc2VjdGlvbi1ib2R5JHtpc0FuaW1hdGluZyA/IFwiIGFuaW1hdGluZ1wiIDogXCJcIn1gfVxuICAgICAgICAgICAgb25UcmFuc2l0aW9uRW5kPXt0aGlzLm9uVHJhbnNpdGlvbkVuZH1cbiAgICAgICAgICAgIHJlZj17dGhpcy5vbkJvZHlNb3VudH1cbiAgICAgICAgICAgIHN0eWxlPXtib2R5U3R5bGV9XG4gICAgICAgICAgPlxuICAgICAgICAgICAge3RoaXMucHJvcHMuY2hpbGRyZW59XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvRXJyb3JCb3VuZGFyeT5cbiAgICAgIDwvc2VjdGlvbj5cbiAgICApO1xuICB9XG59XG5cbkNvbGxhcHNpYmxlU2VjdGlvbi5kZWZhdWx0UHJvcHMgPSB7XG4gIGRvY3VtZW50OiBnbG9iYWwuZG9jdW1lbnQgfHwge1xuICAgIGFkZEV2ZW50TGlzdGVuZXI6ICgpID0+IHt9LFxuICAgIHJlbW92ZUV2ZW50TGlzdGVuZXI6ICgpID0+IHt9LFxuICAgIHZpc2liaWxpdHlTdGF0ZTogXCJoaWRkZW5cIixcbiAgfSxcbiAgUHJlZnM6IHsgdmFsdWVzOiB7fSB9LFxufTtcbiIsIi8qIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXMgZmlsZSxcbiAqIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uICovXG5cbmltcG9ydCB7IEExMXlMaW5rQnV0dG9uIH0gZnJvbSBcImNvbnRlbnQtc3JjL2NvbXBvbmVudHMvQTExeUxpbmtCdXR0b24vQTExeUxpbmtCdXR0b25cIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuZXhwb3J0IGNsYXNzIEVycm9yQm91bmRhcnlGYWxsYmFjayBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLndpbmRvd09iaiA9IHRoaXMucHJvcHMud2luZG93T2JqIHx8IHdpbmRvdztcbiAgICB0aGlzLm9uQ2xpY2sgPSB0aGlzLm9uQ2xpY2suYmluZCh0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTaW5jZSB3ZSBvbmx5IGdldCBoZXJlIGlmIHBhcnQgb2YgdGhlIHBhZ2UgaGFzIGNyYXNoZWQsIGRvIGFcbiAgICogZm9yY2VkIHJlbG9hZCB0byBnaXZlIHVzIHRoZSBiZXN0IGNoYW5jZSBhdCByZWNvdmVyaW5nLlxuICAgKi9cbiAgb25DbGljaygpIHtcbiAgICB0aGlzLndpbmRvd09iai5sb2NhdGlvbi5yZWxvYWQodHJ1ZSk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgZGVmYXVsdENsYXNzID0gXCJhcy1lcnJvci1mYWxsYmFja1wiO1xuICAgIGxldCBjbGFzc05hbWU7XG4gICAgaWYgKFwiY2xhc3NOYW1lXCIgaW4gdGhpcy5wcm9wcykge1xuICAgICAgY2xhc3NOYW1lID0gYCR7dGhpcy5wcm9wcy5jbGFzc05hbWV9ICR7ZGVmYXVsdENsYXNzfWA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNsYXNzTmFtZSA9IGRlZmF1bHRDbGFzcztcbiAgICB9XG5cbiAgICAvLyBcIkExMXlMaW5rQnV0dG9uXCIgdG8gZm9yY2Ugbm9ybWFsIGxpbmsgc3R5bGluZyBzdHVmZiAoZWcgY3Vyc29yIG9uIGhvdmVyKVxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3NOYW1lfT5cbiAgICAgICAgPGRpdiBkYXRhLWwxMG4taWQ9XCJuZXd0YWItZXJyb3ItZmFsbGJhY2staW5mb1wiIC8+XG4gICAgICAgIDxzcGFuPlxuICAgICAgICAgIDxBMTF5TGlua0J1dHRvblxuICAgICAgICAgICAgY2xhc3NOYW1lPVwicmVsb2FkLWJ1dHRvblwiXG4gICAgICAgICAgICBvbkNsaWNrPXt0aGlzLm9uQ2xpY2t9XG4gICAgICAgICAgICBkYXRhLWwxMG4taWQ9XCJuZXd0YWItZXJyb3ItZmFsbGJhY2stcmVmcmVzaC1saW5rXCJcbiAgICAgICAgICAvPlxuICAgICAgICA8L3NwYW4+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5FcnJvckJvdW5kYXJ5RmFsbGJhY2suZGVmYXVsdFByb3BzID0geyBjbGFzc05hbWU6IFwiYXMtZXJyb3ItZmFsbGJhY2tcIiB9O1xuXG5leHBvcnQgY2xhc3MgRXJyb3JCb3VuZGFyeSBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0geyBoYXNFcnJvcjogZmFsc2UgfTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZENhdGNoKGVycm9yLCBpbmZvKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGhhc0Vycm9yOiB0cnVlIH0pO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGlmICghdGhpcy5zdGF0ZS5oYXNFcnJvcikge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW47XG4gICAgfVxuXG4gICAgcmV0dXJuIDx0aGlzLnByb3BzLkZhbGxiYWNrQ29tcG9uZW50IGNsYXNzTmFtZT17dGhpcy5wcm9wcy5jbGFzc05hbWV9IC8+O1xuICB9XG59XG5cbkVycm9yQm91bmRhcnkuZGVmYXVsdFByb3BzID0geyBGYWxsYmFja0NvbXBvbmVudDogRXJyb3JCb3VuZGFyeUZhbGxiYWNrIH07XG4iLCIvKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIGZpbGUsXG4gKiBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLiAqL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBBMTF5TGlua0J1dHRvbihwcm9wcykge1xuICAvLyBmdW5jdGlvbiBmb3IgbWVyZ2luZyBjbGFzc2VzLCBpZiBuZWNlc3NhcnlcbiAgbGV0IGNsYXNzTmFtZSA9IFwiYTExeS1saW5rLWJ1dHRvblwiO1xuICBpZiAocHJvcHMuY2xhc3NOYW1lKSB7XG4gICAgY2xhc3NOYW1lICs9IGAgJHtwcm9wcy5jbGFzc05hbWV9YDtcbiAgfVxuICByZXR1cm4gKFxuICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIHsuLi5wcm9wc30gY2xhc3NOYW1lPXtjbGFzc05hbWV9PlxuICAgICAge3Byb3BzLmNoaWxkcmVufVxuICAgIDwvYnV0dG9uPlxuICApO1xufVxuIiwiLyogVGhpcyBTb3VyY2UgQ29kZSBGb3JtIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBNb3ppbGxhIFB1YmxpY1xuICogTGljZW5zZSwgdi4gMi4wLiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBmaWxlLFxuICogWW91IGNhbiBvYnRhaW4gb25lIGF0IGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy4gKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuXG4vKipcbiAqIFNldCB0ZXh0IG9uIGEgY2hpbGQgZWxlbWVudC9jb21wb25lbnQgZGVwZW5kaW5nIG9uIGlmIHRoZSBtZXNzYWdlIGlzIGFscmVhZHlcbiAqIHRyYW5zbGF0ZWQgcGxhaW4gdGV4dCBvciBhIGZsdWVudCBpZCB3aXRoIG9wdGlvbmFsIGFyZ3MuXG4gKi9cbmV4cG9ydCBjbGFzcyBGbHVlbnRPclRleHQgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgcmVuZGVyKCkge1xuICAgIC8vIEVuc3VyZSB3ZSBoYXZlIGEgc2luZ2xlIGNoaWxkIHRvIGF0dGFjaCBhdHRyaWJ1dGVzXG4gICAgY29uc3QgeyBjaGlsZHJlbiwgbWVzc2FnZSB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBjaGlsZCA9IGNoaWxkcmVuID8gUmVhY3QuQ2hpbGRyZW4ub25seShjaGlsZHJlbikgOiA8c3BhbiAvPjtcblxuICAgIC8vIEZvciBhIHN0cmluZyBtZXNzYWdlLCBqdXN0IHVzZSBpdCBhcyB0aGUgY2hpbGQncyB0ZXh0XG4gICAgbGV0IGdyYW5kQ2hpbGRyZW4gPSBtZXNzYWdlO1xuICAgIGxldCBleHRyYVByb3BzO1xuXG4gICAgLy8gQ29udmVydCBhIG1lc3NhZ2Ugb2JqZWN0IHRvIHNldCBkZXNpcmVkIGZsdWVudC1kb20gYXR0cmlidXRlc1xuICAgIGlmICh0eXBlb2YgbWVzc2FnZSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgY29uc3QgYXJncyA9IG1lc3NhZ2UuYXJncyB8fCBtZXNzYWdlLnZhbHVlcztcbiAgICAgIGV4dHJhUHJvcHMgPSB7XG4gICAgICAgIFwiZGF0YS1sMTBuLWFyZ3NcIjogYXJncyAmJiBKU09OLnN0cmluZ2lmeShhcmdzKSxcbiAgICAgICAgXCJkYXRhLWwxMG4taWRcIjogbWVzc2FnZS5pZCB8fCBtZXNzYWdlLnN0cmluZ19pZCxcbiAgICAgIH07XG5cbiAgICAgIC8vIFVzZSBvcmlnaW5hbCBjaGlsZHJlbiBwb3RlbnRpYWxseSB3aXRoIGRhdGEtbDEwbi1uYW1lIGF0dHJpYnV0ZXNcbiAgICAgIGdyYW5kQ2hpbGRyZW4gPSBjaGlsZC5wcm9wcy5jaGlsZHJlbjtcbiAgICB9XG5cbiAgICAvLyBBZGQgdGhlIG1lc3NhZ2UgdG8gdGhlIGNoaWxkIHZpYSBmbHVlbnQgYXR0cmlidXRlcyBvciB0ZXh0IG5vZGVcbiAgICByZXR1cm4gUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkLCBleHRyYVByb3BzLCBncmFuZENoaWxkcmVuKTtcbiAgfVxufVxuIiwiLyogVGhpcyBTb3VyY2UgQ29kZSBGb3JtIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBNb3ppbGxhIFB1YmxpY1xuICogTGljZW5zZSwgdi4gMi4wLiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBmaWxlLFxuICogWW91IGNhbiBvYnRhaW4gb25lIGF0IGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy4gKi9cblxuaW1wb3J0IHsgYWN0aW9uQ3JlYXRvcnMgYXMgYWMgfSBmcm9tIFwiY29tbW9uL0FjdGlvbnMuanNtXCI7XG5pbXBvcnQgeyBDb250ZXh0TWVudSB9IGZyb20gXCJjb250ZW50LXNyYy9jb21wb25lbnRzL0NvbnRleHRNZW51L0NvbnRleHRNZW51XCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBTZWN0aW9uTWVudU9wdGlvbnMgfSBmcm9tIFwiY29udGVudC1zcmMvbGliL3NlY3Rpb24tbWVudS1vcHRpb25zXCI7XG5cbmNvbnN0IERFRkFVTFRfU0VDVElPTl9NRU5VX09QVElPTlMgPSBbXG4gIFwiTW92ZVVwXCIsXG4gIFwiTW92ZURvd25cIixcbiAgXCJTZXBhcmF0b3JcIixcbiAgXCJSZW1vdmVTZWN0aW9uXCIsXG4gIFwiQ2hlY2tDb2xsYXBzZWRcIixcbiAgXCJTZXBhcmF0b3JcIixcbiAgXCJNYW5hZ2VTZWN0aW9uXCIsXG5dO1xuY29uc3QgV0VCRVhUX1NFQ1RJT05fTUVOVV9PUFRJT05TID0gW1xuICBcIk1vdmVVcFwiLFxuICBcIk1vdmVEb3duXCIsXG4gIFwiU2VwYXJhdG9yXCIsXG4gIFwiQ2hlY2tDb2xsYXBzZWRcIixcbiAgXCJTZXBhcmF0b3JcIixcbiAgXCJNYW5hZ2VXZWJFeHRlbnNpb25cIixcbl07XG5cbmV4cG9ydCBjbGFzcyBfU2VjdGlvbk1lbnUgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgaGFuZGxlQWRkV2hpbGVDb2xsYXBzZWQoKSB7XG4gICAgY29uc3QgeyBhY3Rpb24sIHVzZXJFdmVudCB9ID0gU2VjdGlvbk1lbnVPcHRpb25zLkV4cGFuZFNlY3Rpb24odGhpcy5wcm9wcyk7XG4gICAgdGhpcy5wcm9wcy5kaXNwYXRjaChhY3Rpb24pO1xuICAgIGlmICh1c2VyRXZlbnQpIHtcbiAgICAgIHRoaXMucHJvcHMuZGlzcGF0Y2goXG4gICAgICAgIGFjLlVzZXJFdmVudCh7XG4gICAgICAgICAgZXZlbnQ6IHVzZXJFdmVudCxcbiAgICAgICAgICBzb3VyY2U6IHRoaXMucHJvcHMuc291cmNlLFxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBnZXRPcHRpb25zKCkge1xuICAgIGNvbnN0IHsgcHJvcHMgfSA9IHRoaXM7XG5cbiAgICBjb25zdCBwcm9wT3B0aW9ucyA9IHByb3BzLmlzV2ViRXh0ZW5zaW9uXG4gICAgICA/IFsuLi5XRUJFWFRfU0VDVElPTl9NRU5VX09QVElPTlNdXG4gICAgICA6IFsuLi5ERUZBVUxUX1NFQ1RJT05fTUVOVV9PUFRJT05TXTtcbiAgICAvLyBSZW1vdmUgdGhlIG1vdmUgcmVsYXRlZCBvcHRpb25zIGlmIHRoZSBzZWN0aW9uIGlzIGZpeGVkXG4gICAgaWYgKHByb3BzLmlzRml4ZWQpIHtcbiAgICAgIHByb3BPcHRpb25zLnNwbGljZShwcm9wT3B0aW9ucy5pbmRleE9mKFwiTW92ZVVwXCIpLCAzKTtcbiAgICB9XG4gICAgLy8gUHJlcGVuZCBjdXN0b20gb3B0aW9ucyBhbmQgYSBzZXBhcmF0b3JcbiAgICBpZiAocHJvcHMuZXh0cmFPcHRpb25zKSB7XG4gICAgICBwcm9wT3B0aW9ucy5zcGxpY2UoMCwgMCwgLi4ucHJvcHMuZXh0cmFPcHRpb25zLCBcIlNlcGFyYXRvclwiKTtcbiAgICB9XG4gICAgLy8gSW5zZXJ0IHByaXZhY3kgbm90aWNlIGJlZm9yZSB0aGUgbGFzdCBvcHRpb24gKFwiTWFuYWdlU2VjdGlvblwiKVxuICAgIGlmIChwcm9wcy5wcml2YWN5Tm90aWNlVVJMKSB7XG4gICAgICBwcm9wT3B0aW9ucy5zcGxpY2UoLTEsIDAsIFwiUHJpdmFjeU5vdGljZVwiKTtcbiAgICB9XG5cbiAgICBjb25zdCBvcHRpb25zID0gcHJvcE9wdGlvbnNcbiAgICAgIC5tYXAobyA9PiBTZWN0aW9uTWVudU9wdGlvbnNbb10ocHJvcHMpKVxuICAgICAgLm1hcChvcHRpb24gPT4ge1xuICAgICAgICBjb25zdCB7IGFjdGlvbiwgaWQsIHR5cGUsIHVzZXJFdmVudCB9ID0gb3B0aW9uO1xuICAgICAgICBpZiAoIXR5cGUgJiYgaWQpIHtcbiAgICAgICAgICBvcHRpb24ub25DbGljayA9ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGhhc0FkZEV2ZW50ID1cbiAgICAgICAgICAgICAgdXNlckV2ZW50ID09PSBcIk1FTlVfQUREX1RPUFNJVEVcIiB8fFxuICAgICAgICAgICAgICB1c2VyRXZlbnQgPT09IFwiTUVOVV9BRERfU0VBUkNIXCI7XG5cbiAgICAgICAgICAgIGlmIChwcm9wcy5jb2xsYXBzZWQgJiYgaGFzQWRkRXZlbnQpIHtcbiAgICAgICAgICAgICAgdGhpcy5oYW5kbGVBZGRXaGlsZUNvbGxhcHNlZCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBwcm9wcy5kaXNwYXRjaChhY3Rpb24pO1xuICAgICAgICAgICAgaWYgKHVzZXJFdmVudCkge1xuICAgICAgICAgICAgICBwcm9wcy5kaXNwYXRjaChcbiAgICAgICAgICAgICAgICBhYy5Vc2VyRXZlbnQoe1xuICAgICAgICAgICAgICAgICAgZXZlbnQ6IHVzZXJFdmVudCxcbiAgICAgICAgICAgICAgICAgIHNvdXJjZTogcHJvcHMuc291cmNlLFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3B0aW9uO1xuICAgICAgfSk7XG5cbiAgICAvLyBUaGlzIGlzIGZvciBhY2Nlc3NpYmlsaXR5IHRvIHN1cHBvcnQgbWFraW5nIGVhY2ggaXRlbSB0YWJiYWJsZS5cbiAgICAvLyBXZSB3YW50IHRvIGtub3cgd2hpY2ggaXRlbSBpcyB0aGUgZmlyc3QgYW5kIHdoaWNoIGl0ZW1cbiAgICAvLyBpcyB0aGUgbGFzdCwgc28gd2UgY2FuIGNsb3NlIHRoZSBjb250ZXh0IG1lbnUgYWNjb3JkaW5nbHkuXG4gICAgb3B0aW9uc1swXS5maXJzdCA9IHRydWU7XG4gICAgb3B0aW9uc1tvcHRpb25zLmxlbmd0aCAtIDFdLmxhc3QgPSB0cnVlO1xuICAgIHJldHVybiBvcHRpb25zO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8Q29udGV4dE1lbnVcbiAgICAgICAgb25VcGRhdGU9e3RoaXMucHJvcHMub25VcGRhdGV9XG4gICAgICAgIG9wdGlvbnM9e3RoaXMuZ2V0T3B0aW9ucygpfVxuICAgICAgICBrZXlib2FyZEFjY2Vzcz17dGhpcy5wcm9wcy5rZXlib2FyZEFjY2Vzc31cbiAgICAgIC8+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgU2VjdGlvbk1lbnUgPSBfU2VjdGlvbk1lbnU7XG4iLCIvKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIGZpbGUsXG4gKiBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLiAqL1xuXG5pbXBvcnQgeyBhY3Rpb25DcmVhdG9ycyBhcyBhYywgYWN0aW9uVHlwZXMgYXMgYXQgfSBmcm9tIFwiY29tbW9uL0FjdGlvbnMuanNtXCI7XG5cbi8qKlxuICogTGlzdCBvZiBmdW5jdGlvbnMgdGhhdCByZXR1cm4gaXRlbXMgdGhhdCBjYW4gYmUgaW5jbHVkZWQgYXMgbWVudSBvcHRpb25zIGluIGFcbiAqIFNlY3Rpb25NZW51LiBBbGwgZnVuY3Rpb25zIHRha2UgdGhlIHNlY3Rpb24gYXMgdGhlIG9ubHkgcGFyYW1ldGVyLlxuICovXG5leHBvcnQgY29uc3QgU2VjdGlvbk1lbnVPcHRpb25zID0ge1xuICBTZXBhcmF0b3I6ICgpID0+ICh7IHR5cGU6IFwic2VwYXJhdG9yXCIgfSksXG4gIE1vdmVVcDogc2VjdGlvbiA9PiAoe1xuICAgIGlkOiBcIm5ld3RhYi1zZWN0aW9uLW1lbnUtbW92ZS11cFwiLFxuICAgIGljb246IFwiYXJyb3doZWFkLXVwXCIsXG4gICAgYWN0aW9uOiBhYy5Pbmx5VG9NYWluKHtcbiAgICAgIHR5cGU6IGF0LlNFQ1RJT05fTU9WRSxcbiAgICAgIGRhdGE6IHsgaWQ6IHNlY3Rpb24uaWQsIGRpcmVjdGlvbjogLTEgfSxcbiAgICB9KSxcbiAgICB1c2VyRXZlbnQ6IFwiTUVOVV9NT1ZFX1VQXCIsXG4gICAgZGlzYWJsZWQ6ICEhc2VjdGlvbi5pc0ZpcnN0LFxuICB9KSxcbiAgTW92ZURvd246IHNlY3Rpb24gPT4gKHtcbiAgICBpZDogXCJuZXd0YWItc2VjdGlvbi1tZW51LW1vdmUtZG93blwiLFxuICAgIGljb246IFwiYXJyb3doZWFkLWRvd25cIixcbiAgICBhY3Rpb246IGFjLk9ubHlUb01haW4oe1xuICAgICAgdHlwZTogYXQuU0VDVElPTl9NT1ZFLFxuICAgICAgZGF0YTogeyBpZDogc2VjdGlvbi5pZCwgZGlyZWN0aW9uOiArMSB9LFxuICAgIH0pLFxuICAgIHVzZXJFdmVudDogXCJNRU5VX01PVkVfRE9XTlwiLFxuICAgIGRpc2FibGVkOiAhIXNlY3Rpb24uaXNMYXN0LFxuICB9KSxcbiAgUmVtb3ZlU2VjdGlvbjogc2VjdGlvbiA9PiAoe1xuICAgIGlkOiBcIm5ld3RhYi1zZWN0aW9uLW1lbnUtcmVtb3ZlLXNlY3Rpb25cIixcbiAgICBpY29uOiBcImRpc21pc3NcIixcbiAgICBhY3Rpb246IGFjLlNldFByZWYoc2VjdGlvbi5zaG93UHJlZk5hbWUsIGZhbHNlKSxcbiAgICB1c2VyRXZlbnQ6IFwiTUVOVV9SRU1PVkVcIixcbiAgfSksXG4gIENvbGxhcHNlU2VjdGlvbjogc2VjdGlvbiA9PiAoe1xuICAgIGlkOiBcIm5ld3RhYi1zZWN0aW9uLW1lbnUtY29sbGFwc2Utc2VjdGlvblwiLFxuICAgIGljb246IFwibWluaW1pemVcIixcbiAgICBhY3Rpb246IGFjLk9ubHlUb01haW4oe1xuICAgICAgdHlwZTogYXQuVVBEQVRFX1NFQ1RJT05fUFJFRlMsXG4gICAgICBkYXRhOiB7IGlkOiBzZWN0aW9uLmlkLCB2YWx1ZTogeyBjb2xsYXBzZWQ6IHRydWUgfSB9LFxuICAgIH0pLFxuICAgIHVzZXJFdmVudDogXCJNRU5VX0NPTExBUFNFXCIsXG4gIH0pLFxuICBFeHBhbmRTZWN0aW9uOiBzZWN0aW9uID0+ICh7XG4gICAgaWQ6IFwibmV3dGFiLXNlY3Rpb24tbWVudS1leHBhbmQtc2VjdGlvblwiLFxuICAgIGljb246IFwibWF4aW1pemVcIixcbiAgICBhY3Rpb246IGFjLk9ubHlUb01haW4oe1xuICAgICAgdHlwZTogYXQuVVBEQVRFX1NFQ1RJT05fUFJFRlMsXG4gICAgICBkYXRhOiB7IGlkOiBzZWN0aW9uLmlkLCB2YWx1ZTogeyBjb2xsYXBzZWQ6IGZhbHNlIH0gfSxcbiAgICB9KSxcbiAgICB1c2VyRXZlbnQ6IFwiTUVOVV9FWFBBTkRcIixcbiAgfSksXG4gIE1hbmFnZVNlY3Rpb246IHNlY3Rpb24gPT4gKHtcbiAgICBpZDogXCJuZXd0YWItc2VjdGlvbi1tZW51LW1hbmFnZS1zZWN0aW9uXCIsXG4gICAgaWNvbjogXCJzZXR0aW5nc1wiLFxuICAgIGFjdGlvbjogYWMuT25seVRvTWFpbih7IHR5cGU6IGF0LlNFVFRJTkdTX09QRU4gfSksXG4gICAgdXNlckV2ZW50OiBcIk1FTlVfTUFOQUdFXCIsXG4gIH0pLFxuICBNYW5hZ2VXZWJFeHRlbnNpb246IHNlY3Rpb24gPT4gKHtcbiAgICBpZDogXCJuZXd0YWItc2VjdGlvbi1tZW51LW1hbmFnZS13ZWJleHRcIixcbiAgICBpY29uOiBcInNldHRpbmdzXCIsXG4gICAgYWN0aW9uOiBhYy5Pbmx5VG9NYWluKHsgdHlwZTogYXQuT1BFTl9XRUJFWFRfU0VUVElOR1MsIGRhdGE6IHNlY3Rpb24uaWQgfSksXG4gIH0pLFxuICBBZGRUb3BTaXRlOiBzZWN0aW9uID0+ICh7XG4gICAgaWQ6IFwibmV3dGFiLXNlY3Rpb24tbWVudS1hZGQtdG9wc2l0ZVwiLFxuICAgIGljb246IFwiYWRkXCIsXG4gICAgYWN0aW9uOiB7IHR5cGU6IGF0LlRPUF9TSVRFU19FRElULCBkYXRhOiB7IGluZGV4OiAtMSB9IH0sXG4gICAgdXNlckV2ZW50OiBcIk1FTlVfQUREX1RPUFNJVEVcIixcbiAgfSksXG4gIEFkZFNlYXJjaFNob3J0Y3V0OiBzZWN0aW9uID0+ICh7XG4gICAgaWQ6IFwibmV3dGFiLXNlY3Rpb24tbWVudS1hZGQtc2VhcmNoLWVuZ2luZVwiLFxuICAgIGljb246IFwic2VhcmNoXCIsXG4gICAgYWN0aW9uOiB7IHR5cGU6IGF0LlRPUF9TSVRFU19PUEVOX1NFQVJDSF9TSE9SVENVVFNfTU9EQUwgfSxcbiAgICB1c2VyRXZlbnQ6IFwiTUVOVV9BRERfU0VBUkNIXCIsXG4gIH0pLFxuICBQcml2YWN5Tm90aWNlOiBzZWN0aW9uID0+ICh7XG4gICAgaWQ6IFwibmV3dGFiLXNlY3Rpb24tbWVudS1wcml2YWN5LW5vdGljZVwiLFxuICAgIGljb246IFwiaW5mb1wiLFxuICAgIGFjdGlvbjogYWMuT25seVRvTWFpbih7XG4gICAgICB0eXBlOiBhdC5PUEVOX0xJTkssXG4gICAgICBkYXRhOiB7IHVybDogc2VjdGlvbi5wcml2YWN5Tm90aWNlVVJMIH0sXG4gICAgfSksXG4gICAgdXNlckV2ZW50OiBcIk1FTlVfUFJJVkFDWV9OT1RJQ0VcIixcbiAgfSksXG4gIENoZWNrQ29sbGFwc2VkOiBzZWN0aW9uID0+XG4gICAgc2VjdGlvbi5jb2xsYXBzZWRcbiAgICAgID8gU2VjdGlvbk1lbnVPcHRpb25zLkV4cGFuZFNlY3Rpb24oc2VjdGlvbilcbiAgICAgIDogU2VjdGlvbk1lbnVPcHRpb25zLkNvbGxhcHNlU2VjdGlvbihzZWN0aW9uKSxcbn07XG4iLCIvKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIGZpbGUsXG4gKiBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLiAqL1xuXG5pbXBvcnQgeyBhY3Rpb25DcmVhdG9ycyBhcyBhYywgYWN0aW9uVHlwZXMgYXMgYXQgfSBmcm9tIFwiY29tbW9uL0FjdGlvbnMuanNtXCI7XG5pbXBvcnQgeyBDYXJkLCBQbGFjZWhvbGRlckNhcmQgfSBmcm9tIFwiY29udGVudC1zcmMvY29tcG9uZW50cy9DYXJkL0NhcmRcIjtcbmltcG9ydCB7IENvbGxhcHNpYmxlU2VjdGlvbiB9IGZyb20gXCJjb250ZW50LXNyYy9jb21wb25lbnRzL0NvbGxhcHNpYmxlU2VjdGlvbi9Db2xsYXBzaWJsZVNlY3Rpb25cIjtcbmltcG9ydCB7IENvbXBvbmVudFBlcmZUaW1lciB9IGZyb20gXCJjb250ZW50LXNyYy9jb21wb25lbnRzL0NvbXBvbmVudFBlcmZUaW1lci9Db21wb25lbnRQZXJmVGltZXJcIjtcbmltcG9ydCB7IEZsdWVudE9yVGV4dCB9IGZyb20gXCJjb250ZW50LXNyYy9jb21wb25lbnRzL0ZsdWVudE9yVGV4dC9GbHVlbnRPclRleHRcIjtcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcbmltcG9ydCB7IE1vcmVSZWNvbW1lbmRhdGlvbnMgfSBmcm9tIFwiY29udGVudC1zcmMvY29tcG9uZW50cy9Nb3JlUmVjb21tZW5kYXRpb25zL01vcmVSZWNvbW1lbmRhdGlvbnNcIjtcbmltcG9ydCB7IFBvY2tldExvZ2dlZEluQ3RhIH0gZnJvbSBcImNvbnRlbnQtc3JjL2NvbXBvbmVudHMvUG9ja2V0TG9nZ2VkSW5DdGEvUG9ja2V0TG9nZ2VkSW5DdGFcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IFRvcGljcyB9IGZyb20gXCJjb250ZW50LXNyYy9jb21wb25lbnRzL1RvcGljcy9Ub3BpY3NcIjtcbmltcG9ydCB7IFRvcFNpdGVzIH0gZnJvbSBcImNvbnRlbnQtc3JjL2NvbXBvbmVudHMvVG9wU2l0ZXMvVG9wU2l0ZXNcIjtcblxuY29uc3QgVklTSUJMRSA9IFwidmlzaWJsZVwiO1xuY29uc3QgVklTSUJJTElUWV9DSEFOR0VfRVZFTlQgPSBcInZpc2liaWxpdHljaGFuZ2VcIjtcbmNvbnN0IENBUkRTX1BFUl9ST1dfREVGQVVMVCA9IDM7XG5jb25zdCBDQVJEU19QRVJfUk9XX0NPTVBBQ1RfV0lERSA9IDQ7XG5cbmV4cG9ydCBjbGFzcyBTZWN0aW9uIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gIGdldCBudW1Sb3dzKCkge1xuICAgIGNvbnN0IHsgcm93c1ByZWYsIG1heFJvd3MsIFByZWZzIH0gPSB0aGlzLnByb3BzO1xuICAgIHJldHVybiByb3dzUHJlZiA/IFByZWZzLnZhbHVlc1tyb3dzUHJlZl0gOiBtYXhSb3dzO1xuICB9XG5cbiAgX2Rpc3BhdGNoSW1wcmVzc2lvblN0YXRzKCkge1xuICAgIGNvbnN0IHsgcHJvcHMgfSA9IHRoaXM7XG4gICAgbGV0IGNhcmRzUGVyUm93ID0gQ0FSRFNfUEVSX1JPV19ERUZBVUxUO1xuICAgIGlmIChcbiAgICAgIHByb3BzLmNvbXBhY3RDYXJkcyAmJlxuICAgICAgZ2xvYmFsLm1hdGNoTWVkaWEoYChtaW4td2lkdGg6IDEwNzJweClgKS5tYXRjaGVzXG4gICAgKSB7XG4gICAgICAvLyBJZiB0aGUgc2VjdGlvbiBoYXMgY29tcGFjdCBjYXJkcyBhbmQgdGhlIHZpZXdwb3J0IGlzIHdpZGUgZW5vdWdoLCB3ZSBzaG93XG4gICAgICAvLyA0IGNvbHVtbnMgaW5zdGVhZCBvZiAzLlxuICAgICAgLy8gJGJyZWFrLXBvaW50LXdpZGVzdCA9IDEwNzJweCAoZnJvbSBfdmFyaWFibGVzLnNjc3MpXG4gICAgICBjYXJkc1BlclJvdyA9IENBUkRTX1BFUl9ST1dfQ09NUEFDVF9XSURFO1xuICAgIH1cbiAgICBjb25zdCBtYXhDYXJkcyA9IGNhcmRzUGVyUm93ICogdGhpcy5udW1Sb3dzO1xuICAgIGNvbnN0IGNhcmRzID0gcHJvcHMucm93cy5zbGljZSgwLCBtYXhDYXJkcyk7XG5cbiAgICBpZiAodGhpcy5uZWVkc0ltcHJlc3Npb25TdGF0cyhjYXJkcykpIHtcbiAgICAgIHByb3BzLmRpc3BhdGNoKFxuICAgICAgICBhYy5JbXByZXNzaW9uU3RhdHMoe1xuICAgICAgICAgIHNvdXJjZTogcHJvcHMuZXZlbnRTb3VyY2UsXG4gICAgICAgICAgdGlsZXM6IGNhcmRzLm1hcChsaW5rID0+ICh7IGlkOiBsaW5rLmd1aWQgfSkpLFxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICAgIHRoaXMuaW1wcmVzc2lvbkNhcmRHdWlkcyA9IGNhcmRzLm1hcChsaW5rID0+IGxpbmsuZ3VpZCk7XG4gICAgfVxuICB9XG5cbiAgLy8gVGhpcyBzZW5kcyBhbiBldmVudCB3aGVuIGEgdXNlciBzZWVzIGEgc2V0IG9mIG5ldyBjb250ZW50LiBJZiBjb250ZW50XG4gIC8vIGNoYW5nZXMgd2hpbGUgdGhlIHBhZ2UgaXMgaGlkZGVuIChpLmUuIHByZWxvYWRlZCBvciBvbiBhIGhpZGRlbiB0YWIpLFxuICAvLyBvbmx5IHNlbmQgdGhlIGV2ZW50IGlmIHRoZSBwYWdlIGJlY29tZXMgdmlzaWJsZSBhZ2Fpbi5cbiAgc2VuZEltcHJlc3Npb25TdGF0c09yQWRkTGlzdGVuZXIoKSB7XG4gICAgY29uc3QgeyBwcm9wcyB9ID0gdGhpcztcblxuICAgIGlmICghcHJvcHMuc2hvdWxkU2VuZEltcHJlc3Npb25TdGF0cyB8fCAhcHJvcHMuZGlzcGF0Y2gpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAocHJvcHMuZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlID09PSBWSVNJQkxFKSB7XG4gICAgICB0aGlzLl9kaXNwYXRjaEltcHJlc3Npb25TdGF0cygpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBXZSBzaG91bGQgb25seSBldmVyIHNlbmQgdGhlIGxhdGVzdCBpbXByZXNzaW9uIHN0YXRzIHBpbmcsIHNvIHJlbW92ZSBhbnlcbiAgICAgIC8vIG9sZGVyIGxpc3RlbmVycy5cbiAgICAgIGlmICh0aGlzLl9vblZpc2liaWxpdHlDaGFuZ2UpIHtcbiAgICAgICAgcHJvcHMuZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgICBWSVNJQklMSVRZX0NIQU5HRV9FVkVOVCxcbiAgICAgICAgICB0aGlzLl9vblZpc2liaWxpdHlDaGFuZ2VcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgLy8gV2hlbiB0aGUgcGFnZSBiZWNvbWVzIHZpc2libGUsIHNlbmQgdGhlIGltcHJlc3Npb24gc3RhdHMgcGluZyBpZiB0aGUgc2VjdGlvbiBpc24ndCBjb2xsYXBzZWQuXG4gICAgICB0aGlzLl9vblZpc2liaWxpdHlDaGFuZ2UgPSAoKSA9PiB7XG4gICAgICAgIGlmIChwcm9wcy5kb2N1bWVudC52aXNpYmlsaXR5U3RhdGUgPT09IFZJU0lCTEUpIHtcbiAgICAgICAgICBpZiAoIXRoaXMucHJvcHMucHJlZi5jb2xsYXBzZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2Rpc3BhdGNoSW1wcmVzc2lvblN0YXRzKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHByb3BzLmRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgICAgICAgICBWSVNJQklMSVRZX0NIQU5HRV9FVkVOVCxcbiAgICAgICAgICAgIHRoaXMuX29uVmlzaWJpbGl0eUNoYW5nZVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBwcm9wcy5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgICBWSVNJQklMSVRZX0NIQU5HRV9FVkVOVCxcbiAgICAgICAgdGhpcy5fb25WaXNpYmlsaXR5Q2hhbmdlXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB0aGlzLnNlbmROZXdUYWJSZWh5ZHJhdGVkKHRoaXMucHJvcHMuaW5pdGlhbGl6ZWQpO1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMucm93cy5sZW5ndGggJiYgIXRoaXMucHJvcHMucHJlZi5jb2xsYXBzZWQpIHtcbiAgICAgIHRoaXMuc2VuZEltcHJlc3Npb25TdGF0c09yQWRkTGlzdGVuZXIoKTtcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgY29uc3QgeyBwcm9wcyB9ID0gdGhpcztcbiAgICBjb25zdCBpc0NvbGxhcHNlZCA9IHByb3BzLnByZWYuY29sbGFwc2VkO1xuICAgIGNvbnN0IHdhc0NvbGxhcHNlZCA9IHByZXZQcm9wcy5wcmVmLmNvbGxhcHNlZDtcbiAgICBpZiAoXG4gICAgICAvLyBEb24ndCBzZW5kIGltcHJlc3Npb24gc3RhdHMgZm9yIHRoZSBlbXB0eSBzdGF0ZVxuICAgICAgcHJvcHMucm93cy5sZW5ndGggJiZcbiAgICAgIC8vIFdlIG9ubHkgd2FudCB0byBzZW5kIGltcHJlc3Npb24gc3RhdHMgaWYgdGhlIGNvbnRlbnQgb2YgdGhlIGNhcmRzIGhhcyBjaGFuZ2VkXG4gICAgICAvLyBhbmQgdGhlIHNlY3Rpb24gaXMgbm90IGNvbGxhcHNlZC4uLlxuICAgICAgKChwcm9wcy5yb3dzICE9PSBwcmV2UHJvcHMucm93cyAmJiAhaXNDb2xsYXBzZWQpIHx8XG4gICAgICAgIC8vIG9yIGlmIHdlIGFyZSBleHBhbmRpbmcgYSBzZWN0aW9uIHRoYXQgd2FzIGNvbGxhcHNlZC5cbiAgICAgICAgKHdhc0NvbGxhcHNlZCAmJiAhaXNDb2xsYXBzZWQpKVxuICAgICkge1xuICAgICAgdGhpcy5zZW5kSW1wcmVzc2lvblN0YXRzT3JBZGRMaXN0ZW5lcigpO1xuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVcGRhdGUobmV4dFByb3BzKSB7XG4gICAgdGhpcy5zZW5kTmV3VGFiUmVoeWRyYXRlZChuZXh0UHJvcHMuaW5pdGlhbGl6ZWQpO1xuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMuX29uVmlzaWJpbGl0eUNoYW5nZSkge1xuICAgICAgdGhpcy5wcm9wcy5kb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFxuICAgICAgICBWSVNJQklMSVRZX0NIQU5HRV9FVkVOVCxcbiAgICAgICAgdGhpcy5fb25WaXNpYmlsaXR5Q2hhbmdlXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIG5lZWRzSW1wcmVzc2lvblN0YXRzKGNhcmRzKSB7XG4gICAgaWYgKFxuICAgICAgIXRoaXMuaW1wcmVzc2lvbkNhcmRHdWlkcyB8fFxuICAgICAgdGhpcy5pbXByZXNzaW9uQ2FyZEd1aWRzLmxlbmd0aCAhPT0gY2FyZHMubGVuZ3RoXG4gICAgKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNhcmRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoY2FyZHNbaV0uZ3VpZCAhPT0gdGhpcy5pbXByZXNzaW9uQ2FyZEd1aWRzW2ldKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIFRoZSBORVdfVEFCX1JFSFlEUkFURUQgZXZlbnQgaXMgdXNlZCB0byBpbmZvcm0gZmVlZHMgdGhhdCB0aGVpclxuICAvLyBkYXRhIGhhcyBiZWVuIGNvbnN1bWVkIGUuZy4gZm9yIGNvdW50aW5nIHRoZSBudW1iZXIgb2YgdGFicyB0aGF0XG4gIC8vIGhhdmUgcmVuZGVyZWQgdGhhdCBkYXRhLlxuICBzZW5kTmV3VGFiUmVoeWRyYXRlZChpbml0aWFsaXplZCkge1xuICAgIGlmIChpbml0aWFsaXplZCAmJiAhdGhpcy5yZW5kZXJOb3RpZmllZCkge1xuICAgICAgdGhpcy5wcm9wcy5kaXNwYXRjaChcbiAgICAgICAgYWMuQWxzb1RvTWFpbih7IHR5cGU6IGF0Lk5FV19UQUJfUkVIWURSQVRFRCwgZGF0YToge30gfSlcbiAgICAgICk7XG4gICAgICB0aGlzLnJlbmRlck5vdGlmaWVkID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgaWQsXG4gICAgICBldmVudFNvdXJjZSxcbiAgICAgIHRpdGxlLFxuICAgICAgaWNvbixcbiAgICAgIHJvd3MsXG4gICAgICBQb2NrZXQsXG4gICAgICB0b3BpY3MsXG4gICAgICBlbXB0eVN0YXRlLFxuICAgICAgZGlzcGF0Y2gsXG4gICAgICBjb21wYWN0Q2FyZHMsXG4gICAgICByZWFkX21vcmVfZW5kcG9pbnQsXG4gICAgICBjb250ZXh0TWVudU9wdGlvbnMsXG4gICAgICBpbml0aWFsaXplZCxcbiAgICAgIGxlYXJuTW9yZSxcbiAgICAgIHByZWYsXG4gICAgICBwcml2YWN5Tm90aWNlVVJMLFxuICAgICAgaXNGaXJzdCxcbiAgICAgIGlzTGFzdCxcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IHdhaXRpbmdGb3JTcG9jID1cbiAgICAgIGlkID09PSBcInRvcHN0b3JpZXNcIiAmJiB0aGlzLnByb3BzLlBvY2tldC53YWl0aW5nRm9yU3BvYztcbiAgICBjb25zdCBtYXhDYXJkc1BlclJvdyA9IGNvbXBhY3RDYXJkc1xuICAgICAgPyBDQVJEU19QRVJfUk9XX0NPTVBBQ1RfV0lERVxuICAgICAgOiBDQVJEU19QRVJfUk9XX0RFRkFVTFQ7XG4gICAgY29uc3QgeyBudW1Sb3dzIH0gPSB0aGlzO1xuICAgIGNvbnN0IG1heENhcmRzID0gbWF4Q2FyZHNQZXJSb3cgKiBudW1Sb3dzO1xuICAgIGNvbnN0IG1heENhcmRzT25OYXJyb3cgPSBDQVJEU19QRVJfUk9XX0RFRkFVTFQgKiBudW1Sb3dzO1xuXG4gICAgY29uc3QgeyBwb2NrZXRDdGEsIGlzVXNlckxvZ2dlZEluIH0gPSBQb2NrZXQgfHwge307XG4gICAgY29uc3QgeyB1c2VDdGEgfSA9IHBvY2tldEN0YSB8fCB7fTtcblxuICAgIC8vIERvbid0IGRpc3BsYXkgYW55dGhpbmcgdW50aWwgd2UgaGF2ZSBhIGRlZmluaXR2ZSByZXN1bHQgZnJvbSBQb2NrZXQsXG4gICAgLy8gdG8gYXZvaWQgYSBmbGFzaCBvZiBsb2dnZWQgb3V0IHN0YXRlIHdoaWxlIHdlIHJlbmRlci5cbiAgICBjb25zdCBpc1BvY2tldExvZ2dlZEluRGVmaW5lZCA9XG4gICAgICBpc1VzZXJMb2dnZWRJbiA9PT0gdHJ1ZSB8fCBpc1VzZXJMb2dnZWRJbiA9PT0gZmFsc2U7XG5cbiAgICBjb25zdCBoYXNUb3BpY3MgPSB0b3BpY3MgJiYgdG9waWNzLmxlbmd0aCA+IDA7XG5cbiAgICBjb25zdCBzaG91bGRTaG93UG9ja2V0Q3RhID1cbiAgICAgIGlkID09PSBcInRvcHN0b3JpZXNcIiAmJiB1c2VDdGEgJiYgaXNVc2VyTG9nZ2VkSW4gPT09IGZhbHNlO1xuXG4gICAgLy8gU2hvdyB0b3BpY3Mgb25seSBmb3IgdG9wIHN0b3JpZXMgYW5kIGlmIGl0IGhhcyBsb2FkZWQgd2l0aCB0b3BpY3MuXG4gICAgLy8gVGhlIGNsYXNzcyAudG9wLXN0b3JpZXMtYm90dG9tLWNvbnRhaW5lciBlbnN1cmVzIGNvbnRlbnQgZG9lc24ndCBzaGlmdCBhcyB0aGluZ3MgbG9hZC5cbiAgICBjb25zdCBzaG91bGRTaG93VG9waWNzID1cbiAgICAgIGlkID09PSBcInRvcHN0b3JpZXNcIiAmJlxuICAgICAgaGFzVG9waWNzICYmXG4gICAgICAoKHVzZUN0YSAmJiBpc1VzZXJMb2dnZWRJbiA9PT0gdHJ1ZSkgfHxcbiAgICAgICAgKCF1c2VDdGEgJiYgaXNQb2NrZXRMb2dnZWRJbkRlZmluZWQpKTtcblxuICAgIC8vIFdlIHVzZSB0b3BpY3MgdG8gZGV0ZXJtaW5lIGxhbmd1YWdlIHN1cHBvcnQgZm9yIHJlYWQgbW9yZS5cbiAgICBjb25zdCBzaG91bGRTaG93UmVhZE1vcmUgPSByZWFkX21vcmVfZW5kcG9pbnQgJiYgaGFzVG9waWNzO1xuXG4gICAgY29uc3QgcmVhbFJvd3MgPSByb3dzLnNsaWNlKDAsIG1heENhcmRzKTtcblxuICAgIC8vIFRoZSBlbXB0eSBzdGF0ZSBzaG91bGQgb25seSBiZSBzaG93biBhZnRlciB3ZSBoYXZlIGluaXRpYWxpemVkIGFuZCB0aGVyZSBpcyBubyBjb250ZW50LlxuICAgIC8vIE90aGVyd2lzZSwgd2Ugc2hvdWxkIHNob3cgcGxhY2Vob2xkZXJzLlxuICAgIGNvbnN0IHNob3VsZFNob3dFbXB0eVN0YXRlID0gaW5pdGlhbGl6ZWQgJiYgIXJvd3MubGVuZ3RoO1xuXG4gICAgY29uc3QgY2FyZHMgPSBbXTtcbiAgICBpZiAoIXNob3VsZFNob3dFbXB0eVN0YXRlKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1heENhcmRzOyBpKyspIHtcbiAgICAgICAgY29uc3QgbGluayA9IHJlYWxSb3dzW2ldO1xuICAgICAgICAvLyBPbiBuYXJyb3cgdmlld3BvcnRzLCB3ZSBvbmx5IHNob3cgMyBjYXJkcyBwZXIgcm93LiBXZSdsbCBtYXJrIHRoZSByZXN0IGFzXG4gICAgICAgIC8vIC5oaWRlLWZvci1uYXJyb3cgdG8gaGlkZSBpbiBDU1MgdmlhIEBtZWRpYSBxdWVyeS5cbiAgICAgICAgY29uc3QgY2xhc3NOYW1lID0gaSA+PSBtYXhDYXJkc09uTmFycm93ID8gXCJoaWRlLWZvci1uYXJyb3dcIiA6IFwiXCI7XG4gICAgICAgIGxldCB1c2VQbGFjZWhvbGRlciA9ICFsaW5rO1xuICAgICAgICAvLyBJZiB3ZSBhcmUgaW4gdGhlIHRoaXJkIGNhcmQgYW5kIHdhaXRpbmcgZm9yIHNwb2MsXG4gICAgICAgIC8vIHVzZSB0aGUgcGxhY2Vob2xkZXIuXG4gICAgICAgIGlmICghdXNlUGxhY2Vob2xkZXIgJiYgaSA9PT0gMiAmJiB3YWl0aW5nRm9yU3BvYykge1xuICAgICAgICAgIHVzZVBsYWNlaG9sZGVyID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBjYXJkcy5wdXNoKFxuICAgICAgICAgICF1c2VQbGFjZWhvbGRlciA/IChcbiAgICAgICAgICAgIDxDYXJkXG4gICAgICAgICAgICAgIGtleT17aX1cbiAgICAgICAgICAgICAgaW5kZXg9e2l9XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lfVxuICAgICAgICAgICAgICBkaXNwYXRjaD17ZGlzcGF0Y2h9XG4gICAgICAgICAgICAgIGxpbms9e2xpbmt9XG4gICAgICAgICAgICAgIGNvbnRleHRNZW51T3B0aW9ucz17Y29udGV4dE1lbnVPcHRpb25zfVxuICAgICAgICAgICAgICBldmVudFNvdXJjZT17ZXZlbnRTb3VyY2V9XG4gICAgICAgICAgICAgIHNob3VsZFNlbmRJbXByZXNzaW9uU3RhdHM9e3RoaXMucHJvcHMuc2hvdWxkU2VuZEltcHJlc3Npb25TdGF0c31cbiAgICAgICAgICAgICAgaXNXZWJFeHRlbnNpb249e3RoaXMucHJvcHMuaXNXZWJFeHRlbnNpb259XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICA8UGxhY2Vob2xkZXJDYXJkIGtleT17aX0gY2xhc3NOYW1lPXtjbGFzc05hbWV9IC8+XG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHNlY3Rpb25DbGFzc05hbWUgPSBbXG4gICAgICBcInNlY3Rpb25cIixcbiAgICAgIGNvbXBhY3RDYXJkcyA/IFwiY29tcGFjdC1jYXJkc1wiIDogXCJub3JtYWwtY2FyZHNcIixcbiAgICBdLmpvaW4oXCIgXCIpO1xuXG4gICAgLy8gPFNlY3Rpb24+IDwtLSBSZWFjdCBjb21wb25lbnRcbiAgICAvLyA8c2VjdGlvbj4gPC0tIEhUTUw1IGVsZW1lbnRcbiAgICByZXR1cm4gKFxuICAgICAgPENvbXBvbmVudFBlcmZUaW1lciB7Li4udGhpcy5wcm9wc30+XG4gICAgICAgIDxDb2xsYXBzaWJsZVNlY3Rpb25cbiAgICAgICAgICBjbGFzc05hbWU9e3NlY3Rpb25DbGFzc05hbWV9XG4gICAgICAgICAgaWNvbj17aWNvbn1cbiAgICAgICAgICB0aXRsZT17dGl0bGV9XG4gICAgICAgICAgaWQ9e2lkfVxuICAgICAgICAgIGV2ZW50U291cmNlPXtldmVudFNvdXJjZX1cbiAgICAgICAgICBjb2xsYXBzZWQ9e3RoaXMucHJvcHMucHJlZi5jb2xsYXBzZWR9XG4gICAgICAgICAgc2hvd1ByZWZOYW1lPXsocHJlZiAmJiBwcmVmLmZlZWQpIHx8IGlkfVxuICAgICAgICAgIHByaXZhY3lOb3RpY2VVUkw9e3ByaXZhY3lOb3RpY2VVUkx9XG4gICAgICAgICAgUHJlZnM9e3RoaXMucHJvcHMuUHJlZnN9XG4gICAgICAgICAgaXNGaXhlZD17dGhpcy5wcm9wcy5pc0ZpeGVkfVxuICAgICAgICAgIGlzRmlyc3Q9e2lzRmlyc3R9XG4gICAgICAgICAgaXNMYXN0PXtpc0xhc3R9XG4gICAgICAgICAgbGVhcm5Nb3JlPXtsZWFybk1vcmV9XG4gICAgICAgICAgZGlzcGF0Y2g9e3RoaXMucHJvcHMuZGlzcGF0Y2h9XG4gICAgICAgICAgaXNXZWJFeHRlbnNpb249e3RoaXMucHJvcHMuaXNXZWJFeHRlbnNpb259XG4gICAgICAgID5cbiAgICAgICAgICB7IXNob3VsZFNob3dFbXB0eVN0YXRlICYmIChcbiAgICAgICAgICAgIDx1bCBjbGFzc05hbWU9XCJzZWN0aW9uLWxpc3RcIiBzdHlsZT17eyBwYWRkaW5nOiAwIH19PlxuICAgICAgICAgICAgICB7Y2FyZHN9XG4gICAgICAgICAgICA8L3VsPlxuICAgICAgICAgICl9XG4gICAgICAgICAge3Nob3VsZFNob3dFbXB0eVN0YXRlICYmIChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2VjdGlvbi1lbXB0eS1zdGF0ZVwiPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImVtcHR5LXN0YXRlXCI+XG4gICAgICAgICAgICAgICAge2VtcHR5U3RhdGUuaWNvbiAmJlxuICAgICAgICAgICAgICAgIGVtcHR5U3RhdGUuaWNvbi5zdGFydHNXaXRoKFwibW96LWV4dGVuc2lvbjovL1wiKSA/IChcbiAgICAgICAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImVtcHR5LXN0YXRlLWljb24gaWNvblwiXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7IFwiYmFja2dyb3VuZC1pbWFnZVwiOiBgdXJsKCcke2VtcHR5U3RhdGUuaWNvbn0nKWAgfX1cbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17YGVtcHR5LXN0YXRlLWljb24gaWNvbiBpY29uLSR7ZW1wdHlTdGF0ZS5pY29ufWB9XG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgPEZsdWVudE9yVGV4dCBtZXNzYWdlPXtlbXB0eVN0YXRlLm1lc3NhZ2V9PlxuICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwiZW1wdHktc3RhdGUtbWVzc2FnZVwiIC8+XG4gICAgICAgICAgICAgICAgPC9GbHVlbnRPclRleHQ+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgKX1cbiAgICAgICAgICB7aWQgPT09IFwidG9wc3Rvcmllc1wiICYmIChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidG9wLXN0b3JpZXMtYm90dG9tLWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICB7c2hvdWxkU2hvd1RvcGljcyAmJiAoXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3cmFwcGVyLXRvcGljc1wiPlxuICAgICAgICAgICAgICAgICAgPFRvcGljcyB0b3BpY3M9e3RoaXMucHJvcHMudG9waWNzfSAvPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICApfVxuXG4gICAgICAgICAgICAgIHtzaG91bGRTaG93UG9ja2V0Q3RhICYmIChcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIndyYXBwZXItY3RhXCI+XG4gICAgICAgICAgICAgICAgICA8UG9ja2V0TG9nZ2VkSW5DdGEgLz5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgKX1cblxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIndyYXBwZXItbW9yZS1yZWNvbW1lbmRhdGlvbnNcIj5cbiAgICAgICAgICAgICAgICB7c2hvdWxkU2hvd1JlYWRNb3JlICYmIChcbiAgICAgICAgICAgICAgICAgIDxNb3JlUmVjb21tZW5kYXRpb25zXG4gICAgICAgICAgICAgICAgICAgIHJlYWRfbW9yZV9lbmRwb2ludD17cmVhZF9tb3JlX2VuZHBvaW50fVxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICl9XG4gICAgICAgIDwvQ29sbGFwc2libGVTZWN0aW9uPlxuICAgICAgPC9Db21wb25lbnRQZXJmVGltZXI+XG4gICAgKTtcbiAgfVxufVxuXG5TZWN0aW9uLmRlZmF1bHRQcm9wcyA9IHtcbiAgZG9jdW1lbnQ6IGdsb2JhbC5kb2N1bWVudCxcbiAgcm93czogW10sXG4gIGVtcHR5U3RhdGU6IHt9LFxuICBwcmVmOiB7fSxcbiAgdGl0bGU6IFwiXCIsXG59O1xuXG5leHBvcnQgY29uc3QgU2VjdGlvbkludGwgPSBjb25uZWN0KHN0YXRlID0+ICh7XG4gIFByZWZzOiBzdGF0ZS5QcmVmcyxcbiAgUG9ja2V0OiBzdGF0ZS5Qb2NrZXQsXG59KSkoU2VjdGlvbik7XG5cbmV4cG9ydCBjbGFzcyBfU2VjdGlvbnMgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgcmVuZGVyU2VjdGlvbnMoKSB7XG4gICAgY29uc3Qgc2VjdGlvbnMgPSBbXTtcbiAgICBjb25zdCBlbmFibGVkU2VjdGlvbnMgPSB0aGlzLnByb3BzLlNlY3Rpb25zLmZpbHRlcihcbiAgICAgIHNlY3Rpb24gPT4gc2VjdGlvbi5lbmFibGVkXG4gICAgKTtcbiAgICBjb25zdCB7XG4gICAgICBzZWN0aW9uT3JkZXIsXG4gICAgICBcImZlZWRzLnRvcHNpdGVzXCI6IHNob3dUb3BTaXRlcyxcbiAgICB9ID0gdGhpcy5wcm9wcy5QcmVmcy52YWx1ZXM7XG4gICAgLy8gRW5hYmxlZCBzZWN0aW9ucyBkb2Vzbid0IGluY2x1ZGUgVG9wIFNpdGVzLCBzbyB3ZSBhZGQgaXQgaWYgZW5hYmxlZC5cbiAgICBjb25zdCBleHBlY3RlZENvdW50ID0gZW5hYmxlZFNlY3Rpb25zLmxlbmd0aCArIH5+c2hvd1RvcFNpdGVzO1xuXG4gICAgZm9yIChjb25zdCBzZWN0aW9uSWQgb2Ygc2VjdGlvbk9yZGVyLnNwbGl0KFwiLFwiKSkge1xuICAgICAgY29uc3QgY29tbW9uUHJvcHMgPSB7XG4gICAgICAgIGtleTogc2VjdGlvbklkLFxuICAgICAgICBpc0ZpcnN0OiBzZWN0aW9ucy5sZW5ndGggPT09IDAsXG4gICAgICAgIGlzTGFzdDogc2VjdGlvbnMubGVuZ3RoID09PSBleHBlY3RlZENvdW50IC0gMSxcbiAgICAgIH07XG4gICAgICBpZiAoc2VjdGlvbklkID09PSBcInRvcHNpdGVzXCIgJiYgc2hvd1RvcFNpdGVzKSB7XG4gICAgICAgIHNlY3Rpb25zLnB1c2goPFRvcFNpdGVzIHsuLi5jb21tb25Qcm9wc30gLz4pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3Qgc2VjdGlvbiA9IGVuYWJsZWRTZWN0aW9ucy5maW5kKHMgPT4gcy5pZCA9PT0gc2VjdGlvbklkKTtcbiAgICAgICAgaWYgKHNlY3Rpb24pIHtcbiAgICAgICAgICBzZWN0aW9ucy5wdXNoKDxTZWN0aW9uSW50bCB7Li4uc2VjdGlvbn0gey4uLmNvbW1vblByb3BzfSAvPik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHNlY3Rpb25zO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cInNlY3Rpb25zLWxpc3RcIj57dGhpcy5yZW5kZXJTZWN0aW9ucygpfTwvZGl2PjtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgU2VjdGlvbnMgPSBjb25uZWN0KHN0YXRlID0+ICh7XG4gIFNlY3Rpb25zOiBzdGF0ZS5TZWN0aW9ucyxcbiAgUHJlZnM6IHN0YXRlLlByZWZzLFxufSkpKF9TZWN0aW9ucyk7XG4iLCIvKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIGZpbGUsXG4gKiBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLiAqL1xuXG4vKipcbiAqIExpc3Qgb2YgaGVscGVyIGZ1bmN0aW9ucyBmb3Igc2NyZWVuc2hvdC1iYXNlZCBpbWFnZXMuXG4gKlxuICogVGhlcmUgYXJlIHR3byBraW5kcyBvZiBpbWFnZXM6XG4gKiAxLiBSZW1vdGUgSW1hZ2U6IFRoaXMgaXMgdGhlIGltYWdlIGZyb20gdGhlIG1haW4gcHJvY2VzcyBhbmQgaXQgcmVmZXJzIHRvXG4gKiAgICB0aGUgaW1hZ2UgaW4gdGhlIFJlYWN0IHByb3BzLiBUaGlzIGNhbiBlaXRoZXIgYmUgYW4gb2JqZWN0IHdpdGggdGhlIGBkYXRhYFxuICogICAgYW5kIGBwYXRoYCBwcm9wZXJ0aWVzLCBpZiBpdCBpcyBhIGJsb2IsIG9yIGEgc3RyaW5nLCBpZiBpdCBpcyBhIG5vcm1hbCBpbWFnZS5cbiAqIDIuIExvY2FsIEltYWdlOiBUaGlzIGlzIHRoZSBpbWFnZSBvYmplY3QgaW4gdGhlIGNvbnRlbnQgcHJvY2VzcyBhbmQgaXQgcmVmZXJzXG4gKiAgICB0byB0aGUgaW1hZ2UgKm9iamVjdCogaW4gdGhlIFJlYWN0IGNvbXBvbmVudCdzIHN0YXRlLiBBbGwgbG9jYWwgaW1hZ2VcbiAqICAgIG9iamVjdHMgaGF2ZSB0aGUgYHVybGAgcHJvcGVydHksIGFuZCBhbiBhZGRpdGlvbmFsIHByb3BlcnR5IGBwYXRoYCwgaWYgdGhleVxuICogICAgYXJlIGJsb2JzLlxuICovXG5leHBvcnQgY29uc3QgU2NyZWVuc2hvdFV0aWxzID0ge1xuICBpc0Jsb2IoaXNMb2NhbCwgaW1hZ2UpIHtcbiAgICByZXR1cm4gISEoXG4gICAgICBpbWFnZSAmJlxuICAgICAgaW1hZ2UucGF0aCAmJlxuICAgICAgKCghaXNMb2NhbCAmJiBpbWFnZS5kYXRhKSB8fCAoaXNMb2NhbCAmJiBpbWFnZS51cmwpKVxuICAgICk7XG4gIH0sXG5cbiAgLy8gVGhpcyBzaG91bGQgYWx3YXlzIGJlIGNhbGxlZCB3aXRoIGEgcmVtb3RlIGltYWdlIGFuZCBub3QgYSBsb2NhbCBpbWFnZS5cbiAgY3JlYXRlTG9jYWxJbWFnZU9iamVjdChyZW1vdGVJbWFnZSkge1xuICAgIGlmICghcmVtb3RlSW1hZ2UpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAodGhpcy5pc0Jsb2IoZmFsc2UsIHJlbW90ZUltYWdlKSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdXJsOiBnbG9iYWwuVVJMLmNyZWF0ZU9iamVjdFVSTChyZW1vdGVJbWFnZS5kYXRhKSxcbiAgICAgICAgcGF0aDogcmVtb3RlSW1hZ2UucGF0aCxcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB7IHVybDogcmVtb3RlSW1hZ2UgfTtcbiAgfSxcblxuICAvLyBSZXZva2VzIHRoZSBvYmplY3QgVVJMIG9mIHRoZSBpbWFnZSBpZiB0aGUgbG9jYWwgaW1hZ2UgaXMgYSBibG9iLlxuICAvLyBUaGlzIHNob3VsZCBhbHdheXMgYmUgY2FsbGVkIHdpdGggYSBsb2NhbCBpbWFnZSBhbmQgbm90IGEgcmVtb3RlIGltYWdlLlxuICBtYXliZVJldm9rZUJsb2JPYmplY3RVUkwobG9jYWxJbWFnZSkge1xuICAgIGlmICh0aGlzLmlzQmxvYih0cnVlLCBsb2NhbEltYWdlKSkge1xuICAgICAgZ2xvYmFsLlVSTC5yZXZva2VPYmplY3RVUkwobG9jYWxJbWFnZS51cmwpO1xuICAgIH1cbiAgfSxcblxuICAvLyBDaGVja3MgaWYgcmVtb3RlSW1hZ2UgYW5kIGxvY2FsSW1hZ2UgYXJlIHRoZSBzYW1lLlxuICBpc1JlbW90ZUltYWdlTG9jYWwobG9jYWxJbWFnZSwgcmVtb3RlSW1hZ2UpIHtcbiAgICAvLyBCb3RoIHJlbW90ZUltYWdlIGFuZCBsb2NhbEltYWdlIGFyZSBwcmVzZW50LlxuICAgIGlmIChyZW1vdGVJbWFnZSAmJiBsb2NhbEltYWdlKSB7XG4gICAgICByZXR1cm4gdGhpcy5pc0Jsb2IoZmFsc2UsIHJlbW90ZUltYWdlKVxuICAgICAgICA/IGxvY2FsSW1hZ2UucGF0aCA9PT0gcmVtb3RlSW1hZ2UucGF0aFxuICAgICAgICA6IGxvY2FsSW1hZ2UudXJsID09PSByZW1vdGVJbWFnZTtcbiAgICB9XG5cbiAgICAvLyBUaGlzIHdpbGwgb25seSBoYW5kbGUgdGhlIHJlbWFpbmluZyB0aHJlZSBwb3NzaWJsZSBvdXRjb21lcy5cbiAgICAvLyAoaS5lLiBldmVyeXRoaW5nIGV4Y2VwdCB3aGVuIGJvdGggaW1hZ2UgYW5kIGxvY2FsSW1hZ2UgYXJlIHByZXNlbnQpXG4gICAgcmV0dXJuICFyZW1vdGVJbWFnZSAmJiAhbG9jYWxJbWFnZTtcbiAgfSxcbn07XG4iLCIvKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIGZpbGUsXG4gKiBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLiAqL1xuXG5pbXBvcnQgeyBhY3Rpb25DcmVhdG9ycyBhcyBhYywgYWN0aW9uVHlwZXMgYXMgYXQgfSBmcm9tIFwiY29tbW9uL0FjdGlvbnMuanNtXCI7XG5pbXBvcnQgeyBwZXJmU2VydmljZSBhcyBwZXJmU3ZjIH0gZnJvbSBcImNvbW1vbi9QZXJmU2VydmljZS5qc21cIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuLy8gQ3VycmVudGx5IHJlY29yZCBvbmx5IGEgZml4ZWQgc2V0IG9mIHNlY3Rpb25zLiBUaGlzIHdpbGwgcHJldmVudCBkYXRhXG4vLyBmcm9tIGN1c3RvbSBzZWN0aW9ucyBmcm9tIHNob3dpbmcgdXAgb3IgZnJvbSB0b3BzdG9yaWVzLlxuY29uc3QgUkVDT1JERURfU0VDVElPTlMgPSBbXCJoaWdobGlnaHRzXCIsIFwidG9wc2l0ZXNcIl07XG5cbmV4cG9ydCBjbGFzcyBDb21wb25lbnRQZXJmVGltZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICAvLyBKdXN0IGZvciB0ZXN0IGRlcGVuZGVuY3kgaW5qZWN0aW9uOlxuICAgIHRoaXMucGVyZlN2YyA9IHRoaXMucHJvcHMucGVyZlN2YyB8fCBwZXJmU3ZjO1xuXG4gICAgdGhpcy5fc2VuZEJhZFN0YXRlRXZlbnQgPSB0aGlzLl9zZW5kQmFkU3RhdGVFdmVudC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuX3NlbmRQYWludGVkRXZlbnQgPSB0aGlzLl9zZW5kUGFpbnRlZEV2ZW50LmJpbmQodGhpcyk7XG4gICAgdGhpcy5fcmVwb3J0TWlzc2luZ0RhdGEgPSBmYWxzZTtcbiAgICB0aGlzLl90aW1lc3RhbXBIYW5kbGVkID0gZmFsc2U7XG4gICAgdGhpcy5fcmVjb3JkZWRGaXJzdFJlbmRlciA9IGZhbHNlO1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgaWYgKCFSRUNPUkRFRF9TRUNUSU9OUy5pbmNsdWRlcyh0aGlzLnByb3BzLmlkKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX21heWJlU2VuZFBhaW50ZWRFdmVudCgpO1xuICB9XG5cbiAgY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgIGlmICghUkVDT1JERURfU0VDVElPTlMuaW5jbHVkZXModGhpcy5wcm9wcy5pZCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9tYXliZVNlbmRQYWludGVkRXZlbnQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsIHRoZSBnaXZlbiBjYWxsYmFjayBhZnRlciB0aGUgdXBjb21pbmcgZnJhbWUgcGFpbnRzLlxuICAgKlxuICAgKiBAbm90ZSBCb3RoIHNldFRpbWVvdXQgYW5kIHJlcXVlc3RBbmltYXRpb25GcmFtZSBhcmUgdGhyb3R0bGVkIHdoZW4gdGhlIHBhZ2VcbiAgICogaXMgaGlkZGVuLCBzbyB0aGlzIGNhbGxiYWNrIG1heSBnZXQgY2FsbGVkIHVwIHRvIGEgc2Vjb25kIG9yIHNvIGFmdGVyIHRoZVxuICAgKiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgXCJwYWludFwiIGZvciBoaWRkZW4gdGFicy5cbiAgICpcbiAgICogTmV3dGFicyBoaWRkZW4gd2hpbGUgbG9hZGluZyB3aWxsIHByZXN1bWFibHkgYmUgZmFpcmx5IHJhcmUgKG90aGVyIHRoYW5cbiAgICogcHJlbG9hZGVkIHRhYnMsIHdoaWNoIHdlIHdpbGwgYmUgZmlsdGVyaW5nIG91dCBvbiB0aGUgc2VydmVyIHNpZGUpLCBzbyBzdWNoXG4gICAqIGNhc2VzIHNob3VsZCBnZXQgbG9zdCBpbiB0aGUgbm9pc2UuXG4gICAqXG4gICAqIElmIHdlIGRlY2lkZSB0aGF0IGl0J3MgaW1wb3J0YW50IHRvIGZpbmQgb3V0IHdoZW4gc29tZXRoaW5nIHRoYXQncyBoaWRkZW5cbiAgICogaGFzIFwicGFpbnRlZFwiLCBob3dldmVyLCBhbm90aGVyIG9wdGlvbiBpcyB0byBwb3N0IGEgbWVzc2FnZSB0byB0aGlzIHdpbmRvdy5cbiAgICogVGhhdCBzaG91bGQgaGFwcGVuIGV2ZW4gZmFzdGVyIHRoYW4gc2V0VGltZW91dCwgYW5kLCBhdCBsZWFzdCBhcyBvZiB0aGlzXG4gICAqIHdyaXRpbmcsIGl0J3Mgbm90IHRocm90dGxlZCBpbiBoaWRkZW4gd2luZG93cyBpbiBGaXJlZm94LlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICAgKlxuICAgKiBAcmV0dXJucyB2b2lkXG4gICAqL1xuICBfYWZ0ZXJGcmFtZVBhaW50KGNhbGxiYWNrKSB7XG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHNldFRpbWVvdXQoY2FsbGJhY2ssIDApKTtcbiAgfVxuXG4gIF9tYXliZVNlbmRCYWRTdGF0ZUV2ZW50KCkge1xuICAgIC8vIEZvbGxvdyB1cCBidWdzOlxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tb3ppbGxhL2FjdGl2aXR5LXN0cmVhbS9pc3N1ZXMvMzY5MVxuICAgIGlmICghdGhpcy5wcm9wcy5pbml0aWFsaXplZCkge1xuICAgICAgLy8gUmVtZW1iZXIgdG8gcmVwb3J0IGJhY2sgd2hlbiBkYXRhIGlzIGF2YWlsYWJsZS5cbiAgICAgIHRoaXMuX3JlcG9ydE1pc3NpbmdEYXRhID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuX3JlcG9ydE1pc3NpbmdEYXRhKSB7XG4gICAgICB0aGlzLl9yZXBvcnRNaXNzaW5nRGF0YSA9IGZhbHNlO1xuICAgICAgLy8gUmVwb3J0IGhvdyBsb25nIGl0IHRvb2sgZm9yIGNvbXBvbmVudCB0byBiZWNvbWUgaW5pdGlhbGl6ZWQuXG4gICAgICB0aGlzLl9zZW5kQmFkU3RhdGVFdmVudCgpO1xuICAgIH1cbiAgfVxuXG4gIF9tYXliZVNlbmRQYWludGVkRXZlbnQoKSB7XG4gICAgLy8gSWYgd2UndmUgYWxyZWFkeSBoYW5kbGVkIGEgdGltZXN0YW1wLCBkb24ndCBkbyBpdCBhZ2Fpbi5cbiAgICBpZiAodGhpcy5fdGltZXN0YW1wSGFuZGxlZCB8fCAhdGhpcy5wcm9wcy5pbml0aWFsaXplZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIEFuZCBpZiB3ZSBoYXZlbid0LCB3ZSdyZSBkb2luZyBzbyBub3csIHNvIHJlbWVtYmVyIHRoYXQuIEV2ZW4gaWZcbiAgICAvLyBzb21ldGhpbmcgZ29lcyB3cm9uZyBpbiB0aGUgY2FsbGJhY2ssIHdlIGNhbid0IHRyeSBhZ2FpbiwgYXMgd2UnZCBiZVxuICAgIC8vIHNlbmRpbmcgYmFjayB0aGUgd3JvbmcgZGF0YSwgYW5kIHdlIGhhdmUgdG8gZG8gaXQgaGVyZSwgc28gdGhhdCBvdGhlclxuICAgIC8vIGNhbGxzIHRvIHRoaXMgbWV0aG9kIHdoaWxlIHdhaXRpbmcgZm9yIHRoZSBuZXh0IGZyYW1lIHdvbid0IGFsc28gdHJ5IHRvXG4gICAgLy8gaGFuZGxlIGl0LlxuICAgIHRoaXMuX3RpbWVzdGFtcEhhbmRsZWQgPSB0cnVlO1xuICAgIHRoaXMuX2FmdGVyRnJhbWVQYWludCh0aGlzLl9zZW5kUGFpbnRlZEV2ZW50KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUcmlnZ2VyZWQgYnkgY2FsbCB0byByZW5kZXIuIE9ubHkgZmlyc3QgY2FsbCBnb2VzIHRocm91Z2ggZHVlIHRvXG4gICAqIGBfcmVjb3JkZWRGaXJzdFJlbmRlcmAuXG4gICAqL1xuICBfZW5zdXJlRmlyc3RSZW5kZXJUc1JlY29yZGVkKCkge1xuICAgIC8vIFVzZWQgYXMgdDAgZm9yIHJlY29yZGluZyBob3cgbG9uZyBjb21wb25lbnQgdG9vayB0byBpbml0aWFsaXplLlxuICAgIGlmICghdGhpcy5fcmVjb3JkZWRGaXJzdFJlbmRlcikge1xuICAgICAgdGhpcy5fcmVjb3JkZWRGaXJzdFJlbmRlciA9IHRydWU7XG4gICAgICAvLyB0b3BzaXRlc19maXJzdF9yZW5kZXJfdHMsIGhpZ2hsaWdodHNfZmlyc3RfcmVuZGVyX3RzLlxuICAgICAgY29uc3Qga2V5ID0gYCR7dGhpcy5wcm9wcy5pZH1fZmlyc3RfcmVuZGVyX3RzYDtcbiAgICAgIHRoaXMucGVyZlN2Yy5tYXJrKGtleSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYFRFTEVNRVRSWV9VTkRFU0lSRURfRVZFTlRgIHdpdGggdGltZXN0YW1wIGluIG1zXG4gICAqIG9mIGhvdyBtdWNoIGxvbmdlciB0aGUgZGF0YSB0b29rIHRvIGJlIHJlYWR5IGZvciBkaXNwbGF5IHRoYW4gaXQgd291bGRcbiAgICogaGF2ZSBiZWVuIHRoZSBpZGVhbCBjYXNlLlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vbW96aWxsYS9waW5nLWNlbnRyZS9pc3N1ZXMvOThcbiAgICovXG4gIF9zZW5kQmFkU3RhdGVFdmVudCgpIHtcbiAgICAvLyBoaWdobGlnaHRzX2RhdGFfcmVhZHlfdHMsIHRvcHNpdGVzX2RhdGFfcmVhZHlfdHMuXG4gICAgY29uc3QgZGF0YVJlYWR5S2V5ID0gYCR7dGhpcy5wcm9wcy5pZH1fZGF0YV9yZWFkeV90c2A7XG4gICAgdGhpcy5wZXJmU3ZjLm1hcmsoZGF0YVJlYWR5S2V5KTtcblxuICAgIHRyeSB7XG4gICAgICBjb25zdCBmaXJzdFJlbmRlcktleSA9IGAke3RoaXMucHJvcHMuaWR9X2ZpcnN0X3JlbmRlcl90c2A7XG4gICAgICAvLyB2YWx1ZSBoYXMgdG8gYmUgSW50MzIuXG4gICAgICBjb25zdCB2YWx1ZSA9IHBhcnNlSW50KFxuICAgICAgICB0aGlzLnBlcmZTdmMuZ2V0TW9zdFJlY2VudEFic01hcmtTdGFydEJ5TmFtZShkYXRhUmVhZHlLZXkpIC1cbiAgICAgICAgICB0aGlzLnBlcmZTdmMuZ2V0TW9zdFJlY2VudEFic01hcmtTdGFydEJ5TmFtZShmaXJzdFJlbmRlcktleSksXG4gICAgICAgIDEwXG4gICAgICApO1xuICAgICAgdGhpcy5wcm9wcy5kaXNwYXRjaChcbiAgICAgICAgYWMuT25seVRvTWFpbih7XG4gICAgICAgICAgdHlwZTogYXQuU0FWRV9TRVNTSU9OX1BFUkZfREFUQSxcbiAgICAgICAgICAvLyBoaWdobGlnaHRzX2RhdGFfbGF0ZV9ieV9tcywgdG9wc2l0ZXNfZGF0YV9sYXRlX2J5X21zLlxuICAgICAgICAgIGRhdGE6IHsgW2Ake3RoaXMucHJvcHMuaWR9X2RhdGFfbGF0ZV9ieV9tc2BdOiB2YWx1ZSB9LFxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9IGNhdGNoIChleCkge1xuICAgICAgLy8gSWYgdGhpcyBmYWlsZWQsIGl0J3MgbGlrZWx5IGJlY2F1c2UgdGhlIGBwcml2YWN5LnJlc2lzdEZpbmdlcnByaW50aW5nYFxuICAgICAgLy8gcHJlZiBpcyB0cnVlLlxuICAgIH1cbiAgfVxuXG4gIF9zZW5kUGFpbnRlZEV2ZW50KCkge1xuICAgIC8vIFJlY29yZCBmaXJzdF9wYWludGVkIGV2ZW50IGJ1dCBvbmx5IHNlbmQgaWYgdG9wc2l0ZXMuXG4gICAgaWYgKHRoaXMucHJvcHMuaWQgIT09IFwidG9wc2l0ZXNcIikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIHRvcHNpdGVzX2ZpcnN0X3BhaW50ZWRfdHMuXG4gICAgY29uc3Qga2V5ID0gYCR7dGhpcy5wcm9wcy5pZH1fZmlyc3RfcGFpbnRlZF90c2A7XG4gICAgdGhpcy5wZXJmU3ZjLm1hcmsoa2V5KTtcblxuICAgIHRyeSB7XG4gICAgICBjb25zdCBkYXRhID0ge307XG4gICAgICBkYXRhW2tleV0gPSB0aGlzLnBlcmZTdmMuZ2V0TW9zdFJlY2VudEFic01hcmtTdGFydEJ5TmFtZShrZXkpO1xuXG4gICAgICB0aGlzLnByb3BzLmRpc3BhdGNoKFxuICAgICAgICBhYy5Pbmx5VG9NYWluKHtcbiAgICAgICAgICB0eXBlOiBhdC5TQVZFX1NFU1NJT05fUEVSRl9EQVRBLFxuICAgICAgICAgIGRhdGEsXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAvLyBJZiB0aGlzIGZhaWxlZCwgaXQncyBsaWtlbHkgYmVjYXVzZSB0aGUgYHByaXZhY3kucmVzaXN0RmluZ2VycHJpbnRpbmdgXG4gICAgICAvLyBwcmVmIGlzIHRydWUuICBXZSBzaG91bGQgYXQgbGVhc3Qgbm90IGJsb3cgdXAsIGFuZCBzaG91bGQgY29udGludWVcbiAgICAgIC8vIHRvIHNldCB0aGlzLl90aW1lc3RhbXBIYW5kbGVkIHRvIGF2b2lkIGdvaW5nIHRocm91Z2ggdGhpcyBhZ2Fpbi5cbiAgICB9XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgaWYgKFJFQ09SREVEX1NFQ1RJT05TLmluY2x1ZGVzKHRoaXMucHJvcHMuaWQpKSB7XG4gICAgICB0aGlzLl9lbnN1cmVGaXJzdFJlbmRlclRzUmVjb3JkZWQoKTtcbiAgICAgIHRoaXMuX21heWJlU2VuZEJhZFN0YXRlRXZlbnQoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW47XG4gIH1cbn1cbiIsIi8qIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXMgZmlsZSxcbiAqIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uICovXG5cblwidXNlIHN0cmljdFwiO1xuXG5pZiAodHlwZW9mIENocm9tZVV0aWxzICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gIC8vIFVzZSBhIHZhciBoZXJlIGluc3RlYWQgb2YgbGV0IG91dHNpZGUgdG8gYXZvaWQgY3JlYXRpbmcgYSBsb2NhbGx5IHNjb3BlZFxuICAvLyB2YXJpYWJsZSB0aGF0IGhpZGVzIHRoZSBnbG9iYWwsIHdoaWNoIHdlIG1vZGlmeSBmb3IgdGVzdGluZy5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXZhciwgdmFycy1vbi10b3BcbiAgdmFyIHsgU2VydmljZXMgfSA9IENocm9tZVV0aWxzLmltcG9ydChcInJlc291cmNlOi8vZ3JlL21vZHVsZXMvU2VydmljZXMuanNtXCIpO1xufVxuXG5sZXQgdXNhYmxlUGVyZk9iajtcblxuLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBibG9jay1zY29wZWQtdmFyXG5pZiAodHlwZW9mIFNlcnZpY2VzICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gIC8vIEJvcnJvdyB0aGUgaGlnaC1yZXNvbHV0aW9uIHRpbWVyIGZyb20gdGhlIGhpZGRlbiB3aW5kb3cuLi4uXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBibG9jay1zY29wZWQtdmFyXG4gIHVzYWJsZVBlcmZPYmogPSBTZXJ2aWNlcy5hcHBTaGVsbC5oaWRkZW5ET01XaW5kb3cucGVyZm9ybWFuY2U7XG59IGVsc2Uge1xuICAvLyB3ZSBtdXN0IGJlIHJ1bm5pbmcgaW4gY29udGVudCBzcGFjZVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgdXNhYmxlUGVyZk9iaiA9IHBlcmZvcm1hbmNlO1xufVxuXG5mdW5jdGlvbiBfUGVyZlNlcnZpY2Uob3B0aW9ucykge1xuICAvLyBGb3IgdGVzdGluZywgc28gdGhhdCB3ZSBjYW4gdXNlIGEgZmFrZSBXaW5kb3cucGVyZm9ybWFuY2Ugb2JqZWN0IHdpdGhcbiAgLy8ga25vd24gc3RhdGUuXG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMucGVyZm9ybWFuY2VPYmopIHtcbiAgICB0aGlzLl9wZXJmID0gb3B0aW9ucy5wZXJmb3JtYW5jZU9iajtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9wZXJmID0gdXNhYmxlUGVyZk9iajtcbiAgfVxufVxuXG5fUGVyZlNlcnZpY2UucHJvdG90eXBlID0ge1xuICAvKipcbiAgICogQ2FsbHMgdGhlIHVuZGVybHlpbmcgbWFyaygpIG1ldGhvZCBvbiB0aGUgYXBwcm9wcmlhdGUgV2luZG93LnBlcmZvcm1hbmNlXG4gICAqIG9iamVjdCB0byBhZGQgYSBtYXJrIHdpdGggdGhlIGdpdmVuIG5hbWUgdG8gdGhlIGFwcHJvcHJpYXRlIHBlcmZvcm1hbmNlXG4gICAqIHRpbWVsaW5lLlxuICAgKlxuICAgKiBAcGFyYW0gIHtTdHJpbmd9IG5hbWUgIHRoZSBuYW1lIHRvIGdpdmUgdGhlIGN1cnJlbnQgbWFya1xuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cbiAgbWFyazogZnVuY3Rpb24gbWFyayhzdHIpIHtcbiAgICB0aGlzLl9wZXJmLm1hcmsoc3RyKTtcbiAgfSxcblxuICAvKipcbiAgICogQ2FsbHMgdGhlIHVuZGVybHlpbmcgZ2V0RW50cmllc0J5TmFtZSBvbiB0aGUgYXBwcm9wcmlhdGUgV2luZG93LnBlcmZvcm1hbmNlXG4gICAqIG9iamVjdC5cbiAgICpcbiAgICogQHBhcmFtICB7U3RyaW5nfSBuYW1lXG4gICAqIEBwYXJhbSAge1N0cmluZ30gdHlwZSBlZyBcIm1hcmtcIlxuICAgKiBAcmV0dXJuIHtBcnJheX0gICAgICAgUGVyZm9ybWFuY2UqIG9iamVjdHNcbiAgICovXG4gIGdldEVudHJpZXNCeU5hbWU6IGZ1bmN0aW9uIGdldEVudHJpZXNCeU5hbWUobmFtZSwgdHlwZSkge1xuICAgIHJldHVybiB0aGlzLl9wZXJmLmdldEVudHJpZXNCeU5hbWUobmFtZSwgdHlwZSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRoZSB0aW1lT3JpZ2luIHByb3BlcnR5IGZyb20gdGhlIGFwcHJvcHJpYXRlIHBlcmZvcm1hbmNlIG9iamVjdC5cbiAgICogVXNlZCB0byBlbnN1cmUgdGhhdCB0aW1lc3RhbXBzIGZyb20gdGhlIGFkZC1vbiBjb2RlIGFuZCB0aGUgY29udGVudCBjb2RlXG4gICAqIGFyZSBjb21wYXJhYmxlLlxuICAgKlxuICAgKiBAbm90ZSBJZiB0aGlzIGlzIGNhbGxlZCBmcm9tIGEgY29udGV4dCB3aXRob3V0IGEgd2luZG93XG4gICAqIChlZyBhIEpTTSBpbiBjaHJvbWUpLCBpdCB3aWxsIHJldHVybiB0aGUgdGltZU9yaWdpbiBvZiB0aGUgWFVMIGhpZGRlblxuICAgKiB3aW5kb3csIHdoaWNoIGFwcGVhcnMgdG8gYmUgdGhlIGZpcnN0IGNyZWF0ZWQgd2luZG93IChhbmQgdGh1c1xuICAgKiB0aW1lT3JpZ2luKSBpbiB0aGUgYnJvd3Nlci4gIE5vdGUgYWxzbywgaG93ZXZlciwgdGhlcmUgaXMgYWxzbyBhIHByaXZhdGVcbiAgICogaGlkZGVuIHdpbmRvdywgcHJlc3VtYWJseSBmb3IgcHJpdmF0ZSBicm93c2luZywgd2hpY2ggYXBwZWFycyB0byBiZVxuICAgKiBjcmVhdGVkIGR5bmFtaWNhbGx5IGxhdGVyLiAgRXhhY3RseSBob3cvd2hlbiB0aGF0IHNob3dzIHVwIG5lZWRzIHRvIGJlXG4gICAqIGludmVzdGlnYXRlZC5cbiAgICpcbiAgICogQHJldHVybiB7TnVtYmVyfSBBIGRvdWJsZSBvZiBtaWxsaXNlY29uZHMgd2l0aCBhIHByZWNpc2lvbiBvZiAwLjV1cy5cbiAgICovXG4gIGdldCB0aW1lT3JpZ2luKCkge1xuICAgIHJldHVybiB0aGlzLl9wZXJmLnRpbWVPcmlnaW47XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIFwiYWJzb2x1dGVcIiB2ZXJzaW9uIG9mIHBlcmZvcm1hbmNlLm5vdygpLCBpLmUuIG9uZSB0aGF0XG4gICAqIHNob3VsZCAoW2J1ZyAxNDAxNDA2XShodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0xNDAxNDA2KVxuICAgKiBiZSBjb21wYXJhYmxlIGFjcm9zcyBib3RoIGNocm9tZSBhbmQgY29udGVudC5cbiAgICpcbiAgICogQHJldHVybiB7TnVtYmVyfVxuICAgKi9cbiAgYWJzTm93OiBmdW5jdGlvbiBhYnNOb3coKSB7XG4gICAgcmV0dXJuIHRoaXMudGltZU9yaWdpbiArIHRoaXMuX3BlcmYubm93KCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRoaXMgcmV0dXJucyB0aGUgYWJzb2x1dGUgc3RhcnRUaW1lIGZyb20gdGhlIG1vc3QgcmVjZW50IHBlcmZvcm1hbmNlLm1hcmsoKVxuICAgKiB3aXRoIHRoZSBnaXZlbiBuYW1lLlxuICAgKlxuICAgKiBAcGFyYW0gIHtTdHJpbmd9IG5hbWUgIHRoZSBuYW1lIHRvIGxvb2t1cCB0aGUgc3RhcnQgdGltZSBmb3JcbiAgICpcbiAgICogQHJldHVybiB7TnVtYmVyfSAgICAgICB0aGUgcmV0dXJuZWQgc3RhcnQgdGltZSwgYXMgYSBET01IaWdoUmVzVGltZVN0YW1wXG4gICAqXG4gICAqIEB0aHJvd3Mge0Vycm9yfSAgICAgICAgXCJObyBNYXJrcyB3aXRoIHRoZSBuYW1lIC4uLlwiIGlmIG5vbmUgYXJlIGF2YWlsYWJsZVxuICAgKlxuICAgKiBAbm90ZSBBbHdheXMgc3Vycm91bmQgY2FsbHMgdG8gdGhpcyBieSB0cnkvY2F0Y2guICBPdGhlcndpc2UgeW91ciBjb2RlXG4gICAqIG1heSBmYWlsIHdoZW4gdGhlIGBwcml2YWN5LnJlc2lzdEZpbmdlcnByaW50aW5nYCBwcmVmIGlzIHRydWUuICBXaGVuXG4gICAqIHRoaXMgcHJlZiBpcyBzZXQsIGFsbCBhdHRlbXB0cyB0byBnZXQgbWFya3Mgd2lsbCBsaWtlbHkgZmFpbCwgd2hpY2ggd2lsbFxuICAgKiBjYXVzZSB0aGlzIG1ldGhvZCB0byB0aHJvdy5cbiAgICpcbiAgICogU2VlIFtidWcgMTM2OTMwM10oaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM2OTMwMylcbiAgICogZm9yIG1vcmUgaW5mby5cbiAgICovXG4gIGdldE1vc3RSZWNlbnRBYnNNYXJrU3RhcnRCeU5hbWUobmFtZSkge1xuICAgIGxldCBlbnRyaWVzID0gdGhpcy5nZXRFbnRyaWVzQnlOYW1lKG5hbWUsIFwibWFya1wiKTtcblxuICAgIGlmICghZW50cmllcy5sZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgTm8gbWFya3Mgd2l0aCB0aGUgbmFtZSAke25hbWV9YCk7XG4gICAgfVxuXG4gICAgbGV0IG1vc3RSZWNlbnRFbnRyeSA9IGVudHJpZXNbZW50cmllcy5sZW5ndGggLSAxXTtcbiAgICByZXR1cm4gdGhpcy5fcGVyZi50aW1lT3JpZ2luICsgbW9zdFJlY2VudEVudHJ5LnN0YXJ0VGltZTtcbiAgfSxcbn07XG5cbnRoaXMucGVyZlNlcnZpY2UgPSBuZXcgX1BlcmZTZXJ2aWNlKCk7XG5jb25zdCBFWFBPUlRFRF9TWU1CT0xTID0gW1wiX1BlcmZTZXJ2aWNlXCIsIFwicGVyZlNlcnZpY2VcIl07XG4iLCIvKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIGZpbGUsXG4gKiBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLiAqL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbmV4cG9ydCBjbGFzcyBNb3JlUmVjb21tZW5kYXRpb25zIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IHJlYWRfbW9yZV9lbmRwb2ludCB9ID0gdGhpcy5wcm9wcztcbiAgICBpZiAocmVhZF9tb3JlX2VuZHBvaW50KSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8YVxuICAgICAgICAgIGNsYXNzTmFtZT1cIm1vcmUtcmVjb21tZW5kYXRpb25zXCJcbiAgICAgICAgICBocmVmPXtyZWFkX21vcmVfZW5kcG9pbnR9XG4gICAgICAgICAgZGF0YS1sMTBuLWlkPVwibmV3dGFiLXBvY2tldC1tb3JlLXJlY29tbWVuZGF0aW9uc1wiXG4gICAgICAgIC8+XG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuIiwiLyogVGhpcyBTb3VyY2UgQ29kZSBGb3JtIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBNb3ppbGxhIFB1YmxpY1xuICogTGljZW5zZSwgdi4gMi4wLiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBmaWxlLFxuICogWW91IGNhbiBvYnRhaW4gb25lIGF0IGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy4gKi9cblxuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuXG5leHBvcnQgY2xhc3MgX1BvY2tldExvZ2dlZEluQ3RhIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IHBvY2tldEN0YSB9ID0gdGhpcy5wcm9wcy5Qb2NrZXQ7XG4gICAgcmV0dXJuIChcbiAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInBvY2tldC1sb2dnZWQtaW4tY3RhXCI+XG4gICAgICAgIDxhXG4gICAgICAgICAgY2xhc3NOYW1lPVwicG9ja2V0LWN0YS1idXR0b25cIlxuICAgICAgICAgIGhyZWY9e3BvY2tldEN0YS5jdGFVcmwgPyBwb2NrZXRDdGEuY3RhVXJsIDogXCJodHRwczovL2dldHBvY2tldC5jb20vXCJ9XG4gICAgICAgID5cbiAgICAgICAgICB7cG9ja2V0Q3RhLmN0YUJ1dHRvbiA/IChcbiAgICAgICAgICAgIHBvY2tldEN0YS5jdGFCdXR0b25cbiAgICAgICAgICApIDogKFxuICAgICAgICAgICAgPHNwYW4gZGF0YS1sMTBuLWlkPVwibmV3dGFiLXBvY2tldC1jdGEtYnV0dG9uXCIgLz5cbiAgICAgICAgICApfVxuICAgICAgICA8L2E+XG5cbiAgICAgICAgPGFcbiAgICAgICAgICBocmVmPXtwb2NrZXRDdGEuY3RhVXJsID8gcG9ja2V0Q3RhLmN0YVVybCA6IFwiaHR0cHM6Ly9nZXRwb2NrZXQuY29tL1wifVxuICAgICAgICA+XG4gICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiY3RhLXRleHRcIj5cbiAgICAgICAgICAgIHtwb2NrZXRDdGEuY3RhVGV4dCA/IChcbiAgICAgICAgICAgICAgcG9ja2V0Q3RhLmN0YVRleHRcbiAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgIDxzcGFuIGRhdGEtbDEwbi1pZD1cIm5ld3RhYi1wb2NrZXQtY3RhLXRleHRcIiAvPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L3NwYW4+XG4gICAgICAgIDwvYT5cbiAgICAgIDwvc3Bhbj5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBQb2NrZXRMb2dnZWRJbkN0YSA9IGNvbm5lY3Qoc3RhdGUgPT4gKHsgUG9ja2V0OiBzdGF0ZS5Qb2NrZXQgfSkpKFxuICBfUG9ja2V0TG9nZ2VkSW5DdGFcbik7XG4iLCIvKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIGZpbGUsXG4gKiBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLiAqL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbmV4cG9ydCBjbGFzcyBUb3BpYyBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyB1cmwsIG5hbWUgfSA9IHRoaXMucHJvcHM7XG4gICAgcmV0dXJuIChcbiAgICAgIDxsaT5cbiAgICAgICAgPGEga2V5PXtuYW1lfSBocmVmPXt1cmx9PlxuICAgICAgICAgIHtuYW1lfVxuICAgICAgICA8L2E+XG4gICAgICA8L2xpPlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFRvcGljcyBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyB0b3BpY3MgfSA9IHRoaXMucHJvcHM7XG4gICAgcmV0dXJuIChcbiAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInRvcGljc1wiPlxuICAgICAgICA8c3BhbiBkYXRhLWwxMG4taWQ9XCJuZXd0YWItcG9ja2V0LXJlYWQtbW9yZVwiIC8+XG4gICAgICAgIDx1bD5cbiAgICAgICAgICB7dG9waWNzICYmXG4gICAgICAgICAgICB0b3BpY3MubWFwKHQgPT4gPFRvcGljIGtleT17dC5uYW1lfSB1cmw9e3QudXJsfSBuYW1lPXt0Lm5hbWV9IC8+KX1cbiAgICAgICAgPC91bD5cbiAgICAgIDwvc3Bhbj5cbiAgICApO1xuICB9XG59XG4iLCIvKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIGZpbGUsXG4gKiBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLiAqL1xuXG5pbXBvcnQgeyBhY3Rpb25DcmVhdG9ycyBhcyBhYywgYWN0aW9uVHlwZXMgYXMgYXQgfSBmcm9tIFwiY29tbW9uL0FjdGlvbnMuanNtXCI7XG5pbXBvcnQge1xuICBNSU5fQ09STkVSX0ZBVklDT05fU0laRSxcbiAgTUlOX1JJQ0hfRkFWSUNPTl9TSVpFLFxuICBUT1BfU0lURVNfU09VUkNFLFxufSBmcm9tIFwiLi9Ub3BTaXRlc0NvbnN0YW50c1wiO1xuaW1wb3J0IHsgQ29sbGFwc2libGVTZWN0aW9uIH0gZnJvbSBcImNvbnRlbnQtc3JjL2NvbXBvbmVudHMvQ29sbGFwc2libGVTZWN0aW9uL0NvbGxhcHNpYmxlU2VjdGlvblwiO1xuaW1wb3J0IHsgQ29tcG9uZW50UGVyZlRpbWVyIH0gZnJvbSBcImNvbnRlbnQtc3JjL2NvbXBvbmVudHMvQ29tcG9uZW50UGVyZlRpbWVyL0NvbXBvbmVudFBlcmZUaW1lclwiO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuaW1wb3J0IHsgTW9kYWxPdmVybGF5V3JhcHBlciB9IGZyb20gXCIuLi8uLi9hc3JvdXRlci9jb21wb25lbnRzL01vZGFsT3ZlcmxheS9Nb2RhbE92ZXJsYXlcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IFNlYXJjaFNob3J0Y3V0c0Zvcm0gfSBmcm9tIFwiLi9TZWFyY2hTaG9ydGN1dHNGb3JtXCI7XG5pbXBvcnQgeyBUT1BfU0lURVNfTUFYX1NJVEVTX1BFUl9ST1cgfSBmcm9tIFwiY29tbW9uL1JlZHVjZXJzLmpzbVwiO1xuaW1wb3J0IHsgVG9wU2l0ZUZvcm0gfSBmcm9tIFwiLi9Ub3BTaXRlRm9ybVwiO1xuaW1wb3J0IHsgVG9wU2l0ZUxpc3QgfSBmcm9tIFwiLi9Ub3BTaXRlXCI7XG5cbmZ1bmN0aW9uIHRvcFNpdGVJY29uVHlwZShsaW5rKSB7XG4gIGlmIChsaW5rLmN1c3RvbVNjcmVlbnNob3RVUkwpIHtcbiAgICByZXR1cm4gXCJjdXN0b21fc2NyZWVuc2hvdFwiO1xuICB9XG4gIGlmIChsaW5rLnRpcHB5VG9wSWNvbiB8fCBsaW5rLmZhdmljb25SZWYgPT09IFwidGlwcHl0b3BcIikge1xuICAgIHJldHVybiBcInRpcHB5dG9wXCI7XG4gIH1cbiAgaWYgKGxpbmsuZmF2aWNvblNpemUgPj0gTUlOX1JJQ0hfRkFWSUNPTl9TSVpFKSB7XG4gICAgcmV0dXJuIFwicmljaF9pY29uXCI7XG4gIH1cbiAgaWYgKGxpbmsuc2NyZWVuc2hvdCAmJiBsaW5rLmZhdmljb25TaXplID49IE1JTl9DT1JORVJfRkFWSUNPTl9TSVpFKSB7XG4gICAgcmV0dXJuIFwic2NyZWVuc2hvdF93aXRoX2ljb25cIjtcbiAgfVxuICBpZiAobGluay5zY3JlZW5zaG90KSB7XG4gICAgcmV0dXJuIFwic2NyZWVuc2hvdFwiO1xuICB9XG4gIHJldHVybiBcIm5vX2ltYWdlXCI7XG59XG5cbi8qKlxuICogSXRlcmF0ZXMgdGhyb3VnaCBUb3BTaXRlcyBhbmQgY291bnRzIHR5cGVzIG9mIGltYWdlcy5cbiAqIEBwYXJhbSBhY2MgQWNjdW11bGF0b3IgZm9yIHJlZHVjZXIuXG4gKiBAcGFyYW0gdG9wc2l0ZSBFbnRyeSBpbiBUb3BTaXRlcy5cbiAqL1xuZnVuY3Rpb24gY291bnRUb3BTaXRlc0ljb25zVHlwZXModG9wU2l0ZXMpIHtcbiAgY29uc3QgY291bnRUb3BTaXRlc1R5cGVzID0gKGFjYywgbGluaykgPT4ge1xuICAgIGFjY1t0b3BTaXRlSWNvblR5cGUobGluayldKys7XG4gICAgcmV0dXJuIGFjYztcbiAgfTtcblxuICByZXR1cm4gdG9wU2l0ZXMucmVkdWNlKGNvdW50VG9wU2l0ZXNUeXBlcywge1xuICAgIGN1c3RvbV9zY3JlZW5zaG90OiAwLFxuICAgIHNjcmVlbnNob3Rfd2l0aF9pY29uOiAwLFxuICAgIHNjcmVlbnNob3Q6IDAsXG4gICAgdGlwcHl0b3A6IDAsXG4gICAgcmljaF9pY29uOiAwLFxuICAgIG5vX2ltYWdlOiAwLFxuICB9KTtcbn1cblxuZXhwb3J0IGNsYXNzIF9Ub3BTaXRlcyBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLm9uRWRpdEZvcm1DbG9zZSA9IHRoaXMub25FZGl0Rm9ybUNsb3NlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vblNlYXJjaFNob3J0Y3V0c0Zvcm1DbG9zZSA9IHRoaXMub25TZWFyY2hTaG9ydGN1dHNGb3JtQ2xvc2UuYmluZChcbiAgICAgIHRoaXNcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIERpc3BhdGNoIHNlc3Npb24gc3RhdGlzdGljcyBhYm91dCB0aGUgcXVhbGl0eSBvZiBUb3BTaXRlcyBpY29ucyBhbmQgcGlubmVkIGNvdW50LlxuICAgKi9cbiAgX2Rpc3BhdGNoVG9wU2l0ZXNTdGF0cygpIHtcbiAgICBjb25zdCB0b3BTaXRlcyA9IHRoaXMuX2dldFZpc2libGVUb3BTaXRlcygpO1xuICAgIGNvbnN0IHRvcFNpdGVzSWNvbnNTdGF0cyA9IGNvdW50VG9wU2l0ZXNJY29uc1R5cGVzKHRvcFNpdGVzKTtcbiAgICBjb25zdCB0b3BTaXRlc1Bpbm5lZCA9IHRvcFNpdGVzLmZpbHRlcihzaXRlID0+ICEhc2l0ZS5pc1Bpbm5lZCkubGVuZ3RoO1xuICAgIGNvbnN0IHNlYXJjaFNob3J0Y3V0cyA9IHRvcFNpdGVzLmZpbHRlcihzaXRlID0+ICEhc2l0ZS5zZWFyY2hUb3BTaXRlKVxuICAgICAgLmxlbmd0aDtcbiAgICAvLyBEaXNwYXRjaCB0ZWxlbWV0cnkgZXZlbnQgd2l0aCB0aGUgY291bnQgb2YgVG9wU2l0ZXMgaW1hZ2VzIHR5cGVzLlxuICAgIHRoaXMucHJvcHMuZGlzcGF0Y2goXG4gICAgICBhYy5BbHNvVG9NYWluKHtcbiAgICAgICAgdHlwZTogYXQuU0FWRV9TRVNTSU9OX1BFUkZfREFUQSxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIHRvcHNpdGVzX2ljb25fc3RhdHM6IHRvcFNpdGVzSWNvbnNTdGF0cyxcbiAgICAgICAgICB0b3BzaXRlc19waW5uZWQ6IHRvcFNpdGVzUGlubmVkLFxuICAgICAgICAgIHRvcHNpdGVzX3NlYXJjaF9zaG9ydGN1dHM6IHNlYXJjaFNob3J0Y3V0cyxcbiAgICAgICAgfSxcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIFRvcFNpdGVzIHRoYXQgYXJlIHZpc2libGUgYmFzZWQgb24gcHJlZnMgYW5kIHdpbmRvdyB3aWR0aC5cbiAgICovXG4gIF9nZXRWaXNpYmxlVG9wU2l0ZXMoKSB7XG4gICAgLy8gV2UgaGlkZSAyIHNpdGVzIHBlciByb3cgd2hlbiBub3QgaW4gdGhlIHdpZGUgbGF5b3V0LlxuICAgIGxldCBzaXRlc1BlclJvdyA9IFRPUF9TSVRFU19NQVhfU0lURVNfUEVSX1JPVztcbiAgICAvLyAkYnJlYWstcG9pbnQtd2lkZXN0ID0gMTA3MnB4IChmcm9tIF92YXJpYWJsZXMuc2NzcylcbiAgICBpZiAoIWdsb2JhbC5tYXRjaE1lZGlhKGAobWluLXdpZHRoOiAxMDcycHgpYCkubWF0Y2hlcykge1xuICAgICAgc2l0ZXNQZXJSb3cgLT0gMjtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMucHJvcHMuVG9wU2l0ZXMucm93cy5zbGljZShcbiAgICAgIDAsXG4gICAgICB0aGlzLnByb3BzLlRvcFNpdGVzUm93cyAqIHNpdGVzUGVyUm93XG4gICAgKTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICB0aGlzLl9kaXNwYXRjaFRvcFNpdGVzU3RhdHMoKTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMuX2Rpc3BhdGNoVG9wU2l0ZXNTdGF0cygpO1xuICB9XG5cbiAgb25FZGl0Rm9ybUNsb3NlKCkge1xuICAgIHRoaXMucHJvcHMuZGlzcGF0Y2goXG4gICAgICBhYy5Vc2VyRXZlbnQoe1xuICAgICAgICBzb3VyY2U6IFRPUF9TSVRFU19TT1VSQ0UsXG4gICAgICAgIGV2ZW50OiBcIlRPUF9TSVRFU19FRElUX0NMT1NFXCIsXG4gICAgICB9KVxuICAgICk7XG4gICAgdGhpcy5wcm9wcy5kaXNwYXRjaCh7IHR5cGU6IGF0LlRPUF9TSVRFU19DQU5DRUxfRURJVCB9KTtcbiAgfVxuXG4gIG9uU2VhcmNoU2hvcnRjdXRzRm9ybUNsb3NlKCkge1xuICAgIHRoaXMucHJvcHMuZGlzcGF0Y2goXG4gICAgICBhYy5Vc2VyRXZlbnQoe1xuICAgICAgICBzb3VyY2U6IFRPUF9TSVRFU19TT1VSQ0UsXG4gICAgICAgIGV2ZW50OiBcIlNFQVJDSF9FRElUX0NMT1NFXCIsXG4gICAgICB9KVxuICAgICk7XG4gICAgdGhpcy5wcm9wcy5kaXNwYXRjaCh7IHR5cGU6IGF0LlRPUF9TSVRFU19DTE9TRV9TRUFSQ0hfU0hPUlRDVVRTX01PREFMIH0pO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgcHJvcHMgfSA9IHRoaXM7XG4gICAgY29uc3QgeyBlZGl0Rm9ybSwgc2hvd1NlYXJjaFNob3J0Y3V0c0Zvcm0gfSA9IHByb3BzLlRvcFNpdGVzO1xuICAgIGNvbnN0IGV4dHJhTWVudU9wdGlvbnMgPSBbXCJBZGRUb3BTaXRlXCJdO1xuICAgIGlmIChwcm9wcy5QcmVmcy52YWx1ZXNbXCJpbXByb3Zlc2VhcmNoLnRvcFNpdGVTZWFyY2hTaG9ydGN1dHNcIl0pIHtcbiAgICAgIGV4dHJhTWVudU9wdGlvbnMucHVzaChcIkFkZFNlYXJjaFNob3J0Y3V0XCIpO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICA8Q29tcG9uZW50UGVyZlRpbWVyXG4gICAgICAgIGlkPVwidG9wc2l0ZXNcIlxuICAgICAgICBpbml0aWFsaXplZD17cHJvcHMuVG9wU2l0ZXMuaW5pdGlhbGl6ZWR9XG4gICAgICAgIGRpc3BhdGNoPXtwcm9wcy5kaXNwYXRjaH1cbiAgICAgID5cbiAgICAgICAgPENvbGxhcHNpYmxlU2VjdGlvblxuICAgICAgICAgIGNsYXNzTmFtZT1cInRvcC1zaXRlc1wiXG4gICAgICAgICAgaWNvbj1cInRvcHNpdGVzXCJcbiAgICAgICAgICBpZD1cInRvcHNpdGVzXCJcbiAgICAgICAgICB0aXRsZT17dGhpcy5wcm9wcy50aXRsZSB8fCB7IGlkOiBcIm5ld3RhYi1zZWN0aW9uLWhlYWRlci10b3BzaXRlc1wiIH19XG4gICAgICAgICAgZXh0cmFNZW51T3B0aW9ucz17ZXh0cmFNZW51T3B0aW9uc31cbiAgICAgICAgICBzaG93UHJlZk5hbWU9XCJmZWVkcy50b3BzaXRlc1wiXG4gICAgICAgICAgZXZlbnRTb3VyY2U9e1RPUF9TSVRFU19TT1VSQ0V9XG4gICAgICAgICAgY29sbGFwc2VkPXtcbiAgICAgICAgICAgIHByb3BzLlRvcFNpdGVzLnByZWYgPyBwcm9wcy5Ub3BTaXRlcy5wcmVmLmNvbGxhcHNlZCA6IHVuZGVmaW5lZFxuICAgICAgICAgIH1cbiAgICAgICAgICBpc0ZpeGVkPXtwcm9wcy5pc0ZpeGVkfVxuICAgICAgICAgIGlzRmlyc3Q9e3Byb3BzLmlzRmlyc3R9XG4gICAgICAgICAgaXNMYXN0PXtwcm9wcy5pc0xhc3R9XG4gICAgICAgICAgZGlzcGF0Y2g9e3Byb3BzLmRpc3BhdGNofVxuICAgICAgICA+XG4gICAgICAgICAgPFRvcFNpdGVMaXN0XG4gICAgICAgICAgICBUb3BTaXRlcz17cHJvcHMuVG9wU2l0ZXN9XG4gICAgICAgICAgICBUb3BTaXRlc1Jvd3M9e3Byb3BzLlRvcFNpdGVzUm93c31cbiAgICAgICAgICAgIGRpc3BhdGNoPXtwcm9wcy5kaXNwYXRjaH1cbiAgICAgICAgICAgIHRvcFNpdGVJY29uVHlwZT17dG9wU2l0ZUljb25UeXBlfVxuICAgICAgICAgIC8+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJlZGl0LXRvcHNpdGVzLXdyYXBwZXJcIj5cbiAgICAgICAgICAgIHtlZGl0Rm9ybSAmJiAoXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZWRpdC10b3BzaXRlc1wiPlxuICAgICAgICAgICAgICAgIDxNb2RhbE92ZXJsYXlXcmFwcGVyXG4gICAgICAgICAgICAgICAgICB1bnN0eWxlZD17dHJ1ZX1cbiAgICAgICAgICAgICAgICAgIG9uQ2xvc2U9e3RoaXMub25FZGl0Rm9ybUNsb3NlfVxuICAgICAgICAgICAgICAgICAgaW5uZXJDbGFzc05hbWU9XCJtb2RhbFwiXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgPFRvcFNpdGVGb3JtXG4gICAgICAgICAgICAgICAgICAgIHNpdGU9e3Byb3BzLlRvcFNpdGVzLnJvd3NbZWRpdEZvcm0uaW5kZXhdfVxuICAgICAgICAgICAgICAgICAgICBvbkNsb3NlPXt0aGlzLm9uRWRpdEZvcm1DbG9zZX1cbiAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2g9e3RoaXMucHJvcHMuZGlzcGF0Y2h9XG4gICAgICAgICAgICAgICAgICAgIHsuLi5lZGl0Rm9ybX1cbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPC9Nb2RhbE92ZXJsYXlXcmFwcGVyPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICB7c2hvd1NlYXJjaFNob3J0Y3V0c0Zvcm0gJiYgKFxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImVkaXQtc2VhcmNoLXNob3J0Y3V0c1wiPlxuICAgICAgICAgICAgICAgIDxNb2RhbE92ZXJsYXlXcmFwcGVyXG4gICAgICAgICAgICAgICAgICB1bnN0eWxlZD17dHJ1ZX1cbiAgICAgICAgICAgICAgICAgIG9uQ2xvc2U9e3RoaXMub25TZWFyY2hTaG9ydGN1dHNGb3JtQ2xvc2V9XG4gICAgICAgICAgICAgICAgICBpbm5lckNsYXNzTmFtZT1cIm1vZGFsXCJcbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICA8U2VhcmNoU2hvcnRjdXRzRm9ybVxuICAgICAgICAgICAgICAgICAgICBUb3BTaXRlcz17cHJvcHMuVG9wU2l0ZXN9XG4gICAgICAgICAgICAgICAgICAgIG9uQ2xvc2U9e3RoaXMub25TZWFyY2hTaG9ydGN1dHNGb3JtQ2xvc2V9XG4gICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoPXt0aGlzLnByb3BzLmRpc3BhdGNofVxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8L01vZGFsT3ZlcmxheVdyYXBwZXI+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9Db2xsYXBzaWJsZVNlY3Rpb24+XG4gICAgICA8L0NvbXBvbmVudFBlcmZUaW1lcj5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBUb3BTaXRlcyA9IGNvbm5lY3Qoc3RhdGUgPT4gKHtcbiAgVG9wU2l0ZXM6IHN0YXRlLlRvcFNpdGVzLFxuICBQcmVmczogc3RhdGUuUHJlZnMsXG4gIFRvcFNpdGVzUm93czogc3RhdGUuUHJlZnMudmFsdWVzLnRvcFNpdGVzUm93cyxcbn0pKShfVG9wU2l0ZXMpO1xuIiwiLyogVGhpcyBTb3VyY2UgQ29kZSBGb3JtIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBNb3ppbGxhIFB1YmxpY1xuICogTGljZW5zZSwgdi4gMi4wLiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBmaWxlLFxuICogWW91IGNhbiBvYnRhaW4gb25lIGF0IGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy4gKi9cblxuZXhwb3J0IGNvbnN0IFRPUF9TSVRFU19TT1VSQ0UgPSBcIlRPUF9TSVRFU1wiO1xuZXhwb3J0IGNvbnN0IFRPUF9TSVRFU19DT05URVhUX01FTlVfT1BUSU9OUyA9IFtcbiAgXCJDaGVja1BpblRvcFNpdGVcIixcbiAgXCJFZGl0VG9wU2l0ZVwiLFxuICBcIlNlcGFyYXRvclwiLFxuICBcIk9wZW5Jbk5ld1dpbmRvd1wiLFxuICBcIk9wZW5JblByaXZhdGVXaW5kb3dcIixcbiAgXCJTZXBhcmF0b3JcIixcbiAgXCJCbG9ja1VybFwiLFxuICBcIkRlbGV0ZVVybFwiLFxuXTtcbi8vIHRoZSBzcGVjaWFsIHRvcCBzaXRlIGZvciBzZWFyY2ggc2hvcnRjdXQgZXhwZXJpbWVudCBjYW4gb25seSBoYXZlIHRoZSBvcHRpb24gdG8gdW5waW4gKHdoaWNoIHJlbW92ZXMpIHRoZSB0b3BzaXRlXG5leHBvcnQgY29uc3QgVE9QX1NJVEVTX1NFQVJDSF9TSE9SVENVVFNfQ09OVEVYVF9NRU5VX09QVElPTlMgPSBbXG4gIFwiQ2hlY2tQaW5Ub3BTaXRlXCIsXG4gIFwiU2VwYXJhdG9yXCIsXG4gIFwiQmxvY2tVcmxcIixcbl07XG4vLyBtaW5pbXVtIHNpemUgbmVjZXNzYXJ5IHRvIHNob3cgYSByaWNoIGljb24gaW5zdGVhZCBvZiBhIHNjcmVlbnNob3RcbmV4cG9ydCBjb25zdCBNSU5fUklDSF9GQVZJQ09OX1NJWkUgPSA5Njtcbi8vIG1pbmltdW0gc2l6ZSBuZWNlc3NhcnkgdG8gc2hvdyBhbnkgaWNvbiBpbiB0aGUgdG9wIGxlZnQgY29ybmVyIHdpdGggYSBzY3JlZW5zaG90XG5leHBvcnQgY29uc3QgTUlOX0NPUk5FUl9GQVZJQ09OX1NJWkUgPSAxNjtcbiIsIi8qIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXMgZmlsZSxcbiAqIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uICovXG5cbmltcG9ydCB7IGFjdGlvbkNyZWF0b3JzIGFzIGFjLCBhY3Rpb25UeXBlcyBhcyBhdCB9IGZyb20gXCJjb21tb24vQWN0aW9ucy5qc21cIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IFRPUF9TSVRFU19TT1VSQ0UgfSBmcm9tIFwiLi9Ub3BTaXRlc0NvbnN0YW50c1wiO1xuXG5leHBvcnQgY2xhc3MgU2VsZWN0YWJsZVNlYXJjaFNob3J0Y3V0IGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IHNob3J0Y3V0LCBzZWxlY3RlZCB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBpbWFnZVN0eWxlID0geyBiYWNrZ3JvdW5kSW1hZ2U6IGB1cmwoXCIke3Nob3J0Y3V0LnRpcHB5VG9wSWNvbn1cIilgIH07XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwidG9wLXNpdGUtb3V0ZXIgc2VhcmNoLXNob3J0Y3V0XCI+XG4gICAgICAgIDxpbnB1dFxuICAgICAgICAgIHR5cGU9XCJjaGVja2JveFwiXG4gICAgICAgICAgaWQ9e3Nob3J0Y3V0LmtleXdvcmR9XG4gICAgICAgICAgbmFtZT17c2hvcnRjdXQua2V5d29yZH1cbiAgICAgICAgICBjaGVja2VkPXtzZWxlY3RlZH1cbiAgICAgICAgICBvbkNoYW5nZT17dGhpcy5wcm9wcy5vbkNoYW5nZX1cbiAgICAgICAgLz5cbiAgICAgICAgPGxhYmVsIGh0bWxGb3I9e3Nob3J0Y3V0LmtleXdvcmR9PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidG9wLXNpdGUtaW5uZXJcIj5cbiAgICAgICAgICAgIDxzcGFuPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRpbGVcIj5cbiAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJ0b3Atc2l0ZS1pY29uIHJpY2gtaWNvblwiXG4gICAgICAgICAgICAgICAgICBzdHlsZT17aW1hZ2VTdHlsZX1cbiAgICAgICAgICAgICAgICAgIGRhdGEtZmFsbGJhY2s9XCJAXCJcbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidG9wLXNpdGUtaWNvbiBzZWFyY2gtdG9wc2l0ZVwiIC8+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRpdGxlXCI+XG4gICAgICAgICAgICAgICAgPHNwYW4gZGlyPVwiYXV0b1wiPntzaG9ydGN1dC5rZXl3b3JkfTwvc3Bhbj5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvbGFiZWw+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBTZWFyY2hTaG9ydGN1dHNGb3JtIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuaGFuZGxlQ2hhbmdlID0gdGhpcy5oYW5kbGVDaGFuZ2UuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uQ2FuY2VsQnV0dG9uQ2xpY2sgPSB0aGlzLm9uQ2FuY2VsQnV0dG9uQ2xpY2suYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uU2F2ZUJ1dHRvbkNsaWNrID0gdGhpcy5vblNhdmVCdXR0b25DbGljay5iaW5kKHRoaXMpO1xuXG4gICAgLy8gY2xvbmUgdGhlIHNob3J0Y3V0cyBhbmQgYWRkIHRoZW0gdG8gdGhlIHN0YXRlIHNvIHdlIGNhbiBhZGQgaXNTZWxlY3RlZCBwcm9wZXJ0eVxuICAgIGNvbnN0IHNob3J0Y3V0cyA9IFtdO1xuICAgIGNvbnN0IHsgcm93cywgc2VhcmNoU2hvcnRjdXRzIH0gPSBwcm9wcy5Ub3BTaXRlcztcbiAgICBzZWFyY2hTaG9ydGN1dHMuZm9yRWFjaChzaG9ydGN1dCA9PiB7XG4gICAgICBzaG9ydGN1dHMucHVzaCh7XG4gICAgICAgIC4uLnNob3J0Y3V0LFxuICAgICAgICBpc1NlbGVjdGVkOiAhIXJvd3MuZmluZChcbiAgICAgICAgICByb3cgPT5cbiAgICAgICAgICAgIHJvdyAmJlxuICAgICAgICAgICAgcm93LmlzUGlubmVkICYmXG4gICAgICAgICAgICByb3cuc2VhcmNoVG9wU2l0ZSAmJlxuICAgICAgICAgICAgcm93LmxhYmVsID09PSBzaG9ydGN1dC5rZXl3b3JkXG4gICAgICAgICksXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICB0aGlzLnN0YXRlID0geyBzaG9ydGN1dHMgfTtcbiAgfVxuXG4gIGhhbmRsZUNoYW5nZShldmVudCkge1xuICAgIGNvbnN0IHsgdGFyZ2V0IH0gPSBldmVudDtcbiAgICBjb25zdCB7IG5hbWUsIGNoZWNrZWQgfSA9IHRhcmdldDtcbiAgICB0aGlzLnNldFN0YXRlKHByZXZTdGF0ZSA9PiB7XG4gICAgICBjb25zdCBzaG9ydGN1dHMgPSBwcmV2U3RhdGUuc2hvcnRjdXRzLnNsaWNlKCk7XG4gICAgICBsZXQgc2hvcnRjdXQgPSBzaG9ydGN1dHMuZmluZCgoeyBrZXl3b3JkIH0pID0+IGtleXdvcmQgPT09IG5hbWUpO1xuICAgICAgc2hvcnRjdXQuaXNTZWxlY3RlZCA9IGNoZWNrZWQ7XG4gICAgICByZXR1cm4geyBzaG9ydGN1dHMgfTtcbiAgICB9KTtcbiAgfVxuXG4gIG9uQ2FuY2VsQnV0dG9uQ2xpY2soZXYpIHtcbiAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHRoaXMucHJvcHMub25DbG9zZSgpO1xuICB9XG5cbiAgb25TYXZlQnV0dG9uQ2xpY2soZXYpIHtcbiAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgLy8gQ2hlY2sgaWYgdGhlcmUgd2VyZSBhbnkgY2hhbmdlcyBhbmQgYWN0IGFjY29yZGluZ2x5XG4gICAgY29uc3QgeyByb3dzIH0gPSB0aGlzLnByb3BzLlRvcFNpdGVzO1xuICAgIGNvbnN0IHBpblF1ZXVlID0gW107XG4gICAgY29uc3QgdW5waW5RdWV1ZSA9IFtdO1xuICAgIHRoaXMuc3RhdGUuc2hvcnRjdXRzLmZvckVhY2goc2hvcnRjdXQgPT4ge1xuICAgICAgY29uc3QgYWxyZWFkeVBpbm5lZCA9IHJvd3MuZmluZChcbiAgICAgICAgcm93ID0+XG4gICAgICAgICAgcm93ICYmXG4gICAgICAgICAgcm93LmlzUGlubmVkICYmXG4gICAgICAgICAgcm93LnNlYXJjaFRvcFNpdGUgJiZcbiAgICAgICAgICByb3cubGFiZWwgPT09IHNob3J0Y3V0LmtleXdvcmRcbiAgICAgICk7XG4gICAgICBpZiAoc2hvcnRjdXQuaXNTZWxlY3RlZCAmJiAhYWxyZWFkeVBpbm5lZCkge1xuICAgICAgICBwaW5RdWV1ZS5wdXNoKHRoaXMuX3NlYXJjaFRvcFNpdGUoc2hvcnRjdXQpKTtcbiAgICAgIH0gZWxzZSBpZiAoIXNob3J0Y3V0LmlzU2VsZWN0ZWQgJiYgYWxyZWFkeVBpbm5lZCkge1xuICAgICAgICB1bnBpblF1ZXVlLnB1c2goe1xuICAgICAgICAgIHVybDogYWxyZWFkeVBpbm5lZC51cmwsXG4gICAgICAgICAgc2VhcmNoVmVuZG9yOiBzaG9ydGN1dC5zaG9ydFVSTCxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBUZWxsIHRoZSBmZWVkIHRvIGRvIHRoZSB3b3JrLlxuICAgIHRoaXMucHJvcHMuZGlzcGF0Y2goXG4gICAgICBhYy5Pbmx5VG9NYWluKHtcbiAgICAgICAgdHlwZTogYXQuVVBEQVRFX1BJTk5FRF9TRUFSQ0hfU0hPUlRDVVRTLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgYWRkZWRTaG9ydGN1dHM6IHBpblF1ZXVlLFxuICAgICAgICAgIGRlbGV0ZWRTaG9ydGN1dHM6IHVucGluUXVldWUsXG4gICAgICAgIH0sXG4gICAgICB9KVxuICAgICk7XG5cbiAgICAvLyBTZW5kIHRoZSBUZWxlbWV0cnkgcGluZ3MuXG4gICAgcGluUXVldWUuZm9yRWFjaChzaG9ydGN1dCA9PiB7XG4gICAgICB0aGlzLnByb3BzLmRpc3BhdGNoKFxuICAgICAgICBhYy5Vc2VyRXZlbnQoe1xuICAgICAgICAgIHNvdXJjZTogVE9QX1NJVEVTX1NPVVJDRSxcbiAgICAgICAgICBldmVudDogXCJTRUFSQ0hfRURJVF9BRERcIixcbiAgICAgICAgICB2YWx1ZTogeyBzZWFyY2hfdmVuZG9yOiBzaG9ydGN1dC5zZWFyY2hWZW5kb3IgfSxcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfSk7XG4gICAgdW5waW5RdWV1ZS5mb3JFYWNoKHNob3J0Y3V0ID0+IHtcbiAgICAgIHRoaXMucHJvcHMuZGlzcGF0Y2goXG4gICAgICAgIGFjLlVzZXJFdmVudCh7XG4gICAgICAgICAgc291cmNlOiBUT1BfU0lURVNfU09VUkNFLFxuICAgICAgICAgIGV2ZW50OiBcIlNFQVJDSF9FRElUX0RFTEVURVwiLFxuICAgICAgICAgIHZhbHVlOiB7IHNlYXJjaF92ZW5kb3I6IHNob3J0Y3V0LnNlYXJjaFZlbmRvciB9LFxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIHRoaXMucHJvcHMub25DbG9zZSgpO1xuICB9XG5cbiAgX3NlYXJjaFRvcFNpdGUoc2hvcnRjdXQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdXJsOiBzaG9ydGN1dC51cmwsXG4gICAgICBzZWFyY2hUb3BTaXRlOiB0cnVlLFxuICAgICAgbGFiZWw6IHNob3J0Y3V0LmtleXdvcmQsXG4gICAgICBzZWFyY2hWZW5kb3I6IHNob3J0Y3V0LnNob3J0VVJMLFxuICAgIH07XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxmb3JtIGNsYXNzTmFtZT1cInRvcHNpdGUtZm9ybVwiPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNlYXJjaC1zaG9ydGN1dHMtY29udGFpbmVyXCI+XG4gICAgICAgICAgPGgzXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJzZWN0aW9uLXRpdGxlIGdyZXktdGl0bGVcIlxuICAgICAgICAgICAgZGF0YS1sMTBuLWlkPVwibmV3dGFiLXRvcHNpdGVzLWFkZC1zZWFyY2gtZW5naW5lLWhlYWRlclwiXG4gICAgICAgICAgLz5cbiAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAge3RoaXMuc3RhdGUuc2hvcnRjdXRzLm1hcChzaG9ydGN1dCA9PiAoXG4gICAgICAgICAgICAgIDxTZWxlY3RhYmxlU2VhcmNoU2hvcnRjdXRcbiAgICAgICAgICAgICAgICBrZXk9e3Nob3J0Y3V0LmtleXdvcmR9XG4gICAgICAgICAgICAgICAgc2hvcnRjdXQ9e3Nob3J0Y3V0fVxuICAgICAgICAgICAgICAgIHNlbGVjdGVkPXtzaG9ydGN1dC5pc1NlbGVjdGVkfVxuICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUNoYW5nZX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICkpfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwiYWN0aW9uc1wiPlxuICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgIGNsYXNzTmFtZT1cImNhbmNlbFwiXG4gICAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMub25DYW5jZWxCdXR0b25DbGlja31cbiAgICAgICAgICAgIGRhdGEtbDEwbi1pZD1cIm5ld3RhYi10b3BzaXRlcy1jYW5jZWwtYnV0dG9uXCJcbiAgICAgICAgICAvPlxuICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgIGNsYXNzTmFtZT1cImRvbmVcIlxuICAgICAgICAgICAgdHlwZT1cInN1Ym1pdFwiXG4gICAgICAgICAgICBvbkNsaWNrPXt0aGlzLm9uU2F2ZUJ1dHRvbkNsaWNrfVxuICAgICAgICAgICAgZGF0YS1sMTBuLWlkPVwibmV3dGFiLXRvcHNpdGVzLXNhdmUtYnV0dG9uXCJcbiAgICAgICAgICAvPlxuICAgICAgICA8L3NlY3Rpb24+XG4gICAgICA8L2Zvcm0+XG4gICAgKTtcbiAgfVxufVxuIiwiLyogVGhpcyBTb3VyY2UgQ29kZSBGb3JtIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBNb3ppbGxhIFB1YmxpY1xuICogTGljZW5zZSwgdi4gMi4wLiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBmaWxlLFxuICogWW91IGNhbiBvYnRhaW4gb25lIGF0IGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy4gKi9cblxuaW1wb3J0IHsgYWN0aW9uQ3JlYXRvcnMgYXMgYWMsIGFjdGlvblR5cGVzIGFzIGF0IH0gZnJvbSBcImNvbW1vbi9BY3Rpb25zLmpzbVwiO1xuaW1wb3J0IHtcbiAgTUlOX0NPUk5FUl9GQVZJQ09OX1NJWkUsXG4gIE1JTl9SSUNIX0ZBVklDT05fU0laRSxcbiAgVE9QX1NJVEVTX0NPTlRFWFRfTUVOVV9PUFRJT05TLFxuICBUT1BfU0lURVNfU0VBUkNIX1NIT1JUQ1VUU19DT05URVhUX01FTlVfT1BUSU9OUyxcbiAgVE9QX1NJVEVTX1NPVVJDRSxcbn0gZnJvbSBcIi4vVG9wU2l0ZXNDb25zdGFudHNcIjtcbmltcG9ydCB7IExpbmtNZW51IH0gZnJvbSBcImNvbnRlbnQtc3JjL2NvbXBvbmVudHMvTGlua01lbnUvTGlua01lbnVcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IFNjcmVlbnNob3RVdGlscyB9IGZyb20gXCJjb250ZW50LXNyYy9saWIvc2NyZWVuc2hvdC11dGlsc1wiO1xuaW1wb3J0IHsgVE9QX1NJVEVTX01BWF9TSVRFU19QRVJfUk9XIH0gZnJvbSBcImNvbW1vbi9SZWR1Y2Vycy5qc21cIjtcbmltcG9ydCB7IENvbnRleHRNZW51QnV0dG9uIH0gZnJvbSBcImNvbnRlbnQtc3JjL2NvbXBvbmVudHMvQ29udGV4dE1lbnUvQ29udGV4dE1lbnVCdXR0b25cIjtcblxuZXhwb3J0IGNsYXNzIFRvcFNpdGVMaW5rIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7IHNjcmVlbnNob3RJbWFnZTogbnVsbCB9O1xuICAgIHRoaXMub25EcmFnRXZlbnQgPSB0aGlzLm9uRHJhZ0V2ZW50LmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbktleVByZXNzID0gdGhpcy5vbktleVByZXNzLmJpbmQodGhpcyk7XG4gIH1cblxuICAvKlxuICAgKiBIZWxwZXIgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgdGhlIGRyb3Agem9uZSBzaG91bGQgYWxsb3cgYSBkcm9wLiBXZSBvbmx5IGFsbG93XG4gICAqIGRyb3BwaW5nIHRvcCBzaXRlcyBmb3Igbm93LlxuICAgKi9cbiAgX2FsbG93RHJvcChlKSB7XG4gICAgcmV0dXJuIGUuZGF0YVRyYW5zZmVyLnR5cGVzLmluY2x1ZGVzKFwidGV4dC90b3BzaXRlLWluZGV4XCIpO1xuICB9XG5cbiAgb25EcmFnRXZlbnQoZXZlbnQpIHtcbiAgICBzd2l0Y2ggKGV2ZW50LnR5cGUpIHtcbiAgICAgIGNhc2UgXCJjbGlja1wiOlxuICAgICAgICAvLyBTdG9wIGFueSBsaW5rIGNsaWNrcyBpZiB3ZSBzdGFydGVkIGFueSBkcmFnZ2luZ1xuICAgICAgICBpZiAodGhpcy5kcmFnZ2VkKSB7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJkcmFnc3RhcnRcIjpcbiAgICAgICAgdGhpcy5kcmFnZ2VkID0gdHJ1ZTtcbiAgICAgICAgZXZlbnQuZGF0YVRyYW5zZmVyLmVmZmVjdEFsbG93ZWQgPSBcIm1vdmVcIjtcbiAgICAgICAgZXZlbnQuZGF0YVRyYW5zZmVyLnNldERhdGEoXCJ0ZXh0L3RvcHNpdGUtaW5kZXhcIiwgdGhpcy5wcm9wcy5pbmRleCk7XG4gICAgICAgIGV2ZW50LnRhcmdldC5ibHVyKCk7XG4gICAgICAgIHRoaXMucHJvcHMub25EcmFnRXZlbnQoXG4gICAgICAgICAgZXZlbnQsXG4gICAgICAgICAgdGhpcy5wcm9wcy5pbmRleCxcbiAgICAgICAgICB0aGlzLnByb3BzLmxpbmssXG4gICAgICAgICAgdGhpcy5wcm9wcy50aXRsZVxuICAgICAgICApO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJkcmFnZW5kXCI6XG4gICAgICAgIHRoaXMucHJvcHMub25EcmFnRXZlbnQoZXZlbnQpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJkcmFnZW50ZXJcIjpcbiAgICAgIGNhc2UgXCJkcmFnb3ZlclwiOlxuICAgICAgY2FzZSBcImRyb3BcIjpcbiAgICAgICAgaWYgKHRoaXMuX2FsbG93RHJvcChldmVudCkpIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIHRoaXMucHJvcHMub25EcmFnRXZlbnQoZXZlbnQsIHRoaXMucHJvcHMuaW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIm1vdXNlZG93blwiOlxuICAgICAgICAvLyBCbG9jayB0aGUgc2Nyb2xsIHdoZWVsIGZyb20gYXBwZWFyaW5nIGZvciBtaWRkbGUgY2xpY2tzIG9uIHNlYXJjaCB0b3Agc2l0ZXNcbiAgICAgICAgaWYgKGV2ZW50LmJ1dHRvbiA9PT0gMSAmJiB0aGlzLnByb3BzLmxpbmsuc2VhcmNoVG9wU2l0ZSkge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVzZXQgYXQgdGhlIGZpcnN0IG1vdXNlIGV2ZW50IG9mIGEgcG90ZW50aWFsIGRyYWdcbiAgICAgICAgdGhpcy5kcmFnZ2VkID0gZmFsc2U7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBIZWxwZXIgdG8gb2J0YWluIHRoZSBuZXh0IHN0YXRlIGJhc2VkIG9uIG5leHRQcm9wcyBhbmQgcHJldlN0YXRlLlxuICAgKlxuICAgKiBOT1RFOiBSZW5hbWUgdGhpcyBtZXRob2QgdG8gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIHdoZW4gd2UgdXBkYXRlIFJlYWN0XG4gICAqICAgICAgIHRvID49IDE2LjMuIFdlIHdpbGwgbmVlZCB0byB1cGRhdGUgdGVzdHMgYXMgd2VsbC4gV2UgY2Fubm90IHJlbmFtZSB0aGlzXG4gICAqICAgICAgIG1ldGhvZCB0byBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgbm93IGJlY2F1c2UgdGhlcmUgaXMgYSBtaXNtYXRjaCBpblxuICAgKiAgICAgICB0aGUgUmVhY3QgdmVyc2lvbiB0aGF0IHdlIGFyZSB1c2luZyBmb3IgYm90aCB0ZXN0aW5nIGFuZCBwcm9kdWN0aW9uLlxuICAgKiAgICAgICAoaS5lLiByZWFjdC10ZXN0LXJlbmRlciA9PiBcIjE2LjMuMlwiLCByZWFjdCA9PiBcIjE2LjIuMFwiKS5cbiAgICpcbiAgICogU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9haXJibmIvZW56eW1lL2Jsb2IvbWFzdGVyL3BhY2thZ2VzL2VuenltZS1hZGFwdGVyLXJlYWN0LTE2L3BhY2thZ2UuanNvbiNMNDMuXG4gICAqL1xuICBzdGF0aWMgZ2V0TmV4dFN0YXRlRnJvbVByb3BzKG5leHRQcm9wcywgcHJldlN0YXRlKSB7XG4gICAgY29uc3QgeyBzY3JlZW5zaG90IH0gPSBuZXh0UHJvcHMubGluaztcbiAgICBjb25zdCBpbWFnZUluU3RhdGUgPSBTY3JlZW5zaG90VXRpbHMuaXNSZW1vdGVJbWFnZUxvY2FsKFxuICAgICAgcHJldlN0YXRlLnNjcmVlbnNob3RJbWFnZSxcbiAgICAgIHNjcmVlbnNob3RcbiAgICApO1xuICAgIGlmIChpbWFnZUluU3RhdGUpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIC8vIFNpbmNlIGltYWdlIHdhcyB1cGRhdGVkLCBhdHRlbXB0IHRvIHJldm9rZSBvbGQgaW1hZ2UgYmxvYiBVUkwsIGlmIGl0IGV4aXN0cy5cbiAgICBTY3JlZW5zaG90VXRpbHMubWF5YmVSZXZva2VCbG9iT2JqZWN0VVJMKHByZXZTdGF0ZS5zY3JlZW5zaG90SW1hZ2UpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHNjcmVlbnNob3RJbWFnZTogU2NyZWVuc2hvdFV0aWxzLmNyZWF0ZUxvY2FsSW1hZ2VPYmplY3Qoc2NyZWVuc2hvdCksXG4gICAgfTtcbiAgfVxuXG4gIC8vIE5PVEU6IFJlbW92ZSB0aGlzIGZ1bmN0aW9uIHdoZW4gd2UgdXBkYXRlIFJlYWN0IHRvID49IDE2LjMgc2luY2UgUmVhY3Qgd2lsbFxuICAvLyAgICAgICBjYWxsIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyBhdXRvbWF0aWNhbGx5LiBXZSB3aWxsIGFsc28gbmVlZCB0b1xuICAvLyAgICAgICByZW5hbWUgZ2V0TmV4dFN0YXRlRnJvbVByb3BzIHRvIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcy5cbiAgY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIGNvbnN0IG5leHRTdGF0ZSA9IFRvcFNpdGVMaW5rLmdldE5leHRTdGF0ZUZyb21Qcm9wcyh0aGlzLnByb3BzLCB0aGlzLnN0YXRlKTtcbiAgICBpZiAobmV4dFN0YXRlKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKG5leHRTdGF0ZSk7XG4gICAgfVxuICB9XG5cbiAgLy8gTk9URTogUmVtb3ZlIHRoaXMgZnVuY3Rpb24gd2hlbiB3ZSB1cGRhdGUgUmVhY3QgdG8gPj0gMTYuMyBzaW5jZSBSZWFjdCB3aWxsXG4gIC8vICAgICAgIGNhbGwgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIGF1dG9tYXRpY2FsbHkuIFdlIHdpbGwgYWxzbyBuZWVkIHRvXG4gIC8vICAgICAgIHJlbmFtZSBnZXROZXh0U3RhdGVGcm9tUHJvcHMgdG8gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLlxuICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgIGNvbnN0IG5leHRTdGF0ZSA9IFRvcFNpdGVMaW5rLmdldE5leHRTdGF0ZUZyb21Qcm9wcyhuZXh0UHJvcHMsIHRoaXMuc3RhdGUpO1xuICAgIGlmIChuZXh0U3RhdGUpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUobmV4dFN0YXRlKTtcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBTY3JlZW5zaG90VXRpbHMubWF5YmVSZXZva2VCbG9iT2JqZWN0VVJMKHRoaXMuc3RhdGUuc2NyZWVuc2hvdEltYWdlKTtcbiAgfVxuXG4gIG9uS2V5UHJlc3MoZXZlbnQpIHtcbiAgICAvLyBJZiB3ZSBoYXZlIHRhYmJlZCB0byBhIHNlYXJjaCBzaG9ydGN1dCB0b3Agc2l0ZSwgYW5kIHdlIGNsaWNrICdlbnRlcicsXG4gICAgLy8gd2Ugc2hvdWxkIGV4ZWN1dGUgdGhlIG9uQ2xpY2sgZnVuY3Rpb24uIFRoaXMgbmVlZHMgdG8gYmUgYWRkZWQgYmVjYXVzZVxuICAgIC8vIHNlYXJjaCB0b3Agc2l0ZXMgYXJlIGFuY2hvciB0YWdzIHdpdGhvdXQgYW4gaHJlZi4gU2VlIGJ1ZyAxNDgzMTM1XG4gICAgaWYgKHRoaXMucHJvcHMubGluay5zZWFyY2hUb3BTaXRlICYmIGV2ZW50LmtleSA9PT0gXCJFbnRlclwiKSB7XG4gICAgICB0aGlzLnByb3BzLm9uQ2xpY2soZXZlbnQpO1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7XG4gICAgICBjaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGRlZmF1bHRTdHlsZSxcbiAgICAgIGlzRHJhZ2dhYmxlLFxuICAgICAgbGluayxcbiAgICAgIG9uQ2xpY2ssXG4gICAgICB0aXRsZSxcbiAgICB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB0b3BTaXRlT3V0ZXJDbGFzc05hbWUgPSBgdG9wLXNpdGUtb3V0ZXIke1xuICAgICAgY2xhc3NOYW1lID8gYCAke2NsYXNzTmFtZX1gIDogXCJcIlxuICAgIH0ke2xpbmsuaXNEcmFnZ2VkID8gXCIgZHJhZ2dlZFwiIDogXCJcIn0ke1xuICAgICAgbGluay5zZWFyY2hUb3BTaXRlID8gXCIgc2VhcmNoLXNob3J0Y3V0XCIgOiBcIlwiXG4gICAgfWA7XG4gICAgY29uc3QgeyB0aXBweVRvcEljb24sIGZhdmljb25TaXplIH0gPSBsaW5rO1xuICAgIGNvbnN0IFtsZXR0ZXJGYWxsYmFja10gPSB0aXRsZTtcbiAgICBsZXQgaW1hZ2VDbGFzc05hbWU7XG4gICAgbGV0IGltYWdlU3R5bGU7XG4gICAgbGV0IHNob3dTbWFsbEZhdmljb24gPSBmYWxzZTtcbiAgICBsZXQgc21hbGxGYXZpY29uU3R5bGU7XG4gICAgbGV0IHNtYWxsRmF2aWNvbkZhbGxiYWNrO1xuICAgIGxldCBoYXNTY3JlZW5zaG90SW1hZ2UgPVxuICAgICAgdGhpcy5zdGF0ZS5zY3JlZW5zaG90SW1hZ2UgJiYgdGhpcy5zdGF0ZS5zY3JlZW5zaG90SW1hZ2UudXJsO1xuICAgIGlmIChkZWZhdWx0U3R5bGUpIHtcbiAgICAgIC8vIGZvcmNlIG5vIHN0eWxlcyAobGV0dGVyIGZhbGxiYWNrKSBldmVuIGlmIHRoZSBsaW5rIGhhcyBpbWFnZXJ5XG4gICAgICBzbWFsbEZhdmljb25GYWxsYmFjayA9IGZhbHNlO1xuICAgIH0gZWxzZSBpZiAobGluay5zZWFyY2hUb3BTaXRlKSB7XG4gICAgICBpbWFnZUNsYXNzTmFtZSA9IFwidG9wLXNpdGUtaWNvbiByaWNoLWljb25cIjtcbiAgICAgIGltYWdlU3R5bGUgPSB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogbGluay5iYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgIGJhY2tncm91bmRJbWFnZTogYHVybCgke3RpcHB5VG9wSWNvbn0pYCxcbiAgICAgIH07XG4gICAgICBzbWFsbEZhdmljb25TdHlsZSA9IHsgYmFja2dyb3VuZEltYWdlOiBgdXJsKCR7dGlwcHlUb3BJY29ufSlgIH07XG4gICAgfSBlbHNlIGlmIChsaW5rLmN1c3RvbVNjcmVlbnNob3RVUkwpIHtcbiAgICAgIC8vIGFzc3VtZSBoaWdoIHF1YWxpdHkgY3VzdG9tIHNjcmVlbnNob3QgYW5kIHVzZSByaWNoIGljb24gc3R5bGVzIGFuZCBjbGFzcyBuYW1lc1xuICAgICAgaW1hZ2VDbGFzc05hbWUgPSBcInRvcC1zaXRlLWljb24gcmljaC1pY29uXCI7XG4gICAgICBpbWFnZVN0eWxlID0ge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGxpbmsuYmFja2dyb3VuZENvbG9yLFxuICAgICAgICBiYWNrZ3JvdW5kSW1hZ2U6IGhhc1NjcmVlbnNob3RJbWFnZVxuICAgICAgICAgID8gYHVybCgke3RoaXMuc3RhdGUuc2NyZWVuc2hvdEltYWdlLnVybH0pYFxuICAgICAgICAgIDogXCJub25lXCIsXG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAodGlwcHlUb3BJY29uIHx8IGZhdmljb25TaXplID49IE1JTl9SSUNIX0ZBVklDT05fU0laRSkge1xuICAgICAgLy8gc3R5bGVzIGFuZCBjbGFzcyBuYW1lcyBmb3IgdG9wIHNpdGVzIHdpdGggcmljaCBpY29uc1xuICAgICAgaW1hZ2VDbGFzc05hbWUgPSBcInRvcC1zaXRlLWljb24gcmljaC1pY29uXCI7XG4gICAgICBpbWFnZVN0eWxlID0ge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGxpbmsuYmFja2dyb3VuZENvbG9yLFxuICAgICAgICBiYWNrZ3JvdW5kSW1hZ2U6IGB1cmwoJHt0aXBweVRvcEljb24gfHwgbGluay5mYXZpY29ufSlgLFxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gc3R5bGVzIGFuZCBjbGFzcyBuYW1lcyBmb3IgdG9wIHNpdGVzIHdpdGggc2NyZWVuc2hvdCArIHNtYWxsIGljb24gaW4gdG9wIGxlZnQgY29ybmVyXG4gICAgICBpbWFnZUNsYXNzTmFtZSA9IGBzY3JlZW5zaG90JHtoYXNTY3JlZW5zaG90SW1hZ2UgPyBcIiBhY3RpdmVcIiA6IFwiXCJ9YDtcbiAgICAgIGltYWdlU3R5bGUgPSB7XG4gICAgICAgIGJhY2tncm91bmRJbWFnZTogaGFzU2NyZWVuc2hvdEltYWdlXG4gICAgICAgICAgPyBgdXJsKCR7dGhpcy5zdGF0ZS5zY3JlZW5zaG90SW1hZ2UudXJsfSlgXG4gICAgICAgICAgOiBcIm5vbmVcIixcbiAgICAgIH07XG5cbiAgICAgIC8vIG9ubHkgc2hvdyBhIGZhdmljb24gaW4gdG9wIGxlZnQgaWYgaXQncyBncmVhdGVyIHRoYW4gMTZ4MTZcbiAgICAgIGlmIChmYXZpY29uU2l6ZSA+PSBNSU5fQ09STkVSX0ZBVklDT05fU0laRSkge1xuICAgICAgICBzaG93U21hbGxGYXZpY29uID0gdHJ1ZTtcbiAgICAgICAgc21hbGxGYXZpY29uU3R5bGUgPSB7IGJhY2tncm91bmRJbWFnZTogYHVybCgke2xpbmsuZmF2aWNvbn0pYCB9O1xuICAgICAgfSBlbHNlIGlmIChoYXNTY3JlZW5zaG90SW1hZ2UpIHtcbiAgICAgICAgLy8gRG9uJ3Qgc2hvdyBhIHNtYWxsIGZhdmljb24gaWYgdGhlcmUgaXMgbm8gc2NyZWVuc2hvdCwgYmVjYXVzZSB0aGF0XG4gICAgICAgIC8vIHdvdWxkIHJlc3VsdCBpbiB0d28gZmFsbGJhY2sgaWNvbnNcbiAgICAgICAgc2hvd1NtYWxsRmF2aWNvbiA9IHRydWU7XG4gICAgICAgIHNtYWxsRmF2aWNvbkZhbGxiYWNrID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgbGV0IGRyYWdnYWJsZVByb3BzID0ge307XG4gICAgaWYgKGlzRHJhZ2dhYmxlKSB7XG4gICAgICBkcmFnZ2FibGVQcm9wcyA9IHtcbiAgICAgICAgb25DbGljazogdGhpcy5vbkRyYWdFdmVudCxcbiAgICAgICAgb25EcmFnRW5kOiB0aGlzLm9uRHJhZ0V2ZW50LFxuICAgICAgICBvbkRyYWdTdGFydDogdGhpcy5vbkRyYWdFdmVudCxcbiAgICAgICAgb25Nb3VzZURvd246IHRoaXMub25EcmFnRXZlbnQsXG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gKFxuICAgICAgPGxpXG4gICAgICAgIGNsYXNzTmFtZT17dG9wU2l0ZU91dGVyQ2xhc3NOYW1lfVxuICAgICAgICBvbkRyb3A9e3RoaXMub25EcmFnRXZlbnR9XG4gICAgICAgIG9uRHJhZ092ZXI9e3RoaXMub25EcmFnRXZlbnR9XG4gICAgICAgIG9uRHJhZ0VudGVyPXt0aGlzLm9uRHJhZ0V2ZW50fVxuICAgICAgICBvbkRyYWdMZWF2ZT17dGhpcy5vbkRyYWdFdmVudH1cbiAgICAgICAgey4uLmRyYWdnYWJsZVByb3BzfVxuICAgICAgPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRvcC1zaXRlLWlubmVyXCI+XG4gICAgICAgICAgey8qIFdlIGRvbid0IHlldCBzdXBwb3J0IGFuIGFjY2Vzc2libGUgZHJhZy1hbmQtZHJvcCBpbXBsZW1lbnRhdGlvbiwgc2VlIEJ1ZyAxNTUyMDA1ICovfVxuICAgICAgICAgIHsvKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUganN4LWExMXkvYW5jaG9yLWlzLXZhbGlkICovfVxuICAgICAgICAgIDxhXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJ0b3Atc2l0ZS1idXR0b25cIlxuICAgICAgICAgICAgaHJlZj17bGluay5zZWFyY2hUb3BTaXRlID8gdW5kZWZpbmVkIDogbGluay51cmx9XG4gICAgICAgICAgICB0YWJJbmRleD1cIjBcIlxuICAgICAgICAgICAgb25LZXlQcmVzcz17dGhpcy5vbktleVByZXNzfVxuICAgICAgICAgICAgb25DbGljaz17b25DbGlja31cbiAgICAgICAgICAgIGRyYWdnYWJsZT17dHJ1ZX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cInRpbGVcIlxuICAgICAgICAgICAgICBhcmlhLWhpZGRlbj17dHJ1ZX1cbiAgICAgICAgICAgICAgZGF0YS1mYWxsYmFjaz17bGV0dGVyRmFsbGJhY2t9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtpbWFnZUNsYXNzTmFtZX0gc3R5bGU9e2ltYWdlU3R5bGV9IC8+XG4gICAgICAgICAgICAgIHtsaW5rLnNlYXJjaFRvcFNpdGUgJiYgKFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidG9wLXNpdGUtaWNvbiBzZWFyY2gtdG9wc2l0ZVwiIC8+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgIHtzaG93U21hbGxGYXZpY29uICYmIChcbiAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJ0b3Atc2l0ZS1pY29uIGRlZmF1bHQtaWNvblwiXG4gICAgICAgICAgICAgICAgICBkYXRhLWZhbGxiYWNrPXtzbWFsbEZhdmljb25GYWxsYmFjayAmJiBsZXR0ZXJGYWxsYmFja31cbiAgICAgICAgICAgICAgICAgIHN0eWxlPXtzbWFsbEZhdmljb25TdHlsZX1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17YHRpdGxlICR7bGluay5pc1Bpbm5lZCA/IFwicGlubmVkXCIgOiBcIlwifWB9PlxuICAgICAgICAgICAgICB7bGluay5pc1Bpbm5lZCAmJiA8ZGl2IGNsYXNzTmFtZT1cImljb24gaWNvbi1waW4tc21hbGxcIiAvPn1cbiAgICAgICAgICAgICAgPHNwYW4gZGlyPVwiYXV0b1wiPnt0aXRsZX08L3NwYW4+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2E+XG4gICAgICAgICAge2NoaWxkcmVufVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvbGk+XG4gICAgKTtcbiAgfVxufVxuVG9wU2l0ZUxpbmsuZGVmYXVsdFByb3BzID0ge1xuICB0aXRsZTogXCJcIixcbiAgbGluazoge30sXG4gIGlzRHJhZ2dhYmxlOiB0cnVlLFxufTtcblxuZXhwb3J0IGNsYXNzIFRvcFNpdGUgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHsgc2hvd0NvbnRleHRNZW51OiBmYWxzZSB9O1xuICAgIHRoaXMub25MaW5rQ2xpY2sgPSB0aGlzLm9uTGlua0NsaWNrLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbk1lbnVVcGRhdGUgPSB0aGlzLm9uTWVudVVwZGF0ZS5iaW5kKHRoaXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlcG9ydCB0byB0ZWxlbWV0cnkgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgaXRlbS5cbiAgICovXG4gIF9nZXRUZWxlbWV0cnlJbmZvKCkge1xuICAgIGNvbnN0IHZhbHVlID0geyBpY29uX3R5cGU6IHRoaXMucHJvcHMubGluay5pY29uVHlwZSB9O1xuICAgIC8vIEZpbHRlciBvdXQgXCJub3RfcGlubmVkXCIgdHlwZSBmb3IgYmVpbmcgdGhlIGRlZmF1bHRcbiAgICBpZiAodGhpcy5wcm9wcy5saW5rLmlzUGlubmVkKSB7XG4gICAgICB2YWx1ZS5jYXJkX3R5cGUgPSBcInBpbm5lZFwiO1xuICAgIH1cbiAgICBpZiAodGhpcy5wcm9wcy5saW5rLnNlYXJjaFRvcFNpdGUpIHtcbiAgICAgIC8vIFNldCB0aGUgY2FyZF90eXBlIGFzIFwic2VhcmNoXCIgcmVnYXJkbGVzcyBvZiBpdHMgcGlubmluZyBzdGF0dXNcbiAgICAgIHZhbHVlLmNhcmRfdHlwZSA9IFwic2VhcmNoXCI7XG4gICAgICB2YWx1ZS5zZWFyY2hfdmVuZG9yID0gdGhpcy5wcm9wcy5saW5rLmhvc3RuYW1lO1xuICAgIH1cbiAgICByZXR1cm4geyB2YWx1ZSB9O1xuICB9XG5cbiAgdXNlckV2ZW50KGV2ZW50KSB7XG4gICAgdGhpcy5wcm9wcy5kaXNwYXRjaChcbiAgICAgIGFjLlVzZXJFdmVudChcbiAgICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICB7XG4gICAgICAgICAgICBldmVudCxcbiAgICAgICAgICAgIHNvdXJjZTogVE9QX1NJVEVTX1NPVVJDRSxcbiAgICAgICAgICAgIGFjdGlvbl9wb3NpdGlvbjogdGhpcy5wcm9wcy5pbmRleCxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHRoaXMuX2dldFRlbGVtZXRyeUluZm8oKVxuICAgICAgICApXG4gICAgICApXG4gICAgKTtcbiAgfVxuXG4gIG9uTGlua0NsaWNrKGV2ZW50KSB7XG4gICAgdGhpcy51c2VyRXZlbnQoXCJDTElDS1wiKTtcblxuICAgIC8vIFNwZWNpYWxseSBoYW5kbGUgYSB0b3Agc2l0ZSBsaW5rIGNsaWNrIGZvciBcInR5cGVkXCIgZnJlY2VuY3kgYm9udXMgYXNcbiAgICAvLyBzcGVjaWZpZWQgYXMgYSBwcm9wZXJ0eSBvbiB0aGUgbGluay5cbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGNvbnN0IHsgYWx0S2V5LCBidXR0b24sIGN0cmxLZXksIG1ldGFLZXksIHNoaWZ0S2V5IH0gPSBldmVudDtcbiAgICBpZiAoIXRoaXMucHJvcHMubGluay5zZWFyY2hUb3BTaXRlKSB7XG4gICAgICB0aGlzLnByb3BzLmRpc3BhdGNoKFxuICAgICAgICBhYy5Pbmx5VG9NYWluKHtcbiAgICAgICAgICB0eXBlOiBhdC5PUEVOX0xJTkssXG4gICAgICAgICAgZGF0YTogT2JqZWN0LmFzc2lnbih0aGlzLnByb3BzLmxpbmssIHtcbiAgICAgICAgICAgIGV2ZW50OiB7IGFsdEtleSwgYnV0dG9uLCBjdHJsS2V5LCBtZXRhS2V5LCBzaGlmdEtleSB9LFxuICAgICAgICAgIH0pLFxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wcm9wcy5kaXNwYXRjaChcbiAgICAgICAgYWMuT25seVRvTWFpbih7XG4gICAgICAgICAgdHlwZTogYXQuRklMTF9TRUFSQ0hfVEVSTSxcbiAgICAgICAgICBkYXRhOiB7IGxhYmVsOiB0aGlzLnByb3BzLmxpbmsubGFiZWwgfSxcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgb25NZW51VXBkYXRlKGlzT3Blbikge1xuICAgIGlmIChpc09wZW4pIHtcbiAgICAgIHRoaXMucHJvcHMub25BY3RpdmF0ZSh0aGlzLnByb3BzLmluZGV4KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wcm9wcy5vbkFjdGl2YXRlKCk7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgcHJvcHMgfSA9IHRoaXM7XG4gICAgY29uc3QgeyBsaW5rIH0gPSBwcm9wcztcbiAgICBjb25zdCBpc0NvbnRleHRNZW51T3BlbiA9IHByb3BzLmFjdGl2ZUluZGV4ID09PSBwcm9wcy5pbmRleDtcbiAgICBjb25zdCB0aXRsZSA9IGxpbmsubGFiZWwgfHwgbGluay5ob3N0bmFtZTtcbiAgICByZXR1cm4gKFxuICAgICAgPFRvcFNpdGVMaW5rXG4gICAgICAgIHsuLi5wcm9wc31cbiAgICAgICAgb25DbGljaz17dGhpcy5vbkxpbmtDbGlja31cbiAgICAgICAgb25EcmFnRXZlbnQ9e3RoaXMucHJvcHMub25EcmFnRXZlbnR9XG4gICAgICAgIGNsYXNzTmFtZT17YCR7cHJvcHMuY2xhc3NOYW1lIHx8IFwiXCJ9JHtcbiAgICAgICAgICBpc0NvbnRleHRNZW51T3BlbiA/IFwiIGFjdGl2ZVwiIDogXCJcIlxuICAgICAgICB9YH1cbiAgICAgICAgdGl0bGU9e3RpdGxlfVxuICAgICAgPlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgIDxDb250ZXh0TWVudUJ1dHRvblxuICAgICAgICAgICAgdG9vbHRpcD1cIm5ld3RhYi1tZW51LWNvbnRlbnQtdG9vbHRpcFwiXG4gICAgICAgICAgICB0b29sdGlwQXJncz17eyB0aXRsZSB9fVxuICAgICAgICAgICAgb25VcGRhdGU9e3RoaXMub25NZW51VXBkYXRlfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxMaW5rTWVudVxuICAgICAgICAgICAgICBkaXNwYXRjaD17cHJvcHMuZGlzcGF0Y2h9XG4gICAgICAgICAgICAgIGluZGV4PXtwcm9wcy5pbmRleH1cbiAgICAgICAgICAgICAgb25VcGRhdGU9e3RoaXMub25NZW51VXBkYXRlfVxuICAgICAgICAgICAgICBvcHRpb25zPXtcbiAgICAgICAgICAgICAgICBsaW5rLnNlYXJjaFRvcFNpdGVcbiAgICAgICAgICAgICAgICAgID8gVE9QX1NJVEVTX1NFQVJDSF9TSE9SVENVVFNfQ09OVEVYVF9NRU5VX09QVElPTlNcbiAgICAgICAgICAgICAgICAgIDogVE9QX1NJVEVTX0NPTlRFWFRfTUVOVV9PUFRJT05TXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgc2l0ZT17bGlua31cbiAgICAgICAgICAgICAgc2l0ZUluZm89e3RoaXMuX2dldFRlbGVtZXRyeUluZm8oKX1cbiAgICAgICAgICAgICAgc291cmNlPXtUT1BfU0lURVNfU09VUkNFfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L0NvbnRleHRNZW51QnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvVG9wU2l0ZUxpbms+XG4gICAgKTtcbiAgfVxufVxuVG9wU2l0ZS5kZWZhdWx0UHJvcHMgPSB7XG4gIGxpbms6IHt9LFxuICBvbkFjdGl2YXRlKCkge30sXG59O1xuXG5leHBvcnQgY2xhc3MgVG9wU2l0ZVBsYWNlaG9sZGVyIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMub25FZGl0QnV0dG9uQ2xpY2sgPSB0aGlzLm9uRWRpdEJ1dHRvbkNsaWNrLmJpbmQodGhpcyk7XG4gIH1cblxuICBvbkVkaXRCdXR0b25DbGljaygpIHtcbiAgICB0aGlzLnByb3BzLmRpc3BhdGNoKHtcbiAgICAgIHR5cGU6IGF0LlRPUF9TSVRFU19FRElULFxuICAgICAgZGF0YTogeyBpbmRleDogdGhpcy5wcm9wcy5pbmRleCB9LFxuICAgIH0pO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8VG9wU2l0ZUxpbmtcbiAgICAgICAgey4uLnRoaXMucHJvcHN9XG4gICAgICAgIGNsYXNzTmFtZT17YHBsYWNlaG9sZGVyICR7dGhpcy5wcm9wcy5jbGFzc05hbWUgfHwgXCJcIn1gfVxuICAgICAgICBpc0RyYWdnYWJsZT17ZmFsc2V9XG4gICAgICA+XG4gICAgICAgIDxidXR0b25cbiAgICAgICAgICBhcmlhLWhhc3BvcHVwPVwidHJ1ZVwiXG4gICAgICAgICAgY2xhc3NOYW1lPVwiY29udGV4dC1tZW51LWJ1dHRvbiBlZGl0LWJ1dHRvbiBpY29uXCJcbiAgICAgICAgICBkYXRhLWwxMG4taWQ9XCJuZXd0YWItbWVudS10b3BzaXRlcy1wbGFjZWhvbGRlci10b29sdGlwXCJcbiAgICAgICAgICBvbkNsaWNrPXt0aGlzLm9uRWRpdEJ1dHRvbkNsaWNrfVxuICAgICAgICAvPlxuICAgICAgPC9Ub3BTaXRlTGluaz5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBUb3BTaXRlTGlzdCBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICBzdGF0aWMgZ2V0IERFRkFVTFRfU1RBVEUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGFjdGl2ZUluZGV4OiBudWxsLFxuICAgICAgZHJhZ2dlZEluZGV4OiBudWxsLFxuICAgICAgZHJhZ2dlZFNpdGU6IG51bGwsXG4gICAgICBkcmFnZ2VkVGl0bGU6IG51bGwsXG4gICAgICB0b3BTaXRlc1ByZXZpZXc6IG51bGwsXG4gICAgfTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSBUb3BTaXRlTGlzdC5ERUZBVUxUX1NUQVRFO1xuICAgIHRoaXMub25EcmFnRXZlbnQgPSB0aGlzLm9uRHJhZ0V2ZW50LmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbkFjdGl2YXRlID0gdGhpcy5vbkFjdGl2YXRlLmJpbmQodGhpcyk7XG4gIH1cblxuICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgIGlmICh0aGlzLnN0YXRlLmRyYWdnZWRTaXRlKSB7XG4gICAgICBjb25zdCBwcmV2VG9wU2l0ZXMgPSB0aGlzLnByb3BzLlRvcFNpdGVzICYmIHRoaXMucHJvcHMuVG9wU2l0ZXMucm93cztcbiAgICAgIGNvbnN0IG5ld1RvcFNpdGVzID0gbmV4dFByb3BzLlRvcFNpdGVzICYmIG5leHRQcm9wcy5Ub3BTaXRlcy5yb3dzO1xuICAgICAgaWYgKFxuICAgICAgICBwcmV2VG9wU2l0ZXMgJiZcbiAgICAgICAgcHJldlRvcFNpdGVzW3RoaXMuc3RhdGUuZHJhZ2dlZEluZGV4XSAmJlxuICAgICAgICBwcmV2VG9wU2l0ZXNbdGhpcy5zdGF0ZS5kcmFnZ2VkSW5kZXhdLnVybCA9PT1cbiAgICAgICAgICB0aGlzLnN0YXRlLmRyYWdnZWRTaXRlLnVybCAmJlxuICAgICAgICAoIW5ld1RvcFNpdGVzW3RoaXMuc3RhdGUuZHJhZ2dlZEluZGV4XSB8fFxuICAgICAgICAgIG5ld1RvcFNpdGVzW3RoaXMuc3RhdGUuZHJhZ2dlZEluZGV4XS51cmwgIT09XG4gICAgICAgICAgICB0aGlzLnN0YXRlLmRyYWdnZWRTaXRlLnVybClcbiAgICAgICkge1xuICAgICAgICAvLyBXZSBnb3QgdGhlIG5ldyBvcmRlciBmcm9tIHRoZSByZWR1eCBzdG9yZSB2aWEgcHJvcHMuIFdlIGNhbiBjbGVhciBzdGF0ZSBub3cuXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoVG9wU2l0ZUxpc3QuREVGQVVMVF9TVEFURSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdXNlckV2ZW50KGV2ZW50LCBpbmRleCkge1xuICAgIHRoaXMucHJvcHMuZGlzcGF0Y2goXG4gICAgICBhYy5Vc2VyRXZlbnQoe1xuICAgICAgICBldmVudCxcbiAgICAgICAgc291cmNlOiBUT1BfU0lURVNfU09VUkNFLFxuICAgICAgICBhY3Rpb25fcG9zaXRpb246IGluZGV4LFxuICAgICAgfSlcbiAgICApO1xuICB9XG5cbiAgb25EcmFnRXZlbnQoZXZlbnQsIGluZGV4LCBsaW5rLCB0aXRsZSkge1xuICAgIHN3aXRjaCAoZXZlbnQudHlwZSkge1xuICAgICAgY2FzZSBcImRyYWdzdGFydFwiOlxuICAgICAgICB0aGlzLmRyb3BwZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgZHJhZ2dlZEluZGV4OiBpbmRleCxcbiAgICAgICAgICBkcmFnZ2VkU2l0ZTogbGluayxcbiAgICAgICAgICBkcmFnZ2VkVGl0bGU6IHRpdGxlLFxuICAgICAgICAgIGFjdGl2ZUluZGV4OiBudWxsLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy51c2VyRXZlbnQoXCJEUkFHXCIsIGluZGV4KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiZHJhZ2VuZFwiOlxuICAgICAgICBpZiAoIXRoaXMuZHJvcHBlZCkge1xuICAgICAgICAgIC8vIElmIHRoZXJlIHdhcyBubyBkcm9wIGV2ZW50LCByZXNldCB0aGUgc3RhdGUgdG8gdGhlIGRlZmF1bHQuXG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZShUb3BTaXRlTGlzdC5ERUZBVUxUX1NUQVRFKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJkcmFnZW50ZXJcIjpcbiAgICAgICAgaWYgKGluZGV4ID09PSB0aGlzLnN0YXRlLmRyYWdnZWRJbmRleCkge1xuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyB0b3BTaXRlc1ByZXZpZXc6IG51bGwgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHRvcFNpdGVzUHJldmlldzogdGhpcy5fbWFrZVRvcFNpdGVzUHJldmlldyhpbmRleCkgfSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiZHJvcFwiOlxuICAgICAgICBpZiAoaW5kZXggIT09IHRoaXMuc3RhdGUuZHJhZ2dlZEluZGV4KSB7XG4gICAgICAgICAgdGhpcy5kcm9wcGVkID0gdHJ1ZTtcbiAgICAgICAgICB0aGlzLnByb3BzLmRpc3BhdGNoKFxuICAgICAgICAgICAgYWMuQWxzb1RvTWFpbih7XG4gICAgICAgICAgICAgIHR5cGU6IGF0LlRPUF9TSVRFU19JTlNFUlQsXG4gICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICBzaXRlOiB7XG4gICAgICAgICAgICAgICAgICB1cmw6IHRoaXMuc3RhdGUuZHJhZ2dlZFNpdGUudXJsLFxuICAgICAgICAgICAgICAgICAgbGFiZWw6IHRoaXMuc3RhdGUuZHJhZ2dlZFRpdGxlLFxuICAgICAgICAgICAgICAgICAgY3VzdG9tU2NyZWVuc2hvdFVSTDogdGhpcy5zdGF0ZS5kcmFnZ2VkU2l0ZVxuICAgICAgICAgICAgICAgICAgICAuY3VzdG9tU2NyZWVuc2hvdFVSTCxcbiAgICAgICAgICAgICAgICAgIC8vIE9ubHkgaWYgdGhlIHNlYXJjaCB0b3BzaXRlcyBleHBlcmltZW50IGlzIGVuYWJsZWRcbiAgICAgICAgICAgICAgICAgIC4uLih0aGlzLnN0YXRlLmRyYWdnZWRTaXRlLnNlYXJjaFRvcFNpdGUgJiYge1xuICAgICAgICAgICAgICAgICAgICBzZWFyY2hUb3BTaXRlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBpbmRleCxcbiAgICAgICAgICAgICAgICBkcmFnZ2VkRnJvbUluZGV4OiB0aGlzLnN0YXRlLmRyYWdnZWRJbmRleCxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgKTtcbiAgICAgICAgICB0aGlzLnVzZXJFdmVudChcIkRST1BcIiwgaW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIF9nZXRUb3BTaXRlcygpIHtcbiAgICAvLyBNYWtlIGEgY29weSBvZiB0aGUgc2l0ZXMgdG8gdHJ1bmNhdGUgb3IgZXh0ZW5kIHRvIGRlc2lyZWQgbGVuZ3RoXG4gICAgbGV0IHRvcFNpdGVzID0gdGhpcy5wcm9wcy5Ub3BTaXRlcy5yb3dzLnNsaWNlKCk7XG4gICAgdG9wU2l0ZXMubGVuZ3RoID0gdGhpcy5wcm9wcy5Ub3BTaXRlc1Jvd3MgKiBUT1BfU0lURVNfTUFYX1NJVEVTX1BFUl9ST1c7XG4gICAgcmV0dXJuIHRvcFNpdGVzO1xuICB9XG5cbiAgLyoqXG4gICAqIE1ha2UgYSBwcmV2aWV3IG9mIHRoZSB0b3BzaXRlcyB0aGF0IHdpbGwgYmUgdGhlIHJlc3VsdCBvZiBkcm9wcGluZyB0aGUgY3VycmVudGx5XG4gICAqIGRyYWdnZWQgc2l0ZSBhdCB0aGUgc3BlY2lmaWVkIGluZGV4LlxuICAgKi9cbiAgX21ha2VUb3BTaXRlc1ByZXZpZXcoaW5kZXgpIHtcbiAgICBjb25zdCB0b3BTaXRlcyA9IHRoaXMuX2dldFRvcFNpdGVzKCk7XG4gICAgdG9wU2l0ZXNbdGhpcy5zdGF0ZS5kcmFnZ2VkSW5kZXhdID0gbnVsbDtcbiAgICBjb25zdCBwaW5uZWRPbmx5ID0gdG9wU2l0ZXMubWFwKHNpdGUgPT5cbiAgICAgIHNpdGUgJiYgc2l0ZS5pc1Bpbm5lZCA/IHNpdGUgOiBudWxsXG4gICAgKTtcbiAgICBjb25zdCB1bnBpbm5lZCA9IHRvcFNpdGVzLmZpbHRlcihzaXRlID0+IHNpdGUgJiYgIXNpdGUuaXNQaW5uZWQpO1xuICAgIGNvbnN0IHNpdGVUb0luc2VydCA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuc3RhdGUuZHJhZ2dlZFNpdGUsIHtcbiAgICAgIGlzUGlubmVkOiB0cnVlLFxuICAgICAgaXNEcmFnZ2VkOiB0cnVlLFxuICAgIH0pO1xuICAgIGlmICghcGlubmVkT25seVtpbmRleF0pIHtcbiAgICAgIHBpbm5lZE9ubHlbaW5kZXhdID0gc2l0ZVRvSW5zZXJ0O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBGaW5kIHRoZSBob2xlIHRvIHNoaWZ0IHRoZSBwaW5uZWQgc2l0ZShzKSB0b3dhcmRzLiBXZSBzaGlmdCB0b3dhcmRzIHRoZVxuICAgICAgLy8gaG9sZSBsZWZ0IGJ5IHRoZSBzaXRlIGJlaW5nIGRyYWdnZWQuXG4gICAgICBsZXQgaG9sZUluZGV4ID0gaW5kZXg7XG4gICAgICBjb25zdCBpbmRleFN0ZXAgPSBpbmRleCA+IHRoaXMuc3RhdGUuZHJhZ2dlZEluZGV4ID8gLTEgOiAxO1xuICAgICAgd2hpbGUgKHBpbm5lZE9ubHlbaG9sZUluZGV4XSkge1xuICAgICAgICBob2xlSW5kZXggKz0gaW5kZXhTdGVwO1xuICAgICAgfVxuXG4gICAgICAvLyBTaGlmdCB0b3dhcmRzIHRoZSBob2xlLlxuICAgICAgY29uc3Qgc2hpZnRpbmdTdGVwID0gaW5kZXggPiB0aGlzLnN0YXRlLmRyYWdnZWRJbmRleCA/IDEgOiAtMTtcbiAgICAgIHdoaWxlIChob2xlSW5kZXggIT09IGluZGV4KSB7XG4gICAgICAgIGNvbnN0IG5leHRJbmRleCA9IGhvbGVJbmRleCArIHNoaWZ0aW5nU3RlcDtcbiAgICAgICAgcGlubmVkT25seVtob2xlSW5kZXhdID0gcGlubmVkT25seVtuZXh0SW5kZXhdO1xuICAgICAgICBob2xlSW5kZXggPSBuZXh0SW5kZXg7XG4gICAgICB9XG4gICAgICBwaW5uZWRPbmx5W2luZGV4XSA9IHNpdGVUb0luc2VydDtcbiAgICB9XG5cbiAgICAvLyBGaWxsIGluIHRoZSByZW1haW5pbmcgaG9sZXMgd2l0aCB1bnBpbm5lZCBzaXRlcy5cbiAgICBjb25zdCBwcmV2aWV3ID0gcGlubmVkT25seTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByZXZpZXcubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICghcHJldmlld1tpXSkge1xuICAgICAgICBwcmV2aWV3W2ldID0gdW5waW5uZWQuc2hpZnQoKSB8fCBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBwcmV2aWV3O1xuICB9XG5cbiAgb25BY3RpdmF0ZShpbmRleCkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBhY3RpdmVJbmRleDogaW5kZXggfSk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBwcm9wcyB9ID0gdGhpcztcbiAgICBjb25zdCB0b3BTaXRlcyA9IHRoaXMuc3RhdGUudG9wU2l0ZXNQcmV2aWV3IHx8IHRoaXMuX2dldFRvcFNpdGVzKCk7XG4gICAgY29uc3QgdG9wU2l0ZXNVSSA9IFtdO1xuICAgIGNvbnN0IGNvbW1vblByb3BzID0ge1xuICAgICAgb25EcmFnRXZlbnQ6IHRoaXMub25EcmFnRXZlbnQsXG4gICAgICBkaXNwYXRjaDogcHJvcHMuZGlzcGF0Y2gsXG4gICAgfTtcbiAgICAvLyBXZSBhc3NpZ24gYSBrZXkgdG8gZWFjaCBwbGFjZWhvbGRlciBzbG90LiBXZSBuZWVkIGl0IHRvIGJlIGluZGVwZW5kZW50XG4gICAgLy8gb2YgdGhlIHNsb3QgaW5kZXggKGkgYmVsb3cpIHNvIHRoYXQgdGhlIGtleXMgdXNlZCBzdGF5IHRoZSBzYW1lIGR1cmluZ1xuICAgIC8vIGRyYWcgYW5kIGRyb3AgcmVvcmRlcmluZyBhbmQgdGhlIHVuZGVybHlpbmcgRE9NIG5vZGVzIGFyZSByZXVzZWQuXG4gICAgLy8gVGhpcyBtb3N0bHkgKG9ubHk/KSBhZmZlY3RzIGxpbnV4IHNvIGJlIHN1cmUgdG8gdGVzdCBvbiBsaW51eCBiZWZvcmUgY2hhbmdpbmcuXG4gICAgbGV0IGhvbGVJbmRleCA9IDA7XG5cbiAgICAvLyBPbiBuYXJyb3cgdmlld3BvcnRzLCB3ZSBvbmx5IHNob3cgNiBzaXRlcyBwZXIgcm93LiBXZSdsbCBtYXJrIHRoZSByZXN0IGFzXG4gICAgLy8gLmhpZGUtZm9yLW5hcnJvdyB0byBoaWRlIGluIENTUyB2aWEgQG1lZGlhIHF1ZXJ5LlxuICAgIGNvbnN0IG1heE5hcnJvd1Zpc2libGVJbmRleCA9IHByb3BzLlRvcFNpdGVzUm93cyAqIDY7XG5cbiAgICBmb3IgKGxldCBpID0gMCwgbCA9IHRvcFNpdGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgY29uc3QgbGluayA9XG4gICAgICAgIHRvcFNpdGVzW2ldICYmXG4gICAgICAgIE9iamVjdC5hc3NpZ24oe30sIHRvcFNpdGVzW2ldLCB7XG4gICAgICAgICAgaWNvblR5cGU6IHRoaXMucHJvcHMudG9wU2l0ZUljb25UeXBlKHRvcFNpdGVzW2ldKSxcbiAgICAgICAgfSk7XG4gICAgICBjb25zdCBzbG90UHJvcHMgPSB7XG4gICAgICAgIGtleTogbGluayA/IGxpbmsudXJsIDogaG9sZUluZGV4KyssXG4gICAgICAgIGluZGV4OiBpLFxuICAgICAgfTtcbiAgICAgIGlmIChpID49IG1heE5hcnJvd1Zpc2libGVJbmRleCkge1xuICAgICAgICBzbG90UHJvcHMuY2xhc3NOYW1lID0gXCJoaWRlLWZvci1uYXJyb3dcIjtcbiAgICAgIH1cbiAgICAgIHRvcFNpdGVzVUkucHVzaChcbiAgICAgICAgIWxpbmsgPyAoXG4gICAgICAgICAgPFRvcFNpdGVQbGFjZWhvbGRlciB7Li4uc2xvdFByb3BzfSB7Li4uY29tbW9uUHJvcHN9IC8+XG4gICAgICAgICkgOiAoXG4gICAgICAgICAgPFRvcFNpdGVcbiAgICAgICAgICAgIGxpbms9e2xpbmt9XG4gICAgICAgICAgICBhY3RpdmVJbmRleD17dGhpcy5zdGF0ZS5hY3RpdmVJbmRleH1cbiAgICAgICAgICAgIG9uQWN0aXZhdGU9e3RoaXMub25BY3RpdmF0ZX1cbiAgICAgICAgICAgIHsuLi5zbG90UHJvcHN9XG4gICAgICAgICAgICB7Li4uY29tbW9uUHJvcHN9XG4gICAgICAgICAgLz5cbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIDx1bFxuICAgICAgICBjbGFzc05hbWU9e2B0b3Atc2l0ZXMtbGlzdCR7XG4gICAgICAgICAgdGhpcy5zdGF0ZS5kcmFnZ2VkU2l0ZSA/IFwiIGRuZC1hY3RpdmVcIiA6IFwiXCJcbiAgICAgICAgfWB9XG4gICAgICA+XG4gICAgICAgIHt0b3BTaXRlc1VJfVxuICAgICAgPC91bD5cbiAgICApO1xuICB9XG59XG4iLCIvKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIGZpbGUsXG4gKiBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLiAqL1xuXG4vKiBnbG9iYWxzIENvbnRlbnRTZWFyY2hVSUNvbnRyb2xsZXIgKi9cblwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBhY3Rpb25DcmVhdG9ycyBhcyBhYywgYWN0aW9uVHlwZXMgYXMgYXQgfSBmcm9tIFwiY29tbW9uL0FjdGlvbnMuanNtXCI7XG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XG5pbXBvcnQgeyBJU19ORVdUQUIgfSBmcm9tIFwiY29udGVudC1zcmMvbGliL2NvbnN0YW50c1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuXG5leHBvcnQgY2xhc3MgX1NlYXJjaCBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLm9uU2VhcmNoQ2xpY2sgPSB0aGlzLm9uU2VhcmNoQ2xpY2suYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uU2VhcmNoSGFuZG9mZkNsaWNrID0gdGhpcy5vblNlYXJjaEhhbmRvZmZDbGljay5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25TZWFyY2hIYW5kb2ZmUGFzdGUgPSB0aGlzLm9uU2VhcmNoSGFuZG9mZlBhc3RlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vblNlYXJjaEhhbmRvZmZEcm9wID0gdGhpcy5vblNlYXJjaEhhbmRvZmZEcm9wLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbklucHV0TW91bnQgPSB0aGlzLm9uSW5wdXRNb3VudC5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25TZWFyY2hIYW5kb2ZmQnV0dG9uTW91bnQgPSB0aGlzLm9uU2VhcmNoSGFuZG9mZkJ1dHRvbk1vdW50LmJpbmQoXG4gICAgICB0aGlzXG4gICAgKTtcbiAgfVxuXG4gIGhhbmRsZUV2ZW50KGV2ZW50KSB7XG4gICAgLy8gQWxzbyB0cmFjayBzZWFyY2ggZXZlbnRzIHdpdGggb3VyIG93biB0ZWxlbWV0cnlcbiAgICBpZiAoZXZlbnQuZGV0YWlsLnR5cGUgPT09IFwiU2VhcmNoXCIpIHtcbiAgICAgIHRoaXMucHJvcHMuZGlzcGF0Y2goYWMuVXNlckV2ZW50KHsgZXZlbnQ6IFwiU0VBUkNIXCIgfSkpO1xuICAgIH1cbiAgfVxuXG4gIG9uU2VhcmNoQ2xpY2soZXZlbnQpIHtcbiAgICB3aW5kb3cuZ0NvbnRlbnRTZWFyY2hDb250cm9sbGVyLnNlYXJjaChldmVudCk7XG4gIH1cblxuICBkb1NlYXJjaEhhbmRvZmYodGV4dCkge1xuICAgIHRoaXMucHJvcHMuZGlzcGF0Y2goXG4gICAgICBhYy5Pbmx5VG9NYWluKHsgdHlwZTogYXQuSEFORE9GRl9TRUFSQ0hfVE9fQVdFU09NRUJBUiwgZGF0YTogeyB0ZXh0IH0gfSlcbiAgICApO1xuICAgIHRoaXMucHJvcHMuZGlzcGF0Y2goeyB0eXBlOiBhdC5GQUtFX0ZPQ1VTX1NFQVJDSCB9KTtcbiAgICB0aGlzLnByb3BzLmRpc3BhdGNoKGFjLlVzZXJFdmVudCh7IGV2ZW50OiBcIlNFQVJDSF9IQU5ET0ZGXCIgfSkpO1xuICAgIGlmICh0ZXh0KSB7XG4gICAgICB0aGlzLnByb3BzLmRpc3BhdGNoKHsgdHlwZTogYXQuSElERV9TRUFSQ0ggfSk7XG4gICAgfVxuICB9XG5cbiAgb25TZWFyY2hIYW5kb2ZmQ2xpY2soZXZlbnQpIHtcbiAgICAvLyBXaGVuIHNlYXJjaCBoYW5kLW9mZiBpcyBlbmFibGVkLCB3ZSByZW5kZXIgYSBiaWcgYnV0dG9uIHRoYXQgaXMgc3R5bGVkIHRvXG4gICAgLy8gbG9vayBsaWtlIGEgc2VhcmNoIHRleHRib3guIElmIHRoZSBidXR0b24gaXMgY2xpY2tlZCwgd2Ugc3R5bGVcbiAgICAvLyB0aGUgYnV0dG9uIGFzIGlmIGl0IHdhcyBhIGZvY3VzZWQgc2VhcmNoIGJveCBhbmQgc2hvdyBhIGZha2UgY3Vyc29yIGJ1dFxuICAgIC8vIHJlYWxseSBmb2N1cyB0aGUgYXdlc29tZWJhciB3aXRob3V0IHRoZSBmb2N1cyBzdHlsZXMgKFwiaGlkZGVuIGZvY3VzXCIpLlxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgdGhpcy5kb1NlYXJjaEhhbmRvZmYoKTtcbiAgfVxuXG4gIG9uU2VhcmNoSGFuZG9mZlBhc3RlKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB0aGlzLmRvU2VhcmNoSGFuZG9mZihldmVudC5jbGlwYm9hcmREYXRhLmdldERhdGEoXCJUZXh0XCIpKTtcbiAgfVxuXG4gIG9uU2VhcmNoSGFuZG9mZkRyb3AoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGxldCB0ZXh0ID0gZXZlbnQuZGF0YVRyYW5zZmVyLmdldERhdGEoXCJ0ZXh0XCIpO1xuICAgIGlmICh0ZXh0KSB7XG4gICAgICB0aGlzLmRvU2VhcmNoSGFuZG9mZih0ZXh0KTtcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBkZWxldGUgd2luZG93LmdDb250ZW50U2VhcmNoQ29udHJvbGxlcjtcbiAgfVxuXG4gIG9uSW5wdXRNb3VudChpbnB1dCkge1xuICAgIGlmIChpbnB1dCkge1xuICAgICAgLy8gVGhlIFwiaGVhbHRoUmVwb3J0S2V5XCIgYW5kIG5lZWRzIHRvIGJlIFwibmV3dGFiXCIgb3IgXCJhYm91dGhvbWVcIiBzbyB0aGF0XG4gICAgICAvLyBCcm93c2VyVXNhZ2VUZWxlbWV0cnkuanNtIGtub3dzIHRvIGhhbmRsZSBldmVudHMgd2l0aCB0aGlzIG5hbWUsIGFuZFxuICAgICAgLy8gY2FuIGFkZCB0aGUgYXBwcm9wcmlhdGUgdGVsZW1ldHJ5IHByb2JlcyBmb3Igc2VhcmNoLiBXaXRob3V0IHRoZSBjb3JyZWN0XG4gICAgICAvLyBuYW1lLCBjZXJ0YWluIHRlc3RzIGxpa2UgYnJvd3Nlcl9Vc2FnZVRlbGVtZXRyeV9jb250ZW50LmpzIHdpbGwgZmFpbFxuICAgICAgLy8gKFNlZSBnaXRodWIgdGlja2V0ICMyMzQ4IGZvciBtb3JlIGRldGFpbHMpXG4gICAgICBjb25zdCBoZWFsdGhSZXBvcnRLZXkgPSBJU19ORVdUQUIgPyBcIm5ld3RhYlwiIDogXCJhYm91dGhvbWVcIjtcblxuICAgICAgLy8gVGhlIFwic2VhcmNoU291cmNlXCIgbmVlZHMgdG8gYmUgXCJuZXd0YWJcIiBvciBcImhvbWVwYWdlXCIgYW5kIGlzIHNlbnQgd2l0aFxuICAgICAgLy8gdGhlIHNlYXJjaCBkYXRhIGFuZCBhY3RzIGFzIGNvbnRleHQgZm9yIHRoZSBzZWFyY2ggcmVxdWVzdCAoU2VlXG4gICAgICAvLyBuc0lTZWFyY2hFbmdpbmUuZ2V0U3VibWlzc2lvbikuIEl0IGlzIG5lY2Vzc2FyeSBzbyB0aGF0IHNlYXJjaCBlbmdpbmVcbiAgICAgIC8vIHBsdWdpbnMgY2FuIGNvcnJlY3RseSBhdHJpYnV0ZSByZWZlcnJhbHMuIChTZWUgZ2l0aHViIHRpY2tldCAjMzMyMSBmb3JcbiAgICAgIC8vIG1vcmUgZGV0YWlscylcbiAgICAgIGNvbnN0IHNlYXJjaFNvdXJjZSA9IElTX05FV1RBQiA/IFwibmV3dGFiXCIgOiBcImhvbWVwYWdlXCI7XG5cbiAgICAgIC8vIGdDb250ZW50U2VhcmNoQ29udHJvbGxlciBuZWVkcyB0byBleGlzdCBhcyBhIGdsb2JhbCBzbyB0aGF0IHRlc3RzIGZvclxuICAgICAgLy8gdGhlIGV4aXN0aW5nIGFib3V0OmhvbWUgY2FuIGZpbmQgaXQ7IGFuZCBzbyBpdCBhbGxvd3MgdGhlc2UgdGVzdHMgdG8gcGFzcy5cbiAgICAgIC8vIEluIHRoZSBmdXR1cmUsIHdoZW4gYWN0aXZpdHkgc3RyZWFtIGlzIGRlZmF1bHQgYWJvdXQ6aG9tZSwgdGhpcyBjYW4gYmUgcmVuYW1lZFxuICAgICAgd2luZG93LmdDb250ZW50U2VhcmNoQ29udHJvbGxlciA9IG5ldyBDb250ZW50U2VhcmNoVUlDb250cm9sbGVyKFxuICAgICAgICBpbnB1dCxcbiAgICAgICAgaW5wdXQucGFyZW50Tm9kZSxcbiAgICAgICAgaGVhbHRoUmVwb3J0S2V5LFxuICAgICAgICBzZWFyY2hTb3VyY2VcbiAgICAgICk7XG4gICAgICBhZGRFdmVudExpc3RlbmVyKFwiQ29udGVudFNlYXJjaENsaWVudFwiLCB0aGlzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgd2luZG93LmdDb250ZW50U2VhcmNoQ29udHJvbGxlciA9IG51bGw7XG4gICAgICByZW1vdmVFdmVudExpc3RlbmVyKFwiQ29udGVudFNlYXJjaENsaWVudFwiLCB0aGlzKTtcbiAgICB9XG4gIH1cblxuICBvblNlYXJjaEhhbmRvZmZCdXR0b25Nb3VudChidXR0b24pIHtcbiAgICAvLyBLZWVwIGEgcmVmZXJlbmNlIHRvIHRoZSBidXR0b24gZm9yIHVzZSBkdXJpbmcgXCJwYXN0ZVwiIGV2ZW50IGhhbmRsaW5nLlxuICAgIHRoaXMuX3NlYXJjaEhhbmRvZmZCdXR0b24gPSBidXR0b247XG4gIH1cblxuICAvKlxuICAgKiBEbyBub3QgY2hhbmdlIHRoZSBJRCBvbiB0aGUgaW5wdXQgZmllbGQsIGFzIGxlZ2FjeSBuZXd0YWIgY29kZVxuICAgKiBzcGVjaWZpY2FsbHkgbG9va3MgZm9yIHRoZSBpZCAnbmV3dGFiLXNlYXJjaC10ZXh0JyBvbiBpbnB1dCBmaWVsZHNcbiAgICogaW4gb3JkZXIgdG8gZXhlY3V0ZSBzZWFyY2hlcyBpbiB2YXJpb3VzIHRlc3RzXG4gICAqL1xuICByZW5kZXIoKSB7XG4gICAgY29uc3Qgd3JhcHBlckNsYXNzTmFtZSA9IFtcbiAgICAgIFwic2VhcmNoLXdyYXBwZXJcIixcbiAgICAgIHRoaXMucHJvcHMuaGlkZSAmJiBcInNlYXJjaC1oaWRkZW5cIixcbiAgICAgIHRoaXMucHJvcHMuZmFrZUZvY3VzICYmIFwiZmFrZS1mb2N1c1wiLFxuICAgIF1cbiAgICAgIC5maWx0ZXIodiA9PiB2KVxuICAgICAgLmpvaW4oXCIgXCIpO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPXt3cmFwcGVyQ2xhc3NOYW1lfT5cbiAgICAgICAge3RoaXMucHJvcHMuc2hvd0xvZ28gJiYgKFxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibG9nby1hbmQtd29yZG1hcmtcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibG9nb1wiIC8+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIndvcmRtYXJrXCIgLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKX1cbiAgICAgICAgeyF0aGlzLnByb3BzLmhhbmRvZmZFbmFibGVkICYmIChcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNlYXJjaC1pbm5lci13cmFwcGVyXCI+XG4gICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgaWQ9XCJuZXd0YWItc2VhcmNoLXRleHRcIlxuICAgICAgICAgICAgICBkYXRhLWwxMG4taWQ9XCJuZXd0YWItc2VhcmNoLWJveC1zZWFyY2gtdGhlLXdlYi1pbnB1dFwiXG4gICAgICAgICAgICAgIG1heExlbmd0aD1cIjI1NlwiXG4gICAgICAgICAgICAgIHJlZj17dGhpcy5vbklucHV0TW91bnR9XG4gICAgICAgICAgICAgIHR5cGU9XCJzZWFyY2hcIlxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgaWQ9XCJzZWFyY2hTdWJtaXRcIlxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJzZWFyY2gtYnV0dG9uXCJcbiAgICAgICAgICAgICAgZGF0YS1sMTBuLWlkPVwibmV3dGFiLXNlYXJjaC1ib3gtc2VhcmNoLWJ1dHRvblwiXG4gICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMub25TZWFyY2hDbGlja31cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICl9XG4gICAgICAgIHt0aGlzLnByb3BzLmhhbmRvZmZFbmFibGVkICYmIChcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNlYXJjaC1pbm5lci13cmFwcGVyXCI+XG4gICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cInNlYXJjaC1oYW5kb2ZmLWJ1dHRvblwiXG4gICAgICAgICAgICAgIGRhdGEtbDEwbi1pZD1cIm5ld3RhYi1zZWFyY2gtYm94LXNlYXJjaC10aGUtd2ViLWlucHV0XCJcbiAgICAgICAgICAgICAgcmVmPXt0aGlzLm9uU2VhcmNoSGFuZG9mZkJ1dHRvbk1vdW50fVxuICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLm9uU2VhcmNoSGFuZG9mZkNsaWNrfVxuICAgICAgICAgICAgICB0YWJJbmRleD1cIi0xXCJcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImZha2UtdGV4dGJveFwiXG4gICAgICAgICAgICAgICAgZGF0YS1sMTBuLWlkPVwibmV3dGFiLXNlYXJjaC1ib3gtc2VhcmNoLXRoZS13ZWItdGV4dFwiXG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICAgIHR5cGU9XCJzZWFyY2hcIlxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImZha2UtZWRpdGFibGVcIlxuICAgICAgICAgICAgICAgIHRhYkluZGV4PVwiLTFcIlxuICAgICAgICAgICAgICAgIGFyaWEtaGlkZGVuPVwidHJ1ZVwiXG4gICAgICAgICAgICAgICAgb25Ecm9wPXt0aGlzLm9uU2VhcmNoSGFuZG9mZkRyb3B9XG4gICAgICAgICAgICAgICAgb25QYXN0ZT17dGhpcy5vblNlYXJjaEhhbmRvZmZQYXN0ZX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmYWtlLWNhcmV0XCIgLz5cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgey8qXG4gICAgICAgICAgICBUaGlzIGR1bW15IGFuZCBoaWRkZW4gaW5wdXQgYmVsb3cgaXMgc28gd2UgY2FuIGxvYWQgQ29udGVudFNlYXJjaFVJQ29udHJvbGxlci5cbiAgICAgICAgICAgIFdoeT8gSXQgc2V0cyAtLW5ld3RhYi1zZWFyY2gtaWNvbiBmb3IgdXMgYW5kIGl0IGlzbid0IHRyaXZpYWwgdG8gcG9ydCBvdmVyLlxuICAgICAgICAgICovfVxuICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgIHR5cGU9XCJzZWFyY2hcIlxuICAgICAgICAgICAgICBzdHlsZT17eyBkaXNwbGF5OiBcIm5vbmVcIiB9fVxuICAgICAgICAgICAgICByZWY9e3RoaXMub25JbnB1dE1vdW50fVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKX1cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IFNlYXJjaCA9IGNvbm5lY3QoKShfU2VhcmNoKTtcbiIsIi8qIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXMgZmlsZSxcbiAqIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uICovXG5cbmltcG9ydCB7IGFjdGlvbkNyZWF0b3JzIGFzIGFjLCBhY3Rpb25UeXBlcyBhcyBhdCB9IGZyb20gXCJjb21tb24vQWN0aW9ucy5qc21cIjtcbmltcG9ydCB7IHBlcmZTZXJ2aWNlIGFzIHBlcmZTdmMgfSBmcm9tIFwiY29tbW9uL1BlcmZTZXJ2aWNlLmpzbVwiO1xuXG5jb25zdCBWSVNJQkxFID0gXCJ2aXNpYmxlXCI7XG5jb25zdCBWSVNJQklMSVRZX0NIQU5HRV9FVkVOVCA9IFwidmlzaWJpbGl0eWNoYW5nZVwiO1xuXG5leHBvcnQgY2xhc3MgRGV0ZWN0VXNlclNlc3Npb25TdGFydCB7XG4gIGNvbnN0cnVjdG9yKHN0b3JlLCBvcHRpb25zID0ge30pIHtcbiAgICB0aGlzLl9zdG9yZSA9IHN0b3JlO1xuICAgIC8vIE92ZXJyaWRlcyBmb3IgdGVzdGluZ1xuICAgIHRoaXMuZG9jdW1lbnQgPSBvcHRpb25zLmRvY3VtZW50IHx8IGdsb2JhbC5kb2N1bWVudDtcbiAgICB0aGlzLl9wZXJmU2VydmljZSA9IG9wdGlvbnMucGVyZlNlcnZpY2UgfHwgcGVyZlN2YztcbiAgICB0aGlzLl9vblZpc2liaWxpdHlDaGFuZ2UgPSB0aGlzLl9vblZpc2liaWxpdHlDaGFuZ2UuYmluZCh0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBzZW5kRXZlbnRPckFkZExpc3RlbmVyIC0gTm90aWZ5IGltbWVkaWF0ZWx5IGlmIHRoZSBwYWdlIGlzIGFscmVhZHkgdmlzaWJsZSxcbiAgICogICAgICAgICAgICAgICAgICAgIG9yIGVsc2Ugc2V0IHVwIGEgbGlzdGVuZXIgZm9yIHdoZW4gdmlzaWJpbGl0eSBjaGFuZ2VzLlxuICAgKiAgICAgICAgICAgICAgICAgICAgVGhpcyBpcyBuZWVkZWQgZm9yIGFjY3VyYXRlIHNlc3Npb24gdHJhY2tpbmcgZm9yIHRlbGVtZXRyeSxcbiAgICogICAgICAgICAgICAgICAgICAgIGJlY2F1c2UgdGFicyBhcmUgcHJlLWxvYWRlZC5cbiAgICovXG4gIHNlbmRFdmVudE9yQWRkTGlzdGVuZXIoKSB7XG4gICAgaWYgKHRoaXMuZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlID09PSBWSVNJQkxFKSB7XG4gICAgICAvLyBJZiB0aGUgZG9jdW1lbnQgaXMgYWxyZWFkeSB2aXNpYmxlLCB0byB0aGUgdXNlciwgc2VuZCBhIG5vdGlmaWNhdGlvblxuICAgICAgLy8gaW1tZWRpYXRlbHkgdGhhdCBhIHNlc3Npb24gaGFzIHN0YXJ0ZWQuXG4gICAgICB0aGlzLl9zZW5kRXZlbnQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSWYgdGhlIGRvY3VtZW50IGlzIG5vdCB2aXNpYmxlLCBsaXN0ZW4gZm9yIHdoZW4gaXQgZG9lcyBiZWNvbWUgdmlzaWJsZS5cbiAgICAgIHRoaXMuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgVklTSUJJTElUWV9DSEFOR0VfRVZFTlQsXG4gICAgICAgIHRoaXMuX29uVmlzaWJpbGl0eUNoYW5nZVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogX3NlbmRFdmVudCAtIFNlbmRzIGEgbWVzc2FnZSB0byB0aGUgbWFpbiBwcm9jZXNzIHRvIGluZGljYXRlIHRoZSBjdXJyZW50XG4gICAqICAgICAgICAgICAgICB0YWIgaXMgbm93IHZpc2libGUgdG8gdGhlIHVzZXIsIGluY2x1ZGVzIHRoZVxuICAgKiAgICAgICAgICAgICAgdmlzaWJpbGl0eV9ldmVudF9yY3ZkX3RzIHRpbWUgaW4gbXMgZnJvbSB0aGUgVU5JWCBlcG9jaC5cbiAgICovXG4gIF9zZW5kRXZlbnQoKSB7XG4gICAgdGhpcy5fcGVyZlNlcnZpY2UubWFyayhcInZpc2liaWxpdHlfZXZlbnRfcmN2ZF90c1wiKTtcblxuICAgIHRyeSB7XG4gICAgICBsZXQgdmlzaWJpbGl0eV9ldmVudF9yY3ZkX3RzID0gdGhpcy5fcGVyZlNlcnZpY2UuZ2V0TW9zdFJlY2VudEFic01hcmtTdGFydEJ5TmFtZShcbiAgICAgICAgXCJ2aXNpYmlsaXR5X2V2ZW50X3JjdmRfdHNcIlxuICAgICAgKTtcblxuICAgICAgdGhpcy5fc3RvcmUuZGlzcGF0Y2goXG4gICAgICAgIGFjLkFsc29Ub01haW4oe1xuICAgICAgICAgIHR5cGU6IGF0LlNBVkVfU0VTU0lPTl9QRVJGX0RBVEEsXG4gICAgICAgICAgZGF0YTogeyB2aXNpYmlsaXR5X2V2ZW50X3JjdmRfdHMgfSxcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgIC8vIElmIHRoaXMgZmFpbGVkLCBpdCdzIGxpa2VseSBiZWNhdXNlIHRoZSBgcHJpdmFjeS5yZXNpc3RGaW5nZXJwcmludGluZ2BcbiAgICAgIC8vIHByZWYgaXMgdHJ1ZS4gIFdlIHNob3VsZCBhdCBsZWFzdCBub3QgYmxvdyB1cC5cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogX29uVmlzaWJpbGl0eUNoYW5nZSAtIElmIHRoZSB2aXNpYmlsaXR5IGhhcyBjaGFuZ2VkIHRvIHZpc2libGUsIHNlbmRzIGEgbm90aWZpY2F0aW9uXG4gICAqICAgICAgICAgICAgICAgICAgICAgIGFuZCByZW1vdmVzIHRoZSBldmVudCBsaXN0ZW5lci4gVGhpcyBzaG91bGQgb25seSBiZSBjYWxsZWQgb25jZSBwZXIgdGFiLlxuICAgKi9cbiAgX29uVmlzaWJpbGl0eUNoYW5nZSgpIHtcbiAgICBpZiAodGhpcy5kb2N1bWVudC52aXNpYmlsaXR5U3RhdGUgPT09IFZJU0lCTEUpIHtcbiAgICAgIHRoaXMuX3NlbmRFdmVudCgpO1xuICAgICAgdGhpcy5kb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFxuICAgICAgICBWSVNJQklMSVRZX0NIQU5HRV9FVkVOVCxcbiAgICAgICAgdGhpcy5fb25WaXNpYmlsaXR5Q2hhbmdlXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gYWRkQ2xhc3M7XG5cbnZhciBfaGFzQ2xhc3MgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2hhc0NsYXNzXCIpKTtcblxuZnVuY3Rpb24gYWRkQ2xhc3MoZWxlbWVudCwgY2xhc3NOYW1lKSB7XG4gIGlmIChlbGVtZW50LmNsYXNzTGlzdCkgZWxlbWVudC5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7ZWxzZSBpZiAoISgwLCBfaGFzQ2xhc3MuZGVmYXVsdCkoZWxlbWVudCwgY2xhc3NOYW1lKSkgaWYgKHR5cGVvZiBlbGVtZW50LmNsYXNzTmFtZSA9PT0gJ3N0cmluZycpIGVsZW1lbnQuY2xhc3NOYW1lID0gZWxlbWVudC5jbGFzc05hbWUgKyAnICcgKyBjbGFzc05hbWU7ZWxzZSBlbGVtZW50LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAoZWxlbWVudC5jbGFzc05hbWUgJiYgZWxlbWVudC5jbGFzc05hbWUuYmFzZVZhbCB8fCAnJykgKyAnICcgKyBjbGFzc05hbWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIi8qXG4gKiBTeW5jaHJvbm91c2x5IG1hcCBhbiBpZGVudGlmaWVyIG9yIGFuIGFycmF5IG9mIGlkZW50aWZpZXJzIHRvIHRoZSBiZXN0XG4gKiBgRmx1ZW50QnVuZGxlYCBpbnN0YW5jZShzKS5cbiAqXG4gKiBAcGFyYW0ge0l0ZXJhYmxlfSBpdGVyYWJsZVxuICogQHBhcmFtIHtzdHJpbmd8QXJyYXk8c3RyaW5nPn0gaWRzXG4gKiBAcmV0dXJucyB7Rmx1ZW50QnVuZGxlfEFycmF5PEZsdWVudEJ1bmRsZT59XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1hcEJ1bmRsZVN5bmMoaXRlcmFibGUsIGlkcykge1xuICBpZiAoIUFycmF5LmlzQXJyYXkoaWRzKSkge1xuICAgIHJldHVybiBnZXRCdW5kbGVGb3JJZChpdGVyYWJsZSwgaWRzKTtcbiAgfVxuXG4gIHJldHVybiBpZHMubWFwKFxuICAgIGlkID0+IGdldEJ1bmRsZUZvcklkKGl0ZXJhYmxlLCBpZClcbiAgKTtcbn1cblxuLypcbiAqIEZpbmQgdGhlIGJlc3QgYEZsdWVudEJ1bmRsZWAgd2l0aCB0aGUgdHJhbnNsYXRpb24gZm9yIGBpZGAuXG4gKi9cbmZ1bmN0aW9uIGdldEJ1bmRsZUZvcklkKGl0ZXJhYmxlLCBpZCkge1xuICBmb3IgKGNvbnN0IGJ1bmRsZSBvZiBpdGVyYWJsZSkge1xuICAgIGlmIChidW5kbGUuaGFzTWVzc2FnZShpZCkpIHtcbiAgICAgIHJldHVybiBidW5kbGU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG4iLCIvKlxuICogQXN5bmNocm9ub3VzbHkgbWFwIGFuIGlkZW50aWZpZXIgb3IgYW4gYXJyYXkgb2YgaWRlbnRpZmllcnMgdG8gdGhlIGJlc3RcbiAqIGBGbHVlbnRCdW5kbGVgIGluc3RhbmNlKHMpLlxuICpcbiAqIEBwYXJhbSB7QXN5bmNJdGVyYWJsZX0gaXRlcmFibGVcbiAqIEBwYXJhbSB7c3RyaW5nfEFycmF5PHN0cmluZz59IGlkc1xuICogQHJldHVybnMge1Byb21pc2U8Rmx1ZW50QnVuZGxlfEFycmF5PEZsdWVudEJ1bmRsZT4+fVxuICovXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBtYXBCdW5kbGVBc3luYyhpdGVyYWJsZSwgaWRzKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShpZHMpKSB7XG4gICAgZm9yIGF3YWl0IChjb25zdCBidW5kbGUgb2YgaXRlcmFibGUpIHtcbiAgICAgIGlmIChidW5kbGUuaGFzTWVzc2FnZShpZHMpKSB7XG4gICAgICAgIHJldHVybiBidW5kbGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgbGV0IHJlbWFpbmluZ0NvdW50ID0gaWRzLmxlbmd0aDtcbiAgY29uc3QgZm91bmRCdW5kbGVzID0gbmV3IEFycmF5KHJlbWFpbmluZ0NvdW50KS5maWxsKG51bGwpO1xuXG4gIGZvciBhd2FpdCAoY29uc3QgYnVuZGxlIG9mIGl0ZXJhYmxlKSB7XG4gICAgZm9yIChjb25zdCBbaW5kZXgsIGlkXSBvZiBpZHMuZW50cmllcygpKSB7XG4gICAgICBpZiAoIWZvdW5kQnVuZGxlc1tpbmRleF0gJiYgYnVuZGxlLmhhc01lc3NhZ2UoaWQpKSB7XG4gICAgICAgIGZvdW5kQnVuZGxlc1tpbmRleF0gPSBidW5kbGU7XG4gICAgICAgIHJlbWFpbmluZ0NvdW50LS07XG4gICAgICB9XG5cbiAgICAgIC8vIFJldHVybiBlYXJseSB3aGVuIGFsbCBpZHMgaGF2ZSBiZWVuIG1hcHBlZCB0byBjb250ZXh0cy5cbiAgICAgIGlmIChyZW1haW5pbmdDb3VudCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gZm91bmRCdW5kbGVzO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmb3VuZEJ1bmRsZXM7XG59XG4iLCIvKlxuICogQG1vZHVsZSBmbHVlbnQtc2VxdWVuY2VcbiAqIEBvdmVydmlldyBNYW5hZ2Ugb3JkZXJlZCBzZXF1ZW5jZXMgb2YgRmx1ZW50QnVuZGxlcy5cbiAqL1xuXG5leHBvcnQge2RlZmF1bHQgYXMgbWFwQnVuZGxlU3luY30gZnJvbSBcIi4vbWFwX3N5bmNcIjtcbmV4cG9ydCB7ZGVmYXVsdCBhcyBtYXBCdW5kbGVBc3luY30gZnJvbSBcIi4vbWFwX2FzeW5jXCI7XG4iLCIvKlxuICogQmFzZSBDYWNoZWRJdGVyYWJsZSBjbGFzcy5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FjaGVkSXRlcmFibGUgZXh0ZW5kcyBBcnJheSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgYENhY2hlZEl0ZXJhYmxlYCBpbnN0YW5jZSBmcm9tIGFuIGl0ZXJhYmxlIG9yLCBpZiBhbm90aGVyXG4gICAgICogaW5zdGFuY2Ugb2YgYENhY2hlZEl0ZXJhYmxlYCBpcyBwYXNzZWQsIHJldHVybiBpdCB3aXRob3V0IGFueVxuICAgICAqIG1vZGlmaWNhdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0l0ZXJhYmxlfSBpdGVyYWJsZVxuICAgICAqIEByZXR1cm5zIHtDYWNoZWRJdGVyYWJsZX1cbiAgICAgKi9cbiAgICBzdGF0aWMgZnJvbShpdGVyYWJsZSkge1xuICAgICAgICBpZiAoaXRlcmFibGUgaW5zdGFuY2VvZiB0aGlzKSB7XG4gICAgICAgICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3IHRoaXMoaXRlcmFibGUpO1xuICAgIH1cbn1cbiIsImltcG9ydCBDYWNoZWRJdGVyYWJsZSBmcm9tIFwiLi9jYWNoZWRfaXRlcmFibGUubWpzXCI7XG5cbi8qXG4gKiBDYWNoZWRTeW5jSXRlcmFibGUgY2FjaGVzIHRoZSBlbGVtZW50cyB5aWVsZGVkIGJ5IGFuIGl0ZXJhYmxlLlxuICpcbiAqIEl0IGNhbiBiZSB1c2VkIHRvIGl0ZXJhdGUgb3ZlciBhbiBpdGVyYWJsZSBtYW55IHRpbWVzIHdpdGhvdXQgZGVwbGV0aW5nIHRoZVxuICogaXRlcmFibGUuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENhY2hlZFN5bmNJdGVyYWJsZSBleHRlbmRzIENhY2hlZEl0ZXJhYmxlIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYW4gYENhY2hlZFN5bmNJdGVyYWJsZWAgaW5zdGFuY2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0l0ZXJhYmxlfSBpdGVyYWJsZVxuICAgICAqIEByZXR1cm5zIHtDYWNoZWRTeW5jSXRlcmFibGV9XG4gICAgICovXG4gICAgY29uc3RydWN0b3IoaXRlcmFibGUpIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyYWJsZSkpIHtcbiAgICAgICAgICAgIHRoaXMuaXRlcmF0b3IgPSBpdGVyYWJsZVtTeW1ib2wuaXRlcmF0b3JdKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQXJndW1lbnQgbXVzdCBpbXBsZW1lbnQgdGhlIGl0ZXJhdGlvbiBwcm90b2NvbC5cIik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICAgICAgY29uc3QgY2FjaGVkID0gdGhpcztcbiAgICAgICAgbGV0IGN1ciA9IDA7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5leHQoKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNhY2hlZC5sZW5ndGggPD0gY3VyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhY2hlZC5wdXNoKGNhY2hlZC5pdGVyYXRvci5uZXh0KCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gY2FjaGVkW2N1cisrXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBhbGxvd3MgdXNlciB0byBjb25zdW1lIHRoZSBuZXh0IGVsZW1lbnQgZnJvbSB0aGUgaXRlcmF0b3JcbiAgICAgKiBpbnRvIHRoZSBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBjb3VudCAtIG51bWJlciBvZiBlbGVtZW50cyB0byBjb25zdW1lXG4gICAgICovXG4gICAgdG91Y2hOZXh0KGNvdW50ID0gMSkge1xuICAgICAgICBsZXQgaWR4ID0gMDtcbiAgICAgICAgd2hpbGUgKGlkeCsrIDwgY291bnQpIHtcbiAgICAgICAgICAgIGNvbnN0IGxhc3QgPSB0aGlzW3RoaXMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICBpZiAobGFzdCAmJiBsYXN0LmRvbmUpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucHVzaCh0aGlzLml0ZXJhdG9yLm5leHQoKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmV0dXJuIHRoZSBsYXN0IGNhY2hlZCB7dmFsdWUsIGRvbmV9IG9iamVjdCB0byBhbGxvdyB0aGUgY2FsbGluZ1xuICAgICAgICAvLyBjb2RlIHRvIGRlY2lkZSBpZiBpdCBuZWVkcyB0byBjYWxsIHRvdWNoTmV4dCBhZ2Fpbi5cbiAgICAgICAgcmV0dXJuIHRoaXNbdGhpcy5sZW5ndGggLSAxXTtcbiAgICB9XG59XG4iLCJpbXBvcnQgQ2FjaGVkSXRlcmFibGUgZnJvbSBcIi4vY2FjaGVkX2l0ZXJhYmxlLm1qc1wiO1xuXG4vKlxuICogQ2FjaGVkQXN5bmNJdGVyYWJsZSBjYWNoZXMgdGhlIGVsZW1lbnRzIHlpZWxkZWQgYnkgYW4gYXN5bmMgaXRlcmFibGUuXG4gKlxuICogSXQgY2FuIGJlIHVzZWQgdG8gaXRlcmF0ZSBvdmVyIGFuIGl0ZXJhYmxlIG1hbnkgdGltZXMgd2l0aG91dCBkZXBsZXRpbmcgdGhlXG4gKiBpdGVyYWJsZS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FjaGVkQXN5bmNJdGVyYWJsZSBleHRlbmRzIENhY2hlZEl0ZXJhYmxlIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYW4gYENhY2hlZEFzeW5jSXRlcmFibGVgIGluc3RhbmNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtJdGVyYWJsZX0gaXRlcmFibGVcbiAgICAgKiBAcmV0dXJucyB7Q2FjaGVkQXN5bmNJdGVyYWJsZX1cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihpdGVyYWJsZSkge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIGlmIChTeW1ib2wuYXN5bmNJdGVyYXRvciBpbiBPYmplY3QoaXRlcmFibGUpKSB7XG4gICAgICAgICAgICB0aGlzLml0ZXJhdG9yID0gaXRlcmFibGVbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyYWJsZSkpIHtcbiAgICAgICAgICAgIHRoaXMuaXRlcmF0b3IgPSBpdGVyYWJsZVtTeW1ib2wuaXRlcmF0b3JdKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQXJndW1lbnQgbXVzdCBpbXBsZW1lbnQgdGhlIGl0ZXJhdGlvbiBwcm90b2NvbC5cIik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTeW5jaHJvbm91cyBpdGVyYXRvciBvdmVyIHRoZSBjYWNoZWQgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBSZXR1cm4gYSBnZW5lcmF0b3Igb2JqZWN0IGltcGxlbWVudGluZyB0aGUgaXRlcmF0b3IgcHJvdG9jb2wgb3ZlciB0aGVcbiAgICAgKiBjYWNoZWQgZWxlbWVudHMgb2YgdGhlIG9yaWdpbmFsIChhc3luYyBvciBzeW5jKSBpdGVyYWJsZS5cbiAgICAgKi9cbiAgICBbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICAgICAgY29uc3QgY2FjaGVkID0gdGhpcztcbiAgICAgICAgbGV0IGN1ciA9IDA7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5leHQoKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNhY2hlZC5sZW5ndGggPT09IGN1cikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge3ZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWV9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gY2FjaGVkW2N1cisrXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBc3luY2hyb25vdXMgaXRlcmF0b3IgY2FjaGluZyB0aGUgeWllbGRlZCBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEVsZW1lbnRzIHlpZWxkZWQgYnkgdGhlIG9yaWdpbmFsIGl0ZXJhYmxlIHdpbGwgYmUgY2FjaGVkIGFuZCBhdmFpbGFibGVcbiAgICAgKiBzeW5jaHJvbm91c2x5LiBSZXR1cm5zIGFuIGFzeW5jIGdlbmVyYXRvciBvYmplY3QgaW1wbGVtZW50aW5nIHRoZVxuICAgICAqIGl0ZXJhdG9yIHByb3RvY29sIG92ZXIgdGhlIGVsZW1lbnRzIG9mIHRoZSBvcmlnaW5hbCAoYXN5bmMgb3Igc3luYylcbiAgICAgKiBpdGVyYWJsZS5cbiAgICAgKi9cbiAgICBbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgICAgICBjb25zdCBjYWNoZWQgPSB0aGlzO1xuICAgICAgICBsZXQgY3VyID0gMDtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYXN5bmMgbmV4dCgpIHtcbiAgICAgICAgICAgICAgICBpZiAoY2FjaGVkLmxlbmd0aCA8PSBjdXIpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FjaGVkLnB1c2goYXdhaXQgY2FjaGVkLml0ZXJhdG9yLm5leHQoKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBjYWNoZWRbY3VyKytdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGFsbG93cyB1c2VyIHRvIGNvbnN1bWUgdGhlIG5leHQgZWxlbWVudCBmcm9tIHRoZSBpdGVyYXRvclxuICAgICAqIGludG8gdGhlIGNhY2hlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGNvdW50IC0gbnVtYmVyIG9mIGVsZW1lbnRzIHRvIGNvbnN1bWVcbiAgICAgKi9cbiAgICBhc3luYyB0b3VjaE5leHQoY291bnQgPSAxKSB7XG4gICAgICAgIGxldCBpZHggPSAwO1xuICAgICAgICB3aGlsZSAoaWR4KysgPCBjb3VudCkge1xuICAgICAgICAgICAgY29uc3QgbGFzdCA9IHRoaXNbdGhpcy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgIGlmIChsYXN0ICYmIGxhc3QuZG9uZSkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5wdXNoKGF3YWl0IHRoaXMuaXRlcmF0b3IubmV4dCgpKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBSZXR1cm4gdGhlIGxhc3QgY2FjaGVkIHt2YWx1ZSwgZG9uZX0gb2JqZWN0IHRvIGFsbG93IHRoZSBjYWxsaW5nXG4gICAgICAgIC8vIGNvZGUgdG8gZGVjaWRlIGlmIGl0IG5lZWRzIHRvIGNhbGwgdG91Y2hOZXh0IGFnYWluLlxuICAgICAgICByZXR1cm4gdGhpc1t0aGlzLmxlbmd0aCAtIDFdO1xuICAgIH1cbn1cbiIsImV4cG9ydCB7ZGVmYXVsdCBhcyBDYWNoZWRTeW5jSXRlcmFibGV9IGZyb20gXCIuL2NhY2hlZF9zeW5jX2l0ZXJhYmxlLm1qc1wiO1xuZXhwb3J0IHtkZWZhdWx0IGFzIENhY2hlZEFzeW5jSXRlcmFibGV9IGZyb20gXCIuL2NhY2hlZF9hc3luY19pdGVyYWJsZS5tanNcIjtcbiIsImltcG9ydCB7IG1hcEJ1bmRsZVN5bmMgfSBmcm9tIFwiZmx1ZW50LXNlcXVlbmNlXCI7XG5pbXBvcnQgeyBDYWNoZWRTeW5jSXRlcmFibGUgfSBmcm9tIFwiY2FjaGVkLWl0ZXJhYmxlXCI7XG5cbi8qXG4gKiBgUmVhY3RMb2NhbGl6YXRpb25gIGhhbmRsZXMgdHJhbnNsYXRpb24gZm9ybWF0dGluZyBhbmQgZmFsbGJhY2suXG4gKlxuICogVGhlIGN1cnJlbnQgbmVnb3RpYXRlZCBmYWxsYmFjayBjaGFpbiBvZiBsYW5ndWFnZXMgaXMgc3RvcmVkIGluIHRoZVxuICogYFJlYWN0TG9jYWxpemF0aW9uYCBpbnN0YW5jZSBpbiBmb3JtIG9mIGFuIGl0ZXJhYmxlIG9mIGBGbHVlbnRCdW5kbGVgXG4gKiBpbnN0YW5jZXMuICBUaGlzIGl0ZXJhYmxlIGlzIHVzZWQgdG8gZmluZCB0aGUgYmVzdCBleGlzdGluZyB0cmFuc2xhdGlvbiBmb3JcbiAqIGEgZ2l2ZW4gaWRlbnRpZmllci5cbiAqXG4gKiBgTG9jYWxpemVkYCBjb21wb25lbnRzIG11c3Qgc3Vic2NyaWJlIHRvIHRoZSBjaGFuZ2VzIG9mIHRoZVxuICogYFJlYWN0TG9jYWxpemF0aW9uYCdzIGZhbGxiYWNrIGNoYWluLiAgV2hlbiB0aGUgZmFsbGJhY2sgY2hhaW4gY2hhbmdlcyAodGhlXG4gKiBgYnVuZGxlc2AgaXRlcmFibGUgaXMgc2V0IGFuZXcpLCBhbGwgc3Vic2NyaWJlZCBjb21wb250ZW50IG11c3QgcmVsb2NhbGl6ZS5cbiAqXG4gKiBUaGUgYFJlYWN0TG9jYWxpemF0aW9uYCBjbGFzcyBpbnN0YW5jZXMgYXJlIGV4cG9zZWQgdG8gYExvY2FsaXplZGAgZWxlbWVudHNcbiAqIHZpYSB0aGUgYExvY2FsaXphdGlvblByb3ZpZGVyYCBjb21wb25lbnQuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlYWN0TG9jYWxpemF0aW9uIHtcbiAgY29uc3RydWN0b3IoYnVuZGxlcykge1xuICAgIHRoaXMuYnVuZGxlcyA9IENhY2hlZFN5bmNJdGVyYWJsZS5mcm9tKGJ1bmRsZXMpO1xuICAgIHRoaXMuc3VicyA9IG5ldyBTZXQoKTtcbiAgfVxuXG4gIC8qXG4gICAqIFN1YnNjcmliZSBhIGBMb2NhbGl6ZWRgIGNvbXBvbmVudCB0byBjaGFuZ2VzIG9mIGBidW5kbGVzYC5cbiAgICovXG4gIHN1YnNjcmliZShjb21wKSB7XG4gICAgdGhpcy5zdWJzLmFkZChjb21wKTtcbiAgfVxuXG4gIC8qXG4gICAqIFVuc3Vic2NyaWJlIGEgYExvY2FsaXplZGAgY29tcG9uZW50IGZyb20gYGJ1bmRsZXNgIGNoYW5nZXMuXG4gICAqL1xuICB1bnN1YnNjcmliZShjb21wKSB7XG4gICAgdGhpcy5zdWJzLmRlbGV0ZShjb21wKTtcbiAgfVxuXG4gIC8qXG4gICAqIFNldCBhIG5ldyBgYnVuZGxlc2AgaXRlcmFibGUgYW5kIHRyaWdnZXIgdGhlIHJldHJhbnNsYXRpb24uXG4gICAqL1xuICBzZXRCdW5kbGVzKGJ1bmRsZXMpIHtcbiAgICB0aGlzLmJ1bmRsZXMgPSBDYWNoZWRTeW5jSXRlcmFibGUuZnJvbShidW5kbGVzKTtcblxuICAgIC8vIFVwZGF0ZSBhbGwgc3Vic2NyaWJlZCBMb2NhbGl6ZWQgY29tcG9uZW50cy5cbiAgICB0aGlzLnN1YnMuZm9yRWFjaChjb21wID0+IGNvbXAucmVsb2NhbGl6ZSgpKTtcbiAgfVxuXG4gIGdldEJ1bmRsZShpZCkge1xuICAgIHJldHVybiBtYXBCdW5kbGVTeW5jKHRoaXMuYnVuZGxlcywgaWQpO1xuICB9XG5cbiAgLypcbiAgICogRmluZCBhIHRyYW5zbGF0aW9uIGJ5IGBpZGAgYW5kIGZvcm1hdCBpdCB0byBhIHN0cmluZyB1c2luZyBgYXJnc2AuXG4gICAqL1xuICBnZXRTdHJpbmcoaWQsIGFyZ3MsIGZhbGxiYWNrKSB7XG4gICAgY29uc3QgYnVuZGxlID0gdGhpcy5nZXRCdW5kbGUoaWQpO1xuXG4gICAgaWYgKGJ1bmRsZSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGZhbGxiYWNrIHx8IGlkO1xuICAgIH1cblxuICAgIGNvbnN0IG1zZyA9IGJ1bmRsZS5nZXRNZXNzYWdlKGlkKTtcbiAgICByZXR1cm4gYnVuZGxlLmZvcm1hdChtc2csIGFyZ3MpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1JlYWN0TG9jYWxpemF0aW9uKHByb3BzLCBwcm9wTmFtZSkge1xuICBjb25zdCBwcm9wID0gcHJvcHNbcHJvcE5hbWVdO1xuXG4gIGlmIChwcm9wIGluc3RhbmNlb2YgUmVhY3RMb2NhbGl6YXRpb24pIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBuZXcgRXJyb3IoXG4gICAgYFRoZSAke3Byb3BOYW1lfSBjb250ZXh0IGZpZWxkIG11c3QgYmUgYW4gaW5zdGFuY2Ugb2YgUmVhY3RMb2NhbGl6YXRpb24uYFxuICApO1xufVxuIiwiLyogZXNsaW50LWVudiBicm93c2VyICovXG5cbmxldCBjYWNoZWRQYXJzZU1hcmt1cDtcblxuLy8gV2UgdXNlIGEgZnVuY3Rpb24gY3JlYXRvciB0byBtYWtlIHRoZSByZWZlcmVuY2UgdG8gYGRvY3VtZW50YCBsYXp5LiBBdCB0aGVcbi8vIHNhbWUgdGltZSwgaXQncyBlYWdlciBlbm91Z2ggdG8gdGhyb3cgaW4gPExvY2FsaXphdGlvblByb3ZpZGVyPiBhcyBzb29uIGFzXG4vLyBpdCdzIGZpcnN0IG1vdW50ZWQgd2hpY2ggcmVkdWNlcyB0aGUgcmlzayBvZiB0aGlzIGVycm9yIG1ha2luZyBpdCB0byB0aGVcbi8vIHJ1bnRpbWUgd2l0aG91dCBkZXZlbG9wZXJzIG5vdGljaW5nIGl0IGluIGRldmVsb3BtZW50LlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlUGFyc2VNYXJrdXAoKSB7XG4gIGlmICh0eXBlb2YoZG9jdW1lbnQpID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgLy8gV2UgY2FuJ3QgdXNlIDx0ZW1wbGF0ZT4gdG8gc2FuaXRpemUgdHJhbnNsYXRpb25zLlxuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIFwiYGRvY3VtZW50YCBpcyB1bmRlZmluZWQuIFdpdGhvdXQgaXQsIHRyYW5zbGF0aW9ucyBjYW5ub3QgXCIgK1xuICAgICAgXCJiZSBzYWZlbHkgc2FuaXRpemVkLiBDb25zdWx0IHRoZSBkb2N1bWVudGF0aW9uIGF0IFwiICtcbiAgICAgIFwiaHR0cHM6Ly9naXRodWIuY29tL3Byb2plY3RmbHVlbnQvZmx1ZW50LmpzL3dpa2kvUmVhY3QtT3ZlcmxheXMuXCJcbiAgICApO1xuICB9XG5cbiAgaWYgKCFjYWNoZWRQYXJzZU1hcmt1cCkge1xuICAgIGNvbnN0IHRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRlbXBsYXRlXCIpO1xuICAgIGNhY2hlZFBhcnNlTWFya3VwID0gZnVuY3Rpb24gcGFyc2VNYXJrdXAoc3RyKSB7XG4gICAgICB0ZW1wbGF0ZS5pbm5lckhUTUwgPSBzdHI7XG4gICAgICByZXR1cm4gQXJyYXkuZnJvbSh0ZW1wbGF0ZS5jb250ZW50LmNoaWxkTm9kZXMpO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gY2FjaGVkUGFyc2VNYXJrdXA7XG59XG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIENoaWxkcmVuIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgUmVhY3RMb2NhbGl6YXRpb24sIHsgaXNSZWFjdExvY2FsaXphdGlvbn0gZnJvbSBcIi4vbG9jYWxpemF0aW9uXCI7XG5pbXBvcnQgY3JlYXRlUGFyc2VNYXJrdXAgZnJvbSBcIi4vbWFya3VwXCI7XG5cbi8qXG4gKiBUaGUgUHJvdmlkZXIgY29tcG9uZW50IGZvciB0aGUgYFJlYWN0TG9jYWxpemF0aW9uYCBjbGFzcy5cbiAqXG4gKiBFeHBvc2VzIGEgYFJlYWN0TG9jYWxpemF0aW9uYCBpbnN0YW5jZSB0byBhbGwgZGVzY2VuZGFudHMgdmlhIFJlYWN0J3NcbiAqIGNvbnRleHQgZmVhdHVyZS4gIEl0IG1ha2VzIHRyYW5zbGF0aW9ucyBhdmFpbGFibGUgdG8gYWxsIGxvY2FsaXphYmxlXG4gKiBlbGVtZW50cyBpbiB0aGUgZGVzY2VuZGFudCdzIHJlbmRlciB0cmVlIHdpdGhvdXQgdGhlIG5lZWQgdG8gcGFzcyB0aGVtXG4gKiBleHBsaWNpdGx5LlxuICpcbiAqICAgICA8TG9jYWxpemF0aW9uUHJvdmlkZXIgYnVuZGxlcz174oCmfT5cbiAqICAgICAgICAg4oCmXG4gKiAgICAgPC9Mb2NhbGl6YXRpb25Qcm92aWRlcj5cbiAqXG4gKiBUaGUgYExvY2FsaXphdGlvblByb3ZpZGVyYCBjb21wb25lbnQgdGFrZXMgb25lIHByb3A6IGBidW5kbGVzYC4gIEl0IHNob3VsZFxuICogYmUgYW4gaXRlcmFibGUgb2YgYEZsdWVudEJ1bmRsZWAgaW5zdGFuY2VzIGluIG9yZGVyIG9mIHRoZSB1c2VyJ3NcbiAqIHByZWZlcnJlZCBsYW5ndWFnZXMuICBUaGUgYEZsdWVudEJ1bmRsZWAgaW5zdGFuY2VzIHdpbGwgYmUgdXNlZCBieVxuICogYFJlYWN0TG9jYWxpemF0aW9uYCB0byBmb3JtYXQgdHJhbnNsYXRpb25zLiAgSWYgYSB0cmFuc2xhdGlvbiBpcyBtaXNzaW5nIGluXG4gKiBvbmUgaW5zdGFuY2UsIGBSZWFjdExvY2FsaXphdGlvbmAgd2lsbCBmYWxsIGJhY2sgdG8gdGhlIG5leHQgb25lLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMb2NhbGl6YXRpb25Qcm92aWRlciBleHRlbmRzIENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIGNvbnN0IHtidW5kbGVzLCBwYXJzZU1hcmt1cH0gPSBwcm9wcztcblxuICAgIGlmIChidW5kbGVzID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkxvY2FsaXphdGlvblByb3ZpZGVyIG11c3QgcmVjZWl2ZSB0aGUgYnVuZGxlcyBwcm9wLlwiKTtcbiAgICB9XG5cbiAgICBpZiAoIWJ1bmRsZXNbU3ltYm9sLml0ZXJhdG9yXSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIGJ1bmRsZXMgcHJvcCBtdXN0IGJlIGFuIGl0ZXJhYmxlLlwiKTtcbiAgICB9XG5cbiAgICB0aGlzLmwxMG4gPSBuZXcgUmVhY3RMb2NhbGl6YXRpb24oYnVuZGxlcyk7XG4gICAgdGhpcy5wYXJzZU1hcmt1cCA9IHBhcnNlTWFya3VwIHx8IGNyZWF0ZVBhcnNlTWFya3VwKCk7XG4gIH1cblxuICBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGwxMG46IHRoaXMubDEwbixcbiAgICAgIHBhcnNlTWFya3VwOiB0aGlzLnBhcnNlTWFya3VwLFxuICAgIH07XG4gIH1cblxuICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHQpIHtcbiAgICBjb25zdCB7IGJ1bmRsZXMgfSA9IG5leHQ7XG5cbiAgICBpZiAoYnVuZGxlcyAhPT0gdGhpcy5wcm9wcy5idW5kbGVzKSB7XG4gICAgICB0aGlzLmwxMG4uc2V0QnVuZGxlcyhidW5kbGVzKTtcbiAgICB9XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIENoaWxkcmVuLm9ubHkodGhpcy5wcm9wcy5jaGlsZHJlbik7XG4gIH1cbn1cblxuTG9jYWxpemF0aW9uUHJvdmlkZXIuY2hpbGRDb250ZXh0VHlwZXMgPSB7XG4gIGwxMG46IGlzUmVhY3RMb2NhbGl6YXRpb24sXG4gIHBhcnNlTWFya3VwOiBQcm9wVHlwZXMuZnVuYyxcbn07XG5cbkxvY2FsaXphdGlvblByb3ZpZGVyLnByb3BUeXBlcyA9IHtcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5lbGVtZW50LmlzUmVxdWlyZWQsXG4gIGJ1bmRsZXM6IGlzSXRlcmFibGUsXG4gIHBhcnNlTWFya3VwOiBQcm9wVHlwZXMuZnVuYyxcbn07XG5cbmZ1bmN0aW9uIGlzSXRlcmFibGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lKSB7XG4gIGNvbnN0IHByb3AgPSBwcm9wc1twcm9wTmFtZV07XG5cbiAgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QocHJvcCkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBuZXcgRXJyb3IoXG4gICAgYFRoZSAke3Byb3BOYW1lfSBwcm9wIHN1cHBsaWVkIHRvICR7Y29tcG9uZW50TmFtZX0gbXVzdCBiZSBhbiBpdGVyYWJsZS5gXG4gICk7XG59XG4iLCJpbXBvcnQgeyBjcmVhdGVFbGVtZW50LCBDb21wb25lbnQgfSBmcm9tIFwicmVhY3RcIjtcblxuaW1wb3J0IHsgaXNSZWFjdExvY2FsaXphdGlvbiB9IGZyb20gXCIuL2xvY2FsaXphdGlvblwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB3aXRoTG9jYWxpemF0aW9uKElubmVyKSB7XG4gIGNsYXNzIFdpdGhMb2NhbGl6YXRpb24gZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgY29uc3QgeyBsMTBuIH0gPSB0aGlzLmNvbnRleHQ7XG5cbiAgICAgIGlmIChsMTBuKSB7XG4gICAgICAgIGwxMG4uc3Vic2NyaWJlKHRoaXMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgY29uc3QgeyBsMTBuIH0gPSB0aGlzLmNvbnRleHQ7XG5cbiAgICAgIGlmIChsMTBuKSB7XG4gICAgICAgIGwxMG4udW5zdWJzY3JpYmUodGhpcyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLypcbiAgICAgKiBSZXJlbmRlciB0aGlzIGNvbXBvbmVudCBpbiBhIG5ldyBsYW5ndWFnZS5cbiAgICAgKi9cbiAgICByZWxvY2FsaXplKCkge1xuICAgICAgLy8gV2hlbiB0aGUgYFJlYWN0TG9jYWxpemF0aW9uYCdzIGZhbGxiYWNrIGNoYWluIGNoYW5nZXMsIHVwZGF0ZSB0aGVcbiAgICAgIC8vIGNvbXBvbmVudC5cbiAgICAgIHRoaXMuZm9yY2VVcGRhdGUoKTtcbiAgICB9XG5cbiAgICAvKlxuICAgICAqIEZpbmQgYSB0cmFuc2xhdGlvbiBieSBgaWRgIGFuZCBmb3JtYXQgaXQgdG8gYSBzdHJpbmcgdXNpbmcgYGFyZ3NgLlxuICAgICAqL1xuICAgIGdldFN0cmluZyhpZCwgYXJncywgZmFsbGJhY2spIHtcbiAgICAgIGNvbnN0IHsgbDEwbiB9ID0gdGhpcy5jb250ZXh0O1xuXG4gICAgICBpZiAoIWwxMG4pIHtcbiAgICAgICAgcmV0dXJuIGZhbGxiYWNrIHx8IGlkO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbDEwbi5nZXRTdHJpbmcoaWQsIGFyZ3MsIGZhbGxiYWNrKTtcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gY3JlYXRlRWxlbWVudChcbiAgICAgICAgSW5uZXIsXG4gICAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgLy8gZ2V0U3RyaW5nIG5lZWRzIHRvIGJlIHJlLWJvdW5kIG9uIHVwZGF0ZXMgdG8gdHJpZ2dlciBhIHJlLXJlbmRlclxuICAgICAgICAgIHsgZ2V0U3RyaW5nOiAoLi4uYXJncykgPT4gdGhpcy5nZXRTdHJpbmcoLi4uYXJncykgfSxcbiAgICAgICAgICB0aGlzLnByb3BzXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgV2l0aExvY2FsaXphdGlvbi5kaXNwbGF5TmFtZSA9IGBXaXRoTG9jYWxpemF0aW9uKCR7ZGlzcGxheU5hbWUoSW5uZXIpfSlgO1xuXG4gIFdpdGhMb2NhbGl6YXRpb24uY29udGV4dFR5cGVzID0ge1xuICAgIGwxMG46IGlzUmVhY3RMb2NhbGl6YXRpb25cbiAgfTtcblxuICByZXR1cm4gV2l0aExvY2FsaXphdGlvbjtcbn1cblxuZnVuY3Rpb24gZGlzcGxheU5hbWUoY29tcG9uZW50KSB7XG4gIHJldHVybiBjb21wb25lbnQuZGlzcGxheU5hbWUgfHwgY29tcG9uZW50Lm5hbWUgfHwgXCJDb21wb25lbnRcIjtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhpcyBkaXJlY3RvcnkuXG4gKi9cblxuLy8gRm9yIEhUTUwsIGNlcnRhaW4gdGFncyBzaG91bGQgb21pdCB0aGVpciBjbG9zZSB0YWcuIFdlIGtlZXAgYSB3aGl0ZWxpc3QgZm9yXG4vLyB0aG9zZSBzcGVjaWFsLWNhc2UgdGFncy5cblxudmFyIG9taXR0ZWRDbG9zZVRhZ3MgPSB7XG4gIGFyZWE6IHRydWUsXG4gIGJhc2U6IHRydWUsXG4gIGJyOiB0cnVlLFxuICBjb2w6IHRydWUsXG4gIGVtYmVkOiB0cnVlLFxuICBocjogdHJ1ZSxcbiAgaW1nOiB0cnVlLFxuICBpbnB1dDogdHJ1ZSxcbiAga2V5Z2VuOiB0cnVlLFxuICBsaW5rOiB0cnVlLFxuICBtZXRhOiB0cnVlLFxuICBwYXJhbTogdHJ1ZSxcbiAgc291cmNlOiB0cnVlLFxuICB0cmFjazogdHJ1ZSxcbiAgd2JyOiB0cnVlLFxuICAvLyBOT1RFOiBtZW51aXRlbSdzIGNsb3NlIHRhZyBzaG91bGQgYmUgb21pdHRlZCwgYnV0IHRoYXQgY2F1c2VzIHByb2JsZW1zLlxufTtcblxuZXhwb3J0IGRlZmF1bHQgb21pdHRlZENsb3NlVGFncztcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhpcyBkaXJlY3RvcnkuXG4gKi9cblxuaW1wb3J0IG9taXR0ZWRDbG9zZVRhZ3MgZnJvbSAnLi9vbWl0dGVkQ2xvc2VUYWdzJztcblxuLy8gRm9yIEhUTUwsIGNlcnRhaW4gdGFncyBjYW5ub3QgaGF2ZSBjaGlsZHJlbi4gVGhpcyBoYXMgdGhlIHNhbWUgcHVycG9zZSBhc1xuLy8gYG9taXR0ZWRDbG9zZVRhZ3NgIGV4Y2VwdCB0aGF0IGBtZW51aXRlbWAgc2hvdWxkIHN0aWxsIGhhdmUgaXRzIGNsb3NpbmcgdGFnLlxuXG52YXIgdm9pZEVsZW1lbnRUYWdzID0ge1xuICBtZW51aXRlbTogdHJ1ZSxcbiAgLi4ub21pdHRlZENsb3NlVGFncyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHZvaWRFbGVtZW50VGFncztcbiIsImltcG9ydCB7IGlzVmFsaWRFbGVtZW50LCBjbG9uZUVsZW1lbnQsIENvbXBvbmVudCB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IHsgaXNSZWFjdExvY2FsaXphdGlvbiB9IGZyb20gXCIuL2xvY2FsaXphdGlvblwiO1xuaW1wb3J0IFZPSURfRUxFTUVOVFMgZnJvbSBcIi4uL3ZlbmRvci92b2lkRWxlbWVudFRhZ3NcIjtcblxuLy8gTWF0Y2ggdGhlIG9wZW5pbmcgYW5nbGUgYnJhY2tldCAoPCkgaW4gSFRNTCB0YWdzLCBhbmQgSFRNTCBlbnRpdGllcyBsaWtlXG4vLyAmYW1wOywgJiMwMDM4OywgJiN4MDAyNjsuXG5jb25zdCByZU1hcmt1cCA9IC88fCYjP1xcdys7LztcblxuLypcbiAqIFByZXBhcmUgcHJvcHMgcGFzc2VkIHRvIGBMb2NhbGl6ZWRgIGZvciBmb3JtYXR0aW5nLlxuICovXG5mdW5jdGlvbiB0b0FyZ3VtZW50cyhwcm9wcykge1xuICBjb25zdCBhcmdzID0ge307XG4gIGNvbnN0IGVsZW1zID0ge307XG5cbiAgZm9yIChjb25zdCBbcHJvcG5hbWUsIHByb3B2YWxdIG9mIE9iamVjdC5lbnRyaWVzKHByb3BzKSkge1xuICAgIGlmIChwcm9wbmFtZS5zdGFydHNXaXRoKFwiJFwiKSkge1xuICAgICAgY29uc3QgbmFtZSA9IHByb3BuYW1lLnN1YnN0cigxKTtcbiAgICAgIGFyZ3NbbmFtZV0gPSBwcm9wdmFsO1xuICAgIH0gZWxzZSBpZiAoaXNWYWxpZEVsZW1lbnQocHJvcHZhbCkpIHtcbiAgICAgIC8vIFdlJ2xsIHRyeSB0byBtYXRjaCBsb2NhbE5hbWVzIG9mIGVsZW1lbnRzIGZvdW5kIGluIHRoZSB0cmFuc2xhdGlvbiB3aXRoXG4gICAgICAvLyBuYW1lcyBvZiBlbGVtZW50cyBwYXNzZWQgYXMgcHJvcHMuIGxvY2FsTmFtZXMgYXJlIGFsd2F5cyBsb3dlcmNhc2UuXG4gICAgICBjb25zdCBuYW1lID0gcHJvcG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgIGVsZW1zW25hbWVdID0gcHJvcHZhbDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gW2FyZ3MsIGVsZW1zXTtcbn1cblxuLypcbiAqIFRoZSBgTG9jYWxpemVkYCBjbGFzcyByZW5kZXJzIGl0cyBjaGlsZCB3aXRoIHRyYW5zbGF0ZWQgcHJvcHMgYW5kIGNoaWxkcmVuLlxuICpcbiAqICAgICA8TG9jYWxpemVkIGlkPVwiaGVsbG8td29ybGRcIj5cbiAqICAgICAgICAgPHA+eydIZWxsbywgd29ybGQhJ308L3A+XG4gKiAgICAgPC9Mb2NhbGl6ZWQ+XG4gKlxuICogVGhlIGBpZGAgcHJvcCBzaG91bGQgYmUgdGhlIHVuaXF1ZSBpZGVudGlmaWVyIG9mIHRoZSB0cmFuc2xhdGlvbi4gIEFueVxuICogYXR0cmlidXRlcyBmb3VuZCBpbiB0aGUgdHJhbnNsYXRpb24gd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSB3cmFwcGVkIGVsZW1lbnQuXG4gKlxuICogQXJndW1lbnRzIHRvIHRoZSB0cmFuc2xhdGlvbiBjYW4gYmUgcGFzc2VkIGFzIGAkYC1wcmVmaXhlZCBwcm9wcyBvblxuICogYExvY2FsaXplZGAuXG4gKlxuICogICAgIDxMb2NhbGl6ZWQgaWQ9XCJoZWxsby13b3JsZFwiICR1c2VybmFtZT17bmFtZX0+XG4gKiAgICAgICAgIDxwPnsnSGVsbG8sIHsgJHVzZXJuYW1lIH0hJ308L3A+XG4gKiAgICAgPC9Mb2NhbGl6ZWQ+XG4gKlxuICogIEl0J3MgcmVjb21tZW5kZWQgdGhhdCB0aGUgY29udGVudHMgb2YgdGhlIHdyYXBwZWQgY29tcG9uZW50IGJlIGEgc3RyaW5nXG4gKiAgZXhwcmVzc2lvbi4gIFRoZSBzdHJpbmcgd2lsbCBiZSB1c2VkIGFzIHRoZSB1bHRpbWF0ZSBmYWxsYmFjayBpZiBub1xuICogIHRyYW5zbGF0aW9uIGlzIGF2YWlsYWJsZS4gIEl0IGFsc28gbWFrZXMgaXQgZWFzeSB0byBncmVwIGZvciBzdHJpbmdzIGluIHRoZVxuICogIHNvdXJjZSBjb2RlLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMb2NhbGl6ZWQgZXh0ZW5kcyBDb21wb25lbnQge1xuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBjb25zdCB7IGwxMG4gfSA9IHRoaXMuY29udGV4dDtcblxuICAgIGlmIChsMTBuKSB7XG4gICAgICBsMTBuLnN1YnNjcmliZSh0aGlzKTtcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBjb25zdCB7IGwxMG4gfSA9IHRoaXMuY29udGV4dDtcblxuICAgIGlmIChsMTBuKSB7XG4gICAgICBsMTBuLnVuc3Vic2NyaWJlKHRoaXMpO1xuICAgIH1cbiAgfVxuXG4gIC8qXG4gICAqIFJlcmVuZGVyIHRoaXMgY29tcG9uZW50IGluIGEgbmV3IGxhbmd1YWdlLlxuICAgKi9cbiAgcmVsb2NhbGl6ZSgpIHtcbiAgICAvLyBXaGVuIHRoZSBgUmVhY3RMb2NhbGl6YXRpb25gJ3MgZmFsbGJhY2sgY2hhaW4gY2hhbmdlcywgdXBkYXRlIHRoZVxuICAgIC8vIGNvbXBvbmVudC5cbiAgICB0aGlzLmZvcmNlVXBkYXRlKCk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBsMTBuLCBwYXJzZU1hcmt1cCB9ID0gdGhpcy5jb250ZXh0O1xuICAgIGNvbnN0IHsgaWQsIGF0dHJzLCBjaGlsZHJlbjogZWxlbSB9ID0gdGhpcy5wcm9wcztcblxuICAgIC8vIFZhbGlkYXRlIHRoYXQgdGhlIGNoaWxkIGVsZW1lbnQgaXNuJ3QgYW4gYXJyYXlcbiAgICBpZiAoQXJyYXkuaXNBcnJheShlbGVtKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiPExvY2FsaXplZC8+IGV4cGVjdGVkIHRvIHJlY2VpdmUgYSBzaW5nbGUgXCIgK1xuICAgICAgICBcIlJlYWN0IG5vZGUgY2hpbGRcIik7XG4gICAgfVxuXG4gICAgaWYgKCFsMTBuKSB7XG4gICAgICAvLyBVc2UgdGhlIHdyYXBwZWQgY29tcG9uZW50IGFzIGZhbGxiYWNrLlxuICAgICAgcmV0dXJuIGVsZW07XG4gICAgfVxuXG4gICAgY29uc3QgYnVuZGxlID0gbDEwbi5nZXRCdW5kbGUoaWQpO1xuXG4gICAgaWYgKGJ1bmRsZSA9PT0gbnVsbCkge1xuICAgICAgLy8gVXNlIHRoZSB3cmFwcGVkIGNvbXBvbmVudCBhcyBmYWxsYmFjay5cbiAgICAgIHJldHVybiBlbGVtO1xuICAgIH1cblxuICAgIGNvbnN0IG1zZyA9IGJ1bmRsZS5nZXRNZXNzYWdlKGlkKTtcbiAgICBjb25zdCBbYXJncywgZWxlbXNdID0gdG9Bcmd1bWVudHModGhpcy5wcm9wcyk7XG4gICAgY29uc3QgbWVzc2FnZVZhbHVlID0gYnVuZGxlLmZvcm1hdChtc2csIGFyZ3MpO1xuXG4gICAgLy8gQ2hlY2sgaWYgdGhlIGZhbGxiYWNrIGlzIGEgdmFsaWQgZWxlbWVudCAtLSBpZiBub3QgdGhlbiBpdCdzIG5vdFxuICAgIC8vIG1hcmt1cCAoZS5nLiBub3RoaW5nIG9yIGEgZmFsbGJhY2sgc3RyaW5nKSBzbyBqdXN0IHVzZSB0aGVcbiAgICAvLyBmb3JtYXR0ZWQgbWVzc2FnZSB2YWx1ZVxuICAgIGlmICghaXNWYWxpZEVsZW1lbnQoZWxlbSkpIHtcbiAgICAgIHJldHVybiBtZXNzYWdlVmFsdWU7XG4gICAgfVxuXG4gICAgLy8gVGhlIGRlZmF1bHQgaXMgdG8gZm9yYmlkIGFsbCBtZXNzYWdlIGF0dHJpYnV0ZXMuIElmIHRoZSBhdHRycyBwcm9wIGV4aXN0c1xuICAgIC8vIG9uIHRoZSBMb2NhbGl6ZWQgaW5zdGFuY2UsIG9ubHkgc2V0IG1lc3NhZ2UgYXR0cmlidXRlcyB3aGljaCBoYXZlIGJlZW5cbiAgICAvLyBleHBsaWNpdGx5IGFsbG93ZWQgYnkgdGhlIGRldmVsb3Blci5cbiAgICBpZiAoYXR0cnMgJiYgbXNnLmF0dHJzKSB7XG4gICAgICB2YXIgbG9jYWxpemVkUHJvcHMgPSB7fTtcbiAgICAgIGZvciAoY29uc3QgW25hbWUsIGFsbG93ZWRdIG9mIE9iamVjdC5lbnRyaWVzKGF0dHJzKSkge1xuICAgICAgICBpZiAoYWxsb3dlZCAmJiBtc2cuYXR0cnMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgICBsb2NhbGl6ZWRQcm9wc1tuYW1lXSA9IGJ1bmRsZS5mb3JtYXQobXNnLmF0dHJzW25hbWVdLCBhcmdzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIElmIHRoZSB3cmFwcGVkIGNvbXBvbmVudCBpcyBhIGtub3duIHZvaWQgZWxlbWVudCwgZXhwbGljaXRseSBkaXNtaXNzIHRoZVxuICAgIC8vIG1lc3NhZ2UgdmFsdWUgYW5kIGRvIG5vdCBwYXNzIGl0IHRvIGNsb25lRWxlbWVudCBpbiBvcmRlciB0byBhdm9pZCB0aGVcbiAgICAvLyBcInZvaWQgZWxlbWVudCB0YWdzIG11c3QgbmVpdGhlciBoYXZlIGBjaGlsZHJlbmAgbm9yIHVzZVxuICAgIC8vIGBkYW5nZXJvdXNseVNldElubmVySFRNTGBcIiBlcnJvci5cbiAgICBpZiAoZWxlbS50eXBlIGluIFZPSURfRUxFTUVOVFMpIHtcbiAgICAgIHJldHVybiBjbG9uZUVsZW1lbnQoZWxlbSwgbG9jYWxpemVkUHJvcHMpO1xuICAgIH1cblxuICAgIC8vIElmIHRoZSBtZXNzYWdlIGhhcyBhIG51bGwgdmFsdWUsIHdlJ3JlIG9ubHkgaW50ZXJlc3RlZCBpbiBpdHMgYXR0cmlidXRlcy5cbiAgICAvLyBEbyBub3QgcGFzcyB0aGUgbnVsbCB2YWx1ZSB0byBjbG9uZUVsZW1lbnQgYXMgaXQgd291bGQgbnVrZSBhbGwgY2hpbGRyZW5cbiAgICAvLyBvZiB0aGUgd3JhcHBlZCBjb21wb25lbnQuXG4gICAgaWYgKG1lc3NhZ2VWYWx1ZSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGNsb25lRWxlbWVudChlbGVtLCBsb2NhbGl6ZWRQcm9wcyk7XG4gICAgfVxuXG4gICAgLy8gSWYgdGhlIG1lc3NhZ2UgdmFsdWUgZG9lc24ndCBjb250YWluIGFueSBtYXJrdXAgbm9yIGFueSBIVE1MIGVudGl0aWVzLFxuICAgIC8vIGluc2VydCBpdCBhcyB0aGUgb25seSBjaGlsZCBvZiB0aGUgd3JhcHBlZCBjb21wb25lbnQuXG4gICAgaWYgKCFyZU1hcmt1cC50ZXN0KG1lc3NhZ2VWYWx1ZSkpIHtcbiAgICAgIHJldHVybiBjbG9uZUVsZW1lbnQoZWxlbSwgbG9jYWxpemVkUHJvcHMsIG1lc3NhZ2VWYWx1ZSk7XG4gICAgfVxuXG4gICAgLy8gSWYgdGhlIG1lc3NhZ2UgY29udGFpbnMgbWFya3VwLCBwYXJzZSBpdCBhbmQgdHJ5IHRvIG1hdGNoIHRoZSBjaGlsZHJlblxuICAgIC8vIGZvdW5kIGluIHRoZSB0cmFuc2xhdGlvbiB3aXRoIHRoZSBwcm9wcyBwYXNzZWQgdG8gdGhpcyBMb2NhbGl6ZWQuXG4gICAgY29uc3QgdHJhbnNsYXRpb25Ob2RlcyA9IHBhcnNlTWFya3VwKG1lc3NhZ2VWYWx1ZSk7XG4gICAgY29uc3QgdHJhbnNsYXRlZENoaWxkcmVuID0gdHJhbnNsYXRpb25Ob2Rlcy5tYXAoY2hpbGROb2RlID0+IHtcbiAgICAgIGlmIChjaGlsZE5vZGUubm9kZVR5cGUgPT09IGNoaWxkTm9kZS5URVhUX05PREUpIHtcbiAgICAgICAgcmV0dXJuIGNoaWxkTm9kZS50ZXh0Q29udGVudDtcbiAgICAgIH1cblxuICAgICAgLy8gSWYgdGhlIGNoaWxkIGlzIG5vdCBleHBlY3RlZCBqdXN0IHRha2UgaXRzIHRleHRDb250ZW50LlxuICAgICAgaWYgKCFlbGVtcy5oYXNPd25Qcm9wZXJ0eShjaGlsZE5vZGUubG9jYWxOYW1lKSkge1xuICAgICAgICByZXR1cm4gY2hpbGROb2RlLnRleHRDb250ZW50O1xuICAgICAgfVxuXG4gICAgICBjb25zdCBzb3VyY2VDaGlsZCA9IGVsZW1zW2NoaWxkTm9kZS5sb2NhbE5hbWVdO1xuXG4gICAgICAvLyBJZiB0aGUgZWxlbWVudCBwYXNzZWQgYXMgYSBwcm9wIHRvIDxMb2NhbGl6ZWQ+IGlzIGEga25vd24gdm9pZCBlbGVtZW50LFxuICAgICAgLy8gZXhwbGljaXRseSBkaXNtaXNzIGFueSB0ZXh0Q29udGVudCB3aGljaCBtaWdodCBoYXZlIGFjY2lkZW50YWxseSBiZWVuXG4gICAgICAvLyBkZWZpbmVkIGluIHRoZSB0cmFuc2xhdGlvbiB0byBwcmV2ZW50IHRoZSBcInZvaWQgZWxlbWVudCB0YWdzIG11c3Qgbm90XG4gICAgICAvLyBoYXZlIGNoaWxkcmVuXCIgZXJyb3IuXG4gICAgICBpZiAoc291cmNlQ2hpbGQudHlwZSBpbiBWT0lEX0VMRU1FTlRTKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2VDaGlsZDtcbiAgICAgIH1cblxuICAgICAgLy8gVE9ETyBQcm90ZWN0IGNvbnRlbnRzIG9mIGVsZW1lbnRzIHdyYXBwZWQgaW4gPExvY2FsaXplZD5cbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9wcm9qZWN0Zmx1ZW50L2ZsdWVudC5qcy9pc3N1ZXMvMTg0XG4gICAgICAvLyBUT0RPICBDb250cm9sIGxvY2FsaXphYmxlIGF0dHJpYnV0ZXMgb24gZWxlbWVudHMgcGFzc2VkIGFzIHByb3BzXG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vcHJvamVjdGZsdWVudC9mbHVlbnQuanMvaXNzdWVzLzE4NVxuICAgICAgcmV0dXJuIGNsb25lRWxlbWVudChzb3VyY2VDaGlsZCwgbnVsbCwgY2hpbGROb2RlLnRleHRDb250ZW50KTtcbiAgICB9KTtcblxuICAgIHJldHVybiBjbG9uZUVsZW1lbnQoZWxlbSwgbG9jYWxpemVkUHJvcHMsIC4uLnRyYW5zbGF0ZWRDaGlsZHJlbik7XG4gIH1cbn1cblxuTG9jYWxpemVkLmNvbnRleHRUeXBlcyA9IHtcbiAgbDEwbjogaXNSZWFjdExvY2FsaXphdGlvbixcbiAgcGFyc2VNYXJrdXA6IFByb3BUeXBlcy5mdW5jLFxufTtcblxuTG9jYWxpemVkLnByb3BUeXBlcyA9IHtcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlXG59O1xuIiwiLypcbiAqIEBtb2R1bGUgZmx1ZW50LXJlYWN0XG4gKiBAb3ZlcnZpZXdcbiAqXG5cbiAqIGBmbHVlbnQtcmVhY3RgIHByb3ZpZGVzIFJlYWN0IGJpbmRpbmdzIGZvciBGbHVlbnQuICBJdCB0YWtlcyBhZHZhbnRhZ2Ugb2ZcbiAqIFJlYWN0J3MgQ29tcG9uZW50cyBzeXN0ZW0gYW5kIHRoZSB2aXJ0dWFsIERPTS4gIFRyYW5zbGF0aW9ucyBhcmUgZXhwb3NlZCB0b1xuICogY29tcG9uZW50cyB2aWEgdGhlIHByb3ZpZGVyIHBhdHRlcm4uXG4gKlxuICogICAgIDxMb2NhbGl6YXRpb25Qcm92aWRlciBidW5kbGVzPXvigKZ9PlxuICogICAgICAgICA8TG9jYWxpemVkIGlkPVwiaGVsbG8td29ybGRcIj5cbiAqICAgICAgICAgICAgIDxwPnsnSGVsbG8sIHdvcmxkISd9PC9wPlxuICogICAgICAgICA8L0xvY2FsaXplZD5cbiAqICAgICA8L0xvY2FsaXphdGlvblByb3ZpZGVyPlxuICpcbiAqIENvbnN1bHQgdGhlIGRvY3VtZW50YXRpb24gb2YgdGhlIGBMb2NhbGl6YXRpb25Qcm92aWRlcmAgYW5kIHRoZSBgTG9jYWxpemVkYFxuICogY29tcG9uZW50cyBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAqL1xuXG5leHBvcnQgeyBkZWZhdWx0IGFzIExvY2FsaXphdGlvblByb3ZpZGVyIH0gZnJvbSBcIi4vcHJvdmlkZXJcIjtcbmV4cG9ydCB7IGRlZmF1bHQgYXMgd2l0aExvY2FsaXphdGlvbiB9IGZyb20gXCIuL3dpdGhfbG9jYWxpemF0aW9uXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIExvY2FsaXplZCB9IGZyb20gXCIuL2xvY2FsaXplZFwiO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBSZWFjdExvY2FsaXphdGlvbiwgaXNSZWFjdExvY2FsaXphdGlvbiB9XG4gIGZyb20gXCIuL2xvY2FsaXphdGlvblwiO1xuIiwiLyogVGhpcyBTb3VyY2UgQ29kZSBGb3JtIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBNb3ppbGxhIFB1YmxpY1xuICogTGljZW5zZSwgdi4gMi4wLiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBmaWxlLFxuICogWW91IGNhbiBvYnRhaW4gb25lIGF0IGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy4gKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuXG5jb25zdCBBTExPV0VEX1NUWUxFX1RBR1MgPSBbXCJjb2xvclwiLCBcImJhY2tncm91bmRDb2xvclwiXTtcblxuZXhwb3J0IGNvbnN0IEJ1dHRvbiA9IHByb3BzID0+IHtcbiAgY29uc3Qgc3R5bGUgPSB7fTtcblxuICAvLyBBZGQgYWxsb3dlZCBzdHlsZSB0YWdzIGZyb20gcHJvcHMsIGUuZy4gcHJvcHMuY29sb3IgYmVjb21lcyBzdHlsZT17Y29sb3I6IHByb3BzLmNvbG9yfVxuICBmb3IgKGNvbnN0IHRhZyBvZiBBTExPV0VEX1NUWUxFX1RBR1MpIHtcbiAgICBpZiAodHlwZW9mIHByb3BzW3RhZ10gIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHN0eWxlW3RhZ10gPSBwcm9wc1t0YWddO1xuICAgIH1cbiAgfVxuICAvLyByZW1vdmUgYm9yZGVyIGlmIGJnIGlzIHNldCB0byBzb21ldGhpbmcgY3VzdG9tXG4gIGlmIChzdHlsZS5iYWNrZ3JvdW5kQ29sb3IpIHtcbiAgICBzdHlsZS5ib3JkZXIgPSBcIjBcIjtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPGJ1dHRvblxuICAgICAgb25DbGljaz17cHJvcHMub25DbGlja31cbiAgICAgIGNsYXNzTmFtZT17cHJvcHMuY2xhc3NOYW1lIHx8IFwiQVNSb3V0ZXJCdXR0b24gc2Vjb25kYXJ5XCJ9XG4gICAgICBzdHlsZT17c3R5bGV9XG4gICAgPlxuICAgICAge3Byb3BzLmNoaWxkcmVufVxuICAgIDwvYnV0dG9uPlxuICApO1xufTtcbiIsIi8qIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXMgZmlsZSxcbiAqIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uICovXG5cbi8vIGxpZnRlZCBmcm9tIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL2tpdHplLzIzZDgyYmI5ZWIwYmFhYmZkMDNhNmE3MjBiMWQ2MzdmXG5leHBvcnQgY29uc3QgQ29uZGl0aW9uYWxXcmFwcGVyID0gKHsgY29uZGl0aW9uLCB3cmFwLCBjaGlsZHJlbiB9KSA9PlxuICBjb25kaXRpb24gPyB3cmFwKGNoaWxkcmVuKSA6IGNoaWxkcmVuO1xuIiwiLyogVGhpcyBTb3VyY2UgQ29kZSBGb3JtIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBNb3ppbGxhIFB1YmxpY1xuICogTGljZW5zZSwgdi4gMi4wLiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBmaWxlLFxuICogWW91IGNhbiBvYnRhaW4gb25lIGF0IGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy4gKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHNjaGVtYSBmcm9tIFwiLi4vLi4vdGVtcGxhdGVzL1NpbXBsZVNuaXBwZXQvU2ltcGxlU25pcHBldC5zY2hlbWEuanNvblwiO1xuXG5leHBvcnQgY2xhc3MgU25pcHBldEJhc2UgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5vbkJsb2NrQ2xpY2tlZCA9IHRoaXMub25CbG9ja0NsaWNrZWQuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uRGlzbWlzc0NsaWNrZWQgPSB0aGlzLm9uRGlzbWlzc0NsaWNrZWQuYmluZCh0aGlzKTtcbiAgICB0aGlzLnNldEJsb2NrQnV0dG9uUmVmID0gdGhpcy5zZXRCbG9ja0J1dHRvblJlZi5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25CbG9ja0J1dHRvbk1vdXNlRW50ZXIgPSB0aGlzLm9uQmxvY2tCdXR0b25Nb3VzZUVudGVyLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbkJsb2NrQnV0dG9uTW91c2VMZWF2ZSA9IHRoaXMub25CbG9ja0J1dHRvbk1vdXNlTGVhdmUuYmluZCh0aGlzKTtcbiAgICB0aGlzLnN0YXRlID0geyBibG9ja0J1dHRvbkhvdmVyOiBmYWxzZSB9O1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgaWYgKHRoaXMuYmxvY2tCdXR0b25SZWYpIHtcbiAgICAgIHRoaXMuYmxvY2tCdXR0b25SZWYuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgXCJtb3VzZWVudGVyXCIsXG4gICAgICAgIHRoaXMub25CbG9ja0J1dHRvbk1vdXNlRW50ZXJcbiAgICAgICk7XG4gICAgICB0aGlzLmJsb2NrQnV0dG9uUmVmLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAgIFwibW91c2VsZWF2ZVwiLFxuICAgICAgICB0aGlzLm9uQmxvY2tCdXR0b25Nb3VzZUxlYXZlXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIGlmICh0aGlzLmJsb2NrQnV0dG9uUmVmKSB7XG4gICAgICB0aGlzLmJsb2NrQnV0dG9uUmVmLnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgICAgIFwibW91c2VlbnRlclwiLFxuICAgICAgICB0aGlzLm9uQmxvY2tCdXR0b25Nb3VzZUVudGVyXG4gICAgICApO1xuICAgICAgdGhpcy5ibG9ja0J1dHRvblJlZi5yZW1vdmVFdmVudExpc3RlbmVyKFxuICAgICAgICBcIm1vdXNlbGVhdmVcIixcbiAgICAgICAgdGhpcy5vbkJsb2NrQnV0dG9uTW91c2VMZWF2ZVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBzZXRCbG9ja0J1dHRvblJlZihlbGVtZW50KSB7XG4gICAgdGhpcy5ibG9ja0J1dHRvblJlZiA9IGVsZW1lbnQ7XG4gIH1cblxuICBvbkJsb2NrQnV0dG9uTW91c2VFbnRlcigpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgYmxvY2tCdXR0b25Ib3ZlcjogdHJ1ZSB9KTtcbiAgfVxuXG4gIG9uQmxvY2tCdXR0b25Nb3VzZUxlYXZlKCkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBibG9ja0J1dHRvbkhvdmVyOiBmYWxzZSB9KTtcbiAgfVxuXG4gIG9uQmxvY2tDbGlja2VkKCkge1xuICAgIGlmICh0aGlzLnByb3BzLnByb3ZpZGVyICE9PSBcInByZXZpZXdcIikge1xuICAgICAgdGhpcy5wcm9wcy5zZW5kVXNlckFjdGlvblRlbGVtZXRyeSh7XG4gICAgICAgIGV2ZW50OiBcIkJMT0NLXCIsXG4gICAgICAgIGlkOiB0aGlzLnByb3BzLlVJU3VyZmFjZSxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHRoaXMucHJvcHMub25CbG9jaygpO1xuICB9XG5cbiAgb25EaXNtaXNzQ2xpY2tlZCgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5wcm92aWRlciAhPT0gXCJwcmV2aWV3XCIpIHtcbiAgICAgIHRoaXMucHJvcHMuc2VuZFVzZXJBY3Rpb25UZWxlbWV0cnkoe1xuICAgICAgICBldmVudDogXCJESVNNSVNTXCIsXG4gICAgICAgIGlkOiB0aGlzLnByb3BzLlVJU3VyZmFjZSxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHRoaXMucHJvcHMub25EaXNtaXNzKCk7XG4gIH1cblxuICByZW5kZXJEaXNtaXNzQnV0dG9uKCkge1xuICAgIGlmICh0aGlzLnByb3BzLmZvb3RlckRpc21pc3MpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZm9vdGVyXCI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmb290ZXItY29udGVudFwiPlxuICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJBU1JvdXRlckJ1dHRvbiBzZWNvbmRhcnlcIlxuICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLm9uRGlzbWlzc0NsaWNrZWR9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHt0aGlzLnByb3BzLmNvbnRlbnQuc2NlbmUyX2Rpc21pc3NfYnV0dG9uX3RleHR9XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICApO1xuICAgIH1cblxuICAgIGNvbnN0IGxhYmVsID1cbiAgICAgIHRoaXMucHJvcHMuY29udGVudC5ibG9ja19idXR0b25fdGV4dCB8fFxuICAgICAgc2NoZW1hLnByb3BlcnRpZXMuYmxvY2tfYnV0dG9uX3RleHQuZGVmYXVsdDtcbiAgICByZXR1cm4gKFxuICAgICAgPGJ1dHRvblxuICAgICAgICBjbGFzc05hbWU9XCJibG9ja0J1dHRvblwiXG4gICAgICAgIHRpdGxlPXtsYWJlbH1cbiAgICAgICAgYXJpYS1sYWJlbD17bGFiZWx9XG4gICAgICAgIG9uQ2xpY2s9e3RoaXMub25CbG9ja0NsaWNrZWR9XG4gICAgICAgIHJlZj17dGhpcy5zZXRCbG9ja0J1dHRvblJlZn1cbiAgICAgIC8+XG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IHByb3BzIH0gPSB0aGlzO1xuICAgIGNvbnN0IHsgYmxvY2tCdXR0b25Ib3ZlciB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIGNvbnN0IGNvbnRhaW5lckNsYXNzTmFtZSA9IGBTbmlwcGV0QmFzZUNvbnRhaW5lciR7XG4gICAgICBwcm9wcy5jbGFzc05hbWUgPyBgICR7cHJvcHMuY2xhc3NOYW1lfWAgOiBcIlwiXG4gICAgfSR7YmxvY2tCdXR0b25Ib3ZlciA/IFwiIGFjdGl2ZVwiIDogXCJcIn1gO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtjb250YWluZXJDbGFzc05hbWV9IHN0eWxlPXt0aGlzLnByb3BzLnRleHRTdHlsZX0+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5uZXJXcmFwcGVyXCI+e3Byb3BzLmNoaWxkcmVufTwvZGl2PlxuICAgICAgICB7dGhpcy5yZW5kZXJEaXNtaXNzQnV0dG9uKCl9XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG4iLCIvKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIGZpbGUsXG4gKiBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLiAqL1xuXG5pbXBvcnQgeyBCdXR0b24gfSBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy9CdXR0b24vQnV0dG9uXCI7XG5pbXBvcnQgeyBDb25kaXRpb25hbFdyYXBwZXIgfSBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy9Db25kaXRpb25hbFdyYXBwZXIvQ29uZGl0aW9uYWxXcmFwcGVyXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBSaWNoVGV4dCB9IGZyb20gXCIuLi8uLi9jb21wb25lbnRzL1JpY2hUZXh0L1JpY2hUZXh0XCI7XG5pbXBvcnQgeyBzYWZlVVJJIH0gZnJvbSBcIi4uLy4uL3RlbXBsYXRlLXV0aWxzXCI7XG5pbXBvcnQgeyBTbmlwcGV0QmFzZSB9IGZyb20gXCIuLi8uLi9jb21wb25lbnRzL1NuaXBwZXRCYXNlL1NuaXBwZXRCYXNlXCI7XG5cbmNvbnN0IERFRkFVTFRfSUNPTl9QQVRIID0gXCJjaHJvbWU6Ly9icmFuZGluZy9jb250ZW50L2ljb242NC5wbmdcIjtcbi8vIEFsdCB0ZXh0IHBsYWNlaG9sZGVyIGluIGNhc2UgdGhlIHByb3AgZnJvbSB0aGUgc2VydmVyIGlzbid0IGF2YWlsYWJsZVxuY29uc3QgSUNPTl9BTFRfVEVYVCA9IFwiXCI7XG5cbmV4cG9ydCBjbGFzcyBTaW1wbGVTbmlwcGV0IGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMub25CdXR0b25DbGljayA9IHRoaXMub25CdXR0b25DbGljay5iaW5kKHRoaXMpO1xuICB9XG5cbiAgb25CdXR0b25DbGljaygpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5wcm92aWRlciAhPT0gXCJwcmV2aWV3XCIpIHtcbiAgICAgIHRoaXMucHJvcHMuc2VuZFVzZXJBY3Rpb25UZWxlbWV0cnkoe1xuICAgICAgICBldmVudDogXCJDTElDS19CVVRUT05cIixcbiAgICAgICAgaWQ6IHRoaXMucHJvcHMuVUlTdXJmYWNlLFxuICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0IHsgYnV0dG9uX3VybCB9ID0gdGhpcy5wcm9wcy5jb250ZW50O1xuICAgIC8vIElmIGJ1dHRvbl91cmwgaXMgZGVmaW5lZCBoYW5kbGUgaXQgYXMgT1BFTl9VUkwgYWN0aW9uXG4gICAgY29uc3QgdHlwZSA9IHRoaXMucHJvcHMuY29udGVudC5idXR0b25fYWN0aW9uIHx8IChidXR0b25fdXJsICYmIFwiT1BFTl9VUkxcIik7XG4gICAgdGhpcy5wcm9wcy5vbkFjdGlvbih7XG4gICAgICB0eXBlLFxuICAgICAgZGF0YTogeyBhcmdzOiB0aGlzLnByb3BzLmNvbnRlbnQuYnV0dG9uX2FjdGlvbl9hcmdzIHx8IGJ1dHRvbl91cmwgfSxcbiAgICB9KTtcbiAgICBpZiAoIXRoaXMucHJvcHMuY29udGVudC5kb19ub3RfYXV0b2Jsb2NrKSB7XG4gICAgICB0aGlzLnByb3BzLm9uQmxvY2soKTtcbiAgICB9XG4gIH1cblxuICBfc2hvdWxkUmVuZGVyQnV0dG9uKCkge1xuICAgIHJldHVybiAoXG4gICAgICB0aGlzLnByb3BzLmNvbnRlbnQuYnV0dG9uX2FjdGlvbiB8fFxuICAgICAgdGhpcy5wcm9wcy5vbkJ1dHRvbkNsaWNrIHx8XG4gICAgICB0aGlzLnByb3BzLmNvbnRlbnQuYnV0dG9uX3VybFxuICAgICk7XG4gIH1cblxuICByZW5kZXJUaXRsZSgpIHtcbiAgICBjb25zdCB7IHRpdGxlIH0gPSB0aGlzLnByb3BzLmNvbnRlbnQ7XG4gICAgcmV0dXJuIHRpdGxlID8gKFxuICAgICAgPGgzXG4gICAgICAgIGNsYXNzTmFtZT17YHRpdGxlICR7dGhpcy5fc2hvdWxkUmVuZGVyQnV0dG9uKCkgPyBcInRpdGxlLWlubGluZVwiIDogXCJcIn1gfVxuICAgICAgPlxuICAgICAgICB7dGhpcy5yZW5kZXJUaXRsZUljb24oKX0ge3RpdGxlfVxuICAgICAgPC9oMz5cbiAgICApIDogbnVsbDtcbiAgfVxuXG4gIHJlbmRlclRpdGxlSWNvbigpIHtcbiAgICBjb25zdCB0aXRsZUljb25MaWdodCA9IHNhZmVVUkkodGhpcy5wcm9wcy5jb250ZW50LnRpdGxlX2ljb24pO1xuICAgIGNvbnN0IHRpdGxlSWNvbkRhcmsgPSBzYWZlVVJJKFxuICAgICAgdGhpcy5wcm9wcy5jb250ZW50LnRpdGxlX2ljb25fZGFya190aGVtZSB8fCB0aGlzLnByb3BzLmNvbnRlbnQudGl0bGVfaWNvblxuICAgICk7XG4gICAgaWYgKCF0aXRsZUljb25MaWdodCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgICAgPHNwYW5cbiAgICAgICAgICBjbGFzc05hbWU9XCJ0aXRsZUljb24gaWNvbi1saWdodC10aGVtZVwiXG4gICAgICAgICAgc3R5bGU9e3sgYmFja2dyb3VuZEltYWdlOiBgdXJsKFwiJHt0aXRsZUljb25MaWdodH1cIilgIH19XG4gICAgICAgIC8+XG4gICAgICAgIDxzcGFuXG4gICAgICAgICAgY2xhc3NOYW1lPVwidGl0bGVJY29uIGljb24tZGFyay10aGVtZVwiXG4gICAgICAgICAgc3R5bGU9e3sgYmFja2dyb3VuZEltYWdlOiBgdXJsKFwiJHt0aXRsZUljb25EYXJrfVwiKWAgfX1cbiAgICAgICAgLz5cbiAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlckJ1dHRvbigpIHtcbiAgICBjb25zdCB7IHByb3BzIH0gPSB0aGlzO1xuICAgIGlmICghdGhpcy5fc2hvdWxkUmVuZGVyQnV0dG9uKCkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICA8QnV0dG9uXG4gICAgICAgIG9uQ2xpY2s9e3Byb3BzLm9uQnV0dG9uQ2xpY2sgfHwgdGhpcy5vbkJ1dHRvbkNsaWNrfVxuICAgICAgICBjb2xvcj17cHJvcHMuY29udGVudC5idXR0b25fY29sb3J9XG4gICAgICAgIGJhY2tncm91bmRDb2xvcj17cHJvcHMuY29udGVudC5idXR0b25fYmFja2dyb3VuZF9jb2xvcn1cbiAgICAgID5cbiAgICAgICAge3Byb3BzLmNvbnRlbnQuYnV0dG9uX2xhYmVsfVxuICAgICAgPC9CdXR0b24+XG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlclRleHQoKSB7XG4gICAgY29uc3QgeyBwcm9wcyB9ID0gdGhpcztcbiAgICByZXR1cm4gKFxuICAgICAgPFJpY2hUZXh0XG4gICAgICAgIHRleHQ9e3Byb3BzLmNvbnRlbnQudGV4dH1cbiAgICAgICAgY3VzdG9tRWxlbWVudHM9e3RoaXMucHJvcHMuY3VzdG9tRWxlbWVudHN9XG4gICAgICAgIGxvY2FsaXphdGlvbl9pZD1cInRleHRcIlxuICAgICAgICBsaW5rcz17cHJvcHMuY29udGVudC5saW5rc31cbiAgICAgICAgc2VuZENsaWNrPXtwcm9wcy5zZW5kQ2xpY2t9XG4gICAgICAvPlxuICAgICk7XG4gIH1cblxuICB3cmFwU2VjdGlvbkhlYWRlcih1cmwpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oY2hpbGRyZW4pIHtcbiAgICAgIHJldHVybiA8YSBocmVmPXt1cmx9PntjaGlsZHJlbn08L2E+O1xuICAgIH07XG4gIH1cblxuICB3cmFwU25pcHBldENvbnRlbnQoY2hpbGRyZW4pIHtcbiAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJpbm5lckNvbnRlbnRXcmFwcGVyXCI+e2NoaWxkcmVufTwvZGl2PjtcbiAgfVxuXG4gIHJlbmRlclNlY3Rpb25IZWFkZXIoKSB7XG4gICAgY29uc3QgeyBwcm9wcyB9ID0gdGhpcztcblxuICAgIC8vIGFuIGljb24gYW5kIHRleHQgbXVzdCBiZSBzcGVjaWZpZWQgdG8gcmVuZGVyIHRoZSBzZWN0aW9uIGhlYWRlclxuICAgIGlmIChwcm9wcy5jb250ZW50LnNlY3Rpb25fdGl0bGVfaWNvbiAmJiBwcm9wcy5jb250ZW50LnNlY3Rpb25fdGl0bGVfdGV4dCkge1xuICAgICAgY29uc3Qgc2VjdGlvblRpdGxlSWNvbkxpZ2h0ID0gc2FmZVVSSShwcm9wcy5jb250ZW50LnNlY3Rpb25fdGl0bGVfaWNvbik7XG4gICAgICBjb25zdCBzZWN0aW9uVGl0bGVJY29uRGFyayA9IHNhZmVVUkkoXG4gICAgICAgIHByb3BzLmNvbnRlbnQuc2VjdGlvbl90aXRsZV9pY29uX2RhcmtfdGhlbWUgfHxcbiAgICAgICAgICBwcm9wcy5jb250ZW50LnNlY3Rpb25fdGl0bGVfaWNvblxuICAgICAgKTtcbiAgICAgIGNvbnN0IHNlY3Rpb25UaXRsZVVSTCA9IHByb3BzLmNvbnRlbnQuc2VjdGlvbl90aXRsZV91cmw7XG5cbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2VjdGlvbi1oZWFkZXJcIj5cbiAgICAgICAgICA8aDMgY2xhc3NOYW1lPVwic2VjdGlvbi10aXRsZVwiPlxuICAgICAgICAgICAgPENvbmRpdGlvbmFsV3JhcHBlclxuICAgICAgICAgICAgICBjb25kaXRpb249e3NlY3Rpb25UaXRsZVVSTH1cbiAgICAgICAgICAgICAgd3JhcD17dGhpcy53cmFwU2VjdGlvbkhlYWRlcihzZWN0aW9uVGl0bGVVUkwpfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImljb24gaWNvbi1zbWFsbC1zcGFjZXIgaWNvbi1saWdodC10aGVtZVwiXG4gICAgICAgICAgICAgICAgc3R5bGU9e3sgYmFja2dyb3VuZEltYWdlOiBgdXJsKFwiJHtzZWN0aW9uVGl0bGVJY29uTGlnaHR9XCIpYCB9fVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImljb24gaWNvbi1zbWFsbC1zcGFjZXIgaWNvbi1kYXJrLXRoZW1lXCJcbiAgICAgICAgICAgICAgICBzdHlsZT17eyBiYWNrZ3JvdW5kSW1hZ2U6IGB1cmwoXCIke3NlY3Rpb25UaXRsZUljb25EYXJrfVwiKWAgfX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwic2VjdGlvbi10aXRsZS10ZXh0XCI+XG4gICAgICAgICAgICAgICAge3Byb3BzLmNvbnRlbnQuc2VjdGlvbl90aXRsZV90ZXh0fVxuICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICA8L0NvbmRpdGlvbmFsV3JhcHBlcj5cbiAgICAgICAgICA8L2gzPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBwcm9wcyB9ID0gdGhpcztcbiAgICBjb25zdCBzZWN0aW9uSGVhZGVyID0gdGhpcy5yZW5kZXJTZWN0aW9uSGVhZGVyKCk7XG4gICAgbGV0IGNsYXNzTmFtZSA9IFwiU2ltcGxlU25pcHBldFwiO1xuXG4gICAgaWYgKHByb3BzLmNsYXNzTmFtZSkge1xuICAgICAgY2xhc3NOYW1lICs9IGAgJHtwcm9wcy5jbGFzc05hbWV9YDtcbiAgICB9XG4gICAgaWYgKHByb3BzLmNvbnRlbnQudGFsbCkge1xuICAgICAgY2xhc3NOYW1lICs9IFwiIHRhbGxcIjtcbiAgICB9XG4gICAgaWYgKHNlY3Rpb25IZWFkZXIpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBoYXMtc2VjdGlvbi1oZWFkZXJcIjtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPFNuaXBwZXRCYXNlXG4gICAgICAgIHsuLi5wcm9wc31cbiAgICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWV9XG4gICAgICAgIHRleHRTdHlsZT17dGhpcy5wcm9wcy50ZXh0U3R5bGV9XG4gICAgICA+XG4gICAgICAgIHtzZWN0aW9uSGVhZGVyfVxuICAgICAgICA8Q29uZGl0aW9uYWxXcmFwcGVyXG4gICAgICAgICAgY29uZGl0aW9uPXtzZWN0aW9uSGVhZGVyfVxuICAgICAgICAgIHdyYXA9e3RoaXMud3JhcFNuaXBwZXRDb250ZW50fVxuICAgICAgICA+XG4gICAgICAgICAgPGltZ1xuICAgICAgICAgICAgc3JjPXtzYWZlVVJJKHByb3BzLmNvbnRlbnQuaWNvbikgfHwgREVGQVVMVF9JQ09OX1BBVEh9XG4gICAgICAgICAgICBjbGFzc05hbWU9XCJpY29uIGljb24tbGlnaHQtdGhlbWVcIlxuICAgICAgICAgICAgYWx0PXtwcm9wcy5jb250ZW50Lmljb25fYWx0X3RleHQgfHwgSUNPTl9BTFRfVEVYVH1cbiAgICAgICAgICAvPlxuICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgIHNyYz17XG4gICAgICAgICAgICAgIHNhZmVVUkkocHJvcHMuY29udGVudC5pY29uX2RhcmtfdGhlbWUgfHwgcHJvcHMuY29udGVudC5pY29uKSB8fFxuICAgICAgICAgICAgICBERUZBVUxUX0lDT05fUEFUSFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2xhc3NOYW1lPVwiaWNvbiBpY29uLWRhcmstdGhlbWVcIlxuICAgICAgICAgICAgYWx0PXtwcm9wcy5jb250ZW50Lmljb25fYWx0X3RleHQgfHwgSUNPTl9BTFRfVEVYVH1cbiAgICAgICAgICAvPlxuICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICB7dGhpcy5yZW5kZXJUaXRsZSgpfSA8cCBjbGFzc05hbWU9XCJib2R5XCI+e3RoaXMucmVuZGVyVGV4dCgpfTwvcD5cbiAgICAgICAgICAgIHt0aGlzLnByb3BzLmV4dHJhQ29udGVudH1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICB7PGRpdj57dGhpcy5yZW5kZXJCdXR0b24oKX08L2Rpdj59XG4gICAgICAgIDwvQ29uZGl0aW9uYWxXcmFwcGVyPlxuICAgICAgPC9TbmlwcGV0QmFzZT5cbiAgICApO1xuICB9XG59XG4iLCIvKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIGZpbGUsXG4gKiBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLiAqL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgc2NoZW1hIGZyb20gXCIuL0VPWVNuaXBwZXQuc2NoZW1hLmpzb25cIjtcbmltcG9ydCB7IFNpbXBsZVNuaXBwZXQgfSBmcm9tIFwiLi4vU2ltcGxlU25pcHBldC9TaW1wbGVTbmlwcGV0XCI7XG5cbmNsYXNzIEVPWVNuaXBwZXRCYXNlIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuaGFuZGxlU3VibWl0ID0gdGhpcy5oYW5kbGVTdWJtaXQuYmluZCh0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBzZXRGcmVxdWVuY3lWYWx1ZSAtIGBmcmVxdWVuY3lgIGZvcm0gcGFyYW1ldGVyIHZhbHVlIHNob3VsZCBiZSBgbW9udGhseWBcbiAgICogICAgICAgICAgICAgICAgICAgICBpZiBgbW9udGhseS1jaGVja2JveGAgaXMgc2VsZWN0ZWQgb3IgYHNpbmdsZWAgb3RoZXJ3aXNlXG4gICAqL1xuICBzZXRGcmVxdWVuY3lWYWx1ZSgpIHtcbiAgICBjb25zdCBmcmVxdWVuY3lDaGVja2JveCA9IHRoaXMucmVmcy5mb3JtLnF1ZXJ5U2VsZWN0b3IoXCIjbW9udGhseS1jaGVja2JveFwiKTtcbiAgICBpZiAoZnJlcXVlbmN5Q2hlY2tib3guY2hlY2tlZCkge1xuICAgICAgdGhpcy5yZWZzLmZvcm0ucXVlcnlTZWxlY3RvcihcIltuYW1lPSdmcmVxdWVuY3knXVwiKS52YWx1ZSA9IFwibW9udGhseVwiO1xuICAgIH1cbiAgfVxuXG4gIGhhbmRsZVN1Ym1pdChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgdGhpcy5zZXRGcmVxdWVuY3lWYWx1ZSgpO1xuICAgIHRoaXMucmVmcy5mb3JtLnN1Ym1pdCgpO1xuICAgIGlmICghdGhpcy5wcm9wcy5jb250ZW50LmRvX25vdF9hdXRvYmxvY2spIHtcbiAgICAgIHRoaXMucHJvcHMub25CbG9jaygpO1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlckRvbmF0aW9ucygpIHtcbiAgICBjb25zdCBmaWVsZE5hbWVzID0gW1wiZmlyc3RcIiwgXCJzZWNvbmRcIiwgXCJ0aGlyZFwiLCBcImZvdXJ0aFwiXTtcbiAgICBjb25zdCBudW1iZXJGb3JtYXQgPSBuZXcgSW50bC5OdW1iZXJGb3JtYXQoXG4gICAgICB0aGlzLnByb3BzLmNvbnRlbnQubG9jYWxlIHx8IG5hdmlnYXRvci5sYW5ndWFnZSxcbiAgICAgIHtcbiAgICAgICAgc3R5bGU6IFwiY3VycmVuY3lcIixcbiAgICAgICAgY3VycmVuY3k6IHRoaXMucHJvcHMuY29udGVudC5jdXJyZW5jeV9jb2RlLFxuICAgICAgICBtaW5pbXVtRnJhY3Rpb25EaWdpdHM6IDAsXG4gICAgICB9XG4gICAgKTtcbiAgICAvLyBEZWZhdWx0IHRvIGBzZWNvbmRgIGJ1dHRvblxuICAgIGNvbnN0IHsgc2VsZWN0ZWRfYnV0dG9uIH0gPSB0aGlzLnByb3BzLmNvbnRlbnQ7XG4gICAgY29uc3QgYnRuU3R5bGUgPSB7XG4gICAgICBjb2xvcjogdGhpcy5wcm9wcy5jb250ZW50LmJ1dHRvbl9jb2xvcixcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhpcy5wcm9wcy5jb250ZW50LmJ1dHRvbl9iYWNrZ3JvdW5kX2NvbG9yLFxuICAgIH07XG4gICAgY29uc3QgZG9uYXRpb25VUkxQYXJhbXMgPSBbXTtcbiAgICBjb25zdCBwYXJhbXNTdGFydEluZGV4ID0gdGhpcy5wcm9wcy5jb250ZW50LmRvbmF0aW9uX2Zvcm1fdXJsLmluZGV4T2YoXCI/XCIpO1xuICAgIGZvciAoY29uc3QgZW50cnkgb2YgbmV3IFVSTFNlYXJjaFBhcmFtcyhcbiAgICAgIHRoaXMucHJvcHMuY29udGVudC5kb25hdGlvbl9mb3JtX3VybC5zbGljZShwYXJhbXNTdGFydEluZGV4KVxuICAgICkuZW50cmllcygpKSB7XG4gICAgICBkb25hdGlvblVSTFBhcmFtcy5wdXNoKGVudHJ5KTtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGZvcm1cbiAgICAgICAgY2xhc3NOYW1lPVwiRU9ZU25pcHBldEZvcm1cIlxuICAgICAgICBhY3Rpb249e3RoaXMucHJvcHMuY29udGVudC5kb25hdGlvbl9mb3JtX3VybH1cbiAgICAgICAgbWV0aG9kPXt0aGlzLnByb3BzLmZvcm1fbWV0aG9kfVxuICAgICAgICBvblN1Ym1pdD17dGhpcy5oYW5kbGVTdWJtaXR9XG4gICAgICAgIHJlZj1cImZvcm1cIlxuICAgICAgPlxuICAgICAgICB7ZG9uYXRpb25VUkxQYXJhbXMubWFwKChba2V5LCB2YWx1ZV0sIGlkeCkgPT4gKFxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwiaGlkZGVuXCIgbmFtZT17a2V5fSB2YWx1ZT17dmFsdWV9IGtleT17aWR4fSAvPlxuICAgICAgICApKX1cbiAgICAgICAge2ZpZWxkTmFtZXMubWFwKChmaWVsZCwgaWR4KSA9PiB7XG4gICAgICAgICAgY29uc3QgYnV0dG9uX25hbWUgPSBgZG9uYXRpb25fYW1vdW50XyR7ZmllbGR9YDtcbiAgICAgICAgICBjb25zdCBhbW91bnQgPSB0aGlzLnByb3BzLmNvbnRlbnRbYnV0dG9uX25hbWVdO1xuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8UmVhY3QuRnJhZ21lbnQga2V5PXtpZHh9PlxuICAgICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICB0eXBlPVwicmFkaW9cIlxuICAgICAgICAgICAgICAgIG5hbWU9XCJhbW91bnRcIlxuICAgICAgICAgICAgICAgIHZhbHVlPXthbW91bnR9XG4gICAgICAgICAgICAgICAgaWQ9e2ZpZWxkfVxuICAgICAgICAgICAgICAgIGRlZmF1bHRDaGVja2VkPXtidXR0b25fbmFtZSA9PT0gc2VsZWN0ZWRfYnV0dG9ufVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8bGFiZWwgaHRtbEZvcj17ZmllbGR9IGNsYXNzTmFtZT1cImRvbmF0aW9uLWFtb3VudFwiPlxuICAgICAgICAgICAgICAgIHtudW1iZXJGb3JtYXQuZm9ybWF0KGFtb3VudCl9XG4gICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICA8L1JlYWN0LkZyYWdtZW50PlxuICAgICAgICAgICk7XG4gICAgICAgIH0pfVxuXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibW9udGhseS1jaGVja2JveC1jb250YWluZXJcIj5cbiAgICAgICAgICA8aW5wdXQgaWQ9XCJtb250aGx5LWNoZWNrYm94XCIgdHlwZT1cImNoZWNrYm94XCIgLz5cbiAgICAgICAgICA8bGFiZWwgaHRtbEZvcj1cIm1vbnRobHktY2hlY2tib3hcIj5cbiAgICAgICAgICAgIHt0aGlzLnByb3BzLmNvbnRlbnQubW9udGhseV9jaGVja2JveF9sYWJlbF90ZXh0fVxuICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxpbnB1dCB0eXBlPVwiaGlkZGVuXCIgbmFtZT1cImZyZXF1ZW5jeVwiIHZhbHVlPVwic2luZ2xlXCIgLz5cbiAgICAgICAgPGlucHV0XG4gICAgICAgICAgdHlwZT1cImhpZGRlblwiXG4gICAgICAgICAgbmFtZT1cImN1cnJlbmN5XCJcbiAgICAgICAgICB2YWx1ZT17dGhpcy5wcm9wcy5jb250ZW50LmN1cnJlbmN5X2NvZGV9XG4gICAgICAgIC8+XG4gICAgICAgIDxpbnB1dFxuICAgICAgICAgIHR5cGU9XCJoaWRkZW5cIlxuICAgICAgICAgIG5hbWU9XCJwcmVzZXRzXCJcbiAgICAgICAgICB2YWx1ZT17ZmllbGROYW1lcy5tYXAoXG4gICAgICAgICAgICBmaWVsZCA9PiB0aGlzLnByb3BzLmNvbnRlbnRbYGRvbmF0aW9uX2Ftb3VudF8ke2ZpZWxkfWBdXG4gICAgICAgICAgKX1cbiAgICAgICAgLz5cbiAgICAgICAgPGJ1dHRvblxuICAgICAgICAgIHN0eWxlPXtidG5TdHlsZX1cbiAgICAgICAgICB0eXBlPVwic3VibWl0XCJcbiAgICAgICAgICBjbGFzc05hbWU9XCJBU1JvdXRlckJ1dHRvbiBwcmltYXJ5IGRvbmF0aW9uLWZvcm0tdXJsXCJcbiAgICAgICAgPlxuICAgICAgICAgIHt0aGlzLnByb3BzLmNvbnRlbnQuYnV0dG9uX2xhYmVsfVxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgIDwvZm9ybT5cbiAgICApO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHRleHRTdHlsZSA9IHtcbiAgICAgIGNvbG9yOiB0aGlzLnByb3BzLmNvbnRlbnQudGV4dF9jb2xvcixcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhpcy5wcm9wcy5jb250ZW50LmJhY2tncm91bmRfY29sb3IsXG4gICAgfTtcbiAgICBjb25zdCBjdXN0b21FbGVtZW50ID0gKFxuICAgICAgPGVtIHN0eWxlPXt7IGJhY2tncm91bmRDb2xvcjogdGhpcy5wcm9wcy5jb250ZW50LmhpZ2hsaWdodF9jb2xvciB9fSAvPlxuICAgICk7XG4gICAgcmV0dXJuIChcbiAgICAgIDxTaW1wbGVTbmlwcGV0XG4gICAgICAgIHsuLi50aGlzLnByb3BzfVxuICAgICAgICBjbGFzc05hbWU9e3RoaXMucHJvcHMuY29udGVudC50ZXN0fVxuICAgICAgICBjdXN0b21FbGVtZW50cz17eyBlbTogY3VzdG9tRWxlbWVudCB9fVxuICAgICAgICB0ZXh0U3R5bGU9e3RleHRTdHlsZX1cbiAgICAgICAgZXh0cmFDb250ZW50PXt0aGlzLnJlbmRlckRvbmF0aW9ucygpfVxuICAgICAgLz5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBFT1lTbmlwcGV0ID0gcHJvcHMgPT4ge1xuICBjb25zdCBleHRlbmRlZENvbnRlbnQgPSB7XG4gICAgbW9udGhseV9jaGVja2JveF9sYWJlbF90ZXh0OlxuICAgICAgc2NoZW1hLnByb3BlcnRpZXMubW9udGhseV9jaGVja2JveF9sYWJlbF90ZXh0LmRlZmF1bHQsXG4gICAgbG9jYWxlOiBzY2hlbWEucHJvcGVydGllcy5sb2NhbGUuZGVmYXVsdCxcbiAgICBjdXJyZW5jeV9jb2RlOiBzY2hlbWEucHJvcGVydGllcy5jdXJyZW5jeV9jb2RlLmRlZmF1bHQsXG4gICAgc2VsZWN0ZWRfYnV0dG9uOiBzY2hlbWEucHJvcGVydGllcy5zZWxlY3RlZF9idXR0b24uZGVmYXVsdCxcbiAgICAuLi5wcm9wcy5jb250ZW50LFxuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPEVPWVNuaXBwZXRCYXNlIHsuLi5wcm9wc30gY29udGVudD17ZXh0ZW5kZWRDb250ZW50fSBmb3JtX21ldGhvZD1cIkdFVFwiIC8+XG4gICk7XG59O1xuIiwiLyogVGhpcyBTb3VyY2UgQ29kZSBGb3JtIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBNb3ppbGxhIFB1YmxpY1xuICogTGljZW5zZSwgdi4gMi4wLiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBmaWxlLFxuICogWW91IGNhbiBvYnRhaW4gb25lIGF0IGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy4gKi9cblxuaW1wb3J0IHsgQnV0dG9uIH0gZnJvbSBcIi4uLy4uL2NvbXBvbmVudHMvQnV0dG9uL0J1dHRvblwiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgUmljaFRleHQgfSBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy9SaWNoVGV4dC9SaWNoVGV4dFwiO1xuaW1wb3J0IHsgc2FmZVVSSSB9IGZyb20gXCIuLi8uLi90ZW1wbGF0ZS11dGlsc1wiO1xuaW1wb3J0IHsgU2ltcGxlU25pcHBldCB9IGZyb20gXCIuLi9TaW1wbGVTbmlwcGV0L1NpbXBsZVNuaXBwZXRcIjtcbmltcG9ydCB7IFNuaXBwZXRCYXNlIH0gZnJvbSBcIi4uLy4uL2NvbXBvbmVudHMvU25pcHBldEJhc2UvU25pcHBldEJhc2VcIjtcblxuLy8gQWx0IHRleHQgcGxhY2Vob2xkZXIgaW4gY2FzZSB0aGUgcHJvcCBmcm9tIHRoZSBzZXJ2ZXIgaXNuJ3QgYXZhaWxhYmxlXG5jb25zdCBJQ09OX0FMVF9URVhUID0gXCJcIjtcblxuZXhwb3J0IGNsYXNzIFN1Ym1pdEZvcm1TbmlwcGV0IGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuZXhwYW5kU25pcHBldCA9IHRoaXMuZXhwYW5kU25pcHBldC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuaGFuZGxlU3VibWl0ID0gdGhpcy5oYW5kbGVTdWJtaXQuYmluZCh0aGlzKTtcbiAgICB0aGlzLmhhbmRsZVN1Ym1pdEF0dGVtcHQgPSB0aGlzLmhhbmRsZVN1Ym1pdEF0dGVtcHQuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uSW5wdXRDaGFuZ2UgPSB0aGlzLm9uSW5wdXRDaGFuZ2UuYmluZCh0aGlzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgZXhwYW5kZWQ6IGZhbHNlLFxuICAgICAgc3VibWl0QXR0ZW1wdGVkOiBmYWxzZSxcbiAgICAgIHNpZ251cFN1Ym1pdHRlZDogZmFsc2UsXG4gICAgICBzaWdudXBTdWNjZXNzOiBmYWxzZSxcbiAgICAgIGRpc2FibGVGb3JtOiBmYWxzZSxcbiAgICB9O1xuICB9XG5cbiAgaGFuZGxlU3VibWl0QXR0ZW1wdCgpIHtcbiAgICBpZiAoIXRoaXMuc3RhdGUuc3VibWl0QXR0ZW1wdGVkKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgc3VibWl0QXR0ZW1wdGVkOiB0cnVlIH0pO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGhhbmRsZVN1Ym1pdChldmVudCkge1xuICAgIGxldCBqc29uO1xuXG4gICAgaWYgKHRoaXMuc3RhdGUuZGlzYWJsZUZvcm0pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHRoaXMuc2V0U3RhdGUoeyBkaXNhYmxlRm9ybTogdHJ1ZSB9KTtcbiAgICB0aGlzLnByb3BzLnNlbmRVc2VyQWN0aW9uVGVsZW1ldHJ5KHtcbiAgICAgIGV2ZW50OiBcIkNMSUNLX0JVVFRPTlwiLFxuICAgICAgdmFsdWU6IFwiY29udmVyc2lvbi1zdWJzY3JpYmUtYWN0aXZhdGlvblwiLFxuICAgICAgaWQ6IFwiTkVXVEFCX0ZPT1RFUl9CQVJfQ09OVEVOVFwiLFxuICAgIH0pO1xuXG4gICAgaWYgKHRoaXMucHJvcHMuZm9ybV9tZXRob2QudG9VcHBlckNhc2UoKSA9PT0gXCJHRVRcIikge1xuICAgICAgdGhpcy5wcm9wcy5vbkJsb2NrKHsgcHJldmVudERpc21pc3M6IHRydWUgfSk7XG4gICAgICB0aGlzLnJlZnMuZm9ybS5zdWJtaXQoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCB7IHVybCwgZm9ybURhdGEgfSA9IHRoaXMucHJvcHMucHJvY2Vzc0Zvcm1EYXRhXG4gICAgICA/IHRoaXMucHJvcHMucHJvY2Vzc0Zvcm1EYXRhKHRoaXMucmVmcy5tYWluSW5wdXQsIHRoaXMucHJvcHMpXG4gICAgICA6IHsgdXJsOiB0aGlzLnJlZnMuZm9ybS5hY3Rpb24sIGZvcm1EYXRhOiBuZXcgRm9ybURhdGEodGhpcy5yZWZzLmZvcm0pIH07XG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgZmV0Y2hSZXF1ZXN0ID0gbmV3IFJlcXVlc3QodXJsLCB7XG4gICAgICAgIGJvZHk6IGZvcm1EYXRhLFxuICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgICBjcmVkZW50aWFsczogXCJvbWl0XCIsXG4gICAgICB9KTtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goZmV0Y2hSZXF1ZXN0KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBmZXRjaC1vcHRpb25zL25vLWZldGNoLWNyZWRlbnRpYWxzXG4gICAgICBqc29uID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgY29uc29sZS5sb2coZXJyKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgfVxuXG4gICAgaWYgKGpzb24gJiYganNvbi5zdGF0dXMgPT09IFwib2tcIikge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IHNpZ251cFN1Y2Nlc3M6IHRydWUsIHNpZ251cFN1Ym1pdHRlZDogdHJ1ZSB9KTtcbiAgICAgIGlmICghdGhpcy5wcm9wcy5jb250ZW50LmRvX25vdF9hdXRvYmxvY2spIHtcbiAgICAgICAgdGhpcy5wcm9wcy5vbkJsb2NrKHsgcHJldmVudERpc21pc3M6IHRydWUgfSk7XG4gICAgICB9XG4gICAgICB0aGlzLnByb3BzLnNlbmRVc2VyQWN0aW9uVGVsZW1ldHJ5KHtcbiAgICAgICAgZXZlbnQ6IFwiQ0xJQ0tfQlVUVE9OXCIsXG4gICAgICAgIHZhbHVlOiBcInN1YnNjcmliZS1zdWNjZXNzXCIsXG4gICAgICAgIGlkOiBcIk5FV1RBQl9GT09URVJfQkFSX0NPTlRFTlRcIixcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgXCJUaGVyZSB3YXMgYSBwcm9ibGVtIHN1Ym1pdHRpbmcgdGhlIGZvcm1cIixcbiAgICAgICAganNvbiB8fCBcIltObyBKU09OIHJlc3BvbnNlXVwiXG4gICAgICApO1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IHNpZ251cFN1Y2Nlc3M6IGZhbHNlLCBzaWdudXBTdWJtaXR0ZWQ6IHRydWUgfSk7XG4gICAgICB0aGlzLnByb3BzLnNlbmRVc2VyQWN0aW9uVGVsZW1ldHJ5KHtcbiAgICAgICAgZXZlbnQ6IFwiQ0xJQ0tfQlVUVE9OXCIsXG4gICAgICAgIHZhbHVlOiBcInN1YnNjcmliZS1lcnJvclwiLFxuICAgICAgICBpZDogXCJORVdUQUJfRk9PVEVSX0JBUl9DT05URU5UXCIsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLnNldFN0YXRlKHsgZGlzYWJsZUZvcm06IGZhbHNlIH0pO1xuICB9XG5cbiAgZXhwYW5kU25pcHBldCgpIHtcbiAgICB0aGlzLnByb3BzLnNlbmRVc2VyQWN0aW9uVGVsZW1ldHJ5KHtcbiAgICAgIGV2ZW50OiBcIkNMSUNLX0JVVFRPTlwiLFxuICAgICAgdmFsdWU6IFwic2NlbmUxLWJ1dHRvbi1sZWFybi1tb3JlXCIsXG4gICAgICBpZDogdGhpcy5wcm9wcy5VSVN1cmZhY2UsXG4gICAgfSk7XG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGV4cGFuZGVkOiB0cnVlLFxuICAgICAgc2lnbnVwU3VjY2VzczogZmFsc2UsXG4gICAgICBzaWdudXBTdWJtaXR0ZWQ6IGZhbHNlLFxuICAgIH0pO1xuICB9XG5cbiAgcmVuZGVySGlkZGVuRm9ybUlucHV0cygpIHtcbiAgICBjb25zdCB7IGhpZGRlbl9pbnB1dHMgfSA9IHRoaXMucHJvcHMuY29udGVudDtcblxuICAgIGlmICghaGlkZGVuX2lucHV0cykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKGhpZGRlbl9pbnB1dHMpLm1hcCgoa2V5LCBpZHgpID0+IChcbiAgICAgIDxpbnB1dCBrZXk9e2lkeH0gdHlwZT1cImhpZGRlblwiIG5hbWU9e2tleX0gdmFsdWU9e2hpZGRlbl9pbnB1dHNba2V5XX0gLz5cbiAgICApKTtcbiAgfVxuXG4gIHJlbmRlckRpc2NsYWltZXIoKSB7XG4gICAgY29uc3QgeyBjb250ZW50IH0gPSB0aGlzLnByb3BzO1xuICAgIGlmICghY29udGVudC5zY2VuZTJfZGlzY2xhaW1lcl9odG1sKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIDxwIGNsYXNzTmFtZT1cImRpc2NsYWltZXJUZXh0XCI+XG4gICAgICAgIDxSaWNoVGV4dFxuICAgICAgICAgIHRleHQ9e2NvbnRlbnQuc2NlbmUyX2Rpc2NsYWltZXJfaHRtbH1cbiAgICAgICAgICBsb2NhbGl6YXRpb25faWQ9XCJkaXNjbGFpbWVyX2h0bWxcIlxuICAgICAgICAgIGxpbmtzPXtjb250ZW50LmxpbmtzfVxuICAgICAgICAgIGRvTm90QXV0b0Jsb2NrPXt0cnVlfVxuICAgICAgICAgIG9wZW5OZXdXaW5kb3c9e3RydWV9XG4gICAgICAgICAgc2VuZENsaWNrPXt0aGlzLnByb3BzLnNlbmRDbGlja31cbiAgICAgICAgLz5cbiAgICAgIDwvcD5cbiAgICApO1xuICB9XG5cbiAgcmVuZGVyRm9ybVByaXZhY3lOb3RpY2UoKSB7XG4gICAgY29uc3QgeyBjb250ZW50IH0gPSB0aGlzLnByb3BzO1xuICAgIGlmICghY29udGVudC5zY2VuZTJfcHJpdmFjeV9odG1sKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIDxwIGNsYXNzTmFtZT1cInByaXZhY3lOb3RpY2VcIj5cbiAgICAgICAgPGlucHV0XG4gICAgICAgICAgdHlwZT1cImNoZWNrYm94XCJcbiAgICAgICAgICBpZD1cImlkX3ByaXZhY3lcIlxuICAgICAgICAgIG5hbWU9XCJwcml2YWN5XCJcbiAgICAgICAgICByZXF1aXJlZD1cInJlcXVpcmVkXCJcbiAgICAgICAgLz5cbiAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJpZF9wcml2YWN5XCI+XG4gICAgICAgICAgPFJpY2hUZXh0XG4gICAgICAgICAgICB0ZXh0PXtjb250ZW50LnNjZW5lMl9wcml2YWN5X2h0bWx9XG4gICAgICAgICAgICBsb2NhbGl6YXRpb25faWQ9XCJwcml2YWN5X2h0bWxcIlxuICAgICAgICAgICAgbGlua3M9e2NvbnRlbnQubGlua3N9XG4gICAgICAgICAgICBkb05vdEF1dG9CbG9jaz17dHJ1ZX1cbiAgICAgICAgICAgIG9wZW5OZXdXaW5kb3c9e3RydWV9XG4gICAgICAgICAgICBzZW5kQ2xpY2s9e3RoaXMucHJvcHMuc2VuZENsaWNrfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvbGFiZWw+XG4gICAgICA8L3A+XG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlclNpZ251cFN1Ym1pdHRlZCgpIHtcbiAgICBjb25zdCB7IGNvbnRlbnQgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgaXNTdWNjZXNzID0gdGhpcy5zdGF0ZS5zaWdudXBTdWNjZXNzO1xuICAgIGNvbnN0IHN1Y2Nlc3NUaXRsZSA9IGlzU3VjY2VzcyAmJiBjb250ZW50LnN1Y2Nlc3NfdGl0bGU7XG4gICAgY29uc3QgYm9keVRleHQgPSBpc1N1Y2Nlc3NcbiAgICAgID8geyBzdWNjZXNzX3RleHQ6IGNvbnRlbnQuc3VjY2Vzc190ZXh0IH1cbiAgICAgIDogeyBlcnJvcl90ZXh0OiBjb250ZW50LmVycm9yX3RleHQgfTtcbiAgICBjb25zdCByZXRyeUJ1dHRvblRleHQgPSBjb250ZW50LnNjZW5lMV9idXR0b25fbGFiZWw7XG4gICAgcmV0dXJuIChcbiAgICAgIDxTbmlwcGV0QmFzZSB7Li4udGhpcy5wcm9wc30+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3VibWlzc2lvblN0YXR1c1wiPlxuICAgICAgICAgIHtzdWNjZXNzVGl0bGUgPyAoXG4gICAgICAgICAgICA8aDIgY2xhc3NOYW1lPVwic3VibWl0U3RhdHVzVGl0bGVcIj57c3VjY2Vzc1RpdGxlfTwvaDI+XG4gICAgICAgICAgKSA6IG51bGx9XG4gICAgICAgICAgPHA+XG4gICAgICAgICAgICA8UmljaFRleHRcbiAgICAgICAgICAgICAgey4uLmJvZHlUZXh0fVxuICAgICAgICAgICAgICBsb2NhbGl6YXRpb25faWQ9e2lzU3VjY2VzcyA/IFwic3VjY2Vzc190ZXh0XCIgOiBcImVycm9yX3RleHRcIn1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICB7aXNTdWNjZXNzID8gbnVsbCA6IChcbiAgICAgICAgICAgICAgPEJ1dHRvbiBvbkNsaWNrPXt0aGlzLmV4cGFuZFNuaXBwZXR9PntyZXRyeUJ1dHRvblRleHR9PC9CdXR0b24+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvcD5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L1NuaXBwZXRCYXNlPlxuICAgICk7XG4gIH1cblxuICBvbklucHV0Q2hhbmdlKGV2ZW50KSB7XG4gICAgaWYgKCF0aGlzLnByb3BzLnZhbGlkYXRlSW5wdXQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgaGFzRXJyb3IgPSB0aGlzLnByb3BzLnZhbGlkYXRlSW5wdXQoXG4gICAgICBldmVudC50YXJnZXQudmFsdWUsXG4gICAgICB0aGlzLnByb3BzLmNvbnRlbnRcbiAgICApO1xuICAgIGV2ZW50LnRhcmdldC5zZXRDdXN0b21WYWxpZGl0eShoYXNFcnJvcik7XG4gIH1cblxuICByZW5kZXJJbnB1dCgpIHtcbiAgICBjb25zdCBwbGFjaG9sZGVyID1cbiAgICAgIHRoaXMucHJvcHMuY29udGVudC5zY2VuZTJfZW1haWxfcGxhY2Vob2xkZXJfdGV4dCB8fFxuICAgICAgdGhpcy5wcm9wcy5jb250ZW50LnNjZW5lMl9pbnB1dF9wbGFjZWhvbGRlcjtcbiAgICByZXR1cm4gKFxuICAgICAgPGlucHV0XG4gICAgICAgIHJlZj1cIm1haW5JbnB1dFwiXG4gICAgICAgIHR5cGU9e3RoaXMucHJvcHMuaW5wdXRUeXBlIHx8IFwiZW1haWxcIn1cbiAgICAgICAgY2xhc3NOYW1lPXtgbWFpbklucHV0JHt0aGlzLnN0YXRlLnN1Ym1pdEF0dGVtcHRlZCA/IFwiXCIgOiBcIiBjbGVhblwifWB9XG4gICAgICAgIG5hbWU9XCJlbWFpbFwiXG4gICAgICAgIHJlcXVpcmVkPXt0cnVlfVxuICAgICAgICBwbGFjZWhvbGRlcj17cGxhY2hvbGRlcn1cbiAgICAgICAgb25DaGFuZ2U9e3RoaXMucHJvcHMudmFsaWRhdGVJbnB1dCA/IHRoaXMub25JbnB1dENoYW5nZSA6IG51bGx9XG4gICAgICAvPlxuICAgICk7XG4gIH1cblxuICByZW5kZXJTaWdudXBWaWV3KCkge1xuICAgIGNvbnN0IHsgY29udGVudCB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBjb250YWluZXJDbGFzcyA9IGBTdWJtaXRGb3JtU25pcHBldCAke3RoaXMucHJvcHMuY2xhc3NOYW1lfWA7XG4gICAgcmV0dXJuIChcbiAgICAgIDxTbmlwcGV0QmFzZVxuICAgICAgICB7Li4udGhpcy5wcm9wc31cbiAgICAgICAgY2xhc3NOYW1lPXtjb250YWluZXJDbGFzc31cbiAgICAgICAgZm9vdGVyRGlzbWlzcz17dHJ1ZX1cbiAgICAgID5cbiAgICAgICAge2NvbnRlbnQuc2NlbmUyX2ljb24gPyAoXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzY2VuZTJJY29uXCI+XG4gICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgIHNyYz17c2FmZVVSSShjb250ZW50LnNjZW5lMl9pY29uKX1cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiaWNvbi1saWdodC10aGVtZVwiXG4gICAgICAgICAgICAgIGFsdD17Y29udGVudC5zY2VuZTJfaWNvbl9hbHRfdGV4dCB8fCBJQ09OX0FMVF9URVhUfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgc3JjPXtzYWZlVVJJKFxuICAgICAgICAgICAgICAgIGNvbnRlbnQuc2NlbmUyX2ljb25fZGFya190aGVtZSB8fCBjb250ZW50LnNjZW5lMl9pY29uXG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cImljb24tZGFyay10aGVtZVwiXG4gICAgICAgICAgICAgIGFsdD17Y29udGVudC5zY2VuZTJfaWNvbl9hbHRfdGV4dCB8fCBJQ09OX0FMVF9URVhUfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKSA6IG51bGx9XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWVzc2FnZVwiPlxuICAgICAgICAgIDxwPlxuICAgICAgICAgICAge2NvbnRlbnQuc2NlbmUyX3RpdGxlICYmIChcbiAgICAgICAgICAgICAgPGgzIGNsYXNzTmFtZT1cInNjZW5lMlRpdGxlXCI+e2NvbnRlbnQuc2NlbmUyX3RpdGxlfTwvaDM+XG4gICAgICAgICAgICApfXtcIiBcIn1cbiAgICAgICAgICAgIHtjb250ZW50LnNjZW5lMl90ZXh0ICYmIChcbiAgICAgICAgICAgICAgPFJpY2hUZXh0XG4gICAgICAgICAgICAgICAgc2NlbmUyX3RleHQ9e2NvbnRlbnQuc2NlbmUyX3RleHR9XG4gICAgICAgICAgICAgICAgbG9jYWxpemF0aW9uX2lkPVwic2NlbmUyX3RleHRcIlxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L3A+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8Zm9ybVxuICAgICAgICAgIGFjdGlvbj17dGhpcy5wcm9wcy5mb3JtX2FjdGlvbn1cbiAgICAgICAgICBtZXRob2Q9e3RoaXMucHJvcHMuZm9ybV9tZXRob2R9XG4gICAgICAgICAgb25TdWJtaXQ9e3RoaXMuaGFuZGxlU3VibWl0fVxuICAgICAgICAgIHJlZj1cImZvcm1cIlxuICAgICAgICA+XG4gICAgICAgICAge3RoaXMucmVuZGVySGlkZGVuRm9ybUlucHV0cygpfVxuICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICB7dGhpcy5yZW5kZXJJbnB1dCgpfVxuICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICB0eXBlPVwic3VibWl0XCJcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiQVNSb3V0ZXJCdXR0b24gcHJpbWFyeVwiXG4gICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuaGFuZGxlU3VibWl0QXR0ZW1wdH1cbiAgICAgICAgICAgICAgcmVmPVwiZm9ybVN1Ym1pdEJ0blwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHtjb250ZW50LnNjZW5lMl9idXR0b25fbGFiZWx9XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICB7dGhpcy5yZW5kZXJGb3JtUHJpdmFjeU5vdGljZSgpIHx8IHRoaXMucmVuZGVyRGlzY2xhaW1lcigpfVxuICAgICAgICA8L2Zvcm0+XG4gICAgICA8L1NuaXBwZXRCYXNlPlxuICAgICk7XG4gIH1cblxuICBnZXRGaXJzdFNjZW5lQ29udGVudCgpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5wcm9wcy5jb250ZW50KVxuICAgICAgLmZpbHRlcihrZXkgPT4ga2V5LmluY2x1ZGVzKFwic2NlbmUxXCIpKVxuICAgICAgLnJlZHVjZSgoYWNjLCBrZXkpID0+IHtcbiAgICAgICAgYWNjW2tleS5zdWJzdHIoNyldID0gdGhpcy5wcm9wcy5jb250ZW50W2tleV07XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgICB9LCB7fSk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgY29udGVudCA9IHsgLi4udGhpcy5wcm9wcy5jb250ZW50LCAuLi50aGlzLmdldEZpcnN0U2NlbmVDb250ZW50KCkgfTtcblxuICAgIGlmICh0aGlzLnN0YXRlLnNpZ251cFN1Ym1pdHRlZCkge1xuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyU2lnbnVwU3VibWl0dGVkKCk7XG4gICAgfVxuICAgIGlmICh0aGlzLnN0YXRlLmV4cGFuZGVkKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZW5kZXJTaWdudXBWaWV3KCk7XG4gICAgfVxuICAgIHJldHVybiAoXG4gICAgICA8U2ltcGxlU25pcHBldFxuICAgICAgICB7Li4udGhpcy5wcm9wc31cbiAgICAgICAgY29udGVudD17Y29udGVudH1cbiAgICAgICAgb25CdXR0b25DbGljaz17dGhpcy5leHBhbmRTbmlwcGV0fVxuICAgICAgLz5cbiAgICApO1xuICB9XG59XG4iLCIvKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIGZpbGUsXG4gKiBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLiAqL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgc2NoZW1hIGZyb20gXCIuL0ZYQVNpZ251cFNuaXBwZXQuc2NoZW1hLmpzb25cIjtcbmltcG9ydCB7IFN1Ym1pdEZvcm1TbmlwcGV0IH0gZnJvbSBcIi4uL1N1Ym1pdEZvcm1TbmlwcGV0L1N1Ym1pdEZvcm1TbmlwcGV0LmpzeFwiO1xuXG5leHBvcnQgY29uc3QgRlhBU2lnbnVwU25pcHBldCA9IHByb3BzID0+IHtcbiAgY29uc3QgdXNlckFnZW50ID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL0ZpcmVmb3hcXC8oWzAtOV0rKVxcLi8pO1xuICBjb25zdCBmaXJlZm94X3ZlcnNpb24gPSB1c2VyQWdlbnQgPyBwYXJzZUludCh1c2VyQWdlbnRbMV0sIDEwKSA6IDA7XG4gIGNvbnN0IGV4dGVuZGVkQ29udGVudCA9IHtcbiAgICBzY2VuZTFfYnV0dG9uX2xhYmVsOiBzY2hlbWEucHJvcGVydGllcy5zY2VuZTFfYnV0dG9uX2xhYmVsLmRlZmF1bHQsXG4gICAgc2NlbmUyX2VtYWlsX3BsYWNlaG9sZGVyX3RleHQ6XG4gICAgICBzY2hlbWEucHJvcGVydGllcy5zY2VuZTJfZW1haWxfcGxhY2Vob2xkZXJfdGV4dC5kZWZhdWx0LFxuICAgIHNjZW5lMl9idXR0b25fbGFiZWw6IHNjaGVtYS5wcm9wZXJ0aWVzLnNjZW5lMl9idXR0b25fbGFiZWwuZGVmYXVsdCxcbiAgICBzY2VuZTJfZGlzbWlzc19idXR0b25fdGV4dDpcbiAgICAgIHNjaGVtYS5wcm9wZXJ0aWVzLnNjZW5lMl9kaXNtaXNzX2J1dHRvbl90ZXh0LmRlZmF1bHQsXG4gICAgLi4ucHJvcHMuY29udGVudCxcbiAgICBoaWRkZW5faW5wdXRzOiB7XG4gICAgICBhY3Rpb246IFwiZW1haWxcIixcbiAgICAgIGNvbnRleHQ6IFwiZnhfZGVza3RvcF92M1wiLFxuICAgICAgZW50cnlwb2ludDogXCJzbmlwcGV0c1wiLFxuICAgICAgc2VydmljZTogXCJzeW5jXCIsXG4gICAgICB1dG1fc291cmNlOiBcInNuaXBwZXRcIixcbiAgICAgIHV0bV9jb250ZW50OiBmaXJlZm94X3ZlcnNpb24sXG4gICAgICB1dG1fY2FtcGFpZ246IHByb3BzLmNvbnRlbnQudXRtX2NhbXBhaWduLFxuICAgICAgdXRtX3Rlcm06IHByb3BzLmNvbnRlbnQudXRtX3Rlcm0sXG4gICAgICAuLi5wcm9wcy5jb250ZW50LmhpZGRlbl9pbnB1dHMsXG4gICAgfSxcbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDxTdWJtaXRGb3JtU25pcHBldFxuICAgICAgey4uLnByb3BzfVxuICAgICAgY29udGVudD17ZXh0ZW5kZWRDb250ZW50fVxuICAgICAgZm9ybV9hY3Rpb249e1wiaHR0cHM6Ly9hY2NvdW50cy5maXJlZm94LmNvbS9cIn1cbiAgICAgIGZvcm1fbWV0aG9kPVwiR0VUXCJcbiAgICAvPlxuICApO1xufTtcbiIsIi8qIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXMgZmlsZSxcbiAqIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uICovXG5cbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBzY2hlbWEgZnJvbSBcIi4vTmV3c2xldHRlclNuaXBwZXQuc2NoZW1hLmpzb25cIjtcbmltcG9ydCB7IFN1Ym1pdEZvcm1TbmlwcGV0IH0gZnJvbSBcIi4uL1N1Ym1pdEZvcm1TbmlwcGV0L1N1Ym1pdEZvcm1TbmlwcGV0LmpzeFwiO1xuXG5leHBvcnQgY29uc3QgTmV3c2xldHRlclNuaXBwZXQgPSBwcm9wcyA9PiB7XG4gIGNvbnN0IGV4dGVuZGVkQ29udGVudCA9IHtcbiAgICBzY2VuZTFfYnV0dG9uX2xhYmVsOiBzY2hlbWEucHJvcGVydGllcy5zY2VuZTFfYnV0dG9uX2xhYmVsLmRlZmF1bHQsXG4gICAgc2NlbmUyX2VtYWlsX3BsYWNlaG9sZGVyX3RleHQ6XG4gICAgICBzY2hlbWEucHJvcGVydGllcy5zY2VuZTJfZW1haWxfcGxhY2Vob2xkZXJfdGV4dC5kZWZhdWx0LFxuICAgIHNjZW5lMl9idXR0b25fbGFiZWw6IHNjaGVtYS5wcm9wZXJ0aWVzLnNjZW5lMl9idXR0b25fbGFiZWwuZGVmYXVsdCxcbiAgICBzY2VuZTJfZGlzbWlzc19idXR0b25fdGV4dDpcbiAgICAgIHNjaGVtYS5wcm9wZXJ0aWVzLnNjZW5lMl9kaXNtaXNzX2J1dHRvbl90ZXh0LmRlZmF1bHQsXG4gICAgc2NlbmUyX25ld3NsZXR0ZXI6IHNjaGVtYS5wcm9wZXJ0aWVzLnNjZW5lMl9uZXdzbGV0dGVyLmRlZmF1bHQsXG4gICAgLi4ucHJvcHMuY29udGVudCxcbiAgICBoaWRkZW5faW5wdXRzOiB7XG4gICAgICBuZXdzbGV0dGVyczpcbiAgICAgICAgcHJvcHMuY29udGVudC5zY2VuZTJfbmV3c2xldHRlciB8fFxuICAgICAgICBzY2hlbWEucHJvcGVydGllcy5zY2VuZTJfbmV3c2xldHRlci5kZWZhdWx0LFxuICAgICAgZm10OiBzY2hlbWEucHJvcGVydGllcy5oaWRkZW5faW5wdXRzLnByb3BlcnRpZXMuZm10LmRlZmF1bHQsXG4gICAgICBsYW5nOiBwcm9wcy5jb250ZW50LmxvY2FsZSB8fCBzY2hlbWEucHJvcGVydGllcy5sb2NhbGUuZGVmYXVsdCxcbiAgICAgIHNvdXJjZV91cmw6IGBodHRwczovL3NuaXBwZXRzLm1vemlsbGEuY29tL3Nob3cvJHtwcm9wcy5pZH1gLFxuICAgICAgLi4ucHJvcHMuY29udGVudC5oaWRkZW5faW5wdXRzLFxuICAgIH0sXG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8U3VibWl0Rm9ybVNuaXBwZXRcbiAgICAgIHsuLi5wcm9wc31cbiAgICAgIGNvbnRlbnQ9e2V4dGVuZGVkQ29udGVudH1cbiAgICAgIGZvcm1fYWN0aW9uPXtcImh0dHBzOi8vYmFza2V0Lm1vemlsbGEub3JnL3N1YnNjcmliZS5qc29uXCJ9XG4gICAgICBmb3JtX21ldGhvZD1cIlBPU1RcIlxuICAgIC8+XG4gICk7XG59O1xuIiwiLyogVGhpcyBTb3VyY2UgQ29kZSBGb3JtIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBNb3ppbGxhIFB1YmxpY1xuICogTGljZW5zZSwgdi4gMi4wLiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBmaWxlLFxuICogWW91IGNhbiBvYnRhaW4gb25lIGF0IGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy4gKi9cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBnaXZlbiBzdHJpbmcgaXMgYW4gZW1haWwgb3IgcGhvbmUgbnVtYmVyIG9yIG5laXRoZXJcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWwgVGhlIHVzZXIgaW5wdXRcbiAqIEBwYXJhbSB7QVNSTWVzc2FnZUNvbnRlbnR9IGNvbnRlbnQgLmNvbnRlbnQgcHJvcGVydHkgb24gQVNSIG1lc3NhZ2VcbiAqIEByZXR1cm5zIHtcImVtYWlsXCJ8XCJwaG9uZVwifFwiXCJ9IFRoZSB0eXBlIG9mIHRoZSBpbnB1dFxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNFbWFpbE9yUGhvbmVOdW1iZXIodmFsLCBjb250ZW50KSB7XG4gIGNvbnN0IHsgbG9jYWxlIH0gPSBjb250ZW50O1xuICAvLyBodHRwOi8vZW1haWxyZWdleC5jb20vXG4gIGNvbnN0IGVtYWlsX3JlID0gL14oKFtePD4oKVtcXF1cXFxcLiw7Olxcc0BcIl0rKFxcLltePD4oKVtcXF1cXFxcLiw7Olxcc0BcIl0rKSopfChcIi4rXCIpKUAoKFxcW1swLTldezEsM31cXC5bMC05XXsxLDN9XFwuWzAtOV17MSwzfVxcLlswLTldezEsM31dKXwoKFthLXpBLVpcXC0wLTldK1xcLikrW2EtekEtWl17Mix9KSkkLztcbiAgY29uc3QgY2hlY2tfZW1haWwgPSBlbWFpbF9yZS50ZXN0KHZhbCk7XG4gIGxldCBjaGVja19waG9uZTsgLy8gZGVwZW5kcyBvbiBsb2NhbGVcbiAgc3dpdGNoIChsb2NhbGUpIHtcbiAgICBjYXNlIFwiZW4tVVNcIjpcbiAgICBjYXNlIFwiZW4tQ0FcIjpcbiAgICAgIC8vIGFsbG93IDEwLTExIGRpZ2l0cyBpbiBjYXNlIHVzZXIgd2FudHMgdG8gZW50ZXIgY291bnRyeSBjb2RlXG4gICAgICBjaGVja19waG9uZSA9IHZhbC5sZW5ndGggPj0gMTAgJiYgdmFsLmxlbmd0aCA8PSAxMSAmJiAhaXNOYU4odmFsKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJkZVwiOlxuICAgICAgLy8gYWxsb3cgYmV0d2VlbiAyIGFuZCAxMiBkaWdpdHMgZm9yIGdlcm1hbiBwaG9uZSBudW1iZXJzXG4gICAgICBjaGVja19waG9uZSA9IHZhbC5sZW5ndGggPj0gMiAmJiB2YWwubGVuZ3RoIDw9IDEyICYmICFpc05hTih2YWwpO1xuICAgICAgYnJlYWs7XG4gICAgLy8gdGhpcyBjYXNlIHNob3VsZCBuZXZlciBiZSBoaXQsIGJ1dCBnb29kIHRvIGhhdmUgYSBmYWxsYmFjayBqdXN0IGluIGNhc2VcbiAgICBkZWZhdWx0OlxuICAgICAgY2hlY2tfcGhvbmUgPSAhaXNOYU4odmFsKTtcbiAgICAgIGJyZWFrO1xuICB9XG4gIGlmIChjaGVja19lbWFpbCkge1xuICAgIHJldHVybiBcImVtYWlsXCI7XG4gIH0gZWxzZSBpZiAoY2hlY2tfcGhvbmUpIHtcbiAgICByZXR1cm4gXCJwaG9uZVwiO1xuICB9XG4gIHJldHVybiBcIlwiO1xufVxuIiwiLyogVGhpcyBTb3VyY2UgQ29kZSBGb3JtIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBNb3ppbGxhIFB1YmxpY1xuICogTGljZW5zZSwgdi4gMi4wLiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBmaWxlLFxuICogWW91IGNhbiBvYnRhaW4gb25lIGF0IGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy4gKi9cblxuaW1wb3J0IHsgaXNFbWFpbE9yUGhvbmVOdW1iZXIgfSBmcm9tIFwiLi9pc0VtYWlsT3JQaG9uZU51bWJlclwiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHNjaGVtYSBmcm9tIFwiLi9TZW5kVG9EZXZpY2VTbmlwcGV0LnNjaGVtYS5qc29uXCI7XG5pbXBvcnQgeyBTdWJtaXRGb3JtU25pcHBldCB9IGZyb20gXCIuLi9TdWJtaXRGb3JtU25pcHBldC9TdWJtaXRGb3JtU25pcHBldC5qc3hcIjtcblxuZnVuY3Rpb24gdmFsaWRhdGVJbnB1dCh2YWx1ZSwgY29udGVudCkge1xuICBjb25zdCB0eXBlID0gaXNFbWFpbE9yUGhvbmVOdW1iZXIodmFsdWUsIGNvbnRlbnQpO1xuICByZXR1cm4gdHlwZSA/IFwiXCIgOiBcIk11c3QgYmUgYW4gZW1haWwgb3IgYSBwaG9uZSBudW1iZXIuXCI7XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NGb3JtRGF0YShpbnB1dCwgbWVzc2FnZSkge1xuICBjb25zdCB7IGNvbnRlbnQgfSA9IG1lc3NhZ2U7XG4gIGNvbnN0IHR5cGUgPSBjb250ZW50LmluY2x1ZGVfc21zXG4gICAgPyBpc0VtYWlsT3JQaG9uZU51bWJlcihpbnB1dC52YWx1ZSwgY29udGVudClcbiAgICA6IFwiZW1haWxcIjtcbiAgY29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcbiAgbGV0IHVybDtcbiAgaWYgKHR5cGUgPT09IFwicGhvbmVcIikge1xuICAgIHVybCA9IFwiaHR0cHM6Ly9iYXNrZXQubW96aWxsYS5vcmcvbmV3cy9zdWJzY3JpYmVfc21zL1wiO1xuICAgIGZvcm1EYXRhLmFwcGVuZChcIm1vYmlsZV9udW1iZXJcIiwgaW5wdXQudmFsdWUpO1xuICAgIGZvcm1EYXRhLmFwcGVuZChcIm1zZ19uYW1lXCIsIGNvbnRlbnQubWVzc2FnZV9pZF9zbXMpO1xuICAgIGZvcm1EYXRhLmFwcGVuZChcImNvdW50cnlcIiwgY29udGVudC5jb3VudHJ5KTtcbiAgfSBlbHNlIGlmICh0eXBlID09PSBcImVtYWlsXCIpIHtcbiAgICB1cmwgPSBcImh0dHBzOi8vYmFza2V0Lm1vemlsbGEub3JnL25ld3Mvc3Vic2NyaWJlL1wiO1xuICAgIGZvcm1EYXRhLmFwcGVuZChcImVtYWlsXCIsIGlucHV0LnZhbHVlKTtcbiAgICBmb3JtRGF0YS5hcHBlbmQoXCJuZXdzbGV0dGVyc1wiLCBjb250ZW50Lm1lc3NhZ2VfaWRfZW1haWwpO1xuICAgIGZvcm1EYXRhLmFwcGVuZChcbiAgICAgIFwic291cmNlX3VybFwiLFxuICAgICAgZW5jb2RlVVJJQ29tcG9uZW50KGBodHRwczovL3NuaXBwZXRzLm1vemlsbGEuY29tL3Nob3cvJHttZXNzYWdlLmlkfWApXG4gICAgKTtcbiAgfVxuICBmb3JtRGF0YS5hcHBlbmQoXCJsYW5nXCIsIGNvbnRlbnQubG9jYWxlKTtcbiAgcmV0dXJuIHsgZm9ybURhdGEsIHVybCB9O1xufVxuXG5mdW5jdGlvbiBhZGREZWZhdWx0VmFsdWVzKHByb3BzKSB7XG4gIHJldHVybiB7XG4gICAgLi4ucHJvcHMsXG4gICAgY29udGVudDoge1xuICAgICAgc2NlbmUxX2J1dHRvbl9sYWJlbDogc2NoZW1hLnByb3BlcnRpZXMuc2NlbmUxX2J1dHRvbl9sYWJlbC5kZWZhdWx0LFxuICAgICAgc2NlbmUyX2Rpc21pc3NfYnV0dG9uX3RleHQ6XG4gICAgICAgIHNjaGVtYS5wcm9wZXJ0aWVzLnNjZW5lMl9kaXNtaXNzX2J1dHRvbl90ZXh0LmRlZmF1bHQsXG4gICAgICBzY2VuZTJfYnV0dG9uX2xhYmVsOiBzY2hlbWEucHJvcGVydGllcy5zY2VuZTJfYnV0dG9uX2xhYmVsLmRlZmF1bHQsXG4gICAgICBzY2VuZTJfaW5wdXRfcGxhY2Vob2xkZXI6XG4gICAgICAgIHNjaGVtYS5wcm9wZXJ0aWVzLnNjZW5lMl9pbnB1dF9wbGFjZWhvbGRlci5kZWZhdWx0LFxuICAgICAgbG9jYWxlOiBzY2hlbWEucHJvcGVydGllcy5sb2NhbGUuZGVmYXVsdCxcbiAgICAgIGNvdW50cnk6IHNjaGVtYS5wcm9wZXJ0aWVzLmNvdW50cnkuZGVmYXVsdCxcbiAgICAgIG1lc3NhZ2VfaWRfZW1haWw6IFwiXCIsXG4gICAgICBpbmNsdWRlX3Ntczogc2NoZW1hLnByb3BlcnRpZXMuaW5jbHVkZV9zbXMuZGVmYXVsdCxcbiAgICAgIC4uLnByb3BzLmNvbnRlbnQsXG4gICAgfSxcbiAgfTtcbn1cblxuZXhwb3J0IGNvbnN0IFNlbmRUb0RldmljZVNuaXBwZXQgPSBwcm9wcyA9PiB7XG4gIGNvbnN0IHByb3BzV2l0aERlZmF1bHRzID0gYWRkRGVmYXVsdFZhbHVlcyhwcm9wcyk7XG5cbiAgcmV0dXJuIChcbiAgICA8U3VibWl0Rm9ybVNuaXBwZXRcbiAgICAgIHsuLi5wcm9wc1dpdGhEZWZhdWx0c31cbiAgICAgIGZvcm1fbWV0aG9kPVwiUE9TVFwiXG4gICAgICBjbGFzc05hbWU9XCJzZW5kX3RvX2RldmljZV9zbmlwcGV0XCJcbiAgICAgIGlucHV0VHlwZT17cHJvcHNXaXRoRGVmYXVsdHMuY29udGVudC5pbmNsdWRlX3NtcyA/IFwidGV4dFwiIDogXCJlbWFpbFwifVxuICAgICAgdmFsaWRhdGVJbnB1dD17XG4gICAgICAgIHByb3BzV2l0aERlZmF1bHRzLmNvbnRlbnQuaW5jbHVkZV9zbXMgPyB2YWxpZGF0ZUlucHV0IDogbnVsbFxuICAgICAgfVxuICAgICAgcHJvY2Vzc0Zvcm1EYXRhPXtwcm9jZXNzRm9ybURhdGF9XG4gICAgLz5cbiAgKTtcbn07XG4iLCIvKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIGZpbGUsXG4gKiBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLiAqL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBSaWNoVGV4dCB9IGZyb20gXCIuLi8uLi9jb21wb25lbnRzL1JpY2hUZXh0L1JpY2hUZXh0XCI7XG5pbXBvcnQgeyBzYWZlVVJJIH0gZnJvbSBcIi4uLy4uL3RlbXBsYXRlLXV0aWxzXCI7XG5pbXBvcnQgeyBTbmlwcGV0QmFzZSB9IGZyb20gXCIuLi8uLi9jb21wb25lbnRzL1NuaXBwZXRCYXNlL1NuaXBwZXRCYXNlXCI7XG5cbmNvbnN0IERFRkFVTFRfSUNPTl9QQVRIID0gXCJjaHJvbWU6Ly9icmFuZGluZy9jb250ZW50L2ljb242NC5wbmdcIjtcbi8vIEFsdCB0ZXh0IHBsYWNlaG9sZGVyIGluIGNhc2UgdGhlIHByb3AgZnJvbSB0aGUgc2VydmVyIGlzbid0IGF2YWlsYWJsZVxuY29uc3QgSUNPTl9BTFRfVEVYVCA9IFwiXCI7XG5cbmV4cG9ydCBjbGFzcyBTaW1wbGVCZWxvd1NlYXJjaFNuaXBwZXQgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgcmVuZGVyVGV4dCgpIHtcbiAgICBjb25zdCB7IHByb3BzIH0gPSB0aGlzO1xuICAgIHJldHVybiAoXG4gICAgICA8UmljaFRleHRcbiAgICAgICAgdGV4dD17cHJvcHMuY29udGVudC50ZXh0fVxuICAgICAgICBjdXN0b21FbGVtZW50cz17dGhpcy5wcm9wcy5jdXN0b21FbGVtZW50c31cbiAgICAgICAgbG9jYWxpemF0aW9uX2lkPVwidGV4dFwiXG4gICAgICAgIGxpbmtzPXtwcm9wcy5jb250ZW50LmxpbmtzfVxuICAgICAgICBzZW5kQ2xpY2s9e3Byb3BzLnNlbmRDbGlja31cbiAgICAgIC8+XG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IHByb3BzIH0gPSB0aGlzO1xuICAgIGxldCBjbGFzc05hbWUgPSBcIlNpbXBsZUJlbG93U2VhcmNoU25pcHBldFwiO1xuXG4gICAgaWYgKHByb3BzLmNsYXNzTmFtZSkge1xuICAgICAgY2xhc3NOYW1lICs9IGAgJHtwcm9wcy5jbGFzc05hbWV9YDtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPFNuaXBwZXRCYXNlXG4gICAgICAgIHsuLi5wcm9wc31cbiAgICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWV9XG4gICAgICAgIHRleHRTdHlsZT17dGhpcy5wcm9wcy50ZXh0U3R5bGV9XG4gICAgICA+XG4gICAgICAgIDxpbWdcbiAgICAgICAgICBzcmM9e3NhZmVVUkkocHJvcHMuY29udGVudC5pY29uKSB8fCBERUZBVUxUX0lDT05fUEFUSH1cbiAgICAgICAgICBjbGFzc05hbWU9XCJpY29uIGljb24tbGlnaHQtdGhlbWVcIlxuICAgICAgICAgIGFsdD17cHJvcHMuY29udGVudC5pY29uX2FsdF90ZXh0IHx8IElDT05fQUxUX1RFWFR9XG4gICAgICAgIC8+XG4gICAgICAgIDxpbWdcbiAgICAgICAgICBzcmM9e1xuICAgICAgICAgICAgc2FmZVVSSShwcm9wcy5jb250ZW50Lmljb25fZGFya190aGVtZSB8fCBwcm9wcy5jb250ZW50Lmljb24pIHx8XG4gICAgICAgICAgICBERUZBVUxUX0lDT05fUEFUSFxuICAgICAgICAgIH1cbiAgICAgICAgICBjbGFzc05hbWU9XCJpY29uIGljb24tZGFyay10aGVtZVwiXG4gICAgICAgICAgYWx0PXtwcm9wcy5jb250ZW50Lmljb25fYWx0X3RleHQgfHwgSUNPTl9BTFRfVEVYVH1cbiAgICAgICAgLz5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICA8cCBjbGFzc05hbWU9XCJib2R5XCI+e3RoaXMucmVuZGVyVGV4dCgpfTwvcD5cbiAgICAgICAgICB7dGhpcy5wcm9wcy5leHRyYUNvbnRlbnR9XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9TbmlwcGV0QmFzZT5cbiAgICApO1xuICB9XG59XG4iLCIvKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIGZpbGUsXG4gKiBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLiAqL1xuXG5pbXBvcnQgeyBFT1lTbmlwcGV0IH0gZnJvbSBcIi4vRU9ZU25pcHBldC9FT1lTbmlwcGV0XCI7XG5pbXBvcnQgeyBGWEFTaWdudXBTbmlwcGV0IH0gZnJvbSBcIi4vRlhBU2lnbnVwU25pcHBldC9GWEFTaWdudXBTbmlwcGV0XCI7XG5pbXBvcnQgeyBOZXdzbGV0dGVyU25pcHBldCB9IGZyb20gXCIuL05ld3NsZXR0ZXJTbmlwcGV0L05ld3NsZXR0ZXJTbmlwcGV0XCI7XG5pbXBvcnQgeyBTZW5kVG9EZXZpY2VTbmlwcGV0IH0gZnJvbSBcIi4vU2VuZFRvRGV2aWNlU25pcHBldC9TZW5kVG9EZXZpY2VTbmlwcGV0XCI7XG5pbXBvcnQgeyBTaW1wbGVCZWxvd1NlYXJjaFNuaXBwZXQgfSBmcm9tIFwiLi9TaW1wbGVCZWxvd1NlYXJjaFNuaXBwZXQvU2ltcGxlQmVsb3dTZWFyY2hTbmlwcGV0XCI7XG5pbXBvcnQgeyBTaW1wbGVTbmlwcGV0IH0gZnJvbSBcIi4vU2ltcGxlU25pcHBldC9TaW1wbGVTbmlwcGV0XCI7XG5cbi8vIEtleSBuYW1lcyBtYXRjaGluZyBzY2hlbWEgbmFtZSBvZiB0ZW1wbGF0ZXNcbmV4cG9ydCBjb25zdCBTbmlwcGV0c1RlbXBsYXRlcyA9IHtcbiAgc2ltcGxlX3NuaXBwZXQ6IFNpbXBsZVNuaXBwZXQsXG4gIG5ld3NsZXR0ZXJfc25pcHBldDogTmV3c2xldHRlclNuaXBwZXQsXG4gIGZ4YV9zaWdudXBfc25pcHBldDogRlhBU2lnbnVwU25pcHBldCxcbiAgc2VuZF90b19kZXZpY2Vfc25pcHBldDogU2VuZFRvRGV2aWNlU25pcHBldCxcbiAgZW95X3NuaXBwZXQ6IEVPWVNuaXBwZXQsXG4gIHNpbXBsZV9iZWxvd19zZWFyY2hfc25pcHBldDogU2ltcGxlQmVsb3dTZWFyY2hTbmlwcGV0LFxufTtcbiIsIi8qIGdsb2JhbCBJbnRsICovXG5cbi8qKlxuICogVGhlIGBGbHVlbnRUeXBlYCBjbGFzcyBpcyB0aGUgYmFzZSBvZiBGbHVlbnQncyB0eXBlIHN5c3RlbS5cbiAqXG4gKiBGbHVlbnQgdHlwZXMgd3JhcCBKYXZhU2NyaXB0IHZhbHVlcyBhbmQgc3RvcmUgYWRkaXRpb25hbCBjb25maWd1cmF0aW9uIGZvclxuICogdGhlbSwgd2hpY2ggY2FuIHRoZW4gYmUgdXNlZCBpbiB0aGUgYHRvU3RyaW5nYCBtZXRob2QgdG9nZXRoZXIgd2l0aCBhIHByb3BlclxuICogYEludGxgIGZvcm1hdHRlci5cbiAqL1xuZXhwb3J0IGNsYXNzIEZsdWVudFR5cGUge1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgYW4gYEZsdWVudFR5cGVgIGluc3RhbmNlLlxuICAgKlxuICAgKiBAcGFyYW0gICB7QW55fSAgICB2YWx1ZSAtIEphdmFTY3JpcHQgdmFsdWUgdG8gd3JhcC5cbiAgICogQHBhcmFtICAge09iamVjdH0gb3B0cyAgLSBDb25maWd1cmF0aW9uLlxuICAgKiBAcmV0dXJucyB7Rmx1ZW50VHlwZX1cbiAgICovXG4gIGNvbnN0cnVjdG9yKHZhbHVlLCBvcHRzKSB7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIHRoaXMub3B0cyA9IG9wdHM7XG4gIH1cblxuICAvKipcbiAgICogVW53cmFwIHRoZSByYXcgdmFsdWUgc3RvcmVkIGJ5IHRoaXMgYEZsdWVudFR5cGVgLlxuICAgKlxuICAgKiBAcmV0dXJucyB7QW55fVxuICAgKi9cbiAgdmFsdWVPZigpIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGb3JtYXQgdGhpcyBpbnN0YW5jZSBvZiBgRmx1ZW50VHlwZWAgdG8gYSBzdHJpbmcuXG4gICAqXG4gICAqIEZvcm1hdHRlZCB2YWx1ZXMgYXJlIHN1aXRhYmxlIGZvciB1c2Ugb3V0c2lkZSBvZiB0aGUgYEZsdWVudEJ1bmRsZWAuXG4gICAqIFRoaXMgbWV0aG9kIGNhbiB1c2UgYEludGxgIGZvcm1hdHRlcnMgbWVtb2l6ZWQgYnkgdGhlIGBGbHVlbnRCdW5kbGVgXG4gICAqIGluc3RhbmNlIHBhc3NlZCBhcyBhbiBhcmd1bWVudC5cbiAgICpcbiAgICogQHBhcmFtICAge0ZsdWVudEJ1bmRsZX0gW2J1bmRsZV1cbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIHRvU3RyaW5nKCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlN1YmNsYXNzZXMgb2YgRmx1ZW50VHlwZSBtdXN0IGltcGxlbWVudCB0b1N0cmluZy5cIik7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEZsdWVudE5vbmUgZXh0ZW5kcyBGbHVlbnRUeXBlIHtcbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMudmFsdWUgfHwgXCI/Pz9cIjtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgRmx1ZW50TnVtYmVyIGV4dGVuZHMgRmx1ZW50VHlwZSB7XG4gIGNvbnN0cnVjdG9yKHZhbHVlLCBvcHRzKSB7XG4gICAgc3VwZXIocGFyc2VGbG9hdCh2YWx1ZSksIG9wdHMpO1xuICB9XG5cbiAgdG9TdHJpbmcoYnVuZGxlKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IG5mID0gYnVuZGxlLl9tZW1vaXplSW50bE9iamVjdChcbiAgICAgICAgSW50bC5OdW1iZXJGb3JtYXQsIHRoaXMub3B0c1xuICAgICAgKTtcbiAgICAgIHJldHVybiBuZi5mb3JtYXQodGhpcy52YWx1ZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gWFhYIFJlcG9ydCB0aGUgZXJyb3IuXG4gICAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEZsdWVudERhdGVUaW1lIGV4dGVuZHMgRmx1ZW50VHlwZSB7XG4gIGNvbnN0cnVjdG9yKHZhbHVlLCBvcHRzKSB7XG4gICAgc3VwZXIobmV3IERhdGUodmFsdWUpLCBvcHRzKTtcbiAgfVxuXG4gIHRvU3RyaW5nKGJ1bmRsZSkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBkdGYgPSBidW5kbGUuX21lbW9pemVJbnRsT2JqZWN0KFxuICAgICAgICBJbnRsLkRhdGVUaW1lRm9ybWF0LCB0aGlzLm9wdHNcbiAgICAgICk7XG4gICAgICByZXR1cm4gZHRmLmZvcm1hdCh0aGlzLnZhbHVlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBYWFggUmVwb3J0IHRoZSBlcnJvci5cbiAgICAgIHJldHVybiB0aGlzLnZhbHVlO1xuICAgIH1cbiAgfVxufVxuIiwiLyoqXG4gKiBAb3ZlcnZpZXdcbiAqXG4gKiBUaGUgRlRMIHJlc29sdmVyIHNoaXBzIHdpdGggYSBudW1iZXIgb2YgZnVuY3Rpb25zIGJ1aWx0LWluLlxuICpcbiAqIEVhY2ggZnVuY3Rpb24gdGFrZSB0d28gYXJndW1lbnRzOlxuICogICAtIGFyZ3MgLSBhbiBhcnJheSBvZiBwb3NpdGlvbmFsIGFyZ3NcbiAqICAgLSBvcHRzIC0gYW4gb2JqZWN0IG9mIGtleS12YWx1ZSBhcmdzXG4gKlxuICogQXJndW1lbnRzIHRvIGZ1bmN0aW9ucyBhcmUgZ3VhcmFudGVlZCB0byBhbHJlYWR5IGJlIGluc3RhbmNlcyBvZlxuICogYEZsdWVudFR5cGVgLiAgRnVuY3Rpb25zIG11c3QgcmV0dXJuIGBGbHVlbnRUeXBlYCBvYmplY3RzIGFzIHdlbGwuXG4gKi9cblxuaW1wb3J0IHsgRmx1ZW50TnVtYmVyLCBGbHVlbnREYXRlVGltZSB9IGZyb20gXCIuL3R5cGVzLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgXCJOVU1CRVJcIjogKFthcmddLCBvcHRzKSA9PlxuICAgIG5ldyBGbHVlbnROdW1iZXIoYXJnLnZhbHVlT2YoKSwgbWVyZ2UoYXJnLm9wdHMsIG9wdHMpKSxcbiAgXCJEQVRFVElNRVwiOiAoW2FyZ10sIG9wdHMpID0+XG4gICAgbmV3IEZsdWVudERhdGVUaW1lKGFyZy52YWx1ZU9mKCksIG1lcmdlKGFyZy5vcHRzLCBvcHRzKSksXG59O1xuXG5mdW5jdGlvbiBtZXJnZShhcmdvcHRzLCBvcHRzKSB7XG4gIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBhcmdvcHRzLCB2YWx1ZXMob3B0cykpO1xufVxuXG5mdW5jdGlvbiB2YWx1ZXMob3B0cykge1xuICBjb25zdCB1bndyYXBwZWQgPSB7fTtcbiAgZm9yIChjb25zdCBbbmFtZSwgb3B0XSBvZiBPYmplY3QuZW50cmllcyhvcHRzKSkge1xuICAgIHVud3JhcHBlZFtuYW1lXSA9IG9wdC52YWx1ZU9mKCk7XG4gIH1cbiAgcmV0dXJuIHVud3JhcHBlZDtcbn1cbiIsIi8qIGdsb2JhbCBJbnRsICovXG5cbi8qKlxuICogQG92ZXJ2aWV3XG4gKlxuICogVGhlIHJvbGUgb2YgdGhlIEZsdWVudCByZXNvbHZlciBpcyB0byBmb3JtYXQgYSB0cmFuc2xhdGlvbiBvYmplY3QgdG8gYW5cbiAqIGluc3RhbmNlIG9mIGBGbHVlbnRUeXBlYCBvciBhbiBhcnJheSBvZiBpbnN0YW5jZXMuXG4gKlxuICogVHJhbnNsYXRpb25zIGNhbiBjb250YWluIHJlZmVyZW5jZXMgdG8gb3RoZXIgbWVzc2FnZXMgb3IgdmFyaWFibGVzLFxuICogY29uZGl0aW9uYWwgbG9naWMgaW4gZm9ybSBvZiBzZWxlY3QgZXhwcmVzc2lvbnMsIHRyYWl0cyB3aGljaCBkZXNjcmliZSB0aGVpclxuICogZ3JhbW1hdGljYWwgZmVhdHVyZXMsIGFuZCBjYW4gdXNlIEZsdWVudCBidWlsdGlucyB3aGljaCBtYWtlIHVzZSBvZiB0aGVcbiAqIGBJbnRsYCBmb3JtYXR0ZXJzIHRvIGZvcm1hdCBudW1iZXJzLCBkYXRlcywgbGlzdHMgYW5kIG1vcmUgaW50byB0aGVcbiAqIGJ1bmRsZSdzIGxhbmd1YWdlLiBTZWUgdGhlIGRvY3VtZW50YXRpb24gb2YgdGhlIEZsdWVudCBzeW50YXggZm9yIG1vcmVcbiAqIGluZm9ybWF0aW9uLlxuICpcbiAqIEluIGNhc2Ugb2YgZXJyb3JzIHRoZSByZXNvbHZlciB3aWxsIHRyeSB0byBzYWx2YWdlIGFzIG11Y2ggb2YgdGhlXG4gKiB0cmFuc2xhdGlvbiBhcyBwb3NzaWJsZS4gIEluIHJhcmUgc2l0dWF0aW9ucyB3aGVyZSB0aGUgcmVzb2x2ZXIgZGlkbid0IGtub3dcbiAqIGhvdyB0byByZWNvdmVyIGZyb20gYW4gZXJyb3IgaXQgd2lsbCByZXR1cm4gYW4gaW5zdGFuY2Ugb2YgYEZsdWVudE5vbmVgLlxuICpcbiAqIEFsbCBleHByZXNzaW9ucyByZXNvbHZlIHRvIGFuIGluc3RhbmNlIG9mIGBGbHVlbnRUeXBlYC4gVGhlIGNhbGxlciBzaG91bGRcbiAqIHVzZSB0aGUgYHRvU3RyaW5nYCBtZXRob2QgdG8gY29udmVydCB0aGUgaW5zdGFuY2UgdG8gYSBuYXRpdmUgdmFsdWUuXG4gKlxuICogQWxsIGZ1bmN0aW9ucyBpbiB0aGlzIGZpbGUgcGFzcyBhcm91bmQgYSBzcGVjaWFsIG9iamVjdCBjYWxsZWQgYHNjb3BlYC5cbiAqIFRoaXMgb2JqZWN0IHN0b3JlcyBhIHNldCBvZiBlbGVtZW50cyB1c2VkIGJ5IGFsbCByZXNvbHZlIGZ1bmN0aW9uczpcbiAqXG4gKiAgKiB7Rmx1ZW50QnVuZGxlfSBidW5kbGVcbiAqICAgICAgYnVuZGxlIGZvciB3aGljaCB0aGUgZ2l2ZW4gcmVzb2x1dGlvbiBpcyBoYXBwZW5pbmdcbiAqICAqIHtPYmplY3R9IGFyZ3NcbiAqICAgICAgbGlzdCBvZiBkZXZlbG9wZXIgcHJvdmlkZWQgYXJndW1lbnRzIHRoYXQgY2FuIGJlIHVzZWRcbiAqICAqIHtBcnJheX0gZXJyb3JzXG4gKiAgICAgIGxpc3Qgb2YgZXJyb3JzIGNvbGxlY3RlZCB3aGlsZSByZXNvbHZpbmdcbiAqICAqIHtXZWFrU2V0fSBkaXJ0eVxuICogICAgICBTZXQgb2YgcGF0dGVybnMgYWxyZWFkeSBlbmNvdW50ZXJlZCBkdXJpbmcgdGhpcyByZXNvbHV0aW9uLlxuICogICAgICBUaGlzIGlzIHVzZWQgdG8gcHJldmVudCBjeWNsaWMgcmVzb2x1dGlvbnMuXG4gKi9cblxuXG5pbXBvcnQgeyBGbHVlbnRUeXBlLCBGbHVlbnROb25lLCBGbHVlbnROdW1iZXIsIEZsdWVudERhdGVUaW1lIH1cbiAgZnJvbSBcIi4vdHlwZXMuanNcIjtcbmltcG9ydCBidWlsdGlucyBmcm9tIFwiLi9idWlsdGlucy5qc1wiO1xuXG4vLyBQcmV2ZW50IGV4cGFuc2lvbiBvZiB0b28gbG9uZyBwbGFjZWFibGVzLlxuY29uc3QgTUFYX1BMQUNFQUJMRV9MRU5HVEggPSAyNTAwO1xuXG4vLyBVbmljb2RlIGJpZGkgaXNvbGF0aW9uIGNoYXJhY3RlcnMuXG5jb25zdCBGU0kgPSBcIlxcdTIwNjhcIjtcbmNvbnN0IFBESSA9IFwiXFx1MjA2OVwiO1xuXG5cbi8vIEhlbHBlcjogbWF0Y2ggYSB2YXJpYW50IGtleSB0byB0aGUgZ2l2ZW4gc2VsZWN0b3IuXG5mdW5jdGlvbiBtYXRjaChidW5kbGUsIHNlbGVjdG9yLCBrZXkpIHtcbiAgaWYgKGtleSA9PT0gc2VsZWN0b3IpIHtcbiAgICAvLyBCb3RoIGFyZSBzdHJpbmdzLlxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLy8gWFhYIENvbnNpZGVyIGNvbXBhcmluZyBvcHRpb25zIHRvbywgZS5nLiBtaW5pbXVtRnJhY3Rpb25EaWdpdHMuXG4gIGlmIChrZXkgaW5zdGFuY2VvZiBGbHVlbnROdW1iZXJcbiAgICAmJiBzZWxlY3RvciBpbnN0YW5jZW9mIEZsdWVudE51bWJlclxuICAgICYmIGtleS52YWx1ZSA9PT0gc2VsZWN0b3IudmFsdWUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmIChzZWxlY3RvciBpbnN0YW5jZW9mIEZsdWVudE51bWJlciAmJiB0eXBlb2Yga2V5ID09PSBcInN0cmluZ1wiKSB7XG4gICAgbGV0IGNhdGVnb3J5ID0gYnVuZGxlXG4gICAgICAuX21lbW9pemVJbnRsT2JqZWN0KEludGwuUGx1cmFsUnVsZXMsIHNlbGVjdG9yLm9wdHMpXG4gICAgICAuc2VsZWN0KHNlbGVjdG9yLnZhbHVlKTtcbiAgICBpZiAoa2V5ID09PSBjYXRlZ29yeSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vLyBIZWxwZXI6IHJlc29sdmUgdGhlIGRlZmF1bHQgdmFyaWFudCBmcm9tIGEgbGlzdCBvZiB2YXJpYW50cy5cbmZ1bmN0aW9uIGdldERlZmF1bHQoc2NvcGUsIHZhcmlhbnRzLCBzdGFyKSB7XG4gIGlmICh2YXJpYW50c1tzdGFyXSkge1xuICAgIHJldHVybiBUeXBlKHNjb3BlLCB2YXJpYW50c1tzdGFyXSk7XG4gIH1cblxuICBzY29wZS5lcnJvcnMucHVzaChuZXcgUmFuZ2VFcnJvcihcIk5vIGRlZmF1bHRcIikpO1xuICByZXR1cm4gbmV3IEZsdWVudE5vbmUoKTtcbn1cblxuLy8gSGVscGVyOiByZXNvbHZlIGFyZ3VtZW50cyB0byBhIGNhbGwgZXhwcmVzc2lvbi5cbmZ1bmN0aW9uIGdldEFyZ3VtZW50cyhzY29wZSwgYXJncykge1xuICBjb25zdCBwb3NpdGlvbmFsID0gW107XG4gIGNvbnN0IG5hbWVkID0ge307XG5cbiAgZm9yIChjb25zdCBhcmcgb2YgYXJncykge1xuICAgIGlmIChhcmcudHlwZSA9PT0gXCJuYXJnXCIpIHtcbiAgICAgIG5hbWVkW2FyZy5uYW1lXSA9IFR5cGUoc2NvcGUsIGFyZy52YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBvc2l0aW9uYWwucHVzaChUeXBlKHNjb3BlLCBhcmcpKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gW3Bvc2l0aW9uYWwsIG5hbWVkXTtcbn1cblxuLy8gUmVzb2x2ZSBhbiBleHByZXNzaW9uIHRvIGEgRmx1ZW50IHR5cGUuXG5mdW5jdGlvbiBUeXBlKHNjb3BlLCBleHByKSB7XG4gIC8vIEEgZmFzdC1wYXRoIGZvciBzdHJpbmdzIHdoaWNoIGFyZSB0aGUgbW9zdCBjb21tb24gY2FzZS4gU2luY2UgdGhleVxuICAvLyBuYXRpdmVseSBoYXZlIHRoZSBgdG9TdHJpbmdgIG1ldGhvZCB0aGV5IGNhbiBiZSB1c2VkIGFzIGlmIHRoZXkgd2VyZVxuICAvLyBhIEZsdWVudFR5cGUgaW5zdGFuY2Ugd2l0aG91dCBpbmN1cnJpbmcgdGhlIGNvc3Qgb2YgY3JlYXRpbmcgb25lLlxuICBpZiAodHlwZW9mIGV4cHIgPT09IFwic3RyaW5nXCIpIHtcbiAgICByZXR1cm4gc2NvcGUuYnVuZGxlLl90cmFuc2Zvcm0oZXhwcik7XG4gIH1cblxuICAvLyBBIGZhc3QtcGF0aCBmb3IgYEZsdWVudE5vbmVgIHdoaWNoIGRvZXNuJ3QgcmVxdWlyZSBhbnkgYWRkaXRpb25hbCBsb2dpYy5cbiAgaWYgKGV4cHIgaW5zdGFuY2VvZiBGbHVlbnROb25lKSB7XG4gICAgcmV0dXJuIGV4cHI7XG4gIH1cblxuICAvLyBUaGUgUnVudGltZSBBU1QgKEVudHJpZXMpIGVuY29kZXMgcGF0dGVybnMgKGNvbXBsZXggc3RyaW5ncyB3aXRoXG4gIC8vIHBsYWNlYWJsZXMpIGFzIEFycmF5cy5cbiAgaWYgKEFycmF5LmlzQXJyYXkoZXhwcikpIHtcbiAgICByZXR1cm4gUGF0dGVybihzY29wZSwgZXhwcik7XG4gIH1cblxuICBzd2l0Y2ggKGV4cHIudHlwZSkge1xuICAgIGNhc2UgXCJzdHJcIjpcbiAgICAgIHJldHVybiBleHByLnZhbHVlO1xuICAgIGNhc2UgXCJudW1cIjpcbiAgICAgIHJldHVybiBuZXcgRmx1ZW50TnVtYmVyKGV4cHIudmFsdWUsIHtcbiAgICAgICAgbWluaW11bUZyYWN0aW9uRGlnaXRzOiBleHByLnByZWNpc2lvbixcbiAgICAgIH0pO1xuICAgIGNhc2UgXCJ2YXJcIjpcbiAgICAgIHJldHVybiBWYXJpYWJsZVJlZmVyZW5jZShzY29wZSwgZXhwcik7XG4gICAgY2FzZSBcIm1lc2dcIjpcbiAgICAgIHJldHVybiBNZXNzYWdlUmVmZXJlbmNlKHNjb3BlLCBleHByKTtcbiAgICBjYXNlIFwidGVybVwiOlxuICAgICAgcmV0dXJuIFRlcm1SZWZlcmVuY2Uoc2NvcGUsIGV4cHIpO1xuICAgIGNhc2UgXCJmdW5jXCI6XG4gICAgICByZXR1cm4gRnVuY3Rpb25SZWZlcmVuY2Uoc2NvcGUsIGV4cHIpO1xuICAgIGNhc2UgXCJzZWxlY3RcIjpcbiAgICAgIHJldHVybiBTZWxlY3RFeHByZXNzaW9uKHNjb3BlLCBleHByKTtcbiAgICBjYXNlIHVuZGVmaW5lZDoge1xuICAgICAgLy8gSWYgaXQncyBhIG5vZGUgd2l0aCBhIHZhbHVlLCByZXNvbHZlIHRoZSB2YWx1ZS5cbiAgICAgIGlmIChleHByLnZhbHVlICE9PSBudWxsICYmIGV4cHIudmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gVHlwZShzY29wZSwgZXhwci52YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIHNjb3BlLmVycm9ycy5wdXNoKG5ldyBSYW5nZUVycm9yKFwiTm8gdmFsdWVcIikpO1xuICAgICAgcmV0dXJuIG5ldyBGbHVlbnROb25lKCk7XG4gICAgfVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gbmV3IEZsdWVudE5vbmUoKTtcbiAgfVxufVxuXG4vLyBSZXNvbHZlIGEgcmVmZXJlbmNlIHRvIGEgdmFyaWFibGUuXG5mdW5jdGlvbiBWYXJpYWJsZVJlZmVyZW5jZShzY29wZSwge25hbWV9KSB7XG4gIGlmICghc2NvcGUuYXJncyB8fCAhc2NvcGUuYXJncy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgIGlmIChzY29wZS5pbnNpZGVUZXJtUmVmZXJlbmNlID09PSBmYWxzZSkge1xuICAgICAgc2NvcGUuZXJyb3JzLnB1c2gobmV3IFJlZmVyZW5jZUVycm9yKGBVbmtub3duIHZhcmlhYmxlOiAke25hbWV9YCkpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IEZsdWVudE5vbmUoYCQke25hbWV9YCk7XG4gIH1cblxuICBjb25zdCBhcmcgPSBzY29wZS5hcmdzW25hbWVdO1xuXG4gIC8vIFJldHVybiBlYXJseSBpZiB0aGUgYXJndW1lbnQgYWxyZWFkeSBpcyBhbiBpbnN0YW5jZSBvZiBGbHVlbnRUeXBlLlxuICBpZiAoYXJnIGluc3RhbmNlb2YgRmx1ZW50VHlwZSkge1xuICAgIHJldHVybiBhcmc7XG4gIH1cblxuICAvLyBDb252ZXJ0IHRoZSBhcmd1bWVudCB0byBhIEZsdWVudCB0eXBlLlxuICBzd2l0Y2ggKHR5cGVvZiBhcmcpIHtcbiAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgICByZXR1cm4gYXJnO1xuICAgIGNhc2UgXCJudW1iZXJcIjpcbiAgICAgIHJldHVybiBuZXcgRmx1ZW50TnVtYmVyKGFyZyk7XG4gICAgY2FzZSBcIm9iamVjdFwiOlxuICAgICAgaWYgKGFyZyBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBGbHVlbnREYXRlVGltZShhcmcpO1xuICAgICAgfVxuICAgIGRlZmF1bHQ6XG4gICAgICBzY29wZS5lcnJvcnMucHVzaChcbiAgICAgICAgbmV3IFR5cGVFcnJvcihgVW5zdXBwb3J0ZWQgdmFyaWFibGUgdHlwZTogJHtuYW1lfSwgJHt0eXBlb2YgYXJnfWApXG4gICAgICApO1xuICAgICAgcmV0dXJuIG5ldyBGbHVlbnROb25lKGAkJHtuYW1lfWApO1xuICB9XG59XG5cbi8vIFJlc29sdmUgYSByZWZlcmVuY2UgdG8gYW5vdGhlciBtZXNzYWdlLlxuZnVuY3Rpb24gTWVzc2FnZVJlZmVyZW5jZShzY29wZSwge25hbWUsIGF0dHJ9KSB7XG4gIGNvbnN0IG1lc3NhZ2UgPSBzY29wZS5idW5kbGUuX21lc3NhZ2VzLmdldChuYW1lKTtcbiAgaWYgKCFtZXNzYWdlKSB7XG4gICAgY29uc3QgZXJyID0gbmV3IFJlZmVyZW5jZUVycm9yKGBVbmtub3duIG1lc3NhZ2U6ICR7bmFtZX1gKTtcbiAgICBzY29wZS5lcnJvcnMucHVzaChlcnIpO1xuICAgIHJldHVybiBuZXcgRmx1ZW50Tm9uZShuYW1lKTtcbiAgfVxuXG4gIGlmIChhdHRyKSB7XG4gICAgY29uc3QgYXR0cmlidXRlID0gbWVzc2FnZS5hdHRycyAmJiBtZXNzYWdlLmF0dHJzW2F0dHJdO1xuICAgIGlmIChhdHRyaWJ1dGUpIHtcbiAgICAgIHJldHVybiBUeXBlKHNjb3BlLCBhdHRyaWJ1dGUpO1xuICAgIH1cbiAgICBzY29wZS5lcnJvcnMucHVzaChuZXcgUmVmZXJlbmNlRXJyb3IoYFVua25vd24gYXR0cmlidXRlOiAke2F0dHJ9YCkpO1xuICAgIHJldHVybiBUeXBlKHNjb3BlLCBtZXNzYWdlKTtcbiAgfVxuXG4gIHJldHVybiBUeXBlKHNjb3BlLCBtZXNzYWdlKTtcbn1cblxuLy8gUmVzb2x2ZSBhIGNhbGwgdG8gYSBUZXJtIHdpdGgga2V5LXZhbHVlIGFyZ3VtZW50cy5cbmZ1bmN0aW9uIFRlcm1SZWZlcmVuY2Uoc2NvcGUsIHtuYW1lLCBhdHRyLCBhcmdzfSkge1xuICBjb25zdCBpZCA9IGAtJHtuYW1lfWA7XG4gIGNvbnN0IHRlcm0gPSBzY29wZS5idW5kbGUuX3Rlcm1zLmdldChpZCk7XG4gIGlmICghdGVybSkge1xuICAgIGNvbnN0IGVyciA9IG5ldyBSZWZlcmVuY2VFcnJvcihgVW5rbm93biB0ZXJtOiAke2lkfWApO1xuICAgIHNjb3BlLmVycm9ycy5wdXNoKGVycik7XG4gICAgcmV0dXJuIG5ldyBGbHVlbnROb25lKGlkKTtcbiAgfVxuXG4gIC8vIEV2ZXJ5IFRlcm1SZWZlcmVuY2UgaGFzIGl0cyBvd24gYXJncy5cbiAgY29uc3QgWywga2V5YXJnc10gPSBnZXRBcmd1bWVudHMoc2NvcGUsIGFyZ3MpO1xuICBjb25zdCBsb2NhbCA9IHsuLi5zY29wZSwgYXJnczoga2V5YXJncywgaW5zaWRlVGVybVJlZmVyZW5jZTogdHJ1ZX07XG5cbiAgaWYgKGF0dHIpIHtcbiAgICBjb25zdCBhdHRyaWJ1dGUgPSB0ZXJtLmF0dHJzICYmIHRlcm0uYXR0cnNbYXR0cl07XG4gICAgaWYgKGF0dHJpYnV0ZSkge1xuICAgICAgcmV0dXJuIFR5cGUobG9jYWwsIGF0dHJpYnV0ZSk7XG4gICAgfVxuICAgIHNjb3BlLmVycm9ycy5wdXNoKG5ldyBSZWZlcmVuY2VFcnJvcihgVW5rbm93biBhdHRyaWJ1dGU6ICR7YXR0cn1gKSk7XG4gICAgcmV0dXJuIFR5cGUobG9jYWwsIHRlcm0pO1xuICB9XG5cbiAgcmV0dXJuIFR5cGUobG9jYWwsIHRlcm0pO1xufVxuXG4vLyBSZXNvbHZlIGEgY2FsbCB0byBhIEZ1bmN0aW9uIHdpdGggcG9zaXRpb25hbCBhbmQga2V5LXZhbHVlIGFyZ3VtZW50cy5cbmZ1bmN0aW9uIEZ1bmN0aW9uUmVmZXJlbmNlKHNjb3BlLCB7bmFtZSwgYXJnc30pIHtcbiAgLy8gU29tZSBmdW5jdGlvbnMgYXJlIGJ1aWx0LWluLiBPdGhlcnMgbWF5IGJlIHByb3ZpZGVkIGJ5IHRoZSBydW50aW1lIHZpYVxuICAvLyB0aGUgYEZsdWVudEJ1bmRsZWAgY29uc3RydWN0b3IuXG4gIGNvbnN0IGZ1bmMgPSBzY29wZS5idW5kbGUuX2Z1bmN0aW9uc1tuYW1lXSB8fCBidWlsdGluc1tuYW1lXTtcbiAgaWYgKCFmdW5jKSB7XG4gICAgc2NvcGUuZXJyb3JzLnB1c2gobmV3IFJlZmVyZW5jZUVycm9yKGBVbmtub3duIGZ1bmN0aW9uOiAke25hbWV9KClgKSk7XG4gICAgcmV0dXJuIG5ldyBGbHVlbnROb25lKGAke25hbWV9KClgKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZnVuYyAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgc2NvcGUuZXJyb3JzLnB1c2gobmV3IFR5cGVFcnJvcihgRnVuY3Rpb24gJHtuYW1lfSgpIGlzIG5vdCBjYWxsYWJsZWApKTtcbiAgICByZXR1cm4gbmV3IEZsdWVudE5vbmUoYCR7bmFtZX0oKWApO1xuICB9XG5cbiAgdHJ5IHtcbiAgICByZXR1cm4gZnVuYyguLi5nZXRBcmd1bWVudHMoc2NvcGUsIGFyZ3MpKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIFhYWCBSZXBvcnQgZXJyb3JzLlxuICAgIHJldHVybiBuZXcgRmx1ZW50Tm9uZSgpO1xuICB9XG59XG5cbi8vIFJlc29sdmUgYSBzZWxlY3QgZXhwcmVzc2lvbiB0byB0aGUgbWVtYmVyIG9iamVjdC5cbmZ1bmN0aW9uIFNlbGVjdEV4cHJlc3Npb24oc2NvcGUsIHtzZWxlY3RvciwgdmFyaWFudHMsIHN0YXJ9KSB7XG4gIGxldCBzZWwgPSBUeXBlKHNjb3BlLCBzZWxlY3Rvcik7XG4gIGlmIChzZWwgaW5zdGFuY2VvZiBGbHVlbnROb25lKSB7XG4gICAgY29uc3QgdmFyaWFudCA9IGdldERlZmF1bHQoc2NvcGUsIHZhcmlhbnRzLCBzdGFyKTtcbiAgICByZXR1cm4gVHlwZShzY29wZSwgdmFyaWFudCk7XG4gIH1cblxuICAvLyBNYXRjaCB0aGUgc2VsZWN0b3IgYWdhaW5zdCBrZXlzIG9mIGVhY2ggdmFyaWFudCwgaW4gb3JkZXIuXG4gIGZvciAoY29uc3QgdmFyaWFudCBvZiB2YXJpYW50cykge1xuICAgIGNvbnN0IGtleSA9IFR5cGUoc2NvcGUsIHZhcmlhbnQua2V5KTtcbiAgICBpZiAobWF0Y2goc2NvcGUuYnVuZGxlLCBzZWwsIGtleSkpIHtcbiAgICAgIHJldHVybiBUeXBlKHNjb3BlLCB2YXJpYW50KTtcbiAgICB9XG4gIH1cblxuICBjb25zdCB2YXJpYW50ID0gZ2V0RGVmYXVsdChzY29wZSwgdmFyaWFudHMsIHN0YXIpO1xuICByZXR1cm4gVHlwZShzY29wZSwgdmFyaWFudCk7XG59XG5cbi8vIFJlc29sdmUgYSBwYXR0ZXJuIChhIGNvbXBsZXggc3RyaW5nIHdpdGggcGxhY2VhYmxlcykuXG5mdW5jdGlvbiBQYXR0ZXJuKHNjb3BlLCBwdG4pIHtcbiAgaWYgKHNjb3BlLmRpcnR5LmhhcyhwdG4pKSB7XG4gICAgc2NvcGUuZXJyb3JzLnB1c2gobmV3IFJhbmdlRXJyb3IoXCJDeWNsaWMgcmVmZXJlbmNlXCIpKTtcbiAgICByZXR1cm4gbmV3IEZsdWVudE5vbmUoKTtcbiAgfVxuXG4gIC8vIFRhZyB0aGUgcGF0dGVybiBhcyBkaXJ0eSBmb3IgdGhlIHB1cnBvc2Ugb2YgdGhlIGN1cnJlbnQgcmVzb2x1dGlvbi5cbiAgc2NvcGUuZGlydHkuYWRkKHB0bik7XG4gIGNvbnN0IHJlc3VsdCA9IFtdO1xuXG4gIC8vIFdyYXAgaW50ZXJwb2xhdGlvbnMgd2l0aCBEaXJlY3Rpb25hbCBJc29sYXRlIEZvcm1hdHRpbmcgY2hhcmFjdGVyc1xuICAvLyBvbmx5IHdoZW4gdGhlIHBhdHRlcm4gaGFzIG1vcmUgdGhhbiBvbmUgZWxlbWVudC5cbiAgY29uc3QgdXNlSXNvbGF0aW5nID0gc2NvcGUuYnVuZGxlLl91c2VJc29sYXRpbmcgJiYgcHRuLmxlbmd0aCA+IDE7XG5cbiAgZm9yIChjb25zdCBlbGVtIG9mIHB0bikge1xuICAgIGlmICh0eXBlb2YgZWxlbSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgcmVzdWx0LnB1c2goc2NvcGUuYnVuZGxlLl90cmFuc2Zvcm0oZWxlbSkpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgY29uc3QgcGFydCA9IFR5cGUoc2NvcGUsIGVsZW0pLnRvU3RyaW5nKHNjb3BlLmJ1bmRsZSk7XG5cbiAgICBpZiAodXNlSXNvbGF0aW5nKSB7XG4gICAgICByZXN1bHQucHVzaChGU0kpO1xuICAgIH1cblxuICAgIGlmIChwYXJ0Lmxlbmd0aCA+IE1BWF9QTEFDRUFCTEVfTEVOR1RIKSB7XG4gICAgICBzY29wZS5lcnJvcnMucHVzaChcbiAgICAgICAgbmV3IFJhbmdlRXJyb3IoXG4gICAgICAgICAgXCJUb28gbWFueSBjaGFyYWN0ZXJzIGluIHBsYWNlYWJsZSBcIiArXG4gICAgICAgICAgYCgke3BhcnQubGVuZ3RofSwgbWF4IGFsbG93ZWQgaXMgJHtNQVhfUExBQ0VBQkxFX0xFTkdUSH0pYFxuICAgICAgICApXG4gICAgICApO1xuICAgICAgcmVzdWx0LnB1c2gocGFydC5zbGljZShNQVhfUExBQ0VBQkxFX0xFTkdUSCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQucHVzaChwYXJ0KTtcbiAgICB9XG5cbiAgICBpZiAodXNlSXNvbGF0aW5nKSB7XG4gICAgICByZXN1bHQucHVzaChQREkpO1xuICAgIH1cbiAgfVxuXG4gIHNjb3BlLmRpcnR5LmRlbGV0ZShwdG4pO1xuICByZXR1cm4gcmVzdWx0LmpvaW4oXCJcIik7XG59XG5cbi8qKlxuICogRm9ybWF0IGEgdHJhbnNsYXRpb24gaW50byBhIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0gICB7Rmx1ZW50QnVuZGxlfSBidW5kbGVcbiAqICAgIEEgRmx1ZW50QnVuZGxlIGluc3RhbmNlIHdoaWNoIHdpbGwgYmUgdXNlZCB0byByZXNvbHZlIHRoZVxuICogICAgY29udGV4dHVhbCBpbmZvcm1hdGlvbiBvZiB0aGUgbWVzc2FnZS5cbiAqIEBwYXJhbSAgIHtPYmplY3R9ICAgICAgICAgYXJnc1xuICogICAgTGlzdCBvZiBhcmd1bWVudHMgcHJvdmlkZWQgYnkgdGhlIGRldmVsb3BlciB3aGljaCBjYW4gYmUgYWNjZXNzZWRcbiAqICAgIGZyb20gdGhlIG1lc3NhZ2UuXG4gKiBAcGFyYW0gICB7T2JqZWN0fSAgICAgICAgIG1lc3NhZ2VcbiAqICAgIEFuIG9iamVjdCB3aXRoIHRoZSBNZXNzYWdlIHRvIGJlIHJlc29sdmVkLlxuICogQHBhcmFtICAge0FycmF5fSAgICAgICAgICBlcnJvcnNcbiAqICAgIEFuIGVycm9yIGFycmF5IHRoYXQgYW55IGVuY291bnRlcmVkIGVycm9ycyB3aWxsIGJlIGFwcGVuZGVkIHRvLlxuICogQHJldHVybnMge0ZsdWVudFR5cGV9XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlc29sdmUoYnVuZGxlLCBhcmdzLCBtZXNzYWdlLCBlcnJvcnMgPSBbXSkge1xuICBjb25zdCBzY29wZSA9IHtcbiAgICBidW5kbGUsIGFyZ3MsIGVycm9ycywgZGlydHk6IG5ldyBXZWFrU2V0KCksXG4gICAgLy8gVGVybVJlZmVyZW5jZXMgYXJlIHJlc29sdmVkIGluIGEgbmV3IHNjb3BlLlxuICAgIGluc2lkZVRlcm1SZWZlcmVuY2U6IGZhbHNlLFxuICB9O1xuICByZXR1cm4gVHlwZShzY29wZSwgbWVzc2FnZSkudG9TdHJpbmcoYnVuZGxlKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIEZsdWVudEVycm9yIGV4dGVuZHMgRXJyb3Ige31cbiIsImltcG9ydCBGbHVlbnRFcnJvciBmcm9tIFwiLi9lcnJvci5qc1wiO1xuXG4vLyBUaGlzIHJlZ2V4IGlzIHVzZWQgdG8gaXRlcmF0ZSB0aHJvdWdoIHRoZSBiZWdpbm5pbmdzIG9mIG1lc3NhZ2VzIGFuZCB0ZXJtcy5cbi8vIFdpdGggdGhlIC9tIGZsYWcsIHRoZSBeIG1hdGNoZXMgYXQgdGhlIGJlZ2lubmluZyBvZiBldmVyeSBsaW5lLlxuY29uc3QgUkVfTUVTU0FHRV9TVEFSVCA9IC9eKC0/W2EtekEtWl1bXFx3LV0qKSAqPSAqL21nO1xuXG4vLyBCb3RoIEF0dHJpYnV0ZXMgYW5kIFZhcmlhbnRzIGFyZSBwYXJzZWQgaW4gd2hpbGUgbG9vcHMuIFRoZXNlIHJlZ2V4ZXMgYXJlXG4vLyB1c2VkIHRvIGJyZWFrIG91dCBvZiB0aGVtLlxuY29uc3QgUkVfQVRUUklCVVRFX1NUQVJUID0gL1xcLihbYS16QS1aXVtcXHctXSopICo9ICoveTtcbmNvbnN0IFJFX1ZBUklBTlRfU1RBUlQgPSAvXFwqP1xcWy95O1xuXG5jb25zdCBSRV9OVU1CRVJfTElURVJBTCA9IC8oLT9bMC05XSsoPzpcXC4oWzAtOV0rKSk/KS95O1xuY29uc3QgUkVfSURFTlRJRklFUiA9IC8oW2EtekEtWl1bXFx3LV0qKS95O1xuY29uc3QgUkVfUkVGRVJFTkNFID0gLyhbJC1dKT8oW2EtekEtWl1bXFx3LV0qKSg/OlxcLihbYS16QS1aXVtcXHctXSopKT8veTtcbmNvbnN0IFJFX0ZVTkNUSU9OX05BTUUgPSAvXltBLVpdW0EtWjAtOV8tXSokLztcblxuLy8gQSBcInJ1blwiIGlzIGEgc2VxdWVuY2Ugb2YgdGV4dCBvciBzdHJpbmcgbGl0ZXJhbCBjaGFyYWN0ZXJzIHdoaWNoIGRvbid0XG4vLyByZXF1aXJlIGFueSBzcGVjaWFsIGhhbmRsaW5nLiBGb3IgVGV4dEVsZW1lbnRzIHN1Y2ggc3BlY2lhbCBjaGFyYWN0ZXJzIGFyZToge1xuLy8gKHN0YXJ0cyBhIHBsYWNlYWJsZSksIGFuZCBsaW5lIGJyZWFrcyB3aGljaCByZXF1aXJlIGFkZGl0aW9uYWwgbG9naWMgdG8gY2hlY2tcbi8vIGlmIHRoZSBuZXh0IGxpbmUgaXMgaW5kZW50ZWQuIEZvciBTdHJpbmdMaXRlcmFscyB0aGV5IGFyZTogXFwgKHN0YXJ0cyBhblxuLy8gZXNjYXBlIHNlcXVlbmNlKSwgXCIgKGVuZHMgdGhlIGxpdGVyYWwpLCBhbmQgbGluZSBicmVha3Mgd2hpY2ggYXJlIG5vdCBhbGxvd2VkXG4vLyBpbiBTdHJpbmdMaXRlcmFscy4gTm90ZSB0aGF0IHN0cmluZyBydW5zIG1heSBiZSBlbXB0eTsgdGV4dCBydW5zIG1heSBub3QuXG5jb25zdCBSRV9URVhUX1JVTiA9IC8oW157fVxcblxccl0rKS95O1xuY29uc3QgUkVfU1RSSU5HX1JVTiA9IC8oW15cXFxcXCJcXG5cXHJdKikveTtcblxuLy8gRXNjYXBlIHNlcXVlbmNlcy5cbmNvbnN0IFJFX1NUUklOR19FU0NBUEUgPSAvXFxcXChbXFxcXFwiXSkveTtcbmNvbnN0IFJFX1VOSUNPREVfRVNDQVBFID0gL1xcXFx1KFthLWZBLUYwLTldezR9KXxcXFxcVShbYS1mQS1GMC05XXs2fSkveTtcblxuLy8gVXNlZCBmb3IgdHJpbW1pbmcgVGV4dEVsZW1lbnRzIGFuZCBpbmRlbnRzLlxuY29uc3QgUkVfTEVBRElOR19ORVdMSU5FUyA9IC9eXFxuKy87XG5jb25zdCBSRV9UUkFJTElOR19TUEFDRVMgPSAvICskLztcbi8vIFVzZWQgaW4gbWFrZUluZGVudCB0byBzdHJpcCBzcGFjZXMgZnJvbSBibGFuayBsaW5lcyBhbmQgbm9ybWFsaXplIENSTEYgdG8gTEYuXG5jb25zdCBSRV9CTEFOS19MSU5FUyA9IC8gKlxccj9cXG4vZztcbi8vIFVzZWQgaW4gbWFrZUluZGVudCB0byBtZWFzdXJlIHRoZSBpbmRlbnRhdGlvbi5cbmNvbnN0IFJFX0lOREVOVCA9IC8oICopJC87XG5cbi8vIENvbW1vbiB0b2tlbnMuXG5jb25zdCBUT0tFTl9CUkFDRV9PUEVOID0gL3tcXHMqL3k7XG5jb25zdCBUT0tFTl9CUkFDRV9DTE9TRSA9IC9cXHMqfS95O1xuY29uc3QgVE9LRU5fQlJBQ0tFVF9PUEVOID0gL1xcW1xccyoveTtcbmNvbnN0IFRPS0VOX0JSQUNLRVRfQ0xPU0UgPSAvXFxzKl0gKi95O1xuY29uc3QgVE9LRU5fUEFSRU5fT1BFTiA9IC9cXHMqXFwoXFxzKi95O1xuY29uc3QgVE9LRU5fQVJST1cgPSAvXFxzKi0+XFxzKi95O1xuY29uc3QgVE9LRU5fQ09MT04gPSAvXFxzKjpcXHMqL3k7XG4vLyBOb3RlIHRoZSBvcHRpb25hbCBjb21tYS4gQXMgYSBkZXZpYXRpb24gZnJvbSB0aGUgRmx1ZW50IEVCTkYsIHRoZSBwYXJzZXJcbi8vIGRvZXNuJ3QgZW5mb3JjZSBjb21tYXMgYmV0d2VlbiBjYWxsIGFyZ3VtZW50cy5cbmNvbnN0IFRPS0VOX0NPTU1BID0gL1xccyosP1xccyoveTtcbmNvbnN0IFRPS0VOX0JMQU5LID0gL1xccysveTtcblxuLy8gTWF4aW11bSBudW1iZXIgb2YgcGxhY2VhYmxlcyBpbiBhIHNpbmdsZSBQYXR0ZXJuIHRvIHByb3RlY3QgYWdhaW5zdCBRdWFkcmF0aWNcbi8vIEJsb3d1cCBhdHRhY2tzLiBTZWUgaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbWFnYXppbmUvZWUzMzU3MTMuYXNweC5cbmNvbnN0IE1BWF9QTEFDRUFCTEVTID0gMTAwO1xuXG4vKipcbiAqIEZsdWVudCBSZXNvdXJjZSBpcyBhIHN0cnVjdHVyZSBzdG9yaW5nIGEgbWFwIG9mIHBhcnNlZCBsb2NhbGl6YXRpb24gZW50cmllcy5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRmx1ZW50UmVzb3VyY2UgZXh0ZW5kcyBNYXAge1xuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IEZsdWVudFJlc291cmNlIGZyb20gRmx1ZW50IGNvZGUuXG4gICAqL1xuICBzdGF0aWMgZnJvbVN0cmluZyhzb3VyY2UpIHtcbiAgICBSRV9NRVNTQUdFX1NUQVJULmxhc3RJbmRleCA9IDA7XG5cbiAgICBsZXQgcmVzb3VyY2UgPSBuZXcgdGhpcygpO1xuICAgIGxldCBjdXJzb3IgPSAwO1xuXG4gICAgLy8gSXRlcmF0ZSBvdmVyIHRoZSBiZWdpbm5pbmdzIG9mIG1lc3NhZ2VzIGFuZCB0ZXJtcyB0byBlZmZpY2llbnRseSBza2lwXG4gICAgLy8gY29tbWVudHMgYW5kIHJlY292ZXIgZnJvbSBlcnJvcnMuXG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgIGxldCBuZXh0ID0gUkVfTUVTU0FHRV9TVEFSVC5leGVjKHNvdXJjZSk7XG4gICAgICBpZiAobmV4dCA9PT0gbnVsbCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgY3Vyc29yID0gUkVfTUVTU0FHRV9TVEFSVC5sYXN0SW5kZXg7XG4gICAgICB0cnkge1xuICAgICAgICByZXNvdXJjZS5zZXQobmV4dFsxXSwgcGFyc2VNZXNzYWdlKCkpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGlmIChlcnIgaW5zdGFuY2VvZiBGbHVlbnRFcnJvcikge1xuICAgICAgICAgIC8vIERvbid0IHJlcG9ydCBhbnkgRmx1ZW50IHN5bnRheCBlcnJvcnMuIFNraXAgZGlyZWN0bHkgdG8gdGhlXG4gICAgICAgICAgLy8gYmVnaW5uaW5nIG9mIHRoZSBuZXh0IG1lc3NhZ2Ugb3IgdGVybS5cbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBlcnI7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc291cmNlO1xuXG4gICAgLy8gVGhlIHBhcnNlciBpbXBsZW1lbnRhdGlvbiBpcyBpbmxpbmVkIGJlbG93IGZvciBwZXJmb3JtYW5jZSByZWFzb25zLlxuXG4gICAgLy8gVGhlIHBhcnNlciBmb2N1c2VzIG9uIG1pbmltaXppbmcgdGhlIG51bWJlciBvZiBmYWxzZSBuZWdhdGl2ZXMgYXQgdGhlXG4gICAgLy8gZXhwZW5zZSBvZiBpbmNyZWFzaW5nIHRoZSByaXNrIG9mIGZhbHNlIHBvc2l0aXZlcy4gSW4gb3RoZXIgd29yZHMsIGl0XG4gICAgLy8gYWltcyBhdCBwYXJzaW5nIHZhbGlkIEZsdWVudCBtZXNzYWdlcyB3aXRoIGEgc3VjY2VzcyByYXRlIG9mIDEwMCUsIGJ1dCBpdFxuICAgIC8vIG1heSBhbHNvIHBhcnNlIGEgZmV3IGludmFsaWQgbWVzc2FnZXMgd2hpY2ggdGhlIHJlZmVyZW5jZSBwYXJzZXIgd291bGRcbiAgICAvLyByZWplY3QuIFRoZSBwYXJzZXIgZG9lc24ndCBwZXJmb3JtIGFueSB2YWxpZGF0aW9uIGFuZCBtYXkgcHJvZHVjZSBlbnRyaWVzXG4gICAgLy8gd2hpY2ggd291bGRuJ3QgbWFrZSBzZW5zZSBpbiB0aGUgcmVhbCB3b3JsZC4gRm9yIGJlc3QgcmVzdWx0cyB1c2VycyBhcmVcbiAgICAvLyBhZHZpc2VkIHRvIHZhbGlkYXRlIHRyYW5zbGF0aW9ucyB3aXRoIHRoZSBmbHVlbnQtc3ludGF4IHBhcnNlclxuICAgIC8vIHByZS1ydW50aW1lLlxuXG4gICAgLy8gVGhlIHBhcnNlciBtYWtlcyBhbiBleHRlbnNpdmUgdXNlIG9mIHN0aWNreSByZWdleGVzIHdoaWNoIGNhbiBiZSBhbmNob3JlZFxuICAgIC8vIHRvIGFueSBvZmZzZXQgb2YgdGhlIHNvdXJjZSBzdHJpbmcgd2l0aG91dCBzbGljaW5nIGl0LiBFcnJvcnMgYXJlIHRocm93blxuICAgIC8vIHRvIGJhaWwgb3V0IG9mIHBhcnNpbmcgb2YgaWxsLWZvcm1lZCBtZXNzYWdlcy5cblxuICAgIGZ1bmN0aW9uIHRlc3QocmUpIHtcbiAgICAgIHJlLmxhc3RJbmRleCA9IGN1cnNvcjtcbiAgICAgIHJldHVybiByZS50ZXN0KHNvdXJjZSk7XG4gICAgfVxuXG4gICAgLy8gQWR2YW5jZSB0aGUgY3Vyc29yIGJ5IHRoZSBjaGFyIGlmIGl0IG1hdGNoZXMuIE1heSBiZSB1c2VkIGFzIGEgcHJlZGljYXRlXG4gICAgLy8gKHdhcyB0aGUgbWF0Y2ggZm91bmQ/KSBvciwgaWYgZXJyb3JDbGFzcyBpcyBwYXNzZWQsIGFzIGFuIGFzc2VydGlvbi5cbiAgICBmdW5jdGlvbiBjb25zdW1lQ2hhcihjaGFyLCBlcnJvckNsYXNzKSB7XG4gICAgICBpZiAoc291cmNlW2N1cnNvcl0gPT09IGNoYXIpIHtcbiAgICAgICAgY3Vyc29yKys7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKGVycm9yQ2xhc3MpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yQ2xhc3MoYEV4cGVjdGVkICR7Y2hhcn1gKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBBZHZhbmNlIHRoZSBjdXJzb3IgYnkgdGhlIHRva2VuIGlmIGl0IG1hdGNoZXMuIE1heSBiZSB1c2VkIGFzIGEgcHJlZGljYXRlXG4gICAgLy8gKHdhcyB0aGUgbWF0Y2ggZm91bmQ/KSBvciwgaWYgZXJyb3JDbGFzcyBpcyBwYXNzZWQsIGFzIGFuIGFzc2VydGlvbi5cbiAgICBmdW5jdGlvbiBjb25zdW1lVG9rZW4ocmUsIGVycm9yQ2xhc3MpIHtcbiAgICAgIGlmICh0ZXN0KHJlKSkge1xuICAgICAgICBjdXJzb3IgPSByZS5sYXN0SW5kZXg7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKGVycm9yQ2xhc3MpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yQ2xhc3MoYEV4cGVjdGVkICR7cmUudG9TdHJpbmcoKX1gKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBFeGVjdXRlIGEgcmVnZXgsIGFkdmFuY2UgdGhlIGN1cnNvciwgYW5kIHJldHVybiBhbGwgY2FwdHVyZSBncm91cHMuXG4gICAgZnVuY3Rpb24gbWF0Y2gocmUpIHtcbiAgICAgIHJlLmxhc3RJbmRleCA9IGN1cnNvcjtcbiAgICAgIGxldCByZXN1bHQgPSByZS5leGVjKHNvdXJjZSk7XG4gICAgICBpZiAocmVzdWx0ID09PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBGbHVlbnRFcnJvcihgRXhwZWN0ZWQgJHtyZS50b1N0cmluZygpfWApO1xuICAgICAgfVxuICAgICAgY3Vyc29yID0gcmUubGFzdEluZGV4O1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvLyBFeGVjdXRlIGEgcmVnZXgsIGFkdmFuY2UgdGhlIGN1cnNvciwgYW5kIHJldHVybiB0aGUgY2FwdHVyZSBncm91cC5cbiAgICBmdW5jdGlvbiBtYXRjaDEocmUpIHtcbiAgICAgIHJldHVybiBtYXRjaChyZSlbMV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VNZXNzYWdlKCkge1xuICAgICAgbGV0IHZhbHVlID0gcGFyc2VQYXR0ZXJuKCk7XG4gICAgICBsZXQgYXR0cnMgPSBwYXJzZUF0dHJpYnV0ZXMoKTtcblxuICAgICAgaWYgKGF0dHJzID09PSBudWxsKSB7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgIHRocm93IG5ldyBGbHVlbnRFcnJvcihcIkV4cGVjdGVkIG1lc3NhZ2UgdmFsdWUgb3IgYXR0cmlidXRlc1wiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7dmFsdWUsIGF0dHJzfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZUF0dHJpYnV0ZXMoKSB7XG4gICAgICBsZXQgYXR0cnMgPSB7fTtcblxuICAgICAgd2hpbGUgKHRlc3QoUkVfQVRUUklCVVRFX1NUQVJUKSkge1xuICAgICAgICBsZXQgbmFtZSA9IG1hdGNoMShSRV9BVFRSSUJVVEVfU1RBUlQpO1xuICAgICAgICBsZXQgdmFsdWUgPSBwYXJzZVBhdHRlcm4oKTtcbiAgICAgICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEZsdWVudEVycm9yKFwiRXhwZWN0ZWQgYXR0cmlidXRlIHZhbHVlXCIpO1xuICAgICAgICB9XG4gICAgICAgIGF0dHJzW25hbWVdID0gdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBPYmplY3Qua2V5cyhhdHRycykubGVuZ3RoID4gMCA/IGF0dHJzIDogbnVsbDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZVBhdHRlcm4oKSB7XG4gICAgICAvLyBGaXJzdCB0cnkgdG8gcGFyc2UgYW55IHNpbXBsZSB0ZXh0IG9uIHRoZSBzYW1lIGxpbmUgYXMgdGhlIGlkLlxuICAgICAgaWYgKHRlc3QoUkVfVEVYVF9SVU4pKSB7XG4gICAgICAgIHZhciBmaXJzdCA9IG1hdGNoMShSRV9URVhUX1JVTik7XG4gICAgICB9XG5cbiAgICAgIC8vIElmIHRoZXJlJ3MgYSBwbGFjZWFibGUgb24gdGhlIGZpcnN0IGxpbmUsIHBhcnNlIGEgY29tcGxleCBwYXR0ZXJuLlxuICAgICAgaWYgKHNvdXJjZVtjdXJzb3JdID09PSBcIntcIiB8fCBzb3VyY2VbY3Vyc29yXSA9PT0gXCJ9XCIpIHtcbiAgICAgICAgLy8gUmUtdXNlIHRoZSB0ZXh0IHBhcnNlZCBhYm92ZSwgaWYgcG9zc2libGUuXG4gICAgICAgIHJldHVybiBwYXJzZVBhdHRlcm5FbGVtZW50cyhmaXJzdCA/IFtmaXJzdF0gOiBbXSwgSW5maW5pdHkpO1xuICAgICAgfVxuXG4gICAgICAvLyBSRV9URVhUX1ZBTFVFIHN0b3BzIGF0IG5ld2xpbmVzLiBPbmx5IGNvbnRpbnVlIHBhcnNpbmcgdGhlIHBhdHRlcm4gaWZcbiAgICAgIC8vIHdoYXQgY29tZXMgYWZ0ZXIgdGhlIG5ld2xpbmUgaXMgaW5kZW50ZWQuXG4gICAgICBsZXQgaW5kZW50ID0gcGFyc2VJbmRlbnQoKTtcbiAgICAgIGlmIChpbmRlbnQpIHtcbiAgICAgICAgaWYgKGZpcnN0KSB7XG4gICAgICAgICAgLy8gSWYgdGhlcmUncyB0ZXh0IG9uIHRoZSBmaXJzdCBsaW5lLCB0aGUgYmxhbmsgYmxvY2sgaXMgcGFydCBvZiB0aGVcbiAgICAgICAgICAvLyB0cmFuc2xhdGlvbiBjb250ZW50IGluIGl0cyBlbnRpcmV0eS5cbiAgICAgICAgICByZXR1cm4gcGFyc2VQYXR0ZXJuRWxlbWVudHMoW2ZpcnN0LCBpbmRlbnRdLCBpbmRlbnQubGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBPdGhlcndpc2UsIHdlJ3JlIGRlYWxpbmcgd2l0aCBhIGJsb2NrIHBhdHRlcm4sIGkuZS4gYSBwYXR0ZXJuIHdoaWNoXG4gICAgICAgIC8vIHN0YXJ0cyBvbiBhIG5ldyBsaW5lLiBEaXNjcmFkIHRoZSBsZWFkaW5nIG5ld2xpbmVzIGJ1dCBrZWVwIHRoZVxuICAgICAgICAvLyBpbmxpbmUgaW5kZW50OyBpdCB3aWxsIGJlIHVzZWQgYnkgdGhlIGRlZGVudGF0aW9uIGxvZ2ljLlxuICAgICAgICBpbmRlbnQudmFsdWUgPSB0cmltKGluZGVudC52YWx1ZSwgUkVfTEVBRElOR19ORVdMSU5FUyk7XG4gICAgICAgIHJldHVybiBwYXJzZVBhdHRlcm5FbGVtZW50cyhbaW5kZW50XSwgaW5kZW50Lmxlbmd0aCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChmaXJzdCkge1xuICAgICAgICAvLyBJdCB3YXMganVzdCBhIHNpbXBsZSBpbmxpbmUgdGV4dCBhZnRlciBhbGwuXG4gICAgICAgIHJldHVybiB0cmltKGZpcnN0LCBSRV9UUkFJTElOR19TUEFDRVMpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBQYXJzZSBhIGNvbXBsZXggcGF0dGVybiBhcyBhbiBhcnJheSBvZiBlbGVtZW50cy5cbiAgICBmdW5jdGlvbiBwYXJzZVBhdHRlcm5FbGVtZW50cyhlbGVtZW50cyA9IFtdLCBjb21tb25JbmRlbnQpIHtcbiAgICAgIGxldCBwbGFjZWFibGVDb3VudCA9IDA7XG5cbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIGlmICh0ZXN0KFJFX1RFWFRfUlVOKSkge1xuICAgICAgICAgIGVsZW1lbnRzLnB1c2gobWF0Y2gxKFJFX1RFWFRfUlVOKSk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc291cmNlW2N1cnNvcl0gPT09IFwie1wiKSB7XG4gICAgICAgICAgaWYgKCsrcGxhY2VhYmxlQ291bnQgPiBNQVhfUExBQ0VBQkxFUykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEZsdWVudEVycm9yKFwiVG9vIG1hbnkgcGxhY2VhYmxlc1wiKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxlbWVudHMucHVzaChwYXJzZVBsYWNlYWJsZSgpKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzb3VyY2VbY3Vyc29yXSA9PT0gXCJ9XCIpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRmx1ZW50RXJyb3IoXCJVbmJhbGFuY2VkIGNsb3NpbmcgYnJhY2VcIik7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaW5kZW50ID0gcGFyc2VJbmRlbnQoKTtcbiAgICAgICAgaWYgKGluZGVudCkge1xuICAgICAgICAgIGVsZW1lbnRzLnB1c2goaW5kZW50KTtcbiAgICAgICAgICBjb21tb25JbmRlbnQgPSBNYXRoLm1pbihjb21tb25JbmRlbnQsIGluZGVudC5sZW5ndGgpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGxldCBsYXN0SW5kZXggPSBlbGVtZW50cy5sZW5ndGggLSAxO1xuICAgICAgLy8gVHJpbSB0aGUgdHJhaWxpbmcgc3BhY2VzIGluIHRoZSBsYXN0IGVsZW1lbnQgaWYgaXQncyBhIFRleHRFbGVtZW50LlxuICAgICAgaWYgKHR5cGVvZiBlbGVtZW50c1tsYXN0SW5kZXhdID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGVsZW1lbnRzW2xhc3RJbmRleF0gPSB0cmltKGVsZW1lbnRzW2xhc3RJbmRleF0sIFJFX1RSQUlMSU5HX1NQQUNFUyk7XG4gICAgICB9XG5cbiAgICAgIGxldCBiYWtlZCA9IFtdO1xuICAgICAgZm9yIChsZXQgZWxlbWVudCBvZiBlbGVtZW50cykge1xuICAgICAgICBpZiAoZWxlbWVudC50eXBlID09PSBcImluZGVudFwiKSB7XG4gICAgICAgICAgLy8gRGVkZW50IGluZGVudGVkIGxpbmVzIGJ5IHRoZSBtYXhpbXVtIGNvbW1vbiBpbmRlbnQuXG4gICAgICAgICAgZWxlbWVudCA9IGVsZW1lbnQudmFsdWUuc2xpY2UoMCwgZWxlbWVudC52YWx1ZS5sZW5ndGggLSBjb21tb25JbmRlbnQpO1xuICAgICAgICB9IGVsc2UgaWYgKGVsZW1lbnQudHlwZSA9PT0gXCJzdHJcIikge1xuICAgICAgICAgIC8vIE9wdGltaXplIFN0cmluZ0xpdGVyYWxzIGludG8gdGhlaXIgdmFsdWUuXG4gICAgICAgICAgZWxlbWVudCA9IGVsZW1lbnQudmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgICBiYWtlZC5wdXNoKGVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFrZWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VQbGFjZWFibGUoKSB7XG4gICAgICBjb25zdW1lVG9rZW4oVE9LRU5fQlJBQ0VfT1BFTiwgRmx1ZW50RXJyb3IpO1xuXG4gICAgICBsZXQgc2VsZWN0b3IgPSBwYXJzZUlubGluZUV4cHJlc3Npb24oKTtcbiAgICAgIGlmIChjb25zdW1lVG9rZW4oVE9LRU5fQlJBQ0VfQ0xPU0UpKSB7XG4gICAgICAgIHJldHVybiBzZWxlY3RvcjtcbiAgICAgIH1cblxuICAgICAgaWYgKGNvbnN1bWVUb2tlbihUT0tFTl9BUlJPVykpIHtcbiAgICAgICAgbGV0IHZhcmlhbnRzID0gcGFyc2VWYXJpYW50cygpO1xuICAgICAgICBjb25zdW1lVG9rZW4oVE9LRU5fQlJBQ0VfQ0xPU0UsIEZsdWVudEVycm9yKTtcbiAgICAgICAgcmV0dXJuIHt0eXBlOiBcInNlbGVjdFwiLCBzZWxlY3RvciwgLi4udmFyaWFudHN9O1xuICAgICAgfVxuXG4gICAgICB0aHJvdyBuZXcgRmx1ZW50RXJyb3IoXCJVbmNsb3NlZCBwbGFjZWFibGVcIik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VJbmxpbmVFeHByZXNzaW9uKCkge1xuICAgICAgaWYgKHNvdXJjZVtjdXJzb3JdID09PSBcIntcIikge1xuICAgICAgICAvLyBJdCdzIGEgbmVzdGVkIHBsYWNlYWJsZS5cbiAgICAgICAgcmV0dXJuIHBhcnNlUGxhY2VhYmxlKCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0ZXN0KFJFX1JFRkVSRU5DRSkpIHtcbiAgICAgICAgbGV0IFssIHNpZ2lsLCBuYW1lLCBhdHRyID0gbnVsbF0gPSBtYXRjaChSRV9SRUZFUkVOQ0UpO1xuXG4gICAgICAgIGlmIChzaWdpbCA9PT0gXCIkXCIpIHtcbiAgICAgICAgICByZXR1cm4ge3R5cGU6IFwidmFyXCIsIG5hbWV9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnN1bWVUb2tlbihUT0tFTl9QQVJFTl9PUEVOKSkge1xuICAgICAgICAgIGxldCBhcmdzID0gcGFyc2VBcmd1bWVudHMoKTtcblxuICAgICAgICAgIGlmIChzaWdpbCA9PT0gXCItXCIpIHtcbiAgICAgICAgICAgIC8vIEEgcGFyYW1ldGVyaXplZCB0ZXJtOiAtdGVybSguLi4pLlxuICAgICAgICAgICAgcmV0dXJuIHt0eXBlOiBcInRlcm1cIiwgbmFtZSwgYXR0ciwgYXJnc307XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKFJFX0ZVTkNUSU9OX05BTUUudGVzdChuYW1lKSkge1xuICAgICAgICAgICAgcmV0dXJuIHt0eXBlOiBcImZ1bmNcIiwgbmFtZSwgYXJnc307XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhyb3cgbmV3IEZsdWVudEVycm9yKFwiRnVuY3Rpb24gbmFtZXMgbXVzdCBiZSBhbGwgdXBwZXItY2FzZVwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzaWdpbCA9PT0gXCItXCIpIHtcbiAgICAgICAgICAvLyBBIG5vbi1wYXJhbWV0ZXJpemVkIHRlcm06IC10ZXJtLlxuICAgICAgICAgIHJldHVybiB7dHlwZTogXCJ0ZXJtXCIsIG5hbWUsIGF0dHIsIGFyZ3M6IFtdfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7dHlwZTogXCJtZXNnXCIsIG5hbWUsIGF0dHJ9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcGFyc2VMaXRlcmFsKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VBcmd1bWVudHMoKSB7XG4gICAgICBsZXQgYXJncyA9IFtdO1xuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgc3dpdGNoIChzb3VyY2VbY3Vyc29yXSkge1xuICAgICAgICAgIGNhc2UgXCIpXCI6IC8vIEVuZCBvZiB0aGUgYXJndW1lbnQgbGlzdC5cbiAgICAgICAgICAgIGN1cnNvcisrO1xuICAgICAgICAgICAgcmV0dXJuIGFyZ3M7XG4gICAgICAgICAgY2FzZSB1bmRlZmluZWQ6IC8vIEVPRlxuICAgICAgICAgICAgdGhyb3cgbmV3IEZsdWVudEVycm9yKFwiVW5jbG9zZWQgYXJndW1lbnQgbGlzdFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGFyZ3MucHVzaChwYXJzZUFyZ3VtZW50KCkpO1xuICAgICAgICAvLyBDb21tYXMgYmV0d2VlbiBhcmd1bWVudHMgYXJlIHRyZWF0ZWQgYXMgd2hpdGVzcGFjZS5cbiAgICAgICAgY29uc3VtZVRva2VuKFRPS0VOX0NPTU1BKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZUFyZ3VtZW50KCkge1xuICAgICAgbGV0IGV4cHIgPSBwYXJzZUlubGluZUV4cHJlc3Npb24oKTtcbiAgICAgIGlmIChleHByLnR5cGUgIT09IFwibWVzZ1wiKSB7XG4gICAgICAgIHJldHVybiBleHByO1xuICAgICAgfVxuXG4gICAgICBpZiAoY29uc3VtZVRva2VuKFRPS0VOX0NPTE9OKSkge1xuICAgICAgICAvLyBUaGUgcmVmZXJlbmNlIGlzIHRoZSBiZWdpbm5pbmcgb2YgYSBuYW1lZCBhcmd1bWVudC5cbiAgICAgICAgcmV0dXJuIHt0eXBlOiBcIm5hcmdcIiwgbmFtZTogZXhwci5uYW1lLCB2YWx1ZTogcGFyc2VMaXRlcmFsKCl9O1xuICAgICAgfVxuXG4gICAgICAvLyBJdCdzIGEgcmVndWxhciBtZXNzYWdlIHJlZmVyZW5jZS5cbiAgICAgIHJldHVybiBleHByO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlVmFyaWFudHMoKSB7XG4gICAgICBsZXQgdmFyaWFudHMgPSBbXTtcbiAgICAgIGxldCBjb3VudCA9IDA7XG4gICAgICBsZXQgc3RhcjtcblxuICAgICAgd2hpbGUgKHRlc3QoUkVfVkFSSUFOVF9TVEFSVCkpIHtcbiAgICAgICAgaWYgKGNvbnN1bWVDaGFyKFwiKlwiKSkge1xuICAgICAgICAgIHN0YXIgPSBjb3VudDtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBrZXkgPSBwYXJzZVZhcmlhbnRLZXkoKTtcbiAgICAgICAgbGV0IHZhbHVlID0gcGFyc2VQYXR0ZXJuKCk7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgIHRocm93IG5ldyBGbHVlbnRFcnJvcihcIkV4cGVjdGVkIHZhcmlhbnQgdmFsdWVcIik7XG4gICAgICAgIH1cbiAgICAgICAgdmFyaWFudHNbY291bnQrK10gPSB7a2V5LCB2YWx1ZX07XG4gICAgICB9XG5cbiAgICAgIGlmIChjb3VudCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aHJvdyBuZXcgRmx1ZW50RXJyb3IoXCJFeHBlY3RlZCBkZWZhdWx0IHZhcmlhbnRcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7dmFyaWFudHMsIHN0YXJ9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlVmFyaWFudEtleSgpIHtcbiAgICAgIGNvbnN1bWVUb2tlbihUT0tFTl9CUkFDS0VUX09QRU4sIEZsdWVudEVycm9yKTtcbiAgICAgIGxldCBrZXkgPSB0ZXN0KFJFX05VTUJFUl9MSVRFUkFMKVxuICAgICAgICA/IHBhcnNlTnVtYmVyTGl0ZXJhbCgpXG4gICAgICAgIDogbWF0Y2gxKFJFX0lERU5USUZJRVIpO1xuICAgICAgY29uc3VtZVRva2VuKFRPS0VOX0JSQUNLRVRfQ0xPU0UsIEZsdWVudEVycm9yKTtcbiAgICAgIHJldHVybiBrZXk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VMaXRlcmFsKCkge1xuICAgICAgaWYgKHRlc3QoUkVfTlVNQkVSX0xJVEVSQUwpKSB7XG4gICAgICAgIHJldHVybiBwYXJzZU51bWJlckxpdGVyYWwoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNvdXJjZVtjdXJzb3JdID09PSBcIlxcXCJcIikge1xuICAgICAgICByZXR1cm4gcGFyc2VTdHJpbmdMaXRlcmFsKCk7XG4gICAgICB9XG5cbiAgICAgIHRocm93IG5ldyBGbHVlbnRFcnJvcihcIkludmFsaWQgZXhwcmVzc2lvblwiKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZU51bWJlckxpdGVyYWwoKSB7XG4gICAgICBsZXQgWywgdmFsdWUsIGZyYWN0aW9uID0gXCJcIl0gPSBtYXRjaChSRV9OVU1CRVJfTElURVJBTCk7XG4gICAgICBsZXQgcHJlY2lzaW9uID0gZnJhY3Rpb24ubGVuZ3RoO1xuICAgICAgcmV0dXJuIHt0eXBlOiBcIm51bVwiLCB2YWx1ZTogcGFyc2VGbG9hdCh2YWx1ZSksIHByZWNpc2lvbn07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VTdHJpbmdMaXRlcmFsKCkge1xuICAgICAgY29uc3VtZUNoYXIoXCJcXFwiXCIsIEZsdWVudEVycm9yKTtcbiAgICAgIGxldCB2YWx1ZSA9IFwiXCI7XG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YWx1ZSArPSBtYXRjaDEoUkVfU1RSSU5HX1JVTik7XG5cbiAgICAgICAgaWYgKHNvdXJjZVtjdXJzb3JdID09PSBcIlxcXFxcIikge1xuICAgICAgICAgIHZhbHVlICs9IHBhcnNlRXNjYXBlU2VxdWVuY2UoKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb25zdW1lQ2hhcihcIlxcXCJcIikpIHtcbiAgICAgICAgICByZXR1cm4ge3R5cGU6IFwic3RyXCIsIHZhbHVlfTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFdlJ3ZlIHJlYWNoZWQgYW4gRU9MIG9mIEVPRi5cbiAgICAgICAgdGhyb3cgbmV3IEZsdWVudEVycm9yKFwiVW5jbG9zZWQgc3RyaW5nIGxpdGVyYWxcIik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gVW5lc2NhcGUga25vd24gZXNjYXBlIHNlcXVlbmNlcy5cbiAgICBmdW5jdGlvbiBwYXJzZUVzY2FwZVNlcXVlbmNlKCkge1xuICAgICAgaWYgKHRlc3QoUkVfU1RSSU5HX0VTQ0FQRSkpIHtcbiAgICAgICAgcmV0dXJuIG1hdGNoMShSRV9TVFJJTkdfRVNDQVBFKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRlc3QoUkVfVU5JQ09ERV9FU0NBUEUpKSB7XG4gICAgICAgIGxldCBbLCBjb2RlcG9pbnQ0LCBjb2RlcG9pbnQ2XSA9IG1hdGNoKFJFX1VOSUNPREVfRVNDQVBFKTtcbiAgICAgICAgbGV0IGNvZGVwb2ludCA9IHBhcnNlSW50KGNvZGVwb2ludDQgfHwgY29kZXBvaW50NiwgMTYpO1xuICAgICAgICByZXR1cm4gY29kZXBvaW50IDw9IDB4RDdGRiB8fCAweEUwMDAgPD0gY29kZXBvaW50XG4gICAgICAgICAgLy8gSXQncyBhIFVuaWNvZGUgc2NhbGFyIHZhbHVlLlxuICAgICAgICAgID8gU3RyaW5nLmZyb21Db2RlUG9pbnQoY29kZXBvaW50KVxuICAgICAgICAgIC8vIExvbmVseSBzdXJyb2dhdGVzIGNhbiBjYXVzZSB0cm91YmxlIHdoZW4gdGhlIHBhcnNpbmcgcmVzdWx0IGlzXG4gICAgICAgICAgLy8gc2F2ZWQgdXNpbmcgVVRGLTguIFVzZSBVK0ZGRkQgUkVQTEFDRU1FTlQgQ0hBUkFDVEVSIGluc3RlYWQuXG4gICAgICAgICAgOiBcIu+/vVwiO1xuICAgICAgfVxuXG4gICAgICB0aHJvdyBuZXcgRmx1ZW50RXJyb3IoXCJVbmtub3duIGVzY2FwZSBzZXF1ZW5jZVwiKTtcbiAgICB9XG5cbiAgICAvLyBQYXJzZSBibGFuayBzcGFjZS4gUmV0dXJuIGl0IGlmIGl0IGxvb2tzIGxpa2UgaW5kZW50IGJlZm9yZSBhIHBhdHRlcm5cbiAgICAvLyBsaW5lLiBTa2lwIGl0IG90aHdlcndpc2UuXG4gICAgZnVuY3Rpb24gcGFyc2VJbmRlbnQoKSB7XG4gICAgICBsZXQgc3RhcnQgPSBjdXJzb3I7XG4gICAgICBjb25zdW1lVG9rZW4oVE9LRU5fQkxBTkspO1xuXG4gICAgICAvLyBDaGVjayB0aGUgZmlyc3Qgbm9uLWJsYW5rIGNoYXJhY3RlciBhZnRlciB0aGUgaW5kZW50LlxuICAgICAgc3dpdGNoIChzb3VyY2VbY3Vyc29yXSkge1xuICAgICAgICBjYXNlIFwiLlwiOlxuICAgICAgICBjYXNlIFwiW1wiOlxuICAgICAgICBjYXNlIFwiKlwiOlxuICAgICAgICBjYXNlIFwifVwiOlxuICAgICAgICBjYXNlIHVuZGVmaW5lZDogLy8gRU9GXG4gICAgICAgICAgLy8gQSBzcGVjaWFsIGNoYXJhY3Rlci4gRW5kIHRoZSBQYXR0ZXJuLlxuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgY2FzZSBcIntcIjpcbiAgICAgICAgICAvLyBQbGFjZWFibGVzIGRvbid0IHJlcXVpcmUgaW5kZW50YXRpb24gKGluIEVCTkY6IGJsb2NrLXBsYWNlYWJsZSkuXG4gICAgICAgICAgLy8gQ29udGludWUgdGhlIFBhdHRlcm4uXG4gICAgICAgICAgcmV0dXJuIG1ha2VJbmRlbnQoc291cmNlLnNsaWNlKHN0YXJ0LCBjdXJzb3IpKTtcbiAgICAgIH1cblxuICAgICAgLy8gSWYgdGhlIGZpcnN0IGNoYXJhY3RlciBvbiB0aGUgbGluZSBpcyBub3Qgb25lIG9mIHRoZSBzcGVjaWFsIGNoYXJhY3RlcnNcbiAgICAgIC8vIGxpc3RlZCBhYm92ZSwgaXQncyBhIHJlZ3VsYXIgdGV4dCBjaGFyYWN0ZXIuIENoZWNrIGlmIHRoZXJlJ3MgYXQgbGVhc3RcbiAgICAgIC8vIG9uZSBzcGFjZSBvZiBpbmRlbnQgYmVmb3JlIGl0LlxuICAgICAgaWYgKHNvdXJjZVtjdXJzb3IgLSAxXSA9PT0gXCIgXCIpIHtcbiAgICAgICAgLy8gSXQncyBhbiBpbmRlbnRlZCB0ZXh0IGNoYXJhY3RlciAoaW4gRUJORjogaW5kZW50ZWQtY2hhcikuIENvbnRpbnVlXG4gICAgICAgIC8vIHRoZSBQYXR0ZXJuLlxuICAgICAgICByZXR1cm4gbWFrZUluZGVudChzb3VyY2Uuc2xpY2Uoc3RhcnQsIGN1cnNvcikpO1xuICAgICAgfVxuXG4gICAgICAvLyBBIG5vdC1pbmRlbnRlZCB0ZXh0IGNoYXJhY3RlciBpcyBsaWtlbHkgdGhlIGlkZW50aWZpZXIgb2YgdGhlIG5leHRcbiAgICAgIC8vIG1lc3NhZ2UuIEVuZCB0aGUgUGF0dGVybi5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBUcmltIGJsYW5rcyBpbiB0ZXh0IGFjY29yZGluZyB0byB0aGUgZ2l2ZW4gcmVnZXguXG4gICAgZnVuY3Rpb24gdHJpbSh0ZXh0LCByZSkge1xuICAgICAgcmV0dXJuIHRleHQucmVwbGFjZShyZSwgXCJcIik7XG4gICAgfVxuXG4gICAgLy8gTm9ybWFsaXplIGEgYmxhbmsgYmxvY2sgYW5kIGV4dHJhY3QgdGhlIGluZGVudCBkZXRhaWxzLlxuICAgIGZ1bmN0aW9uIG1ha2VJbmRlbnQoYmxhbmspIHtcbiAgICAgIGxldCB2YWx1ZSA9IGJsYW5rLnJlcGxhY2UoUkVfQkxBTktfTElORVMsIFwiXFxuXCIpO1xuICAgICAgbGV0IGxlbmd0aCA9IFJFX0lOREVOVC5leGVjKGJsYW5rKVsxXS5sZW5ndGg7XG4gICAgICByZXR1cm4ge3R5cGU6IFwiaW5kZW50XCIsIHZhbHVlLCBsZW5ndGh9O1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHJlc29sdmUgZnJvbSBcIi4vcmVzb2x2ZXIuanNcIjtcbmltcG9ydCBGbHVlbnRSZXNvdXJjZSBmcm9tIFwiLi9yZXNvdXJjZS5qc1wiO1xuXG4vKipcbiAqIE1lc3NhZ2UgYnVuZGxlcyBhcmUgc2luZ2xlLWxhbmd1YWdlIHN0b3JlcyBvZiB0cmFuc2xhdGlvbnMuICBUaGV5IGFyZVxuICogcmVzcG9uc2libGUgZm9yIHBhcnNpbmcgdHJhbnNsYXRpb24gcmVzb3VyY2VzIGluIHRoZSBGbHVlbnQgc3ludGF4IGFuZCBjYW5cbiAqIGZvcm1hdCB0cmFuc2xhdGlvbiB1bml0cyAoZW50aXRpZXMpIHRvIHN0cmluZ3MuXG4gKlxuICogQWx3YXlzIHVzZSBgRmx1ZW50QnVuZGxlLmZvcm1hdGAgdG8gcmV0cmlldmUgdHJhbnNsYXRpb24gdW5pdHMgZnJvbSBhXG4gKiBidW5kbGUuIFRyYW5zbGF0aW9ucyBjYW4gY29udGFpbiByZWZlcmVuY2VzIHRvIG90aGVyIGVudGl0aWVzIG9yIHZhcmlhYmxlcyxcbiAqIGNvbmRpdGlvbmFsIGxvZ2ljIGluIGZvcm0gb2Ygc2VsZWN0IGV4cHJlc3Npb25zLCB0cmFpdHMgd2hpY2ggZGVzY3JpYmUgdGhlaXJcbiAqIGdyYW1tYXRpY2FsIGZlYXR1cmVzLCBhbmQgY2FuIHVzZSBGbHVlbnQgYnVpbHRpbnMgd2hpY2ggbWFrZSB1c2Ugb2YgdGhlXG4gKiBgSW50bGAgZm9ybWF0dGVycyB0byBmb3JtYXQgbnVtYmVycywgZGF0ZXMsIGxpc3RzIGFuZCBtb3JlIGludG8gdGhlXG4gKiBidW5kbGUncyBsYW5ndWFnZS4gU2VlIHRoZSBkb2N1bWVudGF0aW9uIG9mIHRoZSBGbHVlbnQgc3ludGF4IGZvciBtb3JlXG4gKiBpbmZvcm1hdGlvbi5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRmx1ZW50QnVuZGxlIHtcblxuICAvKipcbiAgICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIGBGbHVlbnRCdW5kbGVgLlxuICAgKlxuICAgKiBUaGUgYGxvY2FsZXNgIGFyZ3VtZW50IGlzIHVzZWQgdG8gaW5zdGFudGlhdGUgYEludGxgIGZvcm1hdHRlcnMgdXNlZCBieVxuICAgKiB0cmFuc2xhdGlvbnMuICBUaGUgYG9wdGlvbnNgIG9iamVjdCBjYW4gYmUgdXNlZCB0byBjb25maWd1cmUgdGhlIGJ1bmRsZS5cbiAgICpcbiAgICogRXhhbXBsZXM6XG4gICAqXG4gICAqICAgICBjb25zdCBidW5kbGUgPSBuZXcgRmx1ZW50QnVuZGxlKGxvY2FsZXMpO1xuICAgKlxuICAgKiAgICAgY29uc3QgYnVuZGxlID0gbmV3IEZsdWVudEJ1bmRsZShsb2NhbGVzLCB7IHVzZUlzb2xhdGluZzogZmFsc2UgfSk7XG4gICAqXG4gICAqICAgICBjb25zdCBidW5kbGUgPSBuZXcgRmx1ZW50QnVuZGxlKGxvY2FsZXMsIHtcbiAgICogICAgICAgdXNlSXNvbGF0aW5nOiB0cnVlLFxuICAgKiAgICAgICBmdW5jdGlvbnM6IHtcbiAgICogICAgICAgICBOT0RFX0VOVjogKCkgPT4gcHJvY2Vzcy5lbnYuTk9ERV9FTlZcbiAgICogICAgICAgfVxuICAgKiAgICAgfSk7XG4gICAqXG4gICAqIEF2YWlsYWJsZSBvcHRpb25zOlxuICAgKlxuICAgKiAgIC0gYGZ1bmN0aW9uc2AgLSBhbiBvYmplY3Qgb2YgYWRkaXRpb25hbCBmdW5jdGlvbnMgYXZhaWxhYmxlIHRvXG4gICAqICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0aW9ucyBhcyBidWlsdGlucy5cbiAgICpcbiAgICogICAtIGB1c2VJc29sYXRpbmdgIC0gYm9vbGVhbiBzcGVjaWZ5aW5nIHdoZXRoZXIgdG8gdXNlIFVuaWNvZGUgaXNvbGF0aW9uXG4gICAqICAgICAgICAgICAgICAgICAgICBtYXJrcyAoRlNJLCBQREkpIGZvciBiaWRpIGludGVycG9sYXRpb25zLlxuICAgKiAgICAgICAgICAgICAgICAgICAgRGVmYXVsdDogdHJ1ZVxuICAgKlxuICAgKiAgIC0gYHRyYW5zZm9ybWAgLSBhIGZ1bmN0aW9uIHVzZWQgdG8gdHJhbnNmb3JtIHN0cmluZyBwYXJ0cyBvZiBwYXR0ZXJucy5cbiAgICpcbiAgICogQHBhcmFtICAge3N0cmluZ3xBcnJheTxzdHJpbmc+fSBsb2NhbGVzIC0gTG9jYWxlIG9yIGxvY2FsZXMgb2YgdGhlIGJ1bmRsZVxuICAgKiBAcGFyYW0gICB7T2JqZWN0fSBbb3B0aW9uc11cbiAgICogQHJldHVybnMge0ZsdWVudEJ1bmRsZX1cbiAgICovXG4gIGNvbnN0cnVjdG9yKGxvY2FsZXMsIHtcbiAgICBmdW5jdGlvbnMgPSB7fSxcbiAgICB1c2VJc29sYXRpbmcgPSB0cnVlLFxuICAgIHRyYW5zZm9ybSA9IHYgPT4gdlxuICB9ID0ge30pIHtcbiAgICB0aGlzLmxvY2FsZXMgPSBBcnJheS5pc0FycmF5KGxvY2FsZXMpID8gbG9jYWxlcyA6IFtsb2NhbGVzXTtcblxuICAgIHRoaXMuX3Rlcm1zID0gbmV3IE1hcCgpO1xuICAgIHRoaXMuX21lc3NhZ2VzID0gbmV3IE1hcCgpO1xuICAgIHRoaXMuX2Z1bmN0aW9ucyA9IGZ1bmN0aW9ucztcbiAgICB0aGlzLl91c2VJc29sYXRpbmcgPSB1c2VJc29sYXRpbmc7XG4gICAgdGhpcy5fdHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICAgIHRoaXMuX2ludGxzID0gbmV3IFdlYWtNYXAoKTtcbiAgfVxuXG4gIC8qXG4gICAqIFJldHVybiBhbiBpdGVyYXRvciBvdmVyIHB1YmxpYyBgW2lkLCBtZXNzYWdlXWAgcGFpcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIHtJdGVyYXRvcn1cbiAgICovXG4gIGdldCBtZXNzYWdlcygpIHtcbiAgICByZXR1cm4gdGhpcy5fbWVzc2FnZXNbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICB9XG5cbiAgLypcbiAgICogQ2hlY2sgaWYgYSBtZXNzYWdlIGlzIHByZXNlbnQgaW4gdGhlIGJ1bmRsZS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIC0gVGhlIGlkZW50aWZpZXIgb2YgdGhlIG1lc3NhZ2UgdG8gY2hlY2suXG4gICAqIEByZXR1cm5zIHtib29sfVxuICAgKi9cbiAgaGFzTWVzc2FnZShpZCkge1xuICAgIHJldHVybiB0aGlzLl9tZXNzYWdlcy5oYXMoaWQpO1xuICB9XG5cbiAgLypcbiAgICogUmV0dXJuIHRoZSBpbnRlcm5hbCByZXByZXNlbnRhdGlvbiBvZiBhIG1lc3NhZ2UuXG4gICAqXG4gICAqIFRoZSBpbnRlcm5hbCByZXByZXNlbnRhdGlvbiBzaG91bGQgb25seSBiZSB1c2VkIGFzIGFuIGFyZ3VtZW50IHRvXG4gICAqIGBGbHVlbnRCdW5kbGUuZm9ybWF0YC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIC0gVGhlIGlkZW50aWZpZXIgb2YgdGhlIG1lc3NhZ2UgdG8gY2hlY2suXG4gICAqIEByZXR1cm5zIHtBbnl9XG4gICAqL1xuICBnZXRNZXNzYWdlKGlkKSB7XG4gICAgcmV0dXJuIHRoaXMuX21lc3NhZ2VzLmdldChpZCk7XG4gIH1cblxuICAvKipcbiAgICogQWRkIGEgdHJhbnNsYXRpb24gcmVzb3VyY2UgdG8gdGhlIGJ1bmRsZS5cbiAgICpcbiAgICogVGhlIHRyYW5zbGF0aW9uIHJlc291cmNlIG11c3QgdXNlIHRoZSBGbHVlbnQgc3ludGF4LiAgSXQgd2lsbCBiZSBwYXJzZWQgYnlcbiAgICogdGhlIGJ1bmRsZSBhbmQgZWFjaCB0cmFuc2xhdGlvbiB1bml0IChtZXNzYWdlKSB3aWxsIGJlIGF2YWlsYWJsZSBpbiB0aGVcbiAgICogYnVuZGxlIGJ5IGl0cyBpZGVudGlmaWVyLlxuICAgKlxuICAgKiAgICAgYnVuZGxlLmFkZE1lc3NhZ2VzKCdmb28gPSBGb28nKTtcbiAgICogICAgIGJ1bmRsZS5nZXRNZXNzYWdlKCdmb28nKTtcbiAgICpcbiAgICogICAgIC8vIFJldHVybnMgYSByYXcgcmVwcmVzZW50YXRpb24gb2YgdGhlICdmb28nIG1lc3NhZ2UuXG4gICAqXG4gICAqICAgICBidW5kbGUuYWRkTWVzc2FnZXMoJ2JhciA9IEJhcicpO1xuICAgKiAgICAgYnVuZGxlLmFkZE1lc3NhZ2VzKCdiYXIgPSBOZXdiYXInLCB7IGFsbG93T3ZlcnJpZGVzOiB0cnVlIH0pO1xuICAgKiAgICAgYnVuZGxlLmdldE1lc3NhZ2UoJ2JhcicpO1xuICAgKlxuICAgKiAgICAgLy8gUmV0dXJucyBhIHJhdyByZXByZXNlbnRhdGlvbiBvZiB0aGUgJ2JhcicgbWVzc2FnZTogTmV3YmFyLlxuICAgKlxuICAgKiBQYXJzZWQgZW50aXRpZXMgc2hvdWxkIGJlIGZvcm1hdHRlZCB3aXRoIHRoZSBgZm9ybWF0YCBtZXRob2QgaW4gY2FzZSB0aGV5XG4gICAqIGNvbnRhaW4gbG9naWMgKHJlZmVyZW5jZXMsIHNlbGVjdCBleHByZXNzaW9ucyBldGMuKS5cbiAgICpcbiAgICogQXZhaWxhYmxlIG9wdGlvbnM6XG4gICAqXG4gICAqICAgLSBgYWxsb3dPdmVycmlkZXNgIC0gYm9vbGVhbiBzcGVjaWZ5aW5nIHdoZXRoZXIgaXQncyBhbGxvd2VkIHRvIG92ZXJyaWRlXG4gICAqICAgICAgICAgICAgICAgICAgICAgIGFuIGV4aXN0aW5nIG1lc3NhZ2Ugb3IgdGVybSB3aXRoIGEgbmV3IHZhbHVlLlxuICAgKiAgICAgICAgICAgICAgICAgICAgICBEZWZhdWx0OiBmYWxzZVxuICAgKlxuICAgKiBAcGFyYW0gICB7c3RyaW5nfSBzb3VyY2UgLSBUZXh0IHJlc291cmNlIHdpdGggdHJhbnNsYXRpb25zLlxuICAgKiBAcGFyYW0gICB7T2JqZWN0fSBbb3B0aW9uc11cbiAgICogQHJldHVybnMge0FycmF5PEVycm9yPn1cbiAgICovXG4gIGFkZE1lc3NhZ2VzKHNvdXJjZSwgb3B0aW9ucykge1xuICAgIGNvbnN0IHJlcyA9IEZsdWVudFJlc291cmNlLmZyb21TdHJpbmcoc291cmNlKTtcbiAgICByZXR1cm4gdGhpcy5hZGRSZXNvdXJjZShyZXMsIG9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBhIHRyYW5zbGF0aW9uIHJlc291cmNlIHRvIHRoZSBidW5kbGUuXG4gICAqXG4gICAqIFRoZSB0cmFuc2xhdGlvbiByZXNvdXJjZSBtdXN0IGJlIGFuIGluc3RhbmNlIG9mIEZsdWVudFJlc291cmNlLFxuICAgKiBlLmcuIHBhcnNlZCBieSBgRmx1ZW50UmVzb3VyY2UuZnJvbVN0cmluZ2AuXG4gICAqXG4gICAqICAgICBsZXQgcmVzID0gRmx1ZW50UmVzb3VyY2UuZnJvbVN0cmluZyhcImZvbyA9IEZvb1wiKTtcbiAgICogICAgIGJ1bmRsZS5hZGRSZXNvdXJjZShyZXMpO1xuICAgKiAgICAgYnVuZGxlLmdldE1lc3NhZ2UoJ2ZvbycpO1xuICAgKlxuICAgKiAgICAgLy8gUmV0dXJucyBhIHJhdyByZXByZXNlbnRhdGlvbiBvZiB0aGUgJ2ZvbycgbWVzc2FnZS5cbiAgICpcbiAgICogICAgIGxldCByZXMgPSBGbHVlbnRSZXNvdXJjZS5mcm9tU3RyaW5nKFwiYmFyID0gQmFyXCIpO1xuICAgKiAgICAgYnVuZGxlLmFkZFJlc291cmNlKHJlcyk7XG4gICAqICAgICByZXMgPSBGbHVlbnRSZXNvdXJjZS5mcm9tU3RyaW5nKFwiYmFyID0gTmV3YmFyXCIpO1xuICAgKiAgICAgYnVuZGxlLmFkZFJlc291cmNlKHJlcywgeyBhbGxvd092ZXJyaWRlczogdHJ1ZSB9KTtcbiAgICogICAgIGJ1bmRsZS5nZXRNZXNzYWdlKCdiYXInKTtcbiAgICpcbiAgICogICAgIC8vIFJldHVybnMgYSByYXcgcmVwcmVzZW50YXRpb24gb2YgdGhlICdiYXInIG1lc3NhZ2U6IE5ld2Jhci5cbiAgICpcbiAgICogUGFyc2VkIGVudGl0aWVzIHNob3VsZCBiZSBmb3JtYXR0ZWQgd2l0aCB0aGUgYGZvcm1hdGAgbWV0aG9kIGluIGNhc2UgdGhleVxuICAgKiBjb250YWluIGxvZ2ljIChyZWZlcmVuY2VzLCBzZWxlY3QgZXhwcmVzc2lvbnMgZXRjLikuXG4gICAqXG4gICAqIEF2YWlsYWJsZSBvcHRpb25zOlxuICAgKlxuICAgKiAgIC0gYGFsbG93T3ZlcnJpZGVzYCAtIGJvb2xlYW4gc3BlY2lmeWluZyB3aGV0aGVyIGl0J3MgYWxsb3dlZCB0byBvdmVycmlkZVxuICAgKiAgICAgICAgICAgICAgICAgICAgICBhbiBleGlzdGluZyBtZXNzYWdlIG9yIHRlcm0gd2l0aCBhIG5ldyB2YWx1ZS5cbiAgICogICAgICAgICAgICAgICAgICAgICAgRGVmYXVsdDogZmFsc2VcbiAgICpcbiAgICogQHBhcmFtICAge0ZsdWVudFJlc291cmNlfSByZXMgLSBGbHVlbnRSZXNvdXJjZSBvYmplY3QuXG4gICAqIEBwYXJhbSAgIHtPYmplY3R9IFtvcHRpb25zXVxuICAgKiBAcmV0dXJucyB7QXJyYXk8RXJyb3I+fVxuICAgKi9cbiAgYWRkUmVzb3VyY2UocmVzLCB7XG4gICAgYWxsb3dPdmVycmlkZXMgPSBmYWxzZVxuICB9ID0ge30pIHtcbiAgICBjb25zdCBlcnJvcnMgPSBbXTtcblxuICAgIGZvciAoY29uc3QgW2lkLCB2YWx1ZV0gb2YgcmVzKSB7XG4gICAgICBpZiAoaWQuc3RhcnRzV2l0aChcIi1cIikpIHtcbiAgICAgICAgLy8gSWRlbnRpZmllcnMgc3RhcnRpbmcgd2l0aCBhIGRhc2ggKC0pIGRlZmluZSB0ZXJtcy4gVGVybXMgYXJlIHByaXZhdGVcbiAgICAgICAgLy8gYW5kIGNhbm5vdCBiZSByZXRyaWV2ZWQgZnJvbSBGbHVlbnRCdW5kbGUuXG4gICAgICAgIGlmIChhbGxvd092ZXJyaWRlcyA9PT0gZmFsc2UgJiYgdGhpcy5fdGVybXMuaGFzKGlkKSkge1xuICAgICAgICAgIGVycm9ycy5wdXNoKGBBdHRlbXB0IHRvIG92ZXJyaWRlIGFuIGV4aXN0aW5nIHRlcm06IFwiJHtpZH1cImApO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3Rlcm1zLnNldChpZCwgdmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGFsbG93T3ZlcnJpZGVzID09PSBmYWxzZSAmJiB0aGlzLl9tZXNzYWdlcy5oYXMoaWQpKSB7XG4gICAgICAgICAgZXJyb3JzLnB1c2goYEF0dGVtcHQgdG8gb3ZlcnJpZGUgYW4gZXhpc3RpbmcgbWVzc2FnZTogXCIke2lkfVwiYCk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbWVzc2FnZXMuc2V0KGlkLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGVycm9ycztcbiAgfVxuXG4gIC8qKlxuICAgKiBGb3JtYXQgYSBtZXNzYWdlIHRvIGEgc3RyaW5nIG9yIG51bGwuXG4gICAqXG4gICAqIEZvcm1hdCBhIHJhdyBgbWVzc2FnZWAgZnJvbSB0aGUgYnVuZGxlIGludG8gYSBzdHJpbmcgKG9yIGEgbnVsbCBpZiBpdCBoYXNcbiAgICogYSBudWxsIHZhbHVlKS4gIGBhcmdzYCB3aWxsIGJlIHVzZWQgdG8gcmVzb2x2ZSByZWZlcmVuY2VzIHRvIHZhcmlhYmxlc1xuICAgKiBwYXNzZWQgYXMgYXJndW1lbnRzIHRvIHRoZSB0cmFuc2xhdGlvbi5cbiAgICpcbiAgICogSW4gY2FzZSBvZiBlcnJvcnMgYGZvcm1hdGAgd2lsbCB0cnkgdG8gc2FsdmFnZSBhcyBtdWNoIG9mIHRoZSB0cmFuc2xhdGlvblxuICAgKiBhcyBwb3NzaWJsZSBhbmQgd2lsbCBzdGlsbCByZXR1cm4gYSBzdHJpbmcuICBGb3IgcGVyZm9ybWFuY2UgcmVhc29ucywgdGhlXG4gICAqIGVuY291bnRlcmVkIGVycm9ycyBhcmUgbm90IHJldHVybmVkIGJ1dCBpbnN0ZWFkIGFyZSBhcHBlbmRlZCB0byB0aGVcbiAgICogYGVycm9yc2AgYXJyYXkgcGFzc2VkIGFzIHRoZSB0aGlyZCBhcmd1bWVudC5cbiAgICpcbiAgICogICAgIGNvbnN0IGVycm9ycyA9IFtdO1xuICAgKiAgICAgYnVuZGxlLmFkZE1lc3NhZ2VzKCdoZWxsbyA9IEhlbGxvLCB7ICRuYW1lIH0hJyk7XG4gICAqICAgICBjb25zdCBoZWxsbyA9IGJ1bmRsZS5nZXRNZXNzYWdlKCdoZWxsbycpO1xuICAgKiAgICAgYnVuZGxlLmZvcm1hdChoZWxsbywgeyBuYW1lOiAnSmFuZScgfSwgZXJyb3JzKTtcbiAgICpcbiAgICogICAgIC8vIFJldHVybnMgJ0hlbGxvLCBKYW5lIScgYW5kIGBlcnJvcnNgIGlzIGVtcHR5LlxuICAgKlxuICAgKiAgICAgYnVuZGxlLmZvcm1hdChoZWxsbywgdW5kZWZpbmVkLCBlcnJvcnMpO1xuICAgKlxuICAgKiAgICAgLy8gUmV0dXJucyAnSGVsbG8sIG5hbWUhJyBhbmQgYGVycm9yc2AgaXMgbm93OlxuICAgKlxuICAgKiAgICAgWzxSZWZlcmVuY2VFcnJvcjogVW5rbm93biB2YXJpYWJsZTogbmFtZT5dXG4gICAqXG4gICAqIEBwYXJhbSAgIHtPYmplY3QgfCBzdHJpbmd9ICAgIG1lc3NhZ2VcbiAgICogQHBhcmFtICAge09iamVjdCB8IHVuZGVmaW5lZH0gYXJnc1xuICAgKiBAcGFyYW0gICB7QXJyYXl9ICAgICAgICAgICAgICBlcnJvcnNcbiAgICogQHJldHVybnMgez9zdHJpbmd9XG4gICAqL1xuICBmb3JtYXQobWVzc2FnZSwgYXJncywgZXJyb3JzKSB7XG4gICAgLy8gb3B0aW1pemUgZW50aXRpZXMgd2hpY2ggYXJlIHNpbXBsZSBzdHJpbmdzIHdpdGggbm8gYXR0cmlidXRlc1xuICAgIGlmICh0eXBlb2YgbWVzc2FnZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgcmV0dXJuIHRoaXMuX3RyYW5zZm9ybShtZXNzYWdlKTtcbiAgICB9XG5cbiAgICAvLyBvcHRpbWl6ZSBlbnRpdGllcyB3aXRoIG51bGwgdmFsdWVzXG4gICAgaWYgKG1lc3NhZ2UgPT09IG51bGwgfHwgbWVzc2FnZS52YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgLy8gb3B0aW1pemUgc2ltcGxlLXN0cmluZyBlbnRpdGllcyB3aXRoIGF0dHJpYnV0ZXNcbiAgICBpZiAodHlwZW9mIG1lc3NhZ2UudmFsdWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHJldHVybiB0aGlzLl90cmFuc2Zvcm0obWVzc2FnZS52YWx1ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc29sdmUodGhpcywgYXJncywgbWVzc2FnZSwgZXJyb3JzKTtcbiAgfVxuXG4gIF9tZW1vaXplSW50bE9iamVjdChjdG9yLCBvcHRzKSB7XG4gICAgY29uc3QgY2FjaGUgPSB0aGlzLl9pbnRscy5nZXQoY3RvcikgfHwge307XG4gICAgY29uc3QgaWQgPSBKU09OLnN0cmluZ2lmeShvcHRzKTtcblxuICAgIGlmICghY2FjaGVbaWRdKSB7XG4gICAgICBjYWNoZVtpZF0gPSBuZXcgY3Rvcih0aGlzLmxvY2FsZXMsIG9wdHMpO1xuICAgICAgdGhpcy5faW50bHMuc2V0KGN0b3IsIGNhY2hlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2FjaGVbaWRdO1xuICB9XG59XG4iLCJmdW5jdGlvbiBub25CbGFuayhsaW5lKSB7XG4gIHJldHVybiAhL15cXHMqJC8udGVzdChsaW5lKTtcbn1cblxuZnVuY3Rpb24gY291bnRJbmRlbnQobGluZSkge1xuICBjb25zdCBbaW5kZW50XSA9IGxpbmUubWF0Y2goL15cXHMqLyk7XG4gIHJldHVybiBpbmRlbnQubGVuZ3RoO1xufVxuXG4vKipcbiAqIFRlbXBsYXRlIGxpdGVyYWwgdGFnIGZvciBkZWRlbnRpbmcgRlRMIGNvZGUuXG4gKlxuICogU3RyaXAgdGhlIGNvbW1vbiBpbmRlbnQgb2Ygbm9uLWJsYW5rIGxpbmVzLiBSZW1vdmUgYmxhbmsgbGluZXMuXG4gKlxuICogQHBhcmFtIHtBcnJheTxzdHJpbmc+fSBzdHJpbmdzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmdGwoc3RyaW5ncykge1xuICBjb25zdCBbY29kZV0gPSBzdHJpbmdzO1xuICBjb25zdCBsaW5lcyA9IGNvZGUuc3BsaXQoXCJcXG5cIikuZmlsdGVyKG5vbkJsYW5rKTtcbiAgY29uc3QgaW5kZW50cyA9IGxpbmVzLm1hcChjb3VudEluZGVudCk7XG4gIGNvbnN0IGNvbW1vbiA9IE1hdGgubWluKC4uLmluZGVudHMpO1xuICBjb25zdCBpbmRlbnQgPSBuZXcgUmVnRXhwKGBeXFxcXHN7JHtjb21tb259fWApO1xuXG4gIHJldHVybiBsaW5lcy5tYXAoXG4gICAgbGluZSA9PiBsaW5lLnJlcGxhY2UoaW5kZW50LCBcIlwiKVxuICApLmpvaW4oXCJcXG5cIik7XG59XG4iLCIvKlxuICogQG1vZHVsZSBmbHVlbnRcbiAqIEBvdmVydmlld1xuICpcbiAqIGBmbHVlbnRgIGlzIGEgSmF2YVNjcmlwdCBpbXBsZW1lbnRhdGlvbiBvZiBQcm9qZWN0IEZsdWVudCwgYSBsb2NhbGl6YXRpb25cbiAqIGZyYW1ld29yayBkZXNpZ25lZCB0byB1bmxlYXNoIHRoZSBleHByZXNzaXZlIHBvd2VyIG9mIHRoZSBuYXR1cmFsIGxhbmd1YWdlLlxuICpcbiAqL1xuXG5leHBvcnQgeyBkZWZhdWx0IGFzIEZsdWVudEJ1bmRsZSB9IGZyb20gXCIuL2J1bmRsZS5qc1wiO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBGbHVlbnRSZXNvdXJjZSB9IGZyb20gXCIuL3Jlc291cmNlLmpzXCI7XG5leHBvcnQgeyBkZWZhdWx0IGFzIEZsdWVudEVycm9yIH0gZnJvbSBcIi4vZXJyb3IuanNcIjtcbmV4cG9ydCB7IEZsdWVudFR5cGUsIEZsdWVudE51bWJlciwgRmx1ZW50RGF0ZVRpbWUgfSBmcm9tIFwiLi90eXBlcy5qc1wiO1xuXG5leHBvcnQgeyBmdGwgfSBmcm9tIFwiLi91dGlsLmpzXCI7XG4iLCIvKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIGZpbGUsXG4gKiBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLiAqL1xuXG5pbXBvcnQgeyBGbHVlbnRCdW5kbGUgfSBmcm9tIFwiZmx1ZW50XCI7XG5cbi8qKlxuICogUHJvcGVydGllcyB0aGF0IGFsbG93IHJpY2ggdGV4dCBNVVNUIGJlIGFkZGVkIHRvIHRoaXMgbGlzdC5cbiAqICAga2V5OiB0aGUgbG9jYWxpemF0aW9uX2lkIHRoYXQgc2hvdWxkIGJlIHVzZWRcbiAqICAgdmFsdWU6IGEgcHJvcGVydHkgb3IgYXJyYXkgb2YgcHJvcGVydGllcyBvbiB0aGUgbWVzc2FnZS5jb250ZW50IG9iamVjdFxuICovXG5jb25zdCBSSUNIX1RFWFRfQ09ORklHID0ge1xuICB0ZXh0OiBbXCJ0ZXh0XCIsIFwic2NlbmUxX3RleHRcIl0sXG4gIHN1Y2Nlc3NfdGV4dDogXCJzdWNjZXNzX3RleHRcIixcbiAgZXJyb3JfdGV4dDogXCJlcnJvcl90ZXh0XCIsXG4gIHNjZW5lMl90ZXh0OiBcInNjZW5lMl90ZXh0XCIsXG4gIGFtb19odG1sOiBcImFtb19odG1sXCIsXG4gIHByaXZhY3lfaHRtbDogXCJzY2VuZTJfcHJpdmFjeV9odG1sXCIsXG4gIGRpc2NsYWltZXJfaHRtbDogXCJzY2VuZTJfZGlzY2xhaW1lcl9odG1sXCIsXG59O1xuXG5leHBvcnQgY29uc3QgUklDSF9URVhUX0tFWVMgPSBPYmplY3Qua2V5cyhSSUNIX1RFWFRfQ09ORklHKTtcblxuLyoqXG4gKiBHZW5lcmF0ZXMgYW4gYXJyYXkgb2YgbWVzc2FnZXMgc3VpdGFibGUgZm9yIGZsdWVudCdzIGxvY2FsaXphdGlvbiBwcm92aWRlclxuICogaW5jbHVkaW5nIGFsbCBuZWVkZWQgc3RyaW5ncyBmb3IgcmljaCB0ZXh0LlxuICogQHBhcmFtIHtvYmplY3R9IGNvbnRlbnQgQSAuY29udGVudCBvYmplY3QgZnJvbSBhbiBBU1IgbWVzc2FnZSAoaS5lLiBtZXNzYWdlLmNvbnRlbnQpXG4gKiBAcmV0dXJucyB7Rmx1ZW50QnVuZGxlW119IEEgYXJyYXkgY29udGFpbmluZyB0aGUgZmx1ZW50IG1lc3NhZ2UgY29udGV4dFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVCdW5kbGVzKGNvbnRlbnQpIHtcbiAgY29uc3QgYnVuZGxlID0gbmV3IEZsdWVudEJ1bmRsZShcImVuLVVTXCIpO1xuXG4gIFJJQ0hfVEVYVF9LRVlTLmZvckVhY2goa2V5ID0+IHtcbiAgICBjb25zdCBhdHRycyA9IFJJQ0hfVEVYVF9DT05GSUdba2V5XTtcbiAgICBjb25zdCBhdHRyc1RvVHJ5ID0gQXJyYXkuaXNBcnJheShhdHRycykgPyBbLi4uYXR0cnNdIDogW2F0dHJzXTtcbiAgICBsZXQgc3RyaW5nID0gXCJcIjtcbiAgICB3aGlsZSAoIXN0cmluZyAmJiBhdHRyc1RvVHJ5Lmxlbmd0aCkge1xuICAgICAgY29uc3QgYXR0ciA9IGF0dHJzVG9UcnkucG9wKCk7XG4gICAgICBzdHJpbmcgPSBjb250ZW50W2F0dHJdO1xuICAgIH1cbiAgICBidW5kbGUuYWRkTWVzc2FnZXMoYCR7a2V5fSA9ICR7c3RyaW5nfWApO1xuICB9KTtcbiAgcmV0dXJuIFtidW5kbGVdO1xufVxuIiwiLyogVGhpcyBTb3VyY2UgQ29kZSBGb3JtIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBNb3ppbGxhIFB1YmxpY1xuICogTGljZW5zZSwgdi4gMi4wLiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBmaWxlLFxuICogWW91IGNhbiBvYnRhaW4gb25lIGF0IGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy4gKi9cblxudGhpcy5EZWR1cGUgPSBjbGFzcyBEZWR1cGUge1xuICBjb25zdHJ1Y3RvcihjcmVhdGVLZXkpIHtcbiAgICB0aGlzLmNyZWF0ZUtleSA9IGNyZWF0ZUtleSB8fCB0aGlzLmRlZmF1bHRDcmVhdGVLZXk7XG4gIH1cblxuICBkZWZhdWx0Q3JlYXRlS2V5KGl0ZW0pIHtcbiAgICByZXR1cm4gaXRlbTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWR1cGUgYW55IG51bWJlciBvZiBncm91cGVkIGVsZW1lbnRzIGZhdm9yaW5nIHRob3NlIGZyb20gZWFybGllciBncm91cHMuXG4gICAqXG4gICAqIEBwYXJhbSB7QXJyYXl9IGdyb3VwcyBDb250YWlucyBhbiBhcmJpdHJhcnkgbnVtYmVyIG9mIGFycmF5cyBvZiBlbGVtZW50cy5cbiAgICogQHJldHVybnMge0FycmF5fSBBIG1hdGNoaW5nIGFycmF5IG9mIGVhY2ggcHJvdmlkZWQgZ3JvdXAgZGVkdXBlZC5cbiAgICovXG4gIGdyb3VwKC4uLmdyb3Vwcykge1xuICAgIGNvbnN0IGdsb2JhbEtleXMgPSBuZXcgU2V0KCk7XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgZm9yIChjb25zdCB2YWx1ZXMgb2YgZ3JvdXBzKSB7XG4gICAgICBjb25zdCB2YWx1ZU1hcCA9IG5ldyBNYXAoKTtcbiAgICAgIGZvciAoY29uc3QgdmFsdWUgb2YgdmFsdWVzKSB7XG4gICAgICAgIGNvbnN0IGtleSA9IHRoaXMuY3JlYXRlS2V5KHZhbHVlKTtcbiAgICAgICAgaWYgKCFnbG9iYWxLZXlzLmhhcyhrZXkpICYmICF2YWx1ZU1hcC5oYXMoa2V5KSkge1xuICAgICAgICAgIHZhbHVlTWFwLnNldChrZXksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmVzdWx0LnB1c2godmFsdWVNYXApO1xuICAgICAgdmFsdWVNYXAuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4gZ2xvYmFsS2V5cy5hZGQoa2V5KSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQubWFwKG0gPT4gQXJyYXkuZnJvbShtLnZhbHVlcygpKSk7XG4gIH1cbn07XG5cbmNvbnN0IEVYUE9SVEVEX1NZTUJPTFMgPSBbXCJEZWR1cGVcIl07XG4iLCIvKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzXG4gKiBmaWxlLCBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IHsgYWN0aW9uVHlwZXM6IGF0IH0gPSBDaHJvbWVVdGlscy5pbXBvcnQoXG4gIFwicmVzb3VyY2U6Ly9hY3Rpdml0eS1zdHJlYW0vY29tbW9uL0FjdGlvbnMuanNtXCJcbik7XG5jb25zdCB7IERlZHVwZSB9ID0gQ2hyb21lVXRpbHMuaW1wb3J0KFxuICBcInJlc291cmNlOi8vYWN0aXZpdHktc3RyZWFtL2NvbW1vbi9EZWR1cGUuanNtXCJcbik7XG5cbmNvbnN0IFRPUF9TSVRFU19ERUZBVUxUX1JPV1MgPSAxO1xuY29uc3QgVE9QX1NJVEVTX01BWF9TSVRFU19QRVJfUk9XID0gODtcblxuY29uc3QgZGVkdXBlID0gbmV3IERlZHVwZShzaXRlID0+IHNpdGUgJiYgc2l0ZS51cmwpO1xuXG5jb25zdCBJTklUSUFMX1NUQVRFID0ge1xuICBBcHA6IHtcbiAgICAvLyBIYXZlIHdlIHJlY2VpdmVkIHJlYWwgZGF0YSBmcm9tIHRoZSBhcHAgeWV0P1xuICAgIGluaXRpYWxpemVkOiBmYWxzZSxcbiAgfSxcbiAgQVNSb3V0ZXI6IHsgaW5pdGlhbGl6ZWQ6IGZhbHNlIH0sXG4gIFNuaXBwZXRzOiB7IGluaXRpYWxpemVkOiBmYWxzZSB9LFxuICBUb3BTaXRlczoge1xuICAgIC8vIEhhdmUgd2UgcmVjZWl2ZWQgcmVhbCBkYXRhIGZyb20gaGlzdG9yeSB5ZXQ/XG4gICAgaW5pdGlhbGl6ZWQ6IGZhbHNlLFxuICAgIC8vIFRoZSBoaXN0b3J5IChhbmQgcG9zc2libHkgZGVmYXVsdCkgbGlua3NcbiAgICByb3dzOiBbXSxcbiAgICAvLyBVc2VkIGluIGNvbnRlbnQgb25seSB0byBkaXNwYXRjaCBhY3Rpb24gdG8gVG9wU2l0ZUZvcm0uXG4gICAgZWRpdEZvcm06IG51bGwsXG4gICAgLy8gVXNlZCBpbiBjb250ZW50IG9ubHkgdG8gb3BlbiB0aGUgU2VhcmNoU2hvcnRjdXRzRm9ybSBtb2RhbC5cbiAgICBzaG93U2VhcmNoU2hvcnRjdXRzRm9ybTogZmFsc2UsXG4gICAgLy8gVGhlIGxpc3Qgb2YgYXZhaWxhYmxlIHNlYXJjaCBzaG9ydGN1dHMuXG4gICAgc2VhcmNoU2hvcnRjdXRzOiBbXSxcbiAgfSxcbiAgUHJlZnM6IHtcbiAgICBpbml0aWFsaXplZDogZmFsc2UsXG4gICAgdmFsdWVzOiB7fSxcbiAgfSxcbiAgRGlhbG9nOiB7XG4gICAgdmlzaWJsZTogZmFsc2UsXG4gICAgZGF0YToge30sXG4gIH0sXG4gIFNlY3Rpb25zOiBbXSxcbiAgUG9ja2V0OiB7XG4gICAgaXNVc2VyTG9nZ2VkSW46IG51bGwsXG4gICAgcG9ja2V0Q3RhOiB7fSxcbiAgICB3YWl0aW5nRm9yU3BvYzogdHJ1ZSxcbiAgfSxcbiAgLy8gVGhpcyBpcyB0aGUgbmV3IHBvY2tldCBjb25maWd1cmFibGUgbGF5b3V0IHN0YXRlLlxuICBEaXNjb3ZlcnlTdHJlYW06IHtcbiAgICAvLyBUaGlzIGlzIGEgSlNPTi1wYXJzZWQgY29weSBvZiB0aGUgZGlzY292ZXJ5c3RyZWFtLmNvbmZpZyBwcmVmIHZhbHVlLlxuICAgIGNvbmZpZzogeyBlbmFibGVkOiBmYWxzZSwgbGF5b3V0X2VuZHBvaW50OiBcIlwiIH0sXG4gICAgbGF5b3V0OiBbXSxcbiAgICBsYXN0VXBkYXRlZDogbnVsbCxcbiAgICBmZWVkczoge1xuICAgICAgZGF0YToge1xuICAgICAgICAvLyBcImh0dHBzOi8vZm9vLmNvbS9mZWVkMVwiOiB7bGFzdFVwZGF0ZWQ6IDEyMywgZGF0YTogW119XG4gICAgICB9LFxuICAgICAgbG9hZGVkOiBmYWxzZSxcbiAgICB9LFxuICAgIHNwb2NzOiB7XG4gICAgICBzcG9jc19lbmRwb2ludDogXCJcIixcbiAgICAgIGxhc3RVcGRhdGVkOiBudWxsLFxuICAgICAgZGF0YToge30sIC8vIHtzcG9jczogW119XG4gICAgICBsb2FkZWQ6IGZhbHNlLFxuICAgICAgZnJlcXVlbmN5X2NhcHM6IFtdLFxuICAgICAgYmxvY2tlZDogW10sXG4gICAgfSxcbiAgfSxcbiAgU2VhcmNoOiB7XG4gICAgLy8gV2hlbiBzZWFyY2ggaGFuZC1vZmYgaXMgZW5hYmxlZCwgd2UgcmVuZGVyIGEgYmlnIGJ1dHRvbiB0aGF0IGlzIHN0eWxlZCB0b1xuICAgIC8vIGxvb2sgbGlrZSBhIHNlYXJjaCB0ZXh0Ym94LiBJZiB0aGUgYnV0dG9uIGlzIGNsaWNrZWQsIHdlIHN0eWxlXG4gICAgLy8gdGhlIGJ1dHRvbiBhcyBpZiBpdCB3YXMgYSBmb2N1c2VkIHNlYXJjaCBib3ggYW5kIHNob3cgYSBmYWtlIGN1cnNvciBidXRcbiAgICAvLyByZWFsbHkgZm9jdXMgdGhlIGF3ZXNvbWViYXIgd2l0aG91dCB0aGUgZm9jdXMgc3R5bGVzIChcImhpZGRlbiBmb2N1c1wiKS5cbiAgICBmYWtlRm9jdXM6IGZhbHNlLFxuICAgIC8vIEhpZGUgdGhlIHNlYXJjaCBib3ggYWZ0ZXIgaGFuZGluZyBvZmYgdG8gQXdlc29tZUJhciBhbmQgdXNlciBzdGFydHMgdHlwaW5nLlxuICAgIGhpZGU6IGZhbHNlLFxuICB9LFxufTtcblxuZnVuY3Rpb24gQXBwKHByZXZTdGF0ZSA9IElOSVRJQUxfU1RBVEUuQXBwLCBhY3Rpb24pIHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgYXQuSU5JVDpcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBwcmV2U3RhdGUsIGFjdGlvbi5kYXRhIHx8IHt9LCB7XG4gICAgICAgIGluaXRpYWxpemVkOiB0cnVlLFxuICAgICAgfSk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBwcmV2U3RhdGU7XG4gIH1cbn1cblxuZnVuY3Rpb24gQVNSb3V0ZXIocHJldlN0YXRlID0gSU5JVElBTF9TVEFURS5BU1JvdXRlciwgYWN0aW9uKSB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIGF0LkFTX1JPVVRFUl9JTklUSUFMSVpFRDpcbiAgICAgIHJldHVybiB7IC4uLmFjdGlvbi5kYXRhLCBpbml0aWFsaXplZDogdHJ1ZSB9O1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gcHJldlN0YXRlO1xuICB9XG59XG5cbi8qKlxuICogaW5zZXJ0UGlubmVkIC0gSW5zZXJ0cyBwaW5uZWQgbGlua3MgaW4gdGhlaXIgc3BlY2lmaWVkIHNsb3RzXG4gKlxuICogQHBhcmFtIHthcnJheX0gYSBsaXN0IG9mIGxpbmtzXG4gKiBAcGFyYW0ge2FycmF5fSBhIGxpc3Qgb2YgcGlubmVkIGxpbmtzXG4gKiBAcmV0dXJuIHthcnJheX0gcmVzdWx0aW5nIGxpc3Qgb2YgbGlua3Mgd2l0aCBwaW5uZWQgbGlua3MgaW5zZXJ0ZWRcbiAqL1xuZnVuY3Rpb24gaW5zZXJ0UGlubmVkKGxpbmtzLCBwaW5uZWQpIHtcbiAgLy8gUmVtb3ZlIGFueSBwaW5uZWQgbGlua3NcbiAgY29uc3QgcGlubmVkVXJscyA9IHBpbm5lZC5tYXAobGluayA9PiBsaW5rICYmIGxpbmsudXJsKTtcbiAgbGV0IG5ld0xpbmtzID0gbGlua3MuZmlsdGVyKGxpbmsgPT5cbiAgICBsaW5rID8gIXBpbm5lZFVybHMuaW5jbHVkZXMobGluay51cmwpIDogZmFsc2VcbiAgKTtcbiAgbmV3TGlua3MgPSBuZXdMaW5rcy5tYXAobGluayA9PiB7XG4gICAgaWYgKGxpbmsgJiYgbGluay5pc1Bpbm5lZCkge1xuICAgICAgZGVsZXRlIGxpbmsuaXNQaW5uZWQ7XG4gICAgICBkZWxldGUgbGluay5waW5JbmRleDtcbiAgICB9XG4gICAgcmV0dXJuIGxpbms7XG4gIH0pO1xuXG4gIC8vIFRoZW4gaW5zZXJ0IHRoZW0gaW4gdGhlaXIgc3BlY2lmaWVkIGxvY2F0aW9uXG4gIHBpbm5lZC5mb3JFYWNoKCh2YWwsIGluZGV4KSA9PiB7XG4gICAgaWYgKCF2YWwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IGxpbmsgPSBPYmplY3QuYXNzaWduKHt9LCB2YWwsIHsgaXNQaW5uZWQ6IHRydWUsIHBpbkluZGV4OiBpbmRleCB9KTtcbiAgICBpZiAoaW5kZXggPiBuZXdMaW5rcy5sZW5ndGgpIHtcbiAgICAgIG5ld0xpbmtzW2luZGV4XSA9IGxpbms7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld0xpbmtzLnNwbGljZShpbmRleCwgMCwgbGluayk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gbmV3TGlua3M7XG59XG5cbmZ1bmN0aW9uIFRvcFNpdGVzKHByZXZTdGF0ZSA9IElOSVRJQUxfU1RBVEUuVG9wU2l0ZXMsIGFjdGlvbikge1xuICBsZXQgaGFzTWF0Y2g7XG4gIGxldCBuZXdSb3dzO1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSBhdC5UT1BfU0lURVNfVVBEQVRFRDpcbiAgICAgIGlmICghYWN0aW9uLmRhdGEgfHwgIWFjdGlvbi5kYXRhLmxpbmtzKSB7XG4gICAgICAgIHJldHVybiBwcmV2U3RhdGU7XG4gICAgICB9XG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihcbiAgICAgICAge30sXG4gICAgICAgIHByZXZTdGF0ZSxcbiAgICAgICAgeyBpbml0aWFsaXplZDogdHJ1ZSwgcm93czogYWN0aW9uLmRhdGEubGlua3MgfSxcbiAgICAgICAgYWN0aW9uLmRhdGEucHJlZiA/IHsgcHJlZjogYWN0aW9uLmRhdGEucHJlZiB9IDoge31cbiAgICAgICk7XG4gICAgY2FzZSBhdC5UT1BfU0lURVNfUFJFRlNfVVBEQVRFRDpcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBwcmV2U3RhdGUsIHsgcHJlZjogYWN0aW9uLmRhdGEucHJlZiB9KTtcbiAgICBjYXNlIGF0LlRPUF9TSVRFU19FRElUOlxuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHByZXZTdGF0ZSwge1xuICAgICAgICBlZGl0Rm9ybToge1xuICAgICAgICAgIGluZGV4OiBhY3Rpb24uZGF0YS5pbmRleCxcbiAgICAgICAgICBwcmV2aWV3UmVzcG9uc2U6IG51bGwsXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICBjYXNlIGF0LlRPUF9TSVRFU19DQU5DRUxfRURJVDpcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBwcmV2U3RhdGUsIHsgZWRpdEZvcm06IG51bGwgfSk7XG4gICAgY2FzZSBhdC5UT1BfU0lURVNfT1BFTl9TRUFSQ0hfU0hPUlRDVVRTX01PREFMOlxuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHByZXZTdGF0ZSwgeyBzaG93U2VhcmNoU2hvcnRjdXRzRm9ybTogdHJ1ZSB9KTtcbiAgICBjYXNlIGF0LlRPUF9TSVRFU19DTE9TRV9TRUFSQ0hfU0hPUlRDVVRTX01PREFMOlxuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHByZXZTdGF0ZSwgeyBzaG93U2VhcmNoU2hvcnRjdXRzRm9ybTogZmFsc2UgfSk7XG4gICAgY2FzZSBhdC5QUkVWSUVXX1JFU1BPTlNFOlxuICAgICAgaWYgKFxuICAgICAgICAhcHJldlN0YXRlLmVkaXRGb3JtIHx8XG4gICAgICAgIGFjdGlvbi5kYXRhLnVybCAhPT0gcHJldlN0YXRlLmVkaXRGb3JtLnByZXZpZXdVcmxcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gcHJldlN0YXRlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHByZXZTdGF0ZSwge1xuICAgICAgICBlZGl0Rm9ybToge1xuICAgICAgICAgIGluZGV4OiBwcmV2U3RhdGUuZWRpdEZvcm0uaW5kZXgsXG4gICAgICAgICAgcHJldmlld1Jlc3BvbnNlOiBhY3Rpb24uZGF0YS5wcmV2aWV3LFxuICAgICAgICAgIHByZXZpZXdVcmw6IGFjdGlvbi5kYXRhLnVybCxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgIGNhc2UgYXQuUFJFVklFV19SRVFVRVNUOlxuICAgICAgaWYgKCFwcmV2U3RhdGUuZWRpdEZvcm0pIHtcbiAgICAgICAgcmV0dXJuIHByZXZTdGF0ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBwcmV2U3RhdGUsIHtcbiAgICAgICAgZWRpdEZvcm06IHtcbiAgICAgICAgICBpbmRleDogcHJldlN0YXRlLmVkaXRGb3JtLmluZGV4LFxuICAgICAgICAgIHByZXZpZXdSZXNwb25zZTogbnVsbCxcbiAgICAgICAgICBwcmV2aWV3VXJsOiBhY3Rpb24uZGF0YS51cmwsXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICBjYXNlIGF0LlBSRVZJRVdfUkVRVUVTVF9DQU5DRUw6XG4gICAgICBpZiAoIXByZXZTdGF0ZS5lZGl0Rm9ybSkge1xuICAgICAgICByZXR1cm4gcHJldlN0YXRlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHByZXZTdGF0ZSwge1xuICAgICAgICBlZGl0Rm9ybToge1xuICAgICAgICAgIGluZGV4OiBwcmV2U3RhdGUuZWRpdEZvcm0uaW5kZXgsXG4gICAgICAgICAgcHJldmlld1Jlc3BvbnNlOiBudWxsLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgY2FzZSBhdC5TQ1JFRU5TSE9UX1VQREFURUQ6XG4gICAgICBuZXdSb3dzID0gcHJldlN0YXRlLnJvd3MubWFwKHJvdyA9PiB7XG4gICAgICAgIGlmIChyb3cgJiYgcm93LnVybCA9PT0gYWN0aW9uLmRhdGEudXJsKSB7XG4gICAgICAgICAgaGFzTWF0Y2ggPSB0cnVlO1xuICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCByb3csIHsgc2NyZWVuc2hvdDogYWN0aW9uLmRhdGEuc2NyZWVuc2hvdCB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcm93O1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gaGFzTWF0Y2hcbiAgICAgICAgPyBPYmplY3QuYXNzaWduKHt9LCBwcmV2U3RhdGUsIHsgcm93czogbmV3Um93cyB9KVxuICAgICAgICA6IHByZXZTdGF0ZTtcbiAgICBjYXNlIGF0LlBMQUNFU19CT09LTUFSS19BRERFRDpcbiAgICAgIGlmICghYWN0aW9uLmRhdGEpIHtcbiAgICAgICAgcmV0dXJuIHByZXZTdGF0ZTtcbiAgICAgIH1cbiAgICAgIG5ld1Jvd3MgPSBwcmV2U3RhdGUucm93cy5tYXAoc2l0ZSA9PiB7XG4gICAgICAgIGlmIChzaXRlICYmIHNpdGUudXJsID09PSBhY3Rpb24uZGF0YS51cmwpIHtcbiAgICAgICAgICBjb25zdCB7IGJvb2ttYXJrR3VpZCwgYm9va21hcmtUaXRsZSwgZGF0ZUFkZGVkIH0gPSBhY3Rpb24uZGF0YTtcbiAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgc2l0ZSwge1xuICAgICAgICAgICAgYm9va21hcmtHdWlkLFxuICAgICAgICAgICAgYm9va21hcmtUaXRsZSxcbiAgICAgICAgICAgIGJvb2ttYXJrRGF0ZUNyZWF0ZWQ6IGRhdGVBZGRlZCxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2l0ZTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHByZXZTdGF0ZSwgeyByb3dzOiBuZXdSb3dzIH0pO1xuICAgIGNhc2UgYXQuUExBQ0VTX0JPT0tNQVJLX1JFTU9WRUQ6XG4gICAgICBpZiAoIWFjdGlvbi5kYXRhKSB7XG4gICAgICAgIHJldHVybiBwcmV2U3RhdGU7XG4gICAgICB9XG4gICAgICBuZXdSb3dzID0gcHJldlN0YXRlLnJvd3MubWFwKHNpdGUgPT4ge1xuICAgICAgICBpZiAoc2l0ZSAmJiBzaXRlLnVybCA9PT0gYWN0aW9uLmRhdGEudXJsKSB7XG4gICAgICAgICAgY29uc3QgbmV3U2l0ZSA9IE9iamVjdC5hc3NpZ24oe30sIHNpdGUpO1xuICAgICAgICAgIGRlbGV0ZSBuZXdTaXRlLmJvb2ttYXJrR3VpZDtcbiAgICAgICAgICBkZWxldGUgbmV3U2l0ZS5ib29rbWFya1RpdGxlO1xuICAgICAgICAgIGRlbGV0ZSBuZXdTaXRlLmJvb2ttYXJrRGF0ZUNyZWF0ZWQ7XG4gICAgICAgICAgcmV0dXJuIG5ld1NpdGU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNpdGU7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBwcmV2U3RhdGUsIHsgcm93czogbmV3Um93cyB9KTtcbiAgICBjYXNlIGF0LlBMQUNFU19MSU5LX0RFTEVURUQ6XG4gICAgICBpZiAoIWFjdGlvbi5kYXRhKSB7XG4gICAgICAgIHJldHVybiBwcmV2U3RhdGU7XG4gICAgICB9XG4gICAgICBuZXdSb3dzID0gcHJldlN0YXRlLnJvd3MuZmlsdGVyKHNpdGUgPT4gYWN0aW9uLmRhdGEudXJsICE9PSBzaXRlLnVybCk7XG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgcHJldlN0YXRlLCB7IHJvd3M6IG5ld1Jvd3MgfSk7XG4gICAgY2FzZSBhdC5VUERBVEVfU0VBUkNIX1NIT1JUQ1VUUzpcbiAgICAgIHJldHVybiB7IC4uLnByZXZTdGF0ZSwgc2VhcmNoU2hvcnRjdXRzOiBhY3Rpb24uZGF0YS5zZWFyY2hTaG9ydGN1dHMgfTtcbiAgICBjYXNlIGF0LlNOSVBQRVRTX1BSRVZJRVdfTU9ERTpcbiAgICAgIHJldHVybiB7IC4uLnByZXZTdGF0ZSwgcm93czogW10gfTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHByZXZTdGF0ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBEaWFsb2cocHJldlN0YXRlID0gSU5JVElBTF9TVEFURS5EaWFsb2csIGFjdGlvbikge1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSBhdC5ESUFMT0dfT1BFTjpcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBwcmV2U3RhdGUsIHsgdmlzaWJsZTogdHJ1ZSwgZGF0YTogYWN0aW9uLmRhdGEgfSk7XG4gICAgY2FzZSBhdC5ESUFMT0dfQ0FOQ0VMOlxuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHByZXZTdGF0ZSwgeyB2aXNpYmxlOiBmYWxzZSB9KTtcbiAgICBjYXNlIGF0LkRFTEVURV9ISVNUT1JZX1VSTDpcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBJTklUSUFMX1NUQVRFLkRpYWxvZyk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBwcmV2U3RhdGU7XG4gIH1cbn1cblxuZnVuY3Rpb24gUHJlZnMocHJldlN0YXRlID0gSU5JVElBTF9TVEFURS5QcmVmcywgYWN0aW9uKSB7XG4gIGxldCBuZXdWYWx1ZXM7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIGF0LlBSRUZTX0lOSVRJQUxfVkFMVUVTOlxuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHByZXZTdGF0ZSwge1xuICAgICAgICBpbml0aWFsaXplZDogdHJ1ZSxcbiAgICAgICAgdmFsdWVzOiBhY3Rpb24uZGF0YSxcbiAgICAgIH0pO1xuICAgIGNhc2UgYXQuUFJFRl9DSEFOR0VEOlxuICAgICAgbmV3VmFsdWVzID0gT2JqZWN0LmFzc2lnbih7fSwgcHJldlN0YXRlLnZhbHVlcyk7XG4gICAgICBuZXdWYWx1ZXNbYWN0aW9uLmRhdGEubmFtZV0gPSBhY3Rpb24uZGF0YS52YWx1ZTtcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBwcmV2U3RhdGUsIHsgdmFsdWVzOiBuZXdWYWx1ZXMgfSk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBwcmV2U3RhdGU7XG4gIH1cbn1cblxuZnVuY3Rpb24gU2VjdGlvbnMocHJldlN0YXRlID0gSU5JVElBTF9TVEFURS5TZWN0aW9ucywgYWN0aW9uKSB7XG4gIGxldCBoYXNNYXRjaDtcbiAgbGV0IG5ld1N0YXRlO1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSBhdC5TRUNUSU9OX0RFUkVHSVNURVI6XG4gICAgICByZXR1cm4gcHJldlN0YXRlLmZpbHRlcihzZWN0aW9uID0+IHNlY3Rpb24uaWQgIT09IGFjdGlvbi5kYXRhKTtcbiAgICBjYXNlIGF0LlNFQ1RJT05fUkVHSVNURVI6XG4gICAgICAvLyBJZiBzZWN0aW9uIGV4aXN0cyBpbiBwcmV2U3RhdGUsIHVwZGF0ZSBpdFxuICAgICAgbmV3U3RhdGUgPSBwcmV2U3RhdGUubWFwKHNlY3Rpb24gPT4ge1xuICAgICAgICBpZiAoc2VjdGlvbiAmJiBzZWN0aW9uLmlkID09PSBhY3Rpb24uZGF0YS5pZCkge1xuICAgICAgICAgIGhhc01hdGNoID0gdHJ1ZTtcbiAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgc2VjdGlvbiwgYWN0aW9uLmRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZWN0aW9uO1xuICAgICAgfSk7XG4gICAgICAvLyBPdGhlcndpc2UsIGFwcGVuZCBpdFxuICAgICAgaWYgKCFoYXNNYXRjaCkge1xuICAgICAgICBjb25zdCBpbml0aWFsaXplZCA9ICEhKGFjdGlvbi5kYXRhLnJvd3MgJiYgYWN0aW9uLmRhdGEucm93cy5sZW5ndGggPiAwKTtcbiAgICAgICAgY29uc3Qgc2VjdGlvbiA9IE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgeyB0aXRsZTogXCJcIiwgcm93czogW10sIGVuYWJsZWQ6IGZhbHNlIH0sXG4gICAgICAgICAgYWN0aW9uLmRhdGEsXG4gICAgICAgICAgeyBpbml0aWFsaXplZCB9XG4gICAgICAgICk7XG4gICAgICAgIG5ld1N0YXRlLnB1c2goc2VjdGlvbik7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3U3RhdGU7XG4gICAgY2FzZSBhdC5TRUNUSU9OX1VQREFURTpcbiAgICAgIG5ld1N0YXRlID0gcHJldlN0YXRlLm1hcChzZWN0aW9uID0+IHtcbiAgICAgICAgaWYgKHNlY3Rpb24gJiYgc2VjdGlvbi5pZCA9PT0gYWN0aW9uLmRhdGEuaWQpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgYWN0aW9uIGlzIHVwZGF0aW5nIHJvd3MsIHdlIHNob3VsZCBjb25zaWRlciBpbml0aWFsaXplZCB0byBiZSB0cnVlLlxuICAgICAgICAgIC8vIFRoaXMgY2FuIGJlIG92ZXJyaWRkZW4gaWYgaW5pdGlhbGl6ZWQgaXMgZGVmaW5lZCBpbiB0aGUgYWN0aW9uLmRhdGFcbiAgICAgICAgICBjb25zdCBpbml0aWFsaXplZCA9IGFjdGlvbi5kYXRhLnJvd3MgPyB7IGluaXRpYWxpemVkOiB0cnVlIH0gOiB7fTtcblxuICAgICAgICAgIC8vIE1ha2Ugc3VyZSBwaW5uZWQgY2FyZHMgc3RheSBhdCB0aGVpciBjdXJyZW50IHBvc2l0aW9uIHdoZW4gcm93cyBhcmUgdXBkYXRlZC5cbiAgICAgICAgICAvLyBEaXNhYmxpbmcgYSBzZWN0aW9uIChTRUNUSU9OX1VQREFURSB3aXRoIGVtcHR5IHJvd3MpIGRvZXMgbm90IHJldGFpbiBwaW5uZWQgY2FyZHMuXG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgYWN0aW9uLmRhdGEucm93cyAmJlxuICAgICAgICAgICAgYWN0aW9uLmRhdGEucm93cy5sZW5ndGggPiAwICYmXG4gICAgICAgICAgICBzZWN0aW9uLnJvd3MuZmluZChjYXJkID0+IGNhcmQucGlubmVkKVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgY29uc3Qgcm93cyA9IEFycmF5LmZyb20oYWN0aW9uLmRhdGEucm93cyk7XG4gICAgICAgICAgICBzZWN0aW9uLnJvd3MuZm9yRWFjaCgoY2FyZCwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgaWYgKGNhcmQucGlubmVkKSB7XG4gICAgICAgICAgICAgICAgLy8gT25seSBhZGQgaXQgaWYgaXQncyBub3QgYWxyZWFkeSB0aGVyZS5cbiAgICAgICAgICAgICAgICBpZiAocm93c1tpbmRleF0uZ3VpZCAhPT0gY2FyZC5ndWlkKSB7XG4gICAgICAgICAgICAgICAgICByb3dzLnNwbGljZShpbmRleCwgMCwgY2FyZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgICB7fSxcbiAgICAgICAgICAgICAgc2VjdGlvbixcbiAgICAgICAgICAgICAgaW5pdGlhbGl6ZWQsXG4gICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oe30sIGFjdGlvbi5kYXRhLCB7IHJvd3MgfSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHNlY3Rpb24sIGluaXRpYWxpemVkLCBhY3Rpb24uZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNlY3Rpb247XG4gICAgICB9KTtcblxuICAgICAgaWYgKCFhY3Rpb24uZGF0YS5kZWR1cGVDb25maWd1cmF0aW9ucykge1xuICAgICAgICByZXR1cm4gbmV3U3RhdGU7XG4gICAgICB9XG5cbiAgICAgIGFjdGlvbi5kYXRhLmRlZHVwZUNvbmZpZ3VyYXRpb25zLmZvckVhY2goZGVkdXBlQ29uZiA9PiB7XG4gICAgICAgIG5ld1N0YXRlID0gbmV3U3RhdGUubWFwKHNlY3Rpb24gPT4ge1xuICAgICAgICAgIGlmIChzZWN0aW9uLmlkID09PSBkZWR1cGVDb25mLmlkKSB7XG4gICAgICAgICAgICBjb25zdCBkZWR1cGVkUm93cyA9IGRlZHVwZUNvbmYuZGVkdXBlRnJvbS5yZWR1Y2UoXG4gICAgICAgICAgICAgIChyb3dzLCBkZWR1cGVTZWN0aW9uSWQpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBkZWR1cGVTZWN0aW9uID0gbmV3U3RhdGUuZmluZChcbiAgICAgICAgICAgICAgICAgIHMgPT4gcy5pZCA9PT0gZGVkdXBlU2VjdGlvbklkXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBjb25zdCBbLCBuZXdSb3dzXSA9IGRlZHVwZS5ncm91cChkZWR1cGVTZWN0aW9uLnJvd3MsIHJvd3MpO1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXdSb3dzO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBzZWN0aW9uLnJvd3NcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBzZWN0aW9uLCB7IHJvd3M6IGRlZHVwZWRSb3dzIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBzZWN0aW9uO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gbmV3U3RhdGU7XG4gICAgY2FzZSBhdC5TRUNUSU9OX1VQREFURV9DQVJEOlxuICAgICAgcmV0dXJuIHByZXZTdGF0ZS5tYXAoc2VjdGlvbiA9PiB7XG4gICAgICAgIGlmIChzZWN0aW9uICYmIHNlY3Rpb24uaWQgPT09IGFjdGlvbi5kYXRhLmlkICYmIHNlY3Rpb24ucm93cykge1xuICAgICAgICAgIGNvbnN0IG5ld1Jvd3MgPSBzZWN0aW9uLnJvd3MubWFwKGNhcmQgPT4ge1xuICAgICAgICAgICAgaWYgKGNhcmQudXJsID09PSBhY3Rpb24uZGF0YS51cmwpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIGNhcmQsIGFjdGlvbi5kYXRhLm9wdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNhcmQ7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHNlY3Rpb24sIHsgcm93czogbmV3Um93cyB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2VjdGlvbjtcbiAgICAgIH0pO1xuICAgIGNhc2UgYXQuUExBQ0VTX0JPT0tNQVJLX0FEREVEOlxuICAgICAgaWYgKCFhY3Rpb24uZGF0YSkge1xuICAgICAgICByZXR1cm4gcHJldlN0YXRlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHByZXZTdGF0ZS5tYXAoc2VjdGlvbiA9PlxuICAgICAgICBPYmplY3QuYXNzaWduKHt9LCBzZWN0aW9uLCB7XG4gICAgICAgICAgcm93czogc2VjdGlvbi5yb3dzLm1hcChpdGVtID0+IHtcbiAgICAgICAgICAgIC8vIGZpbmQgdGhlIGl0ZW0gd2l0aGluIHRoZSByb3dzIHRoYXQgaXMgYXR0ZW1wdGVkIHRvIGJlIGJvb2ttYXJrZWRcbiAgICAgICAgICAgIGlmIChpdGVtLnVybCA9PT0gYWN0aW9uLmRhdGEudXJsKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHsgYm9va21hcmtHdWlkLCBib29rbWFya1RpdGxlLCBkYXRlQWRkZWQgfSA9IGFjdGlvbi5kYXRhO1xuICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgaXRlbSwge1xuICAgICAgICAgICAgICAgIGJvb2ttYXJrR3VpZCxcbiAgICAgICAgICAgICAgICBib29rbWFya1RpdGxlLFxuICAgICAgICAgICAgICAgIGJvb2ttYXJrRGF0ZUNyZWF0ZWQ6IGRhdGVBZGRlZCxcbiAgICAgICAgICAgICAgICB0eXBlOiBcImJvb2ttYXJrXCIsXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgICAgICAgfSksXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIGNhc2UgYXQuUExBQ0VTX1NBVkVEX1RPX1BPQ0tFVDpcbiAgICAgIGlmICghYWN0aW9uLmRhdGEpIHtcbiAgICAgICAgcmV0dXJuIHByZXZTdGF0ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwcmV2U3RhdGUubWFwKHNlY3Rpb24gPT5cbiAgICAgICAgT2JqZWN0LmFzc2lnbih7fSwgc2VjdGlvbiwge1xuICAgICAgICAgIHJvd3M6IHNlY3Rpb24ucm93cy5tYXAoaXRlbSA9PiB7XG4gICAgICAgICAgICBpZiAoaXRlbS51cmwgPT09IGFjdGlvbi5kYXRhLnVybCkge1xuICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgaXRlbSwge1xuICAgICAgICAgICAgICAgIG9wZW5fdXJsOiBhY3Rpb24uZGF0YS5vcGVuX3VybCxcbiAgICAgICAgICAgICAgICBwb2NrZXRfaWQ6IGFjdGlvbi5kYXRhLnBvY2tldF9pZCxcbiAgICAgICAgICAgICAgICB0aXRsZTogYWN0aW9uLmRhdGEudGl0bGUsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJwb2NrZXRcIixcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gaXRlbTtcbiAgICAgICAgICB9KSxcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgY2FzZSBhdC5QTEFDRVNfQk9PS01BUktfUkVNT1ZFRDpcbiAgICAgIGlmICghYWN0aW9uLmRhdGEpIHtcbiAgICAgICAgcmV0dXJuIHByZXZTdGF0ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwcmV2U3RhdGUubWFwKHNlY3Rpb24gPT5cbiAgICAgICAgT2JqZWN0LmFzc2lnbih7fSwgc2VjdGlvbiwge1xuICAgICAgICAgIHJvd3M6IHNlY3Rpb24ucm93cy5tYXAoaXRlbSA9PiB7XG4gICAgICAgICAgICAvLyBmaW5kIHRoZSBib29rbWFyayB3aXRoaW4gdGhlIHJvd3MgdGhhdCBpcyBhdHRlbXB0ZWQgdG8gYmUgcmVtb3ZlZFxuICAgICAgICAgICAgaWYgKGl0ZW0udXJsID09PSBhY3Rpb24uZGF0YS51cmwpIHtcbiAgICAgICAgICAgICAgY29uc3QgbmV3U2l0ZSA9IE9iamVjdC5hc3NpZ24oe30sIGl0ZW0pO1xuICAgICAgICAgICAgICBkZWxldGUgbmV3U2l0ZS5ib29rbWFya0d1aWQ7XG4gICAgICAgICAgICAgIGRlbGV0ZSBuZXdTaXRlLmJvb2ttYXJrVGl0bGU7XG4gICAgICAgICAgICAgIGRlbGV0ZSBuZXdTaXRlLmJvb2ttYXJrRGF0ZUNyZWF0ZWQ7XG4gICAgICAgICAgICAgIGlmICghbmV3U2l0ZS50eXBlIHx8IG5ld1NpdGUudHlwZSA9PT0gXCJib29rbWFya1wiKSB7XG4gICAgICAgICAgICAgICAgbmV3U2l0ZS50eXBlID0gXCJoaXN0b3J5XCI7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIG5ld1NpdGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gaXRlbTtcbiAgICAgICAgICB9KSxcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgY2FzZSBhdC5QTEFDRVNfTElOS19ERUxFVEVEOlxuICAgIGNhc2UgYXQuUExBQ0VTX0xJTktfQkxPQ0tFRDpcbiAgICAgIGlmICghYWN0aW9uLmRhdGEpIHtcbiAgICAgICAgcmV0dXJuIHByZXZTdGF0ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwcmV2U3RhdGUubWFwKHNlY3Rpb24gPT5cbiAgICAgICAgT2JqZWN0LmFzc2lnbih7fSwgc2VjdGlvbiwge1xuICAgICAgICAgIHJvd3M6IHNlY3Rpb24ucm93cy5maWx0ZXIoc2l0ZSA9PiBzaXRlLnVybCAhPT0gYWN0aW9uLmRhdGEudXJsKSxcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgY2FzZSBhdC5ERUxFVEVfRlJPTV9QT0NLRVQ6XG4gICAgY2FzZSBhdC5BUkNISVZFX0ZST01fUE9DS0VUOlxuICAgICAgcmV0dXJuIHByZXZTdGF0ZS5tYXAoc2VjdGlvbiA9PlxuICAgICAgICBPYmplY3QuYXNzaWduKHt9LCBzZWN0aW9uLCB7XG4gICAgICAgICAgcm93czogc2VjdGlvbi5yb3dzLmZpbHRlcihcbiAgICAgICAgICAgIHNpdGUgPT4gc2l0ZS5wb2NrZXRfaWQgIT09IGFjdGlvbi5kYXRhLnBvY2tldF9pZFxuICAgICAgICAgICksXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIGNhc2UgYXQuU05JUFBFVFNfUFJFVklFV19NT0RFOlxuICAgICAgcmV0dXJuIHByZXZTdGF0ZS5tYXAoc2VjdGlvbiA9PiAoeyAuLi5zZWN0aW9uLCByb3dzOiBbXSB9KSk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBwcmV2U3RhdGU7XG4gIH1cbn1cblxuZnVuY3Rpb24gU25pcHBldHMocHJldlN0YXRlID0gSU5JVElBTF9TVEFURS5TbmlwcGV0cywgYWN0aW9uKSB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIGF0LlNOSVBQRVRTX0RBVEE6XG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgcHJldlN0YXRlLCB7IGluaXRpYWxpemVkOiB0cnVlIH0sIGFjdGlvbi5kYXRhKTtcbiAgICBjYXNlIGF0LlNOSVBQRVRfQkxPQ0tFRDpcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBwcmV2U3RhdGUsIHtcbiAgICAgICAgYmxvY2tMaXN0OiBwcmV2U3RhdGUuYmxvY2tMaXN0LmNvbmNhdChhY3Rpb24uZGF0YSksXG4gICAgICB9KTtcbiAgICBjYXNlIGF0LlNOSVBQRVRTX0JMT0NLTElTVF9DTEVBUkVEOlxuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHByZXZTdGF0ZSwgeyBibG9ja0xpc3Q6IFtdIH0pO1xuICAgIGNhc2UgYXQuU05JUFBFVFNfUkVTRVQ6XG4gICAgICByZXR1cm4gSU5JVElBTF9TVEFURS5TbmlwcGV0cztcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHByZXZTdGF0ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBQb2NrZXQocHJldlN0YXRlID0gSU5JVElBTF9TVEFURS5Qb2NrZXQsIGFjdGlvbikge1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSBhdC5QT0NLRVRfV0FJVElOR19GT1JfU1BPQzpcbiAgICAgIHJldHVybiB7IC4uLnByZXZTdGF0ZSwgd2FpdGluZ0ZvclNwb2M6IGFjdGlvbi5kYXRhIH07XG4gICAgY2FzZSBhdC5QT0NLRVRfTE9HR0VEX0lOOlxuICAgICAgcmV0dXJuIHsgLi4ucHJldlN0YXRlLCBpc1VzZXJMb2dnZWRJbjogISFhY3Rpb24uZGF0YSB9O1xuICAgIGNhc2UgYXQuUE9DS0VUX0NUQTpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnByZXZTdGF0ZSxcbiAgICAgICAgcG9ja2V0Q3RhOiB7XG4gICAgICAgICAgY3RhQnV0dG9uOiBhY3Rpb24uZGF0YS5jdGFfYnV0dG9uLFxuICAgICAgICAgIGN0YVRleHQ6IGFjdGlvbi5kYXRhLmN0YV90ZXh0LFxuICAgICAgICAgIGN0YVVybDogYWN0aW9uLmRhdGEuY3RhX3VybCxcbiAgICAgICAgICB1c2VDdGE6IGFjdGlvbi5kYXRhLnVzZV9jdGEsXG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gcHJldlN0YXRlO1xuICB9XG59XG5cbmZ1bmN0aW9uIERpc2NvdmVyeVN0cmVhbShwcmV2U3RhdGUgPSBJTklUSUFMX1NUQVRFLkRpc2NvdmVyeVN0cmVhbSwgYWN0aW9uKSB7XG4gIC8vIFJldHVybiBpZiBhY3Rpb24gZGF0YSBpcyBlbXB0eSwgb3Igc3BvY3Mgb3IgZmVlZHMgZGF0YSBpcyBub3QgbG9hZGVkXG4gIGNvbnN0IGlzTm90UmVhZHkgPSAoKSA9PlxuICAgICFhY3Rpb24uZGF0YSB8fCAhcHJldlN0YXRlLnNwb2NzLmxvYWRlZCB8fCAhcHJldlN0YXRlLmZlZWRzLmxvYWRlZDtcblxuICBjb25zdCBuZXh0U3RhdGUgPSBoYW5kbGVTaXRlcyA9PiAoe1xuICAgIC4uLnByZXZTdGF0ZSxcbiAgICBzcG9jczoge1xuICAgICAgLi4ucHJldlN0YXRlLnNwb2NzLFxuICAgICAgZGF0YTogcHJldlN0YXRlLnNwb2NzLmRhdGEuc3BvY3NcbiAgICAgICAgPyB7XG4gICAgICAgICAgICBzcG9jczogaGFuZGxlU2l0ZXMocHJldlN0YXRlLnNwb2NzLmRhdGEuc3BvY3MpLFxuICAgICAgICAgIH1cbiAgICAgICAgOiB7fSxcbiAgICB9LFxuICAgIGZlZWRzOiB7XG4gICAgICAuLi5wcmV2U3RhdGUuZmVlZHMsXG4gICAgICBkYXRhOiBPYmplY3Qua2V5cyhwcmV2U3RhdGUuZmVlZHMuZGF0YSkucmVkdWNlKFxuICAgICAgICAoYWNjdW11bGF0b3IsIGZlZWRfdXJsKSA9PiB7XG4gICAgICAgICAgYWNjdW11bGF0b3JbZmVlZF91cmxdID0ge1xuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAuLi5wcmV2U3RhdGUuZmVlZHMuZGF0YVtmZWVkX3VybF0uZGF0YSxcbiAgICAgICAgICAgICAgcmVjb21tZW5kYXRpb25zOiBoYW5kbGVTaXRlcyhcbiAgICAgICAgICAgICAgICBwcmV2U3RhdGUuZmVlZHMuZGF0YVtmZWVkX3VybF0uZGF0YS5yZWNvbW1lbmRhdGlvbnNcbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfTtcbiAgICAgICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgICAgIH0sXG4gICAgICAgIHt9XG4gICAgICApLFxuICAgIH0sXG4gIH0pO1xuXG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIGF0LkRJU0NPVkVSWV9TVFJFQU1fQ09ORklHX0NIQU5HRTpcbiAgICAvLyBUaGUgcmVhc29uIHRoaXMgaXMgYSBzZXBhcmF0ZSBhY3Rpb24gaXMgc28gaXQgZG9lc24ndCB0cmlnZ2VyIGEgbGlzdGVuZXIgdXBkYXRlIG9uIGluaXRcbiAgICBjYXNlIGF0LkRJU0NPVkVSWV9TVFJFQU1fQ09ORklHX1NFVFVQOlxuICAgICAgcmV0dXJuIHsgLi4ucHJldlN0YXRlLCBjb25maWc6IGFjdGlvbi5kYXRhIHx8IHt9IH07XG4gICAgY2FzZSBhdC5ESVNDT1ZFUllfU1RSRUFNX0xBWU9VVF9VUERBVEU6XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5wcmV2U3RhdGUsXG4gICAgICAgIGxhc3RVcGRhdGVkOiBhY3Rpb24uZGF0YS5sYXN0VXBkYXRlZCB8fCBudWxsLFxuICAgICAgICBsYXlvdXQ6IGFjdGlvbi5kYXRhLmxheW91dCB8fCBbXSxcbiAgICAgIH07XG4gICAgY2FzZSBhdC5ESVNDT1ZFUllfU1RSRUFNX0xBWU9VVF9SRVNFVDpcbiAgICAgIHJldHVybiB7IC4uLklOSVRJQUxfU1RBVEUuRGlzY292ZXJ5U3RyZWFtLCBjb25maWc6IHByZXZTdGF0ZS5jb25maWcgfTtcbiAgICBjYXNlIGF0LkRJU0NPVkVSWV9TVFJFQU1fRkVFRFNfVVBEQVRFOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4ucHJldlN0YXRlLFxuICAgICAgICBmZWVkczoge1xuICAgICAgICAgIC4uLnByZXZTdGF0ZS5mZWVkcyxcbiAgICAgICAgICBsb2FkZWQ6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgIGNhc2UgYXQuRElTQ09WRVJZX1NUUkVBTV9GRUVEX1VQREFURTpcbiAgICAgIGNvbnN0IG5ld0RhdGEgPSB7fTtcbiAgICAgIG5ld0RhdGFbYWN0aW9uLmRhdGEudXJsXSA9IGFjdGlvbi5kYXRhLmZlZWQ7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5wcmV2U3RhdGUsXG4gICAgICAgIGZlZWRzOiB7XG4gICAgICAgICAgLi4ucHJldlN0YXRlLmZlZWRzLFxuICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIC4uLnByZXZTdGF0ZS5mZWVkcy5kYXRhLFxuICAgICAgICAgICAgLi4ubmV3RGF0YSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICBjYXNlIGF0LkRJU0NPVkVSWV9TVFJFQU1fU1BPQ1NfQ0FQUzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnByZXZTdGF0ZSxcbiAgICAgICAgc3BvY3M6IHtcbiAgICAgICAgICAuLi5wcmV2U3RhdGUuc3BvY3MsXG4gICAgICAgICAgZnJlcXVlbmN5X2NhcHM6IFsuLi5wcmV2U3RhdGUuc3BvY3MuZnJlcXVlbmN5X2NhcHMsIC4uLmFjdGlvbi5kYXRhXSxcbiAgICAgICAgfSxcbiAgICAgIH07XG4gICAgY2FzZSBhdC5ESVNDT1ZFUllfU1RSRUFNX1NQT0NTX0VORFBPSU5UOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4ucHJldlN0YXRlLFxuICAgICAgICBzcG9jczoge1xuICAgICAgICAgIC4uLklOSVRJQUxfU1RBVEUuRGlzY292ZXJ5U3RyZWFtLnNwb2NzLFxuICAgICAgICAgIHNwb2NzX2VuZHBvaW50OlxuICAgICAgICAgICAgYWN0aW9uLmRhdGEgfHwgSU5JVElBTF9TVEFURS5EaXNjb3ZlcnlTdHJlYW0uc3BvY3Muc3BvY3NfZW5kcG9pbnQsXG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgIGNhc2UgYXQuRElTQ09WRVJZX1NUUkVBTV9TUE9DU19VUERBVEU6XG4gICAgICBpZiAoYWN0aW9uLmRhdGEpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAuLi5wcmV2U3RhdGUsXG4gICAgICAgICAgc3BvY3M6IHtcbiAgICAgICAgICAgIC4uLnByZXZTdGF0ZS5zcG9jcyxcbiAgICAgICAgICAgIGxhc3RVcGRhdGVkOiBhY3Rpb24uZGF0YS5sYXN0VXBkYXRlZCxcbiAgICAgICAgICAgIGRhdGE6IGFjdGlvbi5kYXRhLnNwb2NzLFxuICAgICAgICAgICAgbG9hZGVkOiB0cnVlLFxuICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICByZXR1cm4gcHJldlN0YXRlO1xuICAgIGNhc2UgYXQuRElTQ09WRVJZX1NUUkVBTV9TUE9DX0JMT0NLRUQ6XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5wcmV2U3RhdGUsXG4gICAgICAgIHNwb2NzOiB7XG4gICAgICAgICAgLi4ucHJldlN0YXRlLnNwb2NzLFxuICAgICAgICAgIGJsb2NrZWQ6IFsuLi5wcmV2U3RhdGUuc3BvY3MuYmxvY2tlZCwgYWN0aW9uLmRhdGEudXJsXSxcbiAgICAgICAgfSxcbiAgICAgIH07XG4gICAgY2FzZSBhdC5ESVNDT1ZFUllfU1RSRUFNX0xJTktfQkxPQ0tFRDpcbiAgICAgIHJldHVybiBpc05vdFJlYWR5KClcbiAgICAgICAgPyBwcmV2U3RhdGVcbiAgICAgICAgOiBuZXh0U3RhdGUoaXRlbXMgPT5cbiAgICAgICAgICAgIGl0ZW1zLmZpbHRlcihpdGVtID0+IGl0ZW0udXJsICE9PSBhY3Rpb24uZGF0YS51cmwpXG4gICAgICAgICAgKTtcblxuICAgIGNhc2UgYXQuUExBQ0VTX1NBVkVEX1RPX1BPQ0tFVDpcbiAgICAgIGNvbnN0IGFkZFBvY2tldEluZm8gPSBpdGVtID0+IHtcbiAgICAgICAgaWYgKGl0ZW0udXJsID09PSBhY3Rpb24uZGF0YS51cmwpIHtcbiAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgaXRlbSwge1xuICAgICAgICAgICAgb3Blbl91cmw6IGFjdGlvbi5kYXRhLm9wZW5fdXJsLFxuICAgICAgICAgICAgcG9ja2V0X2lkOiBhY3Rpb24uZGF0YS5wb2NrZXRfaWQsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgICB9O1xuICAgICAgcmV0dXJuIGlzTm90UmVhZHkoKVxuICAgICAgICA/IHByZXZTdGF0ZVxuICAgICAgICA6IG5leHRTdGF0ZShpdGVtcyA9PiBpdGVtcy5tYXAoYWRkUG9ja2V0SW5mbykpO1xuXG4gICAgY2FzZSBhdC5ERUxFVEVfRlJPTV9QT0NLRVQ6XG4gICAgY2FzZSBhdC5BUkNISVZFX0ZST01fUE9DS0VUOlxuICAgICAgcmV0dXJuIGlzTm90UmVhZHkoKVxuICAgICAgICA/IHByZXZTdGF0ZVxuICAgICAgICA6IG5leHRTdGF0ZShpdGVtcyA9PlxuICAgICAgICAgICAgaXRlbXMuZmlsdGVyKGl0ZW0gPT4gaXRlbS5wb2NrZXRfaWQgIT09IGFjdGlvbi5kYXRhLnBvY2tldF9pZClcbiAgICAgICAgICApO1xuXG4gICAgY2FzZSBhdC5QTEFDRVNfQk9PS01BUktfQURERUQ6XG4gICAgICBjb25zdCB1cGRhdGVCb29rbWFya0luZm8gPSBpdGVtID0+IHtcbiAgICAgICAgaWYgKGl0ZW0udXJsID09PSBhY3Rpb24uZGF0YS51cmwpIHtcbiAgICAgICAgICBjb25zdCB7IGJvb2ttYXJrR3VpZCwgYm9va21hcmtUaXRsZSwgZGF0ZUFkZGVkIH0gPSBhY3Rpb24uZGF0YTtcbiAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgaXRlbSwge1xuICAgICAgICAgICAgYm9va21hcmtHdWlkLFxuICAgICAgICAgICAgYm9va21hcmtUaXRsZSxcbiAgICAgICAgICAgIGJvb2ttYXJrRGF0ZUNyZWF0ZWQ6IGRhdGVBZGRlZCxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXRlbTtcbiAgICAgIH07XG4gICAgICByZXR1cm4gaXNOb3RSZWFkeSgpXG4gICAgICAgID8gcHJldlN0YXRlXG4gICAgICAgIDogbmV4dFN0YXRlKGl0ZW1zID0+IGl0ZW1zLm1hcCh1cGRhdGVCb29rbWFya0luZm8pKTtcblxuICAgIGNhc2UgYXQuUExBQ0VTX0JPT0tNQVJLX1JFTU9WRUQ6XG4gICAgICBjb25zdCByZW1vdmVCb29rbWFya0luZm8gPSBpdGVtID0+IHtcbiAgICAgICAgaWYgKGl0ZW0udXJsID09PSBhY3Rpb24uZGF0YS51cmwpIHtcbiAgICAgICAgICBjb25zdCBuZXdTaXRlID0gT2JqZWN0LmFzc2lnbih7fSwgaXRlbSk7XG4gICAgICAgICAgZGVsZXRlIG5ld1NpdGUuYm9va21hcmtHdWlkO1xuICAgICAgICAgIGRlbGV0ZSBuZXdTaXRlLmJvb2ttYXJrVGl0bGU7XG4gICAgICAgICAgZGVsZXRlIG5ld1NpdGUuYm9va21hcmtEYXRlQ3JlYXRlZDtcbiAgICAgICAgICByZXR1cm4gbmV3U2l0ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXRlbTtcbiAgICAgIH07XG4gICAgICByZXR1cm4gaXNOb3RSZWFkeSgpXG4gICAgICAgID8gcHJldlN0YXRlXG4gICAgICAgIDogbmV4dFN0YXRlKGl0ZW1zID0+IGl0ZW1zLm1hcChyZW1vdmVCb29rbWFya0luZm8pKTtcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gcHJldlN0YXRlO1xuICB9XG59XG5cbmZ1bmN0aW9uIFNlYXJjaChwcmV2U3RhdGUgPSBJTklUSUFMX1NUQVRFLlNlYXJjaCwgYWN0aW9uKSB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIGF0LkhJREVfU0VBUkNIOlxuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oeyAuLi5wcmV2U3RhdGUsIGhpZGU6IHRydWUgfSk7XG4gICAgY2FzZSBhdC5GQUtFX0ZPQ1VTX1NFQVJDSDpcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHsgLi4ucHJldlN0YXRlLCBmYWtlRm9jdXM6IHRydWUgfSk7XG4gICAgY2FzZSBhdC5TSE9XX1NFQVJDSDpcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHsgLi4ucHJldlN0YXRlLCBoaWRlOiBmYWxzZSwgZmFrZUZvY3VzOiBmYWxzZSB9KTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHByZXZTdGF0ZTtcbiAgfVxufVxuXG50aGlzLklOSVRJQUxfU1RBVEUgPSBJTklUSUFMX1NUQVRFO1xudGhpcy5UT1BfU0lURVNfREVGQVVMVF9ST1dTID0gVE9QX1NJVEVTX0RFRkFVTFRfUk9XUztcbnRoaXMuVE9QX1NJVEVTX01BWF9TSVRFU19QRVJfUk9XID0gVE9QX1NJVEVTX01BWF9TSVRFU19QRVJfUk9XO1xuXG50aGlzLnJlZHVjZXJzID0ge1xuICBUb3BTaXRlcyxcbiAgQXBwLFxuICBBU1JvdXRlcixcbiAgU25pcHBldHMsXG4gIFByZWZzLFxuICBEaWFsb2csXG4gIFNlY3Rpb25zLFxuICBQb2NrZXQsXG4gIERpc2NvdmVyeVN0cmVhbSxcbiAgU2VhcmNoLFxufTtcblxuY29uc3QgRVhQT1JURURfU1lNQk9MUyA9IFtcbiAgXCJyZWR1Y2Vyc1wiLFxuICBcIklOSVRJQUxfU1RBVEVcIixcbiAgXCJpbnNlcnRQaW5uZWRcIixcbiAgXCJUT1BfU0lURVNfREVGQVVMVF9ST1dTXCIsXG4gIFwiVE9QX1NJVEVTX01BWF9TSVRFU19QRVJfUk9XXCIsXG5dO1xuIiwiLyogVGhpcyBTb3VyY2UgQ29kZSBGb3JtIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBNb3ppbGxhIFB1YmxpY1xuICogTGljZW5zZSwgdi4gMi4wLiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBmaWxlLFxuICogWW91IGNhbiBvYnRhaW4gb25lIGF0IGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy4gKi9cblxuZXhwb3J0IGNvbnN0IGNhcmRDb250ZXh0VHlwZXMgPSB7XG4gIGhpc3Rvcnk6IHtcbiAgICBmbHVlbnRJRDogXCJuZXd0YWItbGFiZWwtdmlzaXRlZFwiLFxuICAgIGljb246IFwiaGlzdG9yeS1pdGVtXCIsXG4gIH0sXG4gIGJvb2ttYXJrOiB7XG4gICAgZmx1ZW50SUQ6IFwibmV3dGFiLWxhYmVsLWJvb2ttYXJrZWRcIixcbiAgICBpY29uOiBcImJvb2ttYXJrLWFkZGVkXCIsXG4gIH0sXG4gIHRyZW5kaW5nOiB7XG4gICAgZmx1ZW50SUQ6IFwibmV3dGFiLWxhYmVsLXJlY29tbWVuZGVkXCIsXG4gICAgaWNvbjogXCJ0cmVuZGluZ1wiLFxuICB9LFxuICBwb2NrZXQ6IHtcbiAgICBmbHVlbnRJRDogXCJuZXd0YWItbGFiZWwtc2F2ZWRcIixcbiAgICBpY29uOiBcInBvY2tldFwiLFxuICB9LFxuICBkb3dubG9hZDoge1xuICAgIGZsdWVudElEOiBcIm5ld3RhYi1sYWJlbC1kb3dubG9hZFwiLFxuICAgIGljb246IFwiZG93bmxvYWRcIixcbiAgfSxcbn07XG4iLCIvKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIGZpbGUsXG4gKiBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLiAqL1xuXG5pbXBvcnQgeyBhY3Rpb25DcmVhdG9ycyBhcyBhYywgYWN0aW9uVHlwZXMgYXMgYXQgfSBmcm9tIFwiY29tbW9uL0FjdGlvbnMuanNtXCI7XG5pbXBvcnQgeyBjYXJkQ29udGV4dFR5cGVzIH0gZnJvbSBcIi4vdHlwZXNcIjtcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcbmltcG9ydCB7IENvbnRleHRNZW51QnV0dG9uIH0gZnJvbSBcImNvbnRlbnQtc3JjL2NvbXBvbmVudHMvQ29udGV4dE1lbnUvQ29udGV4dE1lbnVCdXR0b25cIjtcbmltcG9ydCB7IExpbmtNZW51IH0gZnJvbSBcImNvbnRlbnQtc3JjL2NvbXBvbmVudHMvTGlua01lbnUvTGlua01lbnVcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IFNjcmVlbnNob3RVdGlscyB9IGZyb20gXCJjb250ZW50LXNyYy9saWIvc2NyZWVuc2hvdC11dGlsc1wiO1xuXG4vLyBLZWVwIHRyYWNrIG9mIHBlbmRpbmcgaW1hZ2UgbG9hZHMgdG8gb25seSByZXF1ZXN0IG9uY2VcbmNvbnN0IGdJbWFnZUxvYWRpbmcgPSBuZXcgTWFwKCk7XG5cbi8qKlxuICogQ2FyZCBjb21wb25lbnQuXG4gKiBDYXJkcyBhcmUgZm91bmQgd2l0aGluIGEgU2VjdGlvbiBjb21wb25lbnQgYW5kIGNvbnRhaW4gaW5mb3JtYXRpb24gYWJvdXQgYSBsaW5rIHN1Y2hcbiAqIGFzIHByZXZpZXcgaW1hZ2UsIHBhZ2UgdGl0bGUsIHBhZ2UgZGVzY3JpcHRpb24sIGFuZCBzb21lIGNvbnRleHQgYWJvdXQgaWYgdGhlIHBhZ2VcbiAqIHdhcyB2aXNpdGVkLCBib29rbWFya2VkLCB0cmVuZGluZyBldGMuLi5cbiAqIEVhY2ggU2VjdGlvbiBjYW4gbWFrZSBhbiB1bm9yZGVyZWQgbGlzdCBvZiBDYXJkcyB3aGljaCB3aWxsIGNyZWF0ZSBvbmUgaW5zdGFuZSBvZlxuICogdGhpcyBjbGFzcy4gRWFjaCBjYXJkIHdpbGwgdGhlbiBnZXQgYSBjb250ZXh0IG1lbnUgd2hpY2ggcmVmbGVjdHMgdGhlIGFjdGlvbnMgdGhhdFxuICogY2FuIGJlIGRvbmUgb24gdGhpcyBDYXJkLlxuICovXG5leHBvcnQgY2xhc3MgX0NhcmQgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGFjdGl2ZUNhcmQ6IG51bGwsXG4gICAgICBpbWFnZUxvYWRlZDogZmFsc2UsXG4gICAgICBjYXJkSW1hZ2U6IG51bGwsXG4gICAgfTtcbiAgICB0aGlzLm9uTWVudUJ1dHRvblVwZGF0ZSA9IHRoaXMub25NZW51QnV0dG9uVXBkYXRlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbkxpbmtDbGljayA9IHRoaXMub25MaW5rQ2xpY2suYmluZCh0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIZWxwZXIgdG8gY29uZGl0aW9uYWxseSBsb2FkIGFuIGltYWdlIGFuZCB1cGRhdGUgc3RhdGUgd2hlbiBpdCBsb2Fkcy5cbiAgICovXG4gIGFzeW5jIG1heWJlTG9hZEltYWdlKCkge1xuICAgIC8vIE5vIG5lZWQgdG8gbG9hZCBpZiBpdCdzIGFscmVhZHkgbG9hZGVkIG9yIG5vIGltYWdlXG4gICAgY29uc3QgeyBjYXJkSW1hZ2UgfSA9IHRoaXMuc3RhdGU7XG4gICAgaWYgKCFjYXJkSW1hZ2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBpbWFnZVVybCA9IGNhcmRJbWFnZS51cmw7XG4gICAgaWYgKCF0aGlzLnN0YXRlLmltYWdlTG9hZGVkKSB7XG4gICAgICAvLyBJbml0aWFsaXplIGEgcHJvbWlzZSB0byBzaGFyZSBhIGxvYWQgYWNyb3NzIG11bHRpcGxlIGNhcmQgdXBkYXRlc1xuICAgICAgaWYgKCFnSW1hZ2VMb2FkaW5nLmhhcyhpbWFnZVVybCkpIHtcbiAgICAgICAgY29uc3QgbG9hZGVyUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICBjb25zdCBsb2FkZXIgPSBuZXcgSW1hZ2UoKTtcbiAgICAgICAgICBsb2FkZXIuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgcmVzb2x2ZSk7XG4gICAgICAgICAgbG9hZGVyLmFkZEV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLCByZWplY3QpO1xuICAgICAgICAgIGxvYWRlci5zcmMgPSBpbWFnZVVybDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gU2F2ZSBhbmQgcmVtb3ZlIHRoZSBwcm9taXNlIG9ubHkgd2hpbGUgaXQncyBwZW5kaW5nXG4gICAgICAgIGdJbWFnZUxvYWRpbmcuc2V0KGltYWdlVXJsLCBsb2FkZXJQcm9taXNlKTtcbiAgICAgICAgbG9hZGVyUHJvbWlzZVxuICAgICAgICAgIC5jYXRjaChleCA9PiBleClcbiAgICAgICAgICAudGhlbigoKSA9PiBnSW1hZ2VMb2FkaW5nLmRlbGV0ZShpbWFnZVVybCkpXG4gICAgICAgICAgLmNhdGNoKCk7XG4gICAgICB9XG5cbiAgICAgIC8vIFdhaXQgZm9yIHRoZSBpbWFnZSB3aGV0aGVyIGp1c3Qgc3RhcnRlZCBsb2FkaW5nIG9yIHJldXNlZCBwcm9taXNlXG4gICAgICBhd2FpdCBnSW1hZ2VMb2FkaW5nLmdldChpbWFnZVVybCk7XG5cbiAgICAgIC8vIE9ubHkgdXBkYXRlIHN0YXRlIGlmIHdlJ3JlIHN0aWxsIHdhaXRpbmcgdG8gbG9hZCB0aGUgb3JpZ2luYWwgaW1hZ2VcbiAgICAgIGlmIChcbiAgICAgICAgU2NyZWVuc2hvdFV0aWxzLmlzUmVtb3RlSW1hZ2VMb2NhbChcbiAgICAgICAgICB0aGlzLnN0YXRlLmNhcmRJbWFnZSxcbiAgICAgICAgICB0aGlzLnByb3BzLmxpbmsuaW1hZ2VcbiAgICAgICAgKSAmJlxuICAgICAgICAhdGhpcy5zdGF0ZS5pbWFnZUxvYWRlZFxuICAgICAgKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBpbWFnZUxvYWRlZDogdHJ1ZSB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSGVscGVyIHRvIG9idGFpbiB0aGUgbmV4dCBzdGF0ZSBiYXNlZCBvbiBuZXh0UHJvcHMgYW5kIHByZXZTdGF0ZS5cbiAgICpcbiAgICogTk9URTogUmVuYW1lIHRoaXMgbWV0aG9kIHRvIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyB3aGVuIHdlIHVwZGF0ZSBSZWFjdFxuICAgKiAgICAgICB0byA+PSAxNi4zLiBXZSB3aWxsIG5lZWQgdG8gdXBkYXRlIHRlc3RzIGFzIHdlbGwuIFdlIGNhbm5vdCByZW5hbWUgdGhpc1xuICAgKiAgICAgICBtZXRob2QgdG8gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIG5vdyBiZWNhdXNlIHRoZXJlIGlzIGEgbWlzbWF0Y2ggaW5cbiAgICogICAgICAgdGhlIFJlYWN0IHZlcnNpb24gdGhhdCB3ZSBhcmUgdXNpbmcgZm9yIGJvdGggdGVzdGluZyBhbmQgcHJvZHVjdGlvbi5cbiAgICogICAgICAgKGkuZS4gcmVhY3QtdGVzdC1yZW5kZXIgPT4gXCIxNi4zLjJcIiwgcmVhY3QgPT4gXCIxNi4yLjBcIikuXG4gICAqXG4gICAqIFNlZSBodHRwczovL2dpdGh1Yi5jb20vYWlyYm5iL2VuenltZS9ibG9iL21hc3Rlci9wYWNrYWdlcy9lbnp5bWUtYWRhcHRlci1yZWFjdC0xNi9wYWNrYWdlLmpzb24jTDQzLlxuICAgKi9cbiAgc3RhdGljIGdldE5leHRTdGF0ZUZyb21Qcm9wcyhuZXh0UHJvcHMsIHByZXZTdGF0ZSkge1xuICAgIGNvbnN0IHsgaW1hZ2UgfSA9IG5leHRQcm9wcy5saW5rO1xuICAgIGNvbnN0IGltYWdlSW5TdGF0ZSA9IFNjcmVlbnNob3RVdGlscy5pc1JlbW90ZUltYWdlTG9jYWwoXG4gICAgICBwcmV2U3RhdGUuY2FyZEltYWdlLFxuICAgICAgaW1hZ2VcbiAgICApO1xuICAgIGxldCBuZXh0U3RhdGUgPSBudWxsO1xuXG4gICAgLy8gSW1hZ2UgaXMgdXBkYXRpbmcuXG4gICAgaWYgKCFpbWFnZUluU3RhdGUgJiYgbmV4dFByb3BzLmxpbmspIHtcbiAgICAgIG5leHRTdGF0ZSA9IHsgaW1hZ2VMb2FkZWQ6IGZhbHNlIH07XG4gICAgfVxuXG4gICAgaWYgKGltYWdlSW5TdGF0ZSkge1xuICAgICAgcmV0dXJuIG5leHRTdGF0ZTtcbiAgICB9XG5cbiAgICAvLyBTaW5jZSBpbWFnZSB3YXMgdXBkYXRlZCwgYXR0ZW1wdCB0byByZXZva2Ugb2xkIGltYWdlIGJsb2IgVVJMLCBpZiBpdCBleGlzdHMuXG4gICAgU2NyZWVuc2hvdFV0aWxzLm1heWJlUmV2b2tlQmxvYk9iamVjdFVSTChwcmV2U3RhdGUuY2FyZEltYWdlKTtcblxuICAgIG5leHRTdGF0ZSA9IG5leHRTdGF0ZSB8fCB7fTtcbiAgICBuZXh0U3RhdGUuY2FyZEltYWdlID0gU2NyZWVuc2hvdFV0aWxzLmNyZWF0ZUxvY2FsSW1hZ2VPYmplY3QoaW1hZ2UpO1xuXG4gICAgcmV0dXJuIG5leHRTdGF0ZTtcbiAgfVxuXG4gIG9uTWVudUJ1dHRvblVwZGF0ZShpc09wZW4pIHtcbiAgICBpZiAoaXNPcGVuKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgYWN0aXZlQ2FyZDogdGhpcy5wcm9wcy5pbmRleCB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGFjdGl2ZUNhcmQ6IG51bGwgfSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlcG9ydCB0byB0ZWxlbWV0cnkgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgaXRlbS5cbiAgICovXG4gIF9nZXRUZWxlbWV0cnlJbmZvKCkge1xuICAgIC8vIEZpbHRlciBvdXQgXCJoaXN0b3J5XCIgdHlwZSBmb3IgYmVpbmcgdGhlIGRlZmF1bHRcbiAgICBpZiAodGhpcy5wcm9wcy5saW5rLnR5cGUgIT09IFwiaGlzdG9yeVwiKSB7XG4gICAgICByZXR1cm4geyB2YWx1ZTogeyBjYXJkX3R5cGU6IHRoaXMucHJvcHMubGluay50eXBlIH0gfTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIG9uTGlua0NsaWNrKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBpZiAodGhpcy5wcm9wcy5saW5rLnR5cGUgPT09IFwiZG93bmxvYWRcIikge1xuICAgICAgdGhpcy5wcm9wcy5kaXNwYXRjaChcbiAgICAgICAgYWMuT25seVRvTWFpbih7XG4gICAgICAgICAgdHlwZTogYXQuU0hPV19ET1dOTE9BRF9GSUxFLFxuICAgICAgICAgIGRhdGE6IHRoaXMucHJvcHMubGluayxcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHsgYWx0S2V5LCBidXR0b24sIGN0cmxLZXksIG1ldGFLZXksIHNoaWZ0S2V5IH0gPSBldmVudDtcbiAgICAgIHRoaXMucHJvcHMuZGlzcGF0Y2goXG4gICAgICAgIGFjLk9ubHlUb01haW4oe1xuICAgICAgICAgIHR5cGU6IGF0Lk9QRU5fTElOSyxcbiAgICAgICAgICBkYXRhOiBPYmplY3QuYXNzaWduKHRoaXMucHJvcHMubGluaywge1xuICAgICAgICAgICAgZXZlbnQ6IHsgYWx0S2V5LCBidXR0b24sIGN0cmxLZXksIG1ldGFLZXksIHNoaWZ0S2V5IH0sXG4gICAgICAgICAgfSksXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAodGhpcy5wcm9wcy5pc1dlYkV4dGVuc2lvbikge1xuICAgICAgdGhpcy5wcm9wcy5kaXNwYXRjaChcbiAgICAgICAgYWMuV2ViRXh0RXZlbnQoYXQuV0VCRVhUX0NMSUNLLCB7XG4gICAgICAgICAgc291cmNlOiB0aGlzLnByb3BzLmV2ZW50U291cmNlLFxuICAgICAgICAgIHVybDogdGhpcy5wcm9wcy5saW5rLnVybCxcbiAgICAgICAgICBhY3Rpb25fcG9zaXRpb246IHRoaXMucHJvcHMuaW5kZXgsXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnByb3BzLmRpc3BhdGNoKFxuICAgICAgICBhYy5Vc2VyRXZlbnQoXG4gICAgICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgZXZlbnQ6IFwiQ0xJQ0tcIixcbiAgICAgICAgICAgICAgc291cmNlOiB0aGlzLnByb3BzLmV2ZW50U291cmNlLFxuICAgICAgICAgICAgICBhY3Rpb25fcG9zaXRpb246IHRoaXMucHJvcHMuaW5kZXgsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGhpcy5fZ2V0VGVsZW1ldHJ5SW5mbygpXG4gICAgICAgICAgKVxuICAgICAgICApXG4gICAgICApO1xuXG4gICAgICBpZiAodGhpcy5wcm9wcy5zaG91bGRTZW5kSW1wcmVzc2lvblN0YXRzKSB7XG4gICAgICAgIHRoaXMucHJvcHMuZGlzcGF0Y2goXG4gICAgICAgICAgYWMuSW1wcmVzc2lvblN0YXRzKHtcbiAgICAgICAgICAgIHNvdXJjZTogdGhpcy5wcm9wcy5ldmVudFNvdXJjZSxcbiAgICAgICAgICAgIGNsaWNrOiAwLFxuICAgICAgICAgICAgdGlsZXM6IFt7IGlkOiB0aGlzLnByb3BzLmxpbmsuZ3VpZCwgcG9zOiB0aGlzLnByb3BzLmluZGV4IH1dLFxuICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5tYXliZUxvYWRJbWFnZSgpO1xuICB9XG5cbiAgY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgIHRoaXMubWF5YmVMb2FkSW1hZ2UoKTtcbiAgfVxuXG4gIC8vIE5PVEU6IFJlbW92ZSB0aGlzIGZ1bmN0aW9uIHdoZW4gd2UgdXBkYXRlIFJlYWN0IHRvID49IDE2LjMgc2luY2UgUmVhY3Qgd2lsbFxuICAvLyAgICAgICBjYWxsIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyBhdXRvbWF0aWNhbGx5LiBXZSB3aWxsIGFsc28gbmVlZCB0b1xuICAvLyAgICAgICByZW5hbWUgZ2V0TmV4dFN0YXRlRnJvbVByb3BzIHRvIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcy5cbiAgY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIGNvbnN0IG5leHRTdGF0ZSA9IF9DYXJkLmdldE5leHRTdGF0ZUZyb21Qcm9wcyh0aGlzLnByb3BzLCB0aGlzLnN0YXRlKTtcbiAgICBpZiAobmV4dFN0YXRlKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKG5leHRTdGF0ZSk7XG4gICAgfVxuICB9XG5cbiAgLy8gTk9URTogUmVtb3ZlIHRoaXMgZnVuY3Rpb24gd2hlbiB3ZSB1cGRhdGUgUmVhY3QgdG8gPj0gMTYuMyBzaW5jZSBSZWFjdCB3aWxsXG4gIC8vICAgICAgIGNhbGwgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIGF1dG9tYXRpY2FsbHkuIFdlIHdpbGwgYWxzbyBuZWVkIHRvXG4gIC8vICAgICAgIHJlbmFtZSBnZXROZXh0U3RhdGVGcm9tUHJvcHMgdG8gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLlxuICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgIGNvbnN0IG5leHRTdGF0ZSA9IF9DYXJkLmdldE5leHRTdGF0ZUZyb21Qcm9wcyhuZXh0UHJvcHMsIHRoaXMuc3RhdGUpO1xuICAgIGlmIChuZXh0U3RhdGUpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUobmV4dFN0YXRlKTtcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBTY3JlZW5zaG90VXRpbHMubWF5YmVSZXZva2VCbG9iT2JqZWN0VVJMKHRoaXMuc3RhdGUuY2FyZEltYWdlKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7XG4gICAgICBpbmRleCxcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGxpbmssXG4gICAgICBkaXNwYXRjaCxcbiAgICAgIGNvbnRleHRNZW51T3B0aW9ucyxcbiAgICAgIGV2ZW50U291cmNlLFxuICAgICAgc2hvdWxkU2VuZEltcHJlc3Npb25TdGF0cyxcbiAgICB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IHByb3BzIH0gPSB0aGlzO1xuICAgIGNvbnN0IHRpdGxlID0gbGluay50aXRsZSB8fCBsaW5rLmhvc3RuYW1lO1xuICAgIGNvbnN0IGlzQ29udGV4dE1lbnVPcGVuID0gdGhpcy5zdGF0ZS5hY3RpdmVDYXJkID09PSBpbmRleDtcbiAgICAvLyBEaXNwbGF5IFwibm93XCIgYXMgXCJ0cmVuZGluZ1wiIHVudGlsIHdlIGhhdmUgbmV3IHN0cmluZ3MgIzM0MDJcbiAgICBjb25zdCB7IGljb24sIGZsdWVudElEIH0gPVxuICAgICAgY2FyZENvbnRleHRUeXBlc1tsaW5rLnR5cGUgPT09IFwibm93XCIgPyBcInRyZW5kaW5nXCIgOiBsaW5rLnR5cGVdIHx8IHt9O1xuICAgIGNvbnN0IGhhc0ltYWdlID0gdGhpcy5zdGF0ZS5jYXJkSW1hZ2UgfHwgbGluay5oYXNJbWFnZTtcbiAgICBjb25zdCBpbWFnZVN0eWxlID0ge1xuICAgICAgYmFja2dyb3VuZEltYWdlOiB0aGlzLnN0YXRlLmNhcmRJbWFnZVxuICAgICAgICA/IGB1cmwoJHt0aGlzLnN0YXRlLmNhcmRJbWFnZS51cmx9KWBcbiAgICAgICAgOiBcIm5vbmVcIixcbiAgICB9O1xuICAgIGNvbnN0IG91dGVyQ2xhc3NOYW1lID0gW1xuICAgICAgXCJjYXJkLW91dGVyXCIsXG4gICAgICBjbGFzc05hbWUsXG4gICAgICBpc0NvbnRleHRNZW51T3BlbiAmJiBcImFjdGl2ZVwiLFxuICAgICAgcHJvcHMucGxhY2Vob2xkZXIgJiYgXCJwbGFjZWhvbGRlclwiLFxuICAgIF1cbiAgICAgIC5maWx0ZXIodiA9PiB2KVxuICAgICAgLmpvaW4oXCIgXCIpO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxsaSBjbGFzc05hbWU9e291dGVyQ2xhc3NOYW1lfT5cbiAgICAgICAgPGFcbiAgICAgICAgICBocmVmPXtsaW5rLnR5cGUgPT09IFwicG9ja2V0XCIgPyBsaW5rLm9wZW5fdXJsIDogbGluay51cmx9XG4gICAgICAgICAgb25DbGljaz17IXByb3BzLnBsYWNlaG9sZGVyID8gdGhpcy5vbkxpbmtDbGljayA6IHVuZGVmaW5lZH1cbiAgICAgICAgPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2FyZFwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjYXJkLXByZXZpZXctaW1hZ2Utb3V0ZXJcIj5cbiAgICAgICAgICAgICAge2hhc0ltYWdlICYmIChcbiAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2BjYXJkLXByZXZpZXctaW1hZ2Uke1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLmltYWdlTG9hZGVkID8gXCIgbG9hZGVkXCIgOiBcIlwiXG4gICAgICAgICAgICAgICAgICB9YH1cbiAgICAgICAgICAgICAgICAgIHN0eWxlPXtpbWFnZVN0eWxlfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2FyZC1kZXRhaWxzXCI+XG4gICAgICAgICAgICAgIHtsaW5rLnR5cGUgPT09IFwiZG93bmxvYWRcIiAmJiAoXG4gICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiY2FyZC1ob3N0LW5hbWUgYWx0ZXJuYXRlXCJcbiAgICAgICAgICAgICAgICAgIGRhdGEtbDEwbi1pZD1cIm5ld3RhYi1tZW51LXNob3ctZmlsZVwiXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAge2xpbmsuaG9zdG5hbWUgJiYgKFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2FyZC1ob3N0LW5hbWVcIj5cbiAgICAgICAgICAgICAgICAgIHtsaW5rLmhvc3RuYW1lLnNsaWNlKDAsIDEwMCl9XG4gICAgICAgICAgICAgICAgICB7bGluay50eXBlID09PSBcImRvd25sb2FkXCIgJiYgYCAgXFx1MjAxNCAke2xpbmsuZGVzY3JpcHRpb259YH1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17W1xuICAgICAgICAgICAgICAgICAgXCJjYXJkLXRleHRcIixcbiAgICAgICAgICAgICAgICAgIGljb24gPyBcIlwiIDogXCJuby1jb250ZXh0XCIsXG4gICAgICAgICAgICAgICAgICBsaW5rLmRlc2NyaXB0aW9uID8gXCJcIiA6IFwibm8tZGVzY3JpcHRpb25cIixcbiAgICAgICAgICAgICAgICAgIGxpbmsuaG9zdG5hbWUgPyBcIlwiIDogXCJuby1ob3N0LW5hbWVcIixcbiAgICAgICAgICAgICAgICBdLmpvaW4oXCIgXCIpfVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPGg0IGNsYXNzTmFtZT1cImNhcmQtdGl0bGVcIiBkaXI9XCJhdXRvXCI+XG4gICAgICAgICAgICAgICAgICB7bGluay50aXRsZX1cbiAgICAgICAgICAgICAgICA8L2g0PlxuICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cImNhcmQtZGVzY3JpcHRpb25cIiBkaXI9XCJhdXRvXCI+XG4gICAgICAgICAgICAgICAgICB7bGluay5kZXNjcmlwdGlvbn1cbiAgICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNhcmQtY29udGV4dFwiPlxuICAgICAgICAgICAgICAgIHtpY29uICYmICFsaW5rLmNvbnRleHQgJiYgKFxuICAgICAgICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgICAgICAgYXJpYS1oYXNwb3B1cD1cInRydWVcIlxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2BjYXJkLWNvbnRleHQtaWNvbiBpY29uIGljb24tJHtpY29ufWB9XG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAge2xpbmsuaWNvbiAmJiBsaW5rLmNvbnRleHQgJiYgKFxuICAgICAgICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgICAgICAgYXJpYS1oYXNwb3B1cD1cInRydWVcIlxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJjYXJkLWNvbnRleHQtaWNvbiBpY29uXCJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3sgYmFja2dyb3VuZEltYWdlOiBgdXJsKCcke2xpbmsuaWNvbn0nKWAgfX1cbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICB7Zmx1ZW50SUQgJiYgIWxpbmsuY29udGV4dCAmJiAoXG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNhcmQtY29udGV4dC1sYWJlbFwiIGRhdGEtbDEwbi1pZD17Zmx1ZW50SUR9IC8+XG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICB7bGluay5jb250ZXh0ICYmIChcbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2FyZC1jb250ZXh0LWxhYmVsXCI+e2xpbmsuY29udGV4dH08L2Rpdj5cbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2E+XG4gICAgICAgIHshcHJvcHMucGxhY2Vob2xkZXIgJiYgKFxuICAgICAgICAgIDxDb250ZXh0TWVudUJ1dHRvblxuICAgICAgICAgICAgdG9vbHRpcD1cIm5ld3RhYi1tZW51LWNvbnRlbnQtdG9vbHRpcFwiXG4gICAgICAgICAgICB0b29sdGlwQXJncz17eyB0aXRsZSB9fVxuICAgICAgICAgICAgb25VcGRhdGU9e3RoaXMub25NZW51QnV0dG9uVXBkYXRlfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxMaW5rTWVudVxuICAgICAgICAgICAgICBkaXNwYXRjaD17ZGlzcGF0Y2h9XG4gICAgICAgICAgICAgIGluZGV4PXtpbmRleH1cbiAgICAgICAgICAgICAgc291cmNlPXtldmVudFNvdXJjZX1cbiAgICAgICAgICAgICAgb3B0aW9ucz17bGluay5jb250ZXh0TWVudU9wdGlvbnMgfHwgY29udGV4dE1lbnVPcHRpb25zfVxuICAgICAgICAgICAgICBzaXRlPXtsaW5rfVxuICAgICAgICAgICAgICBzaXRlSW5mbz17dGhpcy5fZ2V0VGVsZW1ldHJ5SW5mbygpfVxuICAgICAgICAgICAgICBzaG91bGRTZW5kSW1wcmVzc2lvblN0YXRzPXtzaG91bGRTZW5kSW1wcmVzc2lvblN0YXRzfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L0NvbnRleHRNZW51QnV0dG9uPlxuICAgICAgICApfVxuICAgICAgPC9saT5cbiAgICApO1xuICB9XG59XG5fQ2FyZC5kZWZhdWx0UHJvcHMgPSB7IGxpbms6IHt9IH07XG5leHBvcnQgY29uc3QgQ2FyZCA9IGNvbm5lY3Qoc3RhdGUgPT4gKHtcbiAgcGxhdGZvcm06IHN0YXRlLlByZWZzLnZhbHVlcy5wbGF0Zm9ybSxcbn0pKShfQ2FyZCk7XG5leHBvcnQgY29uc3QgUGxhY2Vob2xkZXJDYXJkID0gcHJvcHMgPT4gKFxuICA8Q2FyZCBwbGFjZWhvbGRlcj17dHJ1ZX0gY2xhc3NOYW1lPXtwcm9wcy5jbGFzc05hbWV9IC8+XG4pO1xuIiwiLyogVGhpcyBTb3VyY2UgQ29kZSBGb3JtIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBNb3ppbGxhIFB1YmxpY1xuICogTGljZW5zZSwgdi4gMi4wLiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBmaWxlLFxuICogWW91IGNhbiBvYnRhaW4gb25lIGF0IGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy4gKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgVHJhaWxoZWFkIH0gZnJvbSBcIi4uL1RyYWlsaGVhZC9UcmFpbGhlYWRcIjtcbmltcG9ydCB7IFJldHVyblRvQU1PIH0gZnJvbSBcIi4uL1JldHVyblRvQU1PL1JldHVyblRvQU1PXCI7XG5pbXBvcnQgeyBTdGFydHVwT3ZlcmxheSB9IGZyb20gXCIuLi9TdGFydHVwT3ZlcmxheS9TdGFydHVwT3ZlcmxheVwiO1xuaW1wb3J0IHsgTG9jYWxpemF0aW9uUHJvdmlkZXIgfSBmcm9tIFwiZmx1ZW50LXJlYWN0XCI7XG5pbXBvcnQgeyBnZW5lcmF0ZUJ1bmRsZXMgfSBmcm9tIFwiLi4vLi4vcmljaC10ZXh0LXN0cmluZ3NcIjtcblxuZXhwb3J0IGNsYXNzIEludGVycnVwdCBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgb25EaXNtaXNzLFxuICAgICAgb25OZXh0U2NlbmUsXG4gICAgICBtZXNzYWdlLFxuICAgICAgc2VuZFVzZXJBY3Rpb25UZWxlbWV0cnksXG4gICAgICBleGVjdXRlQWN0aW9uLFxuICAgICAgZGlzcGF0Y2gsXG4gICAgICBmeGFFbmRwb2ludCxcbiAgICAgIFVUTVRlcm0sXG4gICAgICBmbG93UGFyYW1zLFxuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgc3dpdGNoIChtZXNzYWdlLnRlbXBsYXRlKSB7XG4gICAgICBjYXNlIFwicmV0dXJuX3RvX2Ftb19vdmVybGF5XCI6XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgPExvY2FsaXphdGlvblByb3ZpZGVyXG4gICAgICAgICAgICBidW5kbGVzPXtnZW5lcmF0ZUJ1bmRsZXMoeyBhbW9faHRtbDogbWVzc2FnZS5jb250ZW50LnRleHQgfSl9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPFJldHVyblRvQU1PXG4gICAgICAgICAgICAgIHsuLi5tZXNzYWdlfVxuICAgICAgICAgICAgICBVSVN1cmZhY2U9XCJORVdUQUJfT1ZFUkxBWVwiXG4gICAgICAgICAgICAgIG9uQmxvY2s9e29uRGlzbWlzc31cbiAgICAgICAgICAgICAgb25BY3Rpb249e2V4ZWN1dGVBY3Rpb259XG4gICAgICAgICAgICAgIHNlbmRVc2VyQWN0aW9uVGVsZW1ldHJ5PXtzZW5kVXNlckFjdGlvblRlbGVtZXRyeX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9Mb2NhbGl6YXRpb25Qcm92aWRlcj5cbiAgICAgICAgKTtcbiAgICAgIGNhc2UgXCJmeGFfb3ZlcmxheVwiOlxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIDxTdGFydHVwT3ZlcmxheVxuICAgICAgICAgICAgb25CbG9jaz17b25EaXNtaXNzfVxuICAgICAgICAgICAgZGlzcGF0Y2g9e2Rpc3BhdGNofVxuICAgICAgICAgICAgZnhhX2VuZHBvaW50PXtmeGFFbmRwb2ludH1cbiAgICAgICAgICAvPlxuICAgICAgICApO1xuICAgICAgY2FzZSBcInRyYWlsaGVhZFwiOlxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIDxUcmFpbGhlYWRcbiAgICAgICAgICAgIGRvY3VtZW50PXt0aGlzLnByb3BzLmRvY3VtZW50fVxuICAgICAgICAgICAgbWVzc2FnZT17bWVzc2FnZX1cbiAgICAgICAgICAgIG9uTmV4dFNjZW5lPXtvbk5leHRTY2VuZX1cbiAgICAgICAgICAgIG9uQWN0aW9uPXtleGVjdXRlQWN0aW9ufVxuICAgICAgICAgICAgc2VuZFVzZXJBY3Rpb25UZWxlbWV0cnk9e3NlbmRVc2VyQWN0aW9uVGVsZW1ldHJ5fVxuICAgICAgICAgICAgZGlzcGF0Y2g9e2Rpc3BhdGNofVxuICAgICAgICAgICAgZnhhRW5kcG9pbnQ9e2Z4YUVuZHBvaW50fVxuICAgICAgICAgICAgVVRNVGVybT17VVRNVGVybX1cbiAgICAgICAgICAgIGZsb3dQYXJhbXM9e2Zsb3dQYXJhbXN9XG4gICAgICAgICAgLz5cbiAgICAgICAgKTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgJHttZXNzYWdlLnRlbXBsYXRlfSBpcyBub3QgYSB2YWxpZCBGaXJzdFJ1biBtZXNzYWdlYCk7XG4gICAgfVxuICB9XG59XG4iLCIvKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIGZpbGUsXG4gKiBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLiAqL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBJbnRlcnJ1cHQgfSBmcm9tIFwiLi9JbnRlcnJ1cHRcIjtcbmltcG9ydCB7IFRyaXBsZXRzIH0gZnJvbSBcIi4vVHJpcGxldHNcIjtcbmltcG9ydCB7IGFjdGlvbkNyZWF0b3JzIGFzIGFjLCBhY3Rpb25UeXBlcyBhcyBhdCB9IGZyb20gXCJjb21tb24vQWN0aW9ucy5qc21cIjtcbmltcG9ydCB7IGFkZFV0bVBhcmFtcyB9IGZyb20gXCIuL2FkZFV0bVBhcmFtc1wiO1xuXG5leHBvcnQgY29uc3QgRkxVRU5UX0ZJTEVTID0gW1xuICBcImJyYW5kaW5nL2JyYW5kLmZ0bFwiLFxuICBcImJyb3dzZXIvYnJhbmRpbmcvYnJhbmRpbmdzLmZ0bFwiLFxuICBcImJyb3dzZXIvYnJhbmRpbmcvc3luYy1icmFuZC5mdGxcIixcbiAgXCJicm93c2VyL25ld3RhYi9vbmJvYXJkaW5nLmZ0bFwiLFxuXTtcblxuZXhwb3J0IGNvbnN0IGhlbHBlcnMgPSB7XG4gIHNlbGVjdEludGVycnVwdEFuZFRyaXBsZXRzKG1lc3NhZ2UgPSB7fSkge1xuICAgIGNvbnN0IGhhc0ludGVycnVwdCA9IEJvb2xlYW4obWVzc2FnZS5jb250ZW50KTtcbiAgICBjb25zdCBoYXNUcmlwbGV0cyA9IEJvb2xlYW4obWVzc2FnZS5idW5kbGUgJiYgbWVzc2FnZS5idW5kbGUubGVuZ3RoKTtcbiAgICBjb25zdCBVVE1UZXJtID0gbWVzc2FnZS51dG1fdGVybSB8fCBcIlwiO1xuICAgIHJldHVybiB7XG4gICAgICBoYXNUcmlwbGV0cyxcbiAgICAgIGhhc0ludGVycnVwdCxcbiAgICAgIGludGVycnVwdDogaGFzSW50ZXJydXB0ID8gbWVzc2FnZSA6IG51bGwsXG4gICAgICB0cmlwbGV0czogaGFzVHJpcGxldHMgPyBtZXNzYWdlLmJ1bmRsZSA6IG51bGwsXG4gICAgICBVVE1UZXJtLFxuICAgIH07XG4gIH0sXG5cbiAgYWRkRmx1ZW50KGRvY3VtZW50KSB7XG4gICAgRkxVRU5UX0ZJTEVTLmZvckVhY2goZmlsZSA9PiB7XG4gICAgICBjb25zdCBsaW5rID0gZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKSk7XG4gICAgICBsaW5rLmhyZWYgPSBmaWxlO1xuICAgICAgbGluay5yZWwgPSBcImxvY2FsaXphdGlvblwiO1xuICAgIH0pO1xuICB9LFxuXG4gIGFzeW5jIGZldGNoRmxvd1BhcmFtcyh7IGZ4YUVuZHBvaW50LCBVVE1UZXJtLCBkaXNwYXRjaCwgc2V0Rmxvd1BhcmFtcyB9KSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHVybCA9IG5ldyBVUkwoXG4gICAgICAgIGAke2Z4YUVuZHBvaW50fS9tZXRyaWNzLWZsb3c/ZW50cnlwb2ludD1hY3Rpdml0eS1zdHJlYW0tZmlyc3RydW4mZm9ybV90eXBlPWVtYWlsYFxuICAgICAgKTtcbiAgICAgIGFkZFV0bVBhcmFtcyh1cmwsIFVUTVRlcm0pO1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwsIHsgY3JlZGVudGlhbHM6IFwib21pdFwiIH0pO1xuICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgIGNvbnN0IHsgZGV2aWNlSWQsIGZsb3dJZCwgZmxvd0JlZ2luVGltZSB9ID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgICBzZXRGbG93UGFyYW1zKHsgZGV2aWNlSWQsIGZsb3dJZCwgZmxvd0JlZ2luVGltZSB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRpc3BhdGNoKFxuICAgICAgICAgIGFjLk9ubHlUb01haW4oe1xuICAgICAgICAgICAgdHlwZTogYXQuVEVMRU1FVFJZX1VOREVTSVJFRF9FVkVOVCxcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgZXZlbnQ6IFwiRlhBX01FVFJJQ1NfRkVUQ0hfRVJST1JcIixcbiAgICAgICAgICAgICAgdmFsdWU6IHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgZGlzcGF0Y2goXG4gICAgICAgIGFjLk9ubHlUb01haW4oe1xuICAgICAgICAgIHR5cGU6IGF0LlRFTEVNRVRSWV9VTkRFU0lSRURfRVZFTlQsXG4gICAgICAgICAgZGF0YTogeyBldmVudDogXCJGWEFfTUVUUklDU19FUlJPUlwiIH0sXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH1cbiAgfSxcbn07XG5cbmV4cG9ydCBjbGFzcyBGaXJzdFJ1biBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcblxuICAgIHRoaXMuZGlkTG9hZEZsb3dQYXJhbXMgPSBmYWxzZTtcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBwcmV2TWVzc2FnZTogdW5kZWZpbmVkLFxuXG4gICAgICBoYXNJbnRlcnJ1cHQ6IGZhbHNlLFxuICAgICAgaGFzVHJpcGxldHM6IGZhbHNlLFxuXG4gICAgICBpbnRlcnJ1cHQ6IHVuZGVmaW5lZCxcbiAgICAgIHRyaXBsZXRzOiB1bmRlZmluZWQsXG5cbiAgICAgIGlzSW50ZXJydXB0VmlzaWJsZTogZmFsc2UsXG4gICAgICBpc1RyaXBsZXRzQ29udGFpbmVyVmlzaWJsZTogZmFsc2UsXG4gICAgICBpc1RyaXBsZXRzQ29udGVudFZpc2libGU6IGZhbHNlLFxuXG4gICAgICBVVE1UZXJtOiBcIlwiLFxuXG4gICAgICBmbG93UGFyYW1zOiB1bmRlZmluZWQsXG4gICAgfTtcblxuICAgIHRoaXMuY2xvc2VJbnRlcnJ1cHQgPSB0aGlzLmNsb3NlSW50ZXJydXB0LmJpbmQodGhpcyk7XG4gICAgdGhpcy5jbG9zZVRyaXBsZXRzID0gdGhpcy5jbG9zZVRyaXBsZXRzLmJpbmQodGhpcyk7XG5cbiAgICBoZWxwZXJzLmFkZEZsdWVudCh0aGlzLnByb3BzLmRvY3VtZW50KTtcbiAgfVxuXG4gIHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMocHJvcHMsIHN0YXRlKSB7XG4gICAgY29uc3QgeyBtZXNzYWdlIH0gPSBwcm9wcztcbiAgICBpZiAobWVzc2FnZSAmJiBtZXNzYWdlLmlkICE9PSBzdGF0ZS5wcmV2TWVzc2FnZUlkKSB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIGhhc1RyaXBsZXRzLFxuICAgICAgICBoYXNJbnRlcnJ1cHQsXG4gICAgICAgIGludGVycnVwdCxcbiAgICAgICAgdHJpcGxldHMsXG4gICAgICAgIFVUTVRlcm0sXG4gICAgICB9ID0gaGVscGVycy5zZWxlY3RJbnRlcnJ1cHRBbmRUcmlwbGV0cyhtZXNzYWdlKTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcHJldk1lc3NhZ2VJZDogbWVzc2FnZS5pZCxcblxuICAgICAgICBoYXNJbnRlcnJ1cHQsXG4gICAgICAgIGhhc1RyaXBsZXRzLFxuXG4gICAgICAgIGludGVycnVwdCxcbiAgICAgICAgdHJpcGxldHMsXG5cbiAgICAgICAgaXNJbnRlcnJ1cHRWaXNpYmxlOiBoYXNJbnRlcnJ1cHQsXG4gICAgICAgIGlzVHJpcGxldHNDb250YWluZXJWaXNpYmxlOiBoYXNUcmlwbGV0cyxcbiAgICAgICAgaXNUcmlwbGV0c0NvbnRlbnRWaXNpYmxlOiAhKGhhc0ludGVycnVwdCB8fCAhaGFzVHJpcGxldHMpLFxuXG4gICAgICAgIFVUTVRlcm0sXG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGZldGNoRmxvd1BhcmFtcygpIHtcbiAgICBjb25zdCB7IGZ4YUVuZHBvaW50LCBkaXNwYXRjaCB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IFVUTVRlcm0gfSA9IHRoaXMuc3RhdGU7XG4gICAgaWYgKGZ4YUVuZHBvaW50ICYmIFVUTVRlcm0gJiYgIXRoaXMuZGlkTG9hZEZsb3dQYXJhbXMpIHtcbiAgICAgIHRoaXMuZGlkTG9hZEZsb3dQYXJhbXMgPSB0cnVlO1xuICAgICAgaGVscGVycy5mZXRjaEZsb3dQYXJhbXMoe1xuICAgICAgICBmeGFFbmRwb2ludCxcbiAgICAgICAgVVRNVGVybSxcbiAgICAgICAgZGlzcGF0Y2gsXG4gICAgICAgIHNldEZsb3dQYXJhbXM6IGZsb3dQYXJhbXMgPT4gdGhpcy5zZXRTdGF0ZSh7IGZsb3dQYXJhbXMgfSksXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICByZW1vdmVIaWRlTWFpbigpIHtcbiAgICBpZiAoIXRoaXMuc3RhdGUuaGFzSW50ZXJydXB0KSB7XG4gICAgICAvLyBXZSBuZWVkIHRvIHJlbW92ZSBoaWRlLW1haW4gc2luY2Ugd2Ugc2hvdWxkIHNob3cgaXQgdW5kZXJuZWF0aCBldmVyeXRoaW5nIHRoYXQgaGFzIHJlbmRlcmVkXG4gICAgICB0aGlzLnByb3BzLmRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZShcImhpZGUtbWFpblwiLCBcIndlbGNvbWVcIik7XG4gICAgfVxuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5mZXRjaEZsb3dQYXJhbXMoKTtcbiAgICB0aGlzLnJlbW92ZUhpZGVNYWluKCk7XG4gIH1cblxuICBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgLy8gSW4gY2FzZSB3ZSBkaWRuJ3QgaGF2ZSBGWEEgaW5mbyBpbW1lZGlhdGVseSwgdHJ5IGFnYWluIHdoZW4gd2UgcmVjZWl2ZSBpdC5cbiAgICB0aGlzLmZldGNoRmxvd1BhcmFtcygpO1xuICAgIHRoaXMucmVtb3ZlSGlkZU1haW4oKTtcbiAgfVxuXG4gIGNsb3NlSW50ZXJydXB0KCkge1xuICAgIHRoaXMuc2V0U3RhdGUocHJldlN0YXRlID0+ICh7XG4gICAgICBpc0ludGVycnVwdFZpc2libGU6IGZhbHNlLFxuICAgICAgaXNUcmlwbGV0c0NvbnRhaW5lclZpc2libGU6IHByZXZTdGF0ZS5oYXNUcmlwbGV0cyxcbiAgICAgIGlzVHJpcGxldHNDb250ZW50VmlzaWJsZTogcHJldlN0YXRlLmhhc1RyaXBsZXRzLFxuICAgIH0pKTtcbiAgfVxuXG4gIGNsb3NlVHJpcGxldHMoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGlzVHJpcGxldHNDb250YWluZXJWaXNpYmxlOiBmYWxzZSB9KTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IHByb3BzIH0gPSB0aGlzO1xuICAgIGNvbnN0IHtcbiAgICAgIHNlbmRVc2VyQWN0aW9uVGVsZW1ldHJ5LFxuICAgICAgZnhhRW5kcG9pbnQsXG4gICAgICBkaXNwYXRjaCxcbiAgICAgIGV4ZWN1dGVBY3Rpb24sXG4gICAgfSA9IHByb3BzO1xuXG4gICAgY29uc3Qge1xuICAgICAgaW50ZXJydXB0LFxuICAgICAgdHJpcGxldHMsXG4gICAgICBpc0ludGVycnVwdFZpc2libGUsXG4gICAgICBpc1RyaXBsZXRzQ29udGFpbmVyVmlzaWJsZSxcbiAgICAgIGlzVHJpcGxldHNDb250ZW50VmlzaWJsZSxcbiAgICAgIGhhc1RyaXBsZXRzLFxuICAgICAgVVRNVGVybSxcbiAgICAgIGZsb3dQYXJhbXMsXG4gICAgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPD5cbiAgICAgICAge2lzSW50ZXJydXB0VmlzaWJsZSA/IChcbiAgICAgICAgICA8SW50ZXJydXB0XG4gICAgICAgICAgICBkb2N1bWVudD17cHJvcHMuZG9jdW1lbnR9XG4gICAgICAgICAgICBtZXNzYWdlPXtpbnRlcnJ1cHR9XG4gICAgICAgICAgICBvbk5leHRTY2VuZT17dGhpcy5jbG9zZUludGVycnVwdH1cbiAgICAgICAgICAgIFVUTVRlcm09e1VUTVRlcm19XG4gICAgICAgICAgICBzZW5kVXNlckFjdGlvblRlbGVtZXRyeT17c2VuZFVzZXJBY3Rpb25UZWxlbWV0cnl9XG4gICAgICAgICAgICBkaXNwYXRjaD17ZGlzcGF0Y2h9XG4gICAgICAgICAgICBmbG93UGFyYW1zPXtmbG93UGFyYW1zfVxuICAgICAgICAgICAgb25EaXNtaXNzPXt0aGlzLmNsb3NlSW50ZXJydXB0fVxuICAgICAgICAgICAgZnhhRW5kcG9pbnQ9e2Z4YUVuZHBvaW50fVxuICAgICAgICAgIC8+XG4gICAgICAgICkgOiBudWxsfVxuICAgICAgICB7aGFzVHJpcGxldHMgPyAoXG4gICAgICAgICAgPFRyaXBsZXRzXG4gICAgICAgICAgICBkb2N1bWVudD17cHJvcHMuZG9jdW1lbnR9XG4gICAgICAgICAgICBjYXJkcz17dHJpcGxldHN9XG4gICAgICAgICAgICBzaG93Q2FyZFBhbmVsPXtpc1RyaXBsZXRzQ29udGFpbmVyVmlzaWJsZX1cbiAgICAgICAgICAgIHNob3dDb250ZW50PXtpc1RyaXBsZXRzQ29udGVudFZpc2libGV9XG4gICAgICAgICAgICBoaWRlQ29udGFpbmVyPXt0aGlzLmNsb3NlVHJpcGxldHN9XG4gICAgICAgICAgICBzZW5kVXNlckFjdGlvblRlbGVtZXRyeT17c2VuZFVzZXJBY3Rpb25UZWxlbWV0cnl9XG4gICAgICAgICAgICBVVE1UZXJtPXtgJHtVVE1UZXJtfS1jYXJkYH1cbiAgICAgICAgICAgIGZsb3dQYXJhbXM9e2Zsb3dQYXJhbXN9XG4gICAgICAgICAgICBvbkFjdGlvbj17ZXhlY3V0ZUFjdGlvbn1cbiAgICAgICAgICAvPlxuICAgICAgICApIDogbnVsbH1cbiAgICAgIDwvPlxuICAgICk7XG4gIH1cbn1cbiIsIi8qIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXMgZmlsZSxcbiAqIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uICovXG5cbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuZXhwb3J0IGNsYXNzIFRvcFNpdGVGb3JtSW5wdXQgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHsgdmFsaWRhdGlvbkVycm9yOiB0aGlzLnByb3BzLnZhbGlkYXRpb25FcnJvciB9O1xuICAgIHRoaXMub25DaGFuZ2UgPSB0aGlzLm9uQ2hhbmdlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbk1vdW50ID0gdGhpcy5vbk1vdW50LmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbkNsZWFySWNvblByZXNzID0gdGhpcy5vbkNsZWFySWNvblByZXNzLmJpbmQodGhpcyk7XG4gIH1cblxuICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgIGlmIChuZXh0UHJvcHMuc2hvdWxkRm9jdXMgJiYgIXRoaXMucHJvcHMuc2hvdWxkRm9jdXMpIHtcbiAgICAgIHRoaXMuaW5wdXQuZm9jdXMoKTtcbiAgICB9XG4gICAgaWYgKG5leHRQcm9wcy52YWxpZGF0aW9uRXJyb3IgJiYgIXRoaXMucHJvcHMudmFsaWRhdGlvbkVycm9yKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgdmFsaWRhdGlvbkVycm9yOiB0cnVlIH0pO1xuICAgIH1cbiAgICAvLyBJZiB0aGUgY29tcG9uZW50IGlzIGluIGFuIGVycm9yIHN0YXRlIGJ1dCB0aGUgdmFsdWUgd2FzIGNsZWFyZWQgYnkgdGhlIHBhcmVudFxuICAgIGlmICh0aGlzLnN0YXRlLnZhbGlkYXRpb25FcnJvciAmJiAhbmV4dFByb3BzLnZhbHVlKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgdmFsaWRhdGlvbkVycm9yOiBmYWxzZSB9KTtcbiAgICB9XG4gIH1cblxuICBvbkNsZWFySWNvblByZXNzKGV2ZW50KSB7XG4gICAgLy8gSWYgdGhlcmUgaXMgaW5wdXQgaW4gdGhlIFVSTCBvciBjdXN0b20gaW1hZ2UgVVJMIGZpZWxkcyxcbiAgICAvLyBhbmQgd2UgaGl0ICdlbnRlcicgd2hpbGUgdGFiYmVkIG92ZXIgdGhlIGNsZWFyIGljb24sXG4gICAgLy8gd2Ugc2hvdWxkIGV4ZWN1dGUgdGhlIGZ1bmN0aW9uIHRvIGNsZWFyIHRoZSBmaWVsZC5cbiAgICBpZiAoZXZlbnQua2V5ID09PSBcIkVudGVyXCIpIHtcbiAgICAgIHRoaXMucHJvcHMub25DbGVhcigpO1xuICAgIH1cbiAgfVxuXG4gIG9uQ2hhbmdlKGV2KSB7XG4gICAgaWYgKHRoaXMuc3RhdGUudmFsaWRhdGlvbkVycm9yKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgdmFsaWRhdGlvbkVycm9yOiBmYWxzZSB9KTtcbiAgICB9XG4gICAgdGhpcy5wcm9wcy5vbkNoYW5nZShldik7XG4gIH1cblxuICBvbk1vdW50KGlucHV0KSB7XG4gICAgdGhpcy5pbnB1dCA9IGlucHV0O1xuICB9XG5cbiAgcmVuZGVyTG9hZGluZ09yQ2xvc2VCdXR0b24oKSB7XG4gICAgY29uc3Qgc2hvd0NsZWFyQnV0dG9uID0gdGhpcy5wcm9wcy52YWx1ZSAmJiB0aGlzLnByb3BzLm9uQ2xlYXI7XG5cbiAgICBpZiAodGhpcy5wcm9wcy5sb2FkaW5nKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImxvYWRpbmctY29udGFpbmVyXCI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJsb2FkaW5nLWFuaW1hdGlvblwiIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKHNob3dDbGVhckJ1dHRvbikge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPGJ1dHRvblxuICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgIGNsYXNzTmFtZT1cImljb24gaWNvbi1jbGVhci1pbnB1dCBpY29uLWJ1dHRvbi1zdHlsZVwiXG4gICAgICAgICAgb25DbGljaz17dGhpcy5wcm9wcy5vbkNsZWFyfVxuICAgICAgICAgIG9uS2V5UHJlc3M9e3RoaXMub25DbGVhckljb25QcmVzc31cbiAgICAgICAgLz5cbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgdHlwZVVybCB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IHZhbGlkYXRpb25FcnJvciB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIHJldHVybiAoXG4gICAgICA8bGFiZWw+XG4gICAgICAgIDxzcGFuIGRhdGEtbDEwbi1pZD17dGhpcy5wcm9wcy50aXRsZUlkfSAvPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY2xhc3NOYW1lPXtgZmllbGQgJHt0eXBlVXJsID8gXCJ1cmxcIiA6IFwiXCJ9JHtcbiAgICAgICAgICAgIHZhbGlkYXRpb25FcnJvciA/IFwiIGludmFsaWRcIiA6IFwiXCJcbiAgICAgICAgICB9YH1cbiAgICAgICAgPlxuICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgdmFsdWU9e3RoaXMucHJvcHMudmFsdWV9XG4gICAgICAgICAgICByZWY9e3RoaXMub25Nb3VudH1cbiAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLm9uQ2hhbmdlfVxuICAgICAgICAgICAgZGF0YS1sMTBuLWlkPXt0aGlzLnByb3BzLnBsYWNlaG9sZGVySWR9XG4gICAgICAgICAgICAvLyBTZXQgZm9jdXMgb24gZXJyb3IgaWYgdGhlIHVybCBmaWVsZCBpcyB2YWxpZCBvciB3aGVuIHRoZSBpbnB1dCBpcyBmaXJzdCByZW5kZXJlZCBhbmQgaXMgZW1wdHlcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBqc3gtYTExeS9uby1hdXRvZm9jdXNcbiAgICAgICAgICAgIGF1dG9Gb2N1cz17dGhpcy5wcm9wcy5zaG91bGRGb2N1c31cbiAgICAgICAgICAgIGRpc2FibGVkPXt0aGlzLnByb3BzLmxvYWRpbmd9XG4gICAgICAgICAgLz5cbiAgICAgICAgICB7dGhpcy5yZW5kZXJMb2FkaW5nT3JDbG9zZUJ1dHRvbigpfVxuICAgICAgICAgIHt2YWxpZGF0aW9uRXJyb3IgJiYgKFxuICAgICAgICAgICAgPGFzaWRlXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cImVycm9yLXRvb2x0aXBcIlxuICAgICAgICAgICAgICBkYXRhLWwxMG4taWQ9e3RoaXMucHJvcHMuZXJyb3JNZXNzYWdlSWR9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9sYWJlbD5cbiAgICApO1xuICB9XG59XG5cblRvcFNpdGVGb3JtSW5wdXQuZGVmYXVsdFByb3BzID0ge1xuICBzaG93Q2xlYXJCdXR0b246IGZhbHNlLFxuICB2YWx1ZTogXCJcIixcbiAgdmFsaWRhdGlvbkVycm9yOiBmYWxzZSxcbn07XG4iLCIvKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIGZpbGUsXG4gKiBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLiAqL1xuXG5pbXBvcnQgeyBhY3Rpb25DcmVhdG9ycyBhcyBhYywgYWN0aW9uVHlwZXMgYXMgYXQgfSBmcm9tIFwiY29tbW9uL0FjdGlvbnMuanNtXCI7XG5pbXBvcnQgeyBBMTF5TGlua0J1dHRvbiB9IGZyb20gXCJjb250ZW50LXNyYy9jb21wb25lbnRzL0ExMXlMaW5rQnV0dG9uL0ExMXlMaW5rQnV0dG9uXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBUT1BfU0lURVNfU09VUkNFIH0gZnJvbSBcIi4vVG9wU2l0ZXNDb25zdGFudHNcIjtcbmltcG9ydCB7IFRvcFNpdGVGb3JtSW5wdXQgfSBmcm9tIFwiLi9Ub3BTaXRlRm9ybUlucHV0XCI7XG5pbXBvcnQgeyBUb3BTaXRlTGluayB9IGZyb20gXCIuL1RvcFNpdGVcIjtcblxuZXhwb3J0IGNsYXNzIFRvcFNpdGVGb3JtIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIGNvbnN0IHsgc2l0ZSB9ID0gcHJvcHM7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGxhYmVsOiBzaXRlID8gc2l0ZS5sYWJlbCB8fCBzaXRlLmhvc3RuYW1lIDogXCJcIixcbiAgICAgIHVybDogc2l0ZSA/IHNpdGUudXJsIDogXCJcIixcbiAgICAgIHZhbGlkYXRpb25FcnJvcjogZmFsc2UsXG4gICAgICBjdXN0b21TY3JlZW5zaG90VXJsOiBzaXRlID8gc2l0ZS5jdXN0b21TY3JlZW5zaG90VVJMIDogXCJcIixcbiAgICAgIHNob3dDdXN0b21TY3JlZW5zaG90Rm9ybTogc2l0ZSA/IHNpdGUuY3VzdG9tU2NyZWVuc2hvdFVSTCA6IGZhbHNlLFxuICAgIH07XG4gICAgdGhpcy5vbkNsZWFyU2NyZWVuc2hvdElucHV0ID0gdGhpcy5vbkNsZWFyU2NyZWVuc2hvdElucHV0LmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbkxhYmVsQ2hhbmdlID0gdGhpcy5vbkxhYmVsQ2hhbmdlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vblVybENoYW5nZSA9IHRoaXMub25VcmxDaGFuZ2UuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uQ2FuY2VsQnV0dG9uQ2xpY2sgPSB0aGlzLm9uQ2FuY2VsQnV0dG9uQ2xpY2suYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uQ2xlYXJVcmxDbGljayA9IHRoaXMub25DbGVhclVybENsaWNrLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbkRvbmVCdXR0b25DbGljayA9IHRoaXMub25Eb25lQnV0dG9uQ2xpY2suYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uQ3VzdG9tU2NyZWVuc2hvdFVybENoYW5nZSA9IHRoaXMub25DdXN0b21TY3JlZW5zaG90VXJsQ2hhbmdlLmJpbmQoXG4gICAgICB0aGlzXG4gICAgKTtcbiAgICB0aGlzLm9uUHJldmlld0J1dHRvbkNsaWNrID0gdGhpcy5vblByZXZpZXdCdXR0b25DbGljay5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25FbmFibGVTY3JlZW5zaG90VXJsRm9ybSA9IHRoaXMub25FbmFibGVTY3JlZW5zaG90VXJsRm9ybS5iaW5kKHRoaXMpO1xuICAgIHRoaXMudmFsaWRhdGVVcmwgPSB0aGlzLnZhbGlkYXRlVXJsLmJpbmQodGhpcyk7XG4gIH1cblxuICBvbkxhYmVsQ2hhbmdlKGV2ZW50KSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGxhYmVsOiBldmVudC50YXJnZXQudmFsdWUgfSk7XG4gIH1cblxuICBvblVybENoYW5nZShldmVudCkge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgdXJsOiBldmVudC50YXJnZXQudmFsdWUsXG4gICAgICB2YWxpZGF0aW9uRXJyb3I6IGZhbHNlLFxuICAgIH0pO1xuICB9XG5cbiAgb25DbGVhclVybENsaWNrKCkge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgdXJsOiBcIlwiLFxuICAgICAgdmFsaWRhdGlvbkVycm9yOiBmYWxzZSxcbiAgICB9KTtcbiAgfVxuXG4gIG9uRW5hYmxlU2NyZWVuc2hvdFVybEZvcm0oKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IHNob3dDdXN0b21TY3JlZW5zaG90Rm9ybTogdHJ1ZSB9KTtcbiAgfVxuXG4gIF91cGRhdGVDdXN0b21TY3JlZW5zaG90SW5wdXQoY3VzdG9tU2NyZWVuc2hvdFVybCkge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgY3VzdG9tU2NyZWVuc2hvdFVybCxcbiAgICAgIHZhbGlkYXRpb25FcnJvcjogZmFsc2UsXG4gICAgfSk7XG4gICAgdGhpcy5wcm9wcy5kaXNwYXRjaCh7IHR5cGU6IGF0LlBSRVZJRVdfUkVRVUVTVF9DQU5DRUwgfSk7XG4gIH1cblxuICBvbkN1c3RvbVNjcmVlbnNob3RVcmxDaGFuZ2UoZXZlbnQpIHtcbiAgICB0aGlzLl91cGRhdGVDdXN0b21TY3JlZW5zaG90SW5wdXQoZXZlbnQudGFyZ2V0LnZhbHVlKTtcbiAgfVxuXG4gIG9uQ2xlYXJTY3JlZW5zaG90SW5wdXQoKSB7XG4gICAgdGhpcy5fdXBkYXRlQ3VzdG9tU2NyZWVuc2hvdElucHV0KFwiXCIpO1xuICB9XG5cbiAgb25DYW5jZWxCdXR0b25DbGljayhldikge1xuICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgdGhpcy5wcm9wcy5vbkNsb3NlKCk7XG4gIH1cblxuICBvbkRvbmVCdXR0b25DbGljayhldikge1xuICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICBpZiAodGhpcy52YWxpZGF0ZUZvcm0oKSkge1xuICAgICAgY29uc3Qgc2l0ZSA9IHsgdXJsOiB0aGlzLmNsZWFuVXJsKHRoaXMuc3RhdGUudXJsKSB9O1xuICAgICAgY29uc3QgeyBpbmRleCB9ID0gdGhpcy5wcm9wcztcbiAgICAgIGlmICh0aGlzLnN0YXRlLmxhYmVsICE9PSBcIlwiKSB7XG4gICAgICAgIHNpdGUubGFiZWwgPSB0aGlzLnN0YXRlLmxhYmVsO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5zdGF0ZS5jdXN0b21TY3JlZW5zaG90VXJsKSB7XG4gICAgICAgIHNpdGUuY3VzdG9tU2NyZWVuc2hvdFVSTCA9IHRoaXMuY2xlYW5VcmwoXG4gICAgICAgICAgdGhpcy5zdGF0ZS5jdXN0b21TY3JlZW5zaG90VXJsXG4gICAgICAgICk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMucHJvcHMuc2l0ZSAmJiB0aGlzLnByb3BzLnNpdGUuY3VzdG9tU2NyZWVuc2hvdFVSTCkge1xuICAgICAgICAvLyBVc2VkIHRvIGZsYWcgdGhhdCBwcmV2aW91c2x5IGNhY2hlZCBzY3JlZW5zaG90IHNob3VsZCBiZSByZW1vdmVkXG4gICAgICAgIHNpdGUuY3VzdG9tU2NyZWVuc2hvdFVSTCA9IG51bGw7XG4gICAgICB9XG4gICAgICB0aGlzLnByb3BzLmRpc3BhdGNoKFxuICAgICAgICBhYy5BbHNvVG9NYWluKHtcbiAgICAgICAgICB0eXBlOiBhdC5UT1BfU0lURVNfUElOLFxuICAgICAgICAgIGRhdGE6IHsgc2l0ZSwgaW5kZXggfSxcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgICB0aGlzLnByb3BzLmRpc3BhdGNoKFxuICAgICAgICBhYy5Vc2VyRXZlbnQoe1xuICAgICAgICAgIHNvdXJjZTogVE9QX1NJVEVTX1NPVVJDRSxcbiAgICAgICAgICBldmVudDogXCJUT1BfU0lURVNfRURJVFwiLFxuICAgICAgICAgIGFjdGlvbl9wb3NpdGlvbjogaW5kZXgsXG4gICAgICAgIH0pXG4gICAgICApO1xuXG4gICAgICB0aGlzLnByb3BzLm9uQ2xvc2UoKTtcbiAgICB9XG4gIH1cblxuICBvblByZXZpZXdCdXR0b25DbGljayhldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgaWYgKHRoaXMudmFsaWRhdGVGb3JtKCkpIHtcbiAgICAgIHRoaXMucHJvcHMuZGlzcGF0Y2goXG4gICAgICAgIGFjLkFsc29Ub01haW4oe1xuICAgICAgICAgIHR5cGU6IGF0LlBSRVZJRVdfUkVRVUVTVCxcbiAgICAgICAgICBkYXRhOiB7IHVybDogdGhpcy5jbGVhblVybCh0aGlzLnN0YXRlLmN1c3RvbVNjcmVlbnNob3RVcmwpIH0sXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgICAgdGhpcy5wcm9wcy5kaXNwYXRjaChcbiAgICAgICAgYWMuVXNlckV2ZW50KHtcbiAgICAgICAgICBzb3VyY2U6IFRPUF9TSVRFU19TT1VSQ0UsXG4gICAgICAgICAgZXZlbnQ6IFwiUFJFVklFV19SRVFVRVNUXCIsXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIGNsZWFuVXJsKHVybCkge1xuICAgIC8vIElmIHdlIGFyZSBtaXNzaW5nIGEgcHJvdG9jb2wsIHByZXBlbmQgaHR0cDovL1xuICAgIGlmICghdXJsLnN0YXJ0c1dpdGgoXCJodHRwOlwiKSAmJiAhdXJsLnN0YXJ0c1dpdGgoXCJodHRwczpcIikpIHtcbiAgICAgIHJldHVybiBgaHR0cDovLyR7dXJsfWA7XG4gICAgfVxuICAgIHJldHVybiB1cmw7XG4gIH1cblxuICBfdHJ5UGFyc2VVcmwodXJsKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBuZXcgVVJMKHVybCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG5cbiAgdmFsaWRhdGVVcmwodXJsKSB7XG4gICAgY29uc3QgdmFsaWRQcm90b2NvbHMgPSBbXCJodHRwOlwiLCBcImh0dHBzOlwiXTtcbiAgICBjb25zdCB1cmxPYmogPVxuICAgICAgdGhpcy5fdHJ5UGFyc2VVcmwodXJsKSB8fCB0aGlzLl90cnlQYXJzZVVybCh0aGlzLmNsZWFuVXJsKHVybCkpO1xuXG4gICAgcmV0dXJuIHVybE9iaiAmJiB2YWxpZFByb3RvY29scy5pbmNsdWRlcyh1cmxPYmoucHJvdG9jb2wpO1xuICB9XG5cbiAgdmFsaWRhdGVDdXN0b21TY3JlZW5zaG90VXJsKCkge1xuICAgIGNvbnN0IHsgY3VzdG9tU2NyZWVuc2hvdFVybCB9ID0gdGhpcy5zdGF0ZTtcbiAgICByZXR1cm4gIWN1c3RvbVNjcmVlbnNob3RVcmwgfHwgdGhpcy52YWxpZGF0ZVVybChjdXN0b21TY3JlZW5zaG90VXJsKTtcbiAgfVxuXG4gIHZhbGlkYXRlRm9ybSgpIHtcbiAgICBjb25zdCB2YWxpZGF0ZSA9XG4gICAgICB0aGlzLnZhbGlkYXRlVXJsKHRoaXMuc3RhdGUudXJsKSAmJiB0aGlzLnZhbGlkYXRlQ3VzdG9tU2NyZWVuc2hvdFVybCgpO1xuXG4gICAgaWYgKCF2YWxpZGF0ZSkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IHZhbGlkYXRpb25FcnJvcjogdHJ1ZSB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsaWRhdGU7XG4gIH1cblxuICBfcmVuZGVyQ3VzdG9tU2NyZWVuc2hvdElucHV0KCkge1xuICAgIGNvbnN0IHsgY3VzdG9tU2NyZWVuc2hvdFVybCB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCByZXF1ZXN0RmFpbGVkID0gdGhpcy5wcm9wcy5wcmV2aWV3UmVzcG9uc2UgPT09IFwiXCI7XG4gICAgY29uc3QgdmFsaWRhdGlvbkVycm9yID1cbiAgICAgICh0aGlzLnN0YXRlLnZhbGlkYXRpb25FcnJvciAmJiAhdGhpcy52YWxpZGF0ZUN1c3RvbVNjcmVlbnNob3RVcmwoKSkgfHxcbiAgICAgIHJlcXVlc3RGYWlsZWQ7XG4gICAgLy8gU2V0IGZvY3VzIG9uIGVycm9yIGlmIHRoZSB1cmwgZmllbGQgaXMgdmFsaWQgb3Igd2hlbiB0aGUgaW5wdXQgaXMgZmlyc3QgcmVuZGVyZWQgYW5kIGlzIGVtcHR5XG4gICAgY29uc3Qgc2hvdWxkRm9jdXMgPVxuICAgICAgKHZhbGlkYXRpb25FcnJvciAmJiB0aGlzLnZhbGlkYXRlVXJsKHRoaXMuc3RhdGUudXJsKSkgfHxcbiAgICAgICFjdXN0b21TY3JlZW5zaG90VXJsO1xuICAgIGNvbnN0IGlzTG9hZGluZyA9XG4gICAgICB0aGlzLnByb3BzLnByZXZpZXdSZXNwb25zZSA9PT0gbnVsbCAmJlxuICAgICAgY3VzdG9tU2NyZWVuc2hvdFVybCAmJlxuICAgICAgdGhpcy5wcm9wcy5wcmV2aWV3VXJsID09PSB0aGlzLmNsZWFuVXJsKGN1c3RvbVNjcmVlbnNob3RVcmwpO1xuXG4gICAgaWYgKCF0aGlzLnN0YXRlLnNob3dDdXN0b21TY3JlZW5zaG90Rm9ybSkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPEExMXlMaW5rQnV0dG9uXG4gICAgICAgICAgb25DbGljaz17dGhpcy5vbkVuYWJsZVNjcmVlbnNob3RVcmxGb3JtfVxuICAgICAgICAgIGNsYXNzTmFtZT1cImVuYWJsZS1jdXN0b20taW1hZ2UtaW5wdXRcIlxuICAgICAgICAgIGRhdGEtbDEwbi1pZD1cIm5ld3RhYi10b3BzaXRlcy11c2UtaW1hZ2UtbGlua1wiXG4gICAgICAgIC8+XG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJjdXN0b20taW1hZ2UtaW5wdXQtY29udGFpbmVyXCI+XG4gICAgICAgIDxUb3BTaXRlRm9ybUlucHV0XG4gICAgICAgICAgZXJyb3JNZXNzYWdlSWQ9e1xuICAgICAgICAgICAgcmVxdWVzdEZhaWxlZFxuICAgICAgICAgICAgICA/IFwibmV3dGFiLXRvcHNpdGVzLWltYWdlLXZhbGlkYXRpb25cIlxuICAgICAgICAgICAgICA6IFwibmV3dGFiLXRvcHNpdGVzLXVybC12YWxpZGF0aW9uXCJcbiAgICAgICAgICB9XG4gICAgICAgICAgbG9hZGluZz17aXNMb2FkaW5nfVxuICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLm9uQ3VzdG9tU2NyZWVuc2hvdFVybENoYW5nZX1cbiAgICAgICAgICBvbkNsZWFyPXt0aGlzLm9uQ2xlYXJTY3JlZW5zaG90SW5wdXR9XG4gICAgICAgICAgc2hvdWxkRm9jdXM9e3Nob3VsZEZvY3VzfVxuICAgICAgICAgIHR5cGVVcmw9e3RydWV9XG4gICAgICAgICAgdmFsdWU9e2N1c3RvbVNjcmVlbnNob3RVcmx9XG4gICAgICAgICAgdmFsaWRhdGlvbkVycm9yPXt2YWxpZGF0aW9uRXJyb3J9XG4gICAgICAgICAgdGl0bGVJZD1cIm5ld3RhYi10b3BzaXRlcy1pbWFnZS11cmwtbGFiZWxcIlxuICAgICAgICAgIHBsYWNlaG9sZGVySWQ9XCJuZXd0YWItdG9wc2l0ZXMtdXJsLWlucHV0XCJcbiAgICAgICAgLz5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBjdXN0b21TY3JlZW5zaG90VXJsIH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IHJlcXVlc3RGYWlsZWQgPSB0aGlzLnByb3BzLnByZXZpZXdSZXNwb25zZSA9PT0gXCJcIjtcbiAgICAvLyBGb3IgVUkgcHVycG9zZXMsIGVkaXRpbmcgd2l0aG91dCBhbiBleGlzdGluZyBsaW5rIGlzIFwiYWRkXCJcbiAgICBjb25zdCBzaG93QXNBZGQgPSAhdGhpcy5wcm9wcy5zaXRlO1xuICAgIGNvbnN0IHByZXZpb3VzID1cbiAgICAgICh0aGlzLnByb3BzLnNpdGUgJiYgdGhpcy5wcm9wcy5zaXRlLmN1c3RvbVNjcmVlbnNob3RVUkwpIHx8IFwiXCI7XG4gICAgY29uc3QgY2hhbmdlZCA9XG4gICAgICBjdXN0b21TY3JlZW5zaG90VXJsICYmIHRoaXMuY2xlYW5VcmwoY3VzdG9tU2NyZWVuc2hvdFVybCkgIT09IHByZXZpb3VzO1xuICAgIC8vIFByZXZpZXcgbW9kZSBpZiBjaGFuZ2VzIHdlcmUgbWFkZSB0byB0aGUgY3VzdG9tIHNjcmVlbnNob3QgVVJMIGFuZCBubyBwcmV2aWV3IHdhcyByZWNlaXZlZCB5ZXRcbiAgICAvLyBvciB0aGUgcmVxdWVzdCBmYWlsZWRcbiAgICBjb25zdCBwcmV2aWV3TW9kZSA9IGNoYW5nZWQgJiYgIXRoaXMucHJvcHMucHJldmlld1Jlc3BvbnNlO1xuICAgIGNvbnN0IHByZXZpZXdMaW5rID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5wcm9wcy5zaXRlKTtcbiAgICBpZiAodGhpcy5wcm9wcy5wcmV2aWV3UmVzcG9uc2UpIHtcbiAgICAgIHByZXZpZXdMaW5rLnNjcmVlbnNob3QgPSB0aGlzLnByb3BzLnByZXZpZXdSZXNwb25zZTtcbiAgICAgIHByZXZpZXdMaW5rLmN1c3RvbVNjcmVlbnNob3RVUkwgPSB0aGlzLnByb3BzLnByZXZpZXdVcmw7XG4gICAgfVxuICAgIC8vIEhhbmRsZXMgdGhlIGZvcm0gc3VibWl0IHNvIGFuIGVudGVyIHByZXNzIHBlcmZvcm1zIHRoZSBjb3JyZWN0IGFjdGlvblxuICAgIGNvbnN0IG9uU3VibWl0ID0gcHJldmlld01vZGVcbiAgICAgID8gdGhpcy5vblByZXZpZXdCdXR0b25DbGlja1xuICAgICAgOiB0aGlzLm9uRG9uZUJ1dHRvbkNsaWNrO1xuICAgIHJldHVybiAoXG4gICAgICA8Zm9ybSBjbGFzc05hbWU9XCJ0b3BzaXRlLWZvcm1cIiBvblN1Ym1pdD17b25TdWJtaXR9PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZvcm0taW5wdXQtY29udGFpbmVyXCI+XG4gICAgICAgICAgPGgzXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJzZWN0aW9uLXRpdGxlIGdyZXktdGl0bGVcIlxuICAgICAgICAgICAgZGF0YS1sMTBuLWlkPXtcbiAgICAgICAgICAgICAgc2hvd0FzQWRkXG4gICAgICAgICAgICAgICAgPyBcIm5ld3RhYi10b3BzaXRlcy1hZGQtdG9wc2l0ZXMtaGVhZGVyXCJcbiAgICAgICAgICAgICAgICA6IFwibmV3dGFiLXRvcHNpdGVzLWVkaXQtdG9wc2l0ZXMtaGVhZGVyXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAvPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmllbGRzLWFuZC1wcmV2aWV3XCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZvcm0td3JhcHBlclwiPlxuICAgICAgICAgICAgICA8VG9wU2l0ZUZvcm1JbnB1dFxuICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLm9uTGFiZWxDaGFuZ2V9XG4gICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUubGFiZWx9XG4gICAgICAgICAgICAgICAgdGl0bGVJZD1cIm5ld3RhYi10b3BzaXRlcy10aXRsZS1sYWJlbFwiXG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXJJZD1cIm5ld3RhYi10b3BzaXRlcy10aXRsZS1pbnB1dFwiXG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDxUb3BTaXRlRm9ybUlucHV0XG4gICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMub25VcmxDaGFuZ2V9XG4gICAgICAgICAgICAgICAgc2hvdWxkRm9jdXM9e1xuICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS52YWxpZGF0aW9uRXJyb3IgJiZcbiAgICAgICAgICAgICAgICAgICF0aGlzLnZhbGlkYXRlVXJsKHRoaXMuc3RhdGUudXJsKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS51cmx9XG4gICAgICAgICAgICAgICAgb25DbGVhcj17dGhpcy5vbkNsZWFyVXJsQ2xpY2t9XG4gICAgICAgICAgICAgICAgdmFsaWRhdGlvbkVycm9yPXtcbiAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUudmFsaWRhdGlvbkVycm9yICYmXG4gICAgICAgICAgICAgICAgICAhdGhpcy52YWxpZGF0ZVVybCh0aGlzLnN0YXRlLnVybClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGl0bGVJZD1cIm5ld3RhYi10b3BzaXRlcy11cmwtbGFiZWxcIlxuICAgICAgICAgICAgICAgIHR5cGVVcmw9e3RydWV9XG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXJJZD1cIm5ld3RhYi10b3BzaXRlcy11cmwtaW5wdXRcIlxuICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZUlkPVwibmV3dGFiLXRvcHNpdGVzLXVybC12YWxpZGF0aW9uXCJcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAge3RoaXMuX3JlbmRlckN1c3RvbVNjcmVlbnNob3RJbnB1dCgpfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8VG9wU2l0ZUxpbmtcbiAgICAgICAgICAgICAgbGluaz17cHJldmlld0xpbmt9XG4gICAgICAgICAgICAgIGRlZmF1bHRTdHlsZT17cmVxdWVzdEZhaWxlZH1cbiAgICAgICAgICAgICAgdGl0bGU9e3RoaXMuc3RhdGUubGFiZWx9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwiYWN0aW9uc1wiPlxuICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgIGNsYXNzTmFtZT1cImNhbmNlbFwiXG4gICAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMub25DYW5jZWxCdXR0b25DbGlja31cbiAgICAgICAgICAgIGRhdGEtbDEwbi1pZD1cIm5ld3RhYi10b3BzaXRlcy1jYW5jZWwtYnV0dG9uXCJcbiAgICAgICAgICAvPlxuICAgICAgICAgIHtwcmV2aWV3TW9kZSA/IChcbiAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZG9uZSBwcmV2aWV3XCJcbiAgICAgICAgICAgICAgdHlwZT1cInN1Ym1pdFwiXG4gICAgICAgICAgICAgIGRhdGEtbDEwbi1pZD1cIm5ld3RhYi10b3BzaXRlcy1wcmV2aWV3LWJ1dHRvblwiXG4gICAgICAgICAgICAvPlxuICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cImRvbmVcIlxuICAgICAgICAgICAgICB0eXBlPVwic3VibWl0XCJcbiAgICAgICAgICAgICAgZGF0YS1sMTBuLWlkPXtcbiAgICAgICAgICAgICAgICBzaG93QXNBZGRcbiAgICAgICAgICAgICAgICAgID8gXCJuZXd0YWItdG9wc2l0ZXMtYWRkLWJ1dHRvblwiXG4gICAgICAgICAgICAgICAgICA6IFwibmV3dGFiLXRvcHNpdGVzLXNhdmUtYnV0dG9uXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApfVxuICAgICAgICA8L3NlY3Rpb24+XG4gICAgICA8L2Zvcm0+XG4gICAgKTtcbiAgfVxufVxuXG5Ub3BTaXRlRm9ybS5kZWZhdWx0UHJvcHMgPSB7XG4gIHNpdGU6IG51bGwsXG4gIGluZGV4OiAtMSxcbn07XG4iLCIvKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIGZpbGUsXG4gKiBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLiAqL1xuXG5pbXBvcnQgeyBhY3Rpb25DcmVhdG9ycyBhcyBhYywgYWN0aW9uVHlwZXMgYXMgYXQgfSBmcm9tIFwiY29tbW9uL0FjdGlvbnMuanNtXCI7XG5cbmNvbnN0IF9PcGVuSW5Qcml2YXRlV2luZG93ID0gc2l0ZSA9PiAoe1xuICBpZDogXCJuZXd0YWItbWVudS1vcGVuLW5ldy1wcml2YXRlLXdpbmRvd1wiLFxuICBpY29uOiBcIm5ldy13aW5kb3ctcHJpdmF0ZVwiLFxuICBhY3Rpb246IGFjLk9ubHlUb01haW4oe1xuICAgIHR5cGU6IGF0Lk9QRU5fUFJJVkFURV9XSU5ET1csXG4gICAgZGF0YTogeyB1cmw6IHNpdGUudXJsLCByZWZlcnJlcjogc2l0ZS5yZWZlcnJlciB9LFxuICB9KSxcbiAgdXNlckV2ZW50OiBcIk9QRU5fUFJJVkFURV9XSU5ET1dcIixcbn0pO1xuXG4vKipcbiAqIExpc3Qgb2YgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIGl0ZW1zIHRoYXQgY2FuIGJlIGluY2x1ZGVkIGFzIG1lbnUgb3B0aW9ucyBpbiBhXG4gKiBMaW5rTWVudS4gQWxsIGZ1bmN0aW9ucyB0YWtlIHRoZSBzaXRlIGFzIHRoZSBmaXJzdCBwYXJhbWV0ZXIsIGFuZCBvcHRpb25hbGx5XG4gKiB0aGUgaW5kZXggb2YgdGhlIHNpdGUuXG4gKi9cbmV4cG9ydCBjb25zdCBMaW5rTWVudU9wdGlvbnMgPSB7XG4gIFNlcGFyYXRvcjogKCkgPT4gKHsgdHlwZTogXCJzZXBhcmF0b3JcIiB9KSxcbiAgRW1wdHlJdGVtOiAoKSA9PiAoeyB0eXBlOiBcImVtcHR5XCIgfSksXG4gIFJlbW92ZUJvb2ttYXJrOiBzaXRlID0+ICh7XG4gICAgaWQ6IFwibmV3dGFiLW1lbnUtcmVtb3ZlLWJvb2ttYXJrXCIsXG4gICAgaWNvbjogXCJib29rbWFyay1hZGRlZFwiLFxuICAgIGFjdGlvbjogYWMuQWxzb1RvTWFpbih7XG4gICAgICB0eXBlOiBhdC5ERUxFVEVfQk9PS01BUktfQllfSUQsXG4gICAgICBkYXRhOiBzaXRlLmJvb2ttYXJrR3VpZCxcbiAgICB9KSxcbiAgICB1c2VyRXZlbnQ6IFwiQk9PS01BUktfREVMRVRFXCIsXG4gIH0pLFxuICBBZGRCb29rbWFyazogc2l0ZSA9PiAoe1xuICAgIGlkOiBcIm5ld3RhYi1tZW51LWJvb2ttYXJrXCIsXG4gICAgaWNvbjogXCJib29rbWFyay1ob2xsb3dcIixcbiAgICBhY3Rpb246IGFjLkFsc29Ub01haW4oe1xuICAgICAgdHlwZTogYXQuQk9PS01BUktfVVJMLFxuICAgICAgZGF0YTogeyB1cmw6IHNpdGUudXJsLCB0aXRsZTogc2l0ZS50aXRsZSwgdHlwZTogc2l0ZS50eXBlIH0sXG4gICAgfSksXG4gICAgdXNlckV2ZW50OiBcIkJPT0tNQVJLX0FERFwiLFxuICB9KSxcbiAgT3BlbkluTmV3V2luZG93OiBzaXRlID0+ICh7XG4gICAgaWQ6IFwibmV3dGFiLW1lbnUtb3Blbi1uZXctd2luZG93XCIsXG4gICAgaWNvbjogXCJuZXctd2luZG93XCIsXG4gICAgYWN0aW9uOiBhYy5BbHNvVG9NYWluKHtcbiAgICAgIHR5cGU6IGF0Lk9QRU5fTkVXX1dJTkRPVyxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgcmVmZXJyZXI6IHNpdGUucmVmZXJyZXIsXG4gICAgICAgIHR5cGVkQm9udXM6IHNpdGUudHlwZWRCb251cyxcbiAgICAgICAgdXJsOiBzaXRlLnVybCxcbiAgICAgIH0sXG4gICAgfSksXG4gICAgdXNlckV2ZW50OiBcIk9QRU5fTkVXX1dJTkRPV1wiLFxuICB9KSxcbiAgQmxvY2tVcmw6IChzaXRlLCBpbmRleCwgZXZlbnRTb3VyY2UpID0+ICh7XG4gICAgaWQ6IFwibmV3dGFiLW1lbnUtZGlzbWlzc1wiLFxuICAgIGljb246IFwiZGlzbWlzc1wiLFxuICAgIGFjdGlvbjogYWMuQWxzb1RvTWFpbih7XG4gICAgICB0eXBlOiBhdC5CTE9DS19VUkwsXG4gICAgICBkYXRhOiB7IHVybDogc2l0ZS5vcGVuX3VybCB8fCBzaXRlLnVybCwgcG9ja2V0X2lkOiBzaXRlLnBvY2tldF9pZCB9LFxuICAgIH0pLFxuICAgIGltcHJlc3Npb246IGFjLkltcHJlc3Npb25TdGF0cyh7XG4gICAgICBzb3VyY2U6IGV2ZW50U291cmNlLFxuICAgICAgYmxvY2s6IDAsXG4gICAgICB0aWxlczogW1xuICAgICAgICB7XG4gICAgICAgICAgaWQ6IHNpdGUuZ3VpZCxcbiAgICAgICAgICBwb3M6IGluZGV4LFxuICAgICAgICAgIC4uLihzaXRlLnNoaW0gJiYgc2l0ZS5zaGltLmRlbGV0ZSA/IHsgc2hpbTogc2l0ZS5zaGltLmRlbGV0ZSB9IDoge30pLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9KSxcbiAgICB1c2VyRXZlbnQ6IFwiQkxPQ0tcIixcbiAgfSksXG5cbiAgLy8gVGhpcyBpcyBhbiBvcHRpb24gZm9yIHdlYiBleHRlbnRpb25zIHdoaWNoIHdpbGwgcmVzdWx0IGluIHJlbW92ZSBpdGVtcyBmcm9tXG4gIC8vIG1lbW9yeSBhbmQgbm90aWZ5IHRoZSB3ZWIgZXh0ZW5pb24sIHJhdGhlciB0aGFuIHVzaW5nIHRoZSBidWlsdC1pbiBibG9jayBsaXN0LlxuICBXZWJFeHREaXNtaXNzOiAoc2l0ZSwgaW5kZXgsIGV2ZW50U291cmNlKSA9PiAoe1xuICAgIGlkOiBcIm1lbnVfYWN0aW9uX3dlYmV4dF9kaXNtaXNzXCIsXG4gICAgc3RyaW5nX2lkOiBcIm5ld3RhYi1tZW51LWRpc21pc3NcIixcbiAgICBpY29uOiBcImRpc21pc3NcIixcbiAgICBhY3Rpb246IGFjLldlYkV4dEV2ZW50KGF0LldFQkVYVF9ESVNNSVNTLCB7XG4gICAgICBzb3VyY2U6IGV2ZW50U291cmNlLFxuICAgICAgdXJsOiBzaXRlLnVybCxcbiAgICAgIGFjdGlvbl9wb3NpdGlvbjogaW5kZXgsXG4gICAgfSksXG4gIH0pLFxuICBEZWxldGVVcmw6IChzaXRlLCBpbmRleCwgZXZlbnRTb3VyY2UsIGlzRW5hYmxlZCwgc2l0ZUluZm8pID0+ICh7XG4gICAgaWQ6IFwibmV3dGFiLW1lbnUtZGVsZXRlLWhpc3RvcnlcIixcbiAgICBpY29uOiBcImRlbGV0ZVwiLFxuICAgIGFjdGlvbjoge1xuICAgICAgdHlwZTogYXQuRElBTE9HX09QRU4sXG4gICAgICBkYXRhOiB7XG4gICAgICAgIG9uQ29uZmlybTogW1xuICAgICAgICAgIGFjLkFsc29Ub01haW4oe1xuICAgICAgICAgICAgdHlwZTogYXQuREVMRVRFX0hJU1RPUllfVVJMLFxuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICB1cmw6IHNpdGUudXJsLFxuICAgICAgICAgICAgICBwb2NrZXRfaWQ6IHNpdGUucG9ja2V0X2lkLFxuICAgICAgICAgICAgICBmb3JjZUJsb2NrOiBzaXRlLmJvb2ttYXJrR3VpZCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSksXG4gICAgICAgICAgYWMuVXNlckV2ZW50KFxuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgICAgeyBldmVudDogXCJERUxFVEVcIiwgc291cmNlOiBldmVudFNvdXJjZSwgYWN0aW9uX3Bvc2l0aW9uOiBpbmRleCB9LFxuICAgICAgICAgICAgICBzaXRlSW5mb1xuICAgICAgICAgICAgKVxuICAgICAgICAgICksXG4gICAgICAgIF0sXG4gICAgICAgIGV2ZW50U291cmNlLFxuICAgICAgICBib2R5X3N0cmluZ19pZDogW1xuICAgICAgICAgIFwibmV3dGFiLWNvbmZpcm0tZGVsZXRlLWhpc3RvcnktcDFcIixcbiAgICAgICAgICBcIm5ld3RhYi1jb25maXJtLWRlbGV0ZS1oaXN0b3J5LXAyXCIsXG4gICAgICAgIF0sXG4gICAgICAgIGNvbmZpcm1fYnV0dG9uX3N0cmluZ19pZDogXCJuZXd0YWItdG9wc2l0ZXMtZGVsZXRlLWhpc3RvcnktYnV0dG9uXCIsXG4gICAgICAgIGNhbmNlbF9idXR0b25fc3RyaW5nX2lkOiBcIm5ld3RhYi10b3BzaXRlcy1jYW5jZWwtYnV0dG9uXCIsXG4gICAgICAgIGljb246IFwibW9kYWwtZGVsZXRlXCIsXG4gICAgICB9LFxuICAgIH0sXG4gICAgdXNlckV2ZW50OiBcIkRJQUxPR19PUEVOXCIsXG4gIH0pLFxuICBTaG93RmlsZTogc2l0ZSA9PiAoe1xuICAgIGlkOiBcIm5ld3RhYi1tZW51LXNob3ctZmlsZVwiLFxuICAgIGljb246IFwic2VhcmNoXCIsXG4gICAgYWN0aW9uOiBhYy5Pbmx5VG9NYWluKHtcbiAgICAgIHR5cGU6IGF0LlNIT1dfRE9XTkxPQURfRklMRSxcbiAgICAgIGRhdGE6IHsgdXJsOiBzaXRlLnVybCB9LFxuICAgIH0pLFxuICB9KSxcbiAgT3BlbkZpbGU6IHNpdGUgPT4gKHtcbiAgICBpZDogXCJuZXd0YWItbWVudS1vcGVuLWZpbGVcIixcbiAgICBpY29uOiBcIm9wZW4tZmlsZVwiLFxuICAgIGFjdGlvbjogYWMuT25seVRvTWFpbih7XG4gICAgICB0eXBlOiBhdC5PUEVOX0RPV05MT0FEX0ZJTEUsXG4gICAgICBkYXRhOiB7IHVybDogc2l0ZS51cmwgfSxcbiAgICB9KSxcbiAgfSksXG4gIENvcHlEb3dubG9hZExpbms6IHNpdGUgPT4gKHtcbiAgICBpZDogXCJuZXd0YWItbWVudS1jb3B5LWRvd25sb2FkLWxpbmtcIixcbiAgICBpY29uOiBcImNvcHlcIixcbiAgICBhY3Rpb246IGFjLk9ubHlUb01haW4oe1xuICAgICAgdHlwZTogYXQuQ09QWV9ET1dOTE9BRF9MSU5LLFxuICAgICAgZGF0YTogeyB1cmw6IHNpdGUudXJsIH0sXG4gICAgfSksXG4gIH0pLFxuICBHb1RvRG93bmxvYWRQYWdlOiBzaXRlID0+ICh7XG4gICAgaWQ6IFwibmV3dGFiLW1lbnUtZ28tdG8tZG93bmxvYWQtcGFnZVwiLFxuICAgIGljb246IFwiZG93bmxvYWRcIixcbiAgICBhY3Rpb246IGFjLk9ubHlUb01haW4oe1xuICAgICAgdHlwZTogYXQuT1BFTl9MSU5LLFxuICAgICAgZGF0YTogeyB1cmw6IHNpdGUucmVmZXJyZXIgfSxcbiAgICB9KSxcbiAgICBkaXNhYmxlZDogIXNpdGUucmVmZXJyZXIsXG4gIH0pLFxuICBSZW1vdmVEb3dubG9hZDogc2l0ZSA9PiAoe1xuICAgIGlkOiBcIm5ld3RhYi1tZW51LXJlbW92ZS1kb3dubG9hZFwiLFxuICAgIGljb246IFwiZGVsZXRlXCIsXG4gICAgYWN0aW9uOiBhYy5Pbmx5VG9NYWluKHtcbiAgICAgIHR5cGU6IGF0LlJFTU9WRV9ET1dOTE9BRF9GSUxFLFxuICAgICAgZGF0YTogeyB1cmw6IHNpdGUudXJsIH0sXG4gICAgfSksXG4gIH0pLFxuICBQaW5Ub3BTaXRlOiAoeyB1cmwsIHNlYXJjaFRvcFNpdGUsIGxhYmVsIH0sIGluZGV4KSA9PiAoe1xuICAgIGlkOiBcIm5ld3RhYi1tZW51LXBpblwiLFxuICAgIGljb246IFwicGluXCIsXG4gICAgYWN0aW9uOiBhYy5BbHNvVG9NYWluKHtcbiAgICAgIHR5cGU6IGF0LlRPUF9TSVRFU19QSU4sXG4gICAgICBkYXRhOiB7XG4gICAgICAgIHNpdGU6IHtcbiAgICAgICAgICB1cmwsXG4gICAgICAgICAgLi4uKHNlYXJjaFRvcFNpdGUgJiYgeyBzZWFyY2hUb3BTaXRlLCBsYWJlbCB9KSxcbiAgICAgICAgfSxcbiAgICAgICAgaW5kZXgsXG4gICAgICB9LFxuICAgIH0pLFxuICAgIHVzZXJFdmVudDogXCJQSU5cIixcbiAgfSksXG4gIFVucGluVG9wU2l0ZTogc2l0ZSA9PiAoe1xuICAgIGlkOiBcIm5ld3RhYi1tZW51LXVucGluXCIsXG4gICAgaWNvbjogXCJ1bnBpblwiLFxuICAgIGFjdGlvbjogYWMuQWxzb1RvTWFpbih7XG4gICAgICB0eXBlOiBhdC5UT1BfU0lURVNfVU5QSU4sXG4gICAgICBkYXRhOiB7IHNpdGU6IHsgdXJsOiBzaXRlLnVybCB9IH0sXG4gICAgfSksXG4gICAgdXNlckV2ZW50OiBcIlVOUElOXCIsXG4gIH0pLFxuICBTYXZlVG9Qb2NrZXQ6IChzaXRlLCBpbmRleCwgZXZlbnRTb3VyY2UpID0+ICh7XG4gICAgaWQ6IFwibmV3dGFiLW1lbnUtc2F2ZS10by1wb2NrZXRcIixcbiAgICBpY29uOiBcInBvY2tldC1zYXZlXCIsXG4gICAgYWN0aW9uOiBhYy5BbHNvVG9NYWluKHtcbiAgICAgIHR5cGU6IGF0LlNBVkVfVE9fUE9DS0VULFxuICAgICAgZGF0YTogeyBzaXRlOiB7IHVybDogc2l0ZS51cmwsIHRpdGxlOiBzaXRlLnRpdGxlIH0gfSxcbiAgICB9KSxcbiAgICBpbXByZXNzaW9uOiBhYy5JbXByZXNzaW9uU3RhdHMoe1xuICAgICAgc291cmNlOiBldmVudFNvdXJjZSxcbiAgICAgIHBvY2tldDogMCxcbiAgICAgIHRpbGVzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBpZDogc2l0ZS5ndWlkLFxuICAgICAgICAgIHBvczogaW5kZXgsXG4gICAgICAgICAgLi4uKHNpdGUuc2hpbSAmJiBzaXRlLnNoaW0uc2F2ZSA/IHsgc2hpbTogc2l0ZS5zaGltLnNhdmUgfSA6IHt9KSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfSksXG4gICAgdXNlckV2ZW50OiBcIlNBVkVfVE9fUE9DS0VUXCIsXG4gIH0pLFxuICBEZWxldGVGcm9tUG9ja2V0OiBzaXRlID0+ICh7XG4gICAgaWQ6IFwibmV3dGFiLW1lbnUtZGVsZXRlLXBvY2tldFwiLFxuICAgIGljb246IFwicG9ja2V0LWRlbGV0ZVwiLFxuICAgIGFjdGlvbjogYWMuQWxzb1RvTWFpbih7XG4gICAgICB0eXBlOiBhdC5ERUxFVEVfRlJPTV9QT0NLRVQsXG4gICAgICBkYXRhOiB7IHBvY2tldF9pZDogc2l0ZS5wb2NrZXRfaWQgfSxcbiAgICB9KSxcbiAgICB1c2VyRXZlbnQ6IFwiREVMRVRFX0ZST01fUE9DS0VUXCIsXG4gIH0pLFxuICBBcmNoaXZlRnJvbVBvY2tldDogc2l0ZSA9PiAoe1xuICAgIGlkOiBcIm5ld3RhYi1tZW51LWFyY2hpdmUtcG9ja2V0XCIsXG4gICAgaWNvbjogXCJwb2NrZXQtYXJjaGl2ZVwiLFxuICAgIGFjdGlvbjogYWMuQWxzb1RvTWFpbih7XG4gICAgICB0eXBlOiBhdC5BUkNISVZFX0ZST01fUE9DS0VULFxuICAgICAgZGF0YTogeyBwb2NrZXRfaWQ6IHNpdGUucG9ja2V0X2lkIH0sXG4gICAgfSksXG4gICAgdXNlckV2ZW50OiBcIkFSQ0hJVkVfRlJPTV9QT0NLRVRcIixcbiAgfSksXG4gIEVkaXRUb3BTaXRlOiAoc2l0ZSwgaW5kZXgpID0+ICh7XG4gICAgaWQ6IFwibmV3dGFiLW1lbnUtZWRpdC10b3BzaXRlc1wiLFxuICAgIGljb246IFwiZWRpdFwiLFxuICAgIGFjdGlvbjoge1xuICAgICAgdHlwZTogYXQuVE9QX1NJVEVTX0VESVQsXG4gICAgICBkYXRhOiB7IGluZGV4IH0sXG4gICAgfSxcbiAgfSksXG4gIENoZWNrQm9va21hcms6IHNpdGUgPT5cbiAgICBzaXRlLmJvb2ttYXJrR3VpZFxuICAgICAgPyBMaW5rTWVudU9wdGlvbnMuUmVtb3ZlQm9va21hcmsoc2l0ZSlcbiAgICAgIDogTGlua01lbnVPcHRpb25zLkFkZEJvb2ttYXJrKHNpdGUpLFxuICBDaGVja1BpblRvcFNpdGU6IChzaXRlLCBpbmRleCkgPT5cbiAgICBzaXRlLmlzUGlubmVkXG4gICAgICA/IExpbmtNZW51T3B0aW9ucy5VbnBpblRvcFNpdGUoc2l0ZSlcbiAgICAgIDogTGlua01lbnVPcHRpb25zLlBpblRvcFNpdGUoc2l0ZSwgaW5kZXgpLFxuICBDaGVja1NhdmVkVG9Qb2NrZXQ6IChzaXRlLCBpbmRleCkgPT5cbiAgICBzaXRlLnBvY2tldF9pZFxuICAgICAgPyBMaW5rTWVudU9wdGlvbnMuRGVsZXRlRnJvbVBvY2tldChzaXRlKVxuICAgICAgOiBMaW5rTWVudU9wdGlvbnMuU2F2ZVRvUG9ja2V0KHNpdGUsIGluZGV4KSxcbiAgQ2hlY2tCb29rbWFya09yQXJjaGl2ZTogc2l0ZSA9PlxuICAgIHNpdGUucG9ja2V0X2lkXG4gICAgICA/IExpbmtNZW51T3B0aW9ucy5BcmNoaXZlRnJvbVBvY2tldChzaXRlKVxuICAgICAgOiBMaW5rTWVudU9wdGlvbnMuQ2hlY2tCb29rbWFyayhzaXRlKSxcbiAgT3BlbkluUHJpdmF0ZVdpbmRvdzogKHNpdGUsIGluZGV4LCBldmVudFNvdXJjZSwgaXNFbmFibGVkKSA9PlxuICAgIGlzRW5hYmxlZCA/IF9PcGVuSW5Qcml2YXRlV2luZG93KHNpdGUpIDogTGlua01lbnVPcHRpb25zLkVtcHR5SXRlbSgpLFxufTtcbiIsIi8qIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXMgZmlsZSxcbiAqIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uICovXG5cbmltcG9ydCB7IGFjdGlvbkNyZWF0b3JzIGFzIGFjIH0gZnJvbSBcImNvbW1vbi9BY3Rpb25zLmpzbVwiO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuaW1wb3J0IHsgQ29udGV4dE1lbnUgfSBmcm9tIFwiY29udGVudC1zcmMvY29tcG9uZW50cy9Db250ZXh0TWVudS9Db250ZXh0TWVudVwiO1xuaW1wb3J0IHsgTGlua01lbnVPcHRpb25zIH0gZnJvbSBcImNvbnRlbnQtc3JjL2xpYi9saW5rLW1lbnUtb3B0aW9uc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuXG5jb25zdCBERUZBVUxUX1NJVEVfTUVOVV9PUFRJT05TID0gW1xuICBcIkNoZWNrUGluVG9wU2l0ZVwiLFxuICBcIkVkaXRUb3BTaXRlXCIsXG4gIFwiU2VwYXJhdG9yXCIsXG4gIFwiT3BlbkluTmV3V2luZG93XCIsXG4gIFwiT3BlbkluUHJpdmF0ZVdpbmRvd1wiLFxuICBcIlNlcGFyYXRvclwiLFxuICBcIkJsb2NrVXJsXCIsXG5dO1xuXG5leHBvcnQgY2xhc3MgX0xpbmtNZW51IGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gIGdldE9wdGlvbnMoKSB7XG4gICAgY29uc3QgeyBwcm9wcyB9ID0gdGhpcztcbiAgICBjb25zdCB7XG4gICAgICBzaXRlLFxuICAgICAgaW5kZXgsXG4gICAgICBzb3VyY2UsXG4gICAgICBpc1ByaXZhdGVCcm93c2luZ0VuYWJsZWQsXG4gICAgICBzaXRlSW5mbyxcbiAgICAgIHBsYXRmb3JtLFxuICAgIH0gPSBwcm9wcztcblxuICAgIC8vIEhhbmRsZSBzcGVjaWFsIGNhc2Ugb2YgZGVmYXVsdCBzaXRlXG4gICAgY29uc3QgcHJvcE9wdGlvbnMgPVxuICAgICAgIXNpdGUuaXNEZWZhdWx0IHx8IHNpdGUuc2VhcmNoVG9wU2l0ZVxuICAgICAgICA/IHByb3BzLm9wdGlvbnNcbiAgICAgICAgOiBERUZBVUxUX1NJVEVfTUVOVV9PUFRJT05TO1xuXG4gICAgY29uc3Qgb3B0aW9ucyA9IHByb3BPcHRpb25zXG4gICAgICAubWFwKG8gPT5cbiAgICAgICAgTGlua01lbnVPcHRpb25zW29dKFxuICAgICAgICAgIHNpdGUsXG4gICAgICAgICAgaW5kZXgsXG4gICAgICAgICAgc291cmNlLFxuICAgICAgICAgIGlzUHJpdmF0ZUJyb3dzaW5nRW5hYmxlZCxcbiAgICAgICAgICBzaXRlSW5mbyxcbiAgICAgICAgICBwbGF0Zm9ybVxuICAgICAgICApXG4gICAgICApXG4gICAgICAubWFwKG9wdGlvbiA9PiB7XG4gICAgICAgIGNvbnN0IHsgYWN0aW9uLCBpbXByZXNzaW9uLCBpZCwgdHlwZSwgdXNlckV2ZW50IH0gPSBvcHRpb247XG4gICAgICAgIGlmICghdHlwZSAmJiBpZCkge1xuICAgICAgICAgIG9wdGlvbi5vbkNsaWNrID0gKCkgPT4ge1xuICAgICAgICAgICAgcHJvcHMuZGlzcGF0Y2goYWN0aW9uKTtcbiAgICAgICAgICAgIGlmICh1c2VyRXZlbnQpIHtcbiAgICAgICAgICAgICAgY29uc3QgdXNlckV2ZW50RGF0YSA9IE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgZXZlbnQ6IHVzZXJFdmVudCxcbiAgICAgICAgICAgICAgICAgIHNvdXJjZSxcbiAgICAgICAgICAgICAgICAgIGFjdGlvbl9wb3NpdGlvbjogaW5kZXgsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzaXRlSW5mb1xuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICBwcm9wcy5kaXNwYXRjaChhYy5Vc2VyRXZlbnQodXNlckV2ZW50RGF0YSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGltcHJlc3Npb24gJiYgcHJvcHMuc2hvdWxkU2VuZEltcHJlc3Npb25TdGF0cykge1xuICAgICAgICAgICAgICBwcm9wcy5kaXNwYXRjaChpbXByZXNzaW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvcHRpb247XG4gICAgICB9KTtcblxuICAgIC8vIFRoaXMgaXMgZm9yIGFjY2Vzc2liaWxpdHkgdG8gc3VwcG9ydCBtYWtpbmcgZWFjaCBpdGVtIHRhYmJhYmxlLlxuICAgIC8vIFdlIHdhbnQgdG8ga25vdyB3aGljaCBpdGVtIGlzIHRoZSBmaXJzdCBhbmQgd2hpY2ggaXRlbVxuICAgIC8vIGlzIHRoZSBsYXN0LCBzbyB3ZSBjYW4gY2xvc2UgdGhlIGNvbnRleHQgbWVudSBhY2NvcmRpbmdseS5cbiAgICBvcHRpb25zWzBdLmZpcnN0ID0gdHJ1ZTtcbiAgICBvcHRpb25zW29wdGlvbnMubGVuZ3RoIC0gMV0ubGFzdCA9IHRydWU7XG4gICAgcmV0dXJuIG9wdGlvbnM7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxDb250ZXh0TWVudVxuICAgICAgICBvblVwZGF0ZT17dGhpcy5wcm9wcy5vblVwZGF0ZX1cbiAgICAgICAgb25TaG93PXt0aGlzLnByb3BzLm9uU2hvd31cbiAgICAgICAgb3B0aW9ucz17dGhpcy5nZXRPcHRpb25zKCl9XG4gICAgICAgIGtleWJvYXJkQWNjZXNzPXt0aGlzLnByb3BzLmtleWJvYXJkQWNjZXNzfVxuICAgICAgLz5cbiAgICApO1xuICB9XG59XG5cbmNvbnN0IGdldFN0YXRlID0gc3RhdGUgPT4gKHtcbiAgaXNQcml2YXRlQnJvd3NpbmdFbmFibGVkOiBzdGF0ZS5QcmVmcy52YWx1ZXMuaXNQcml2YXRlQnJvd3NpbmdFbmFibGVkLFxuICBwbGF0Zm9ybTogc3RhdGUuUHJlZnMudmFsdWVzLnBsYXRmb3JtLFxufSk7XG5leHBvcnQgY29uc3QgTGlua01lbnUgPSBjb25uZWN0KGdldFN0YXRlKShfTGlua01lbnUpO1xuIiwiZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICBcImRlZmF1bHRcIjogb2JqXG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IGhhc0NsYXNzO1xuXG5mdW5jdGlvbiBoYXNDbGFzcyhlbGVtZW50LCBjbGFzc05hbWUpIHtcbiAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0KSByZXR1cm4gISFjbGFzc05hbWUgJiYgZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKTtlbHNlIHJldHVybiAoXCIgXCIgKyAoZWxlbWVudC5jbGFzc05hbWUuYmFzZVZhbCB8fCBlbGVtZW50LmNsYXNzTmFtZSkgKyBcIiBcIikuaW5kZXhPZihcIiBcIiArIGNsYXNzTmFtZSArIFwiIFwiKSAhPT0gLTE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiByZXBsYWNlQ2xhc3NOYW1lKG9yaWdDbGFzcywgY2xhc3NUb1JlbW92ZSkge1xuICByZXR1cm4gb3JpZ0NsYXNzLnJlcGxhY2UobmV3IFJlZ0V4cCgnKF58XFxcXHMpJyArIGNsYXNzVG9SZW1vdmUgKyAnKD86XFxcXHN8JCknLCAnZycpLCAnJDEnKS5yZXBsYWNlKC9cXHMrL2csICcgJykucmVwbGFjZSgvXlxccyp8XFxzKiQvZywgJycpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHJlbW92ZUNsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSkge1xuICBpZiAoZWxlbWVudC5jbGFzc0xpc3QpIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpO2Vsc2UgaWYgKHR5cGVvZiBlbGVtZW50LmNsYXNzTmFtZSA9PT0gJ3N0cmluZycpIGVsZW1lbnQuY2xhc3NOYW1lID0gcmVwbGFjZUNsYXNzTmFtZShlbGVtZW50LmNsYXNzTmFtZSwgY2xhc3NOYW1lKTtlbHNlIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdjbGFzcycsIHJlcGxhY2VDbGFzc05hbWUoZWxlbWVudC5jbGFzc05hbWUgJiYgZWxlbWVudC5jbGFzc05hbWUuYmFzZVZhbCB8fCAnJywgY2xhc3NOYW1lKSk7XG59OyIsIi8qIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXMgZmlsZSxcbiAqIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uICovXG5cbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBSZWFjdERPTSBmcm9tIFwicmVhY3QtZG9tXCI7XG5cbmV4cG9ydCBjbGFzcyBEU0ltYWdlIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuXG4gICAgdGhpcy5vbk9wdGltaXplZEltYWdlRXJyb3IgPSB0aGlzLm9uT3B0aW1pemVkSW1hZ2VFcnJvci5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25Ob25PcHRpbWl6ZWRJbWFnZUVycm9yID0gdGhpcy5vbk5vbk9wdGltaXplZEltYWdlRXJyb3IuYmluZCh0aGlzKTtcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBpc1NlZW46IGZhbHNlLFxuICAgICAgb3B0aW1pemVkSW1hZ2VGYWlsZWQ6IGZhbHNlLFxuICAgIH07XG4gIH1cblxuICBvblNlZW4oZW50cmllcykge1xuICAgIGlmICh0aGlzLnN0YXRlKSB7XG4gICAgICBpZiAoZW50cmllcy5zb21lKGVudHJ5ID0+IGVudHJ5LmlzSW50ZXJzZWN0aW5nKSkge1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5vcHRpbWl6ZSkge1xuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgY29udGFpbmVyV2lkdGg6IFJlYWN0RE9NLmZpbmRET01Ob2RlKHRoaXMpLmNsaWVudFdpZHRoLFxuICAgICAgICAgICAgY29udGFpbmVySGVpZ2h0OiBSZWFjdERPTS5maW5kRE9NTm9kZSh0aGlzKS5jbGllbnRIZWlnaHQsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBpc1NlZW46IHRydWUsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIFN0b3Agb2JzZXJ2aW5nIHNpbmNlIGVsZW1lbnQgaGFzIGJlZW4gc2VlblxuICAgICAgICB0aGlzLm9ic2VydmVyLnVub2JzZXJ2ZShSZWFjdERPTS5maW5kRE9NTm9kZSh0aGlzKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmVmb3JtYXRJbWFnZVVSTCh1cmwsIHdpZHRoLCBoZWlnaHQpIHtcbiAgICAvLyBDaGFuZ2UgdGhlIGltYWdlIFVSTCB0byByZXF1ZXN0IGEgc2l6ZSB0YWlsb3JlZCBmb3IgdGhlIHBhcmVudCBjb250YWluZXIgd2lkdGhcbiAgICAvLyBBbHNvOiBmb3JjZSBKUEVHLCBxdWFsaXR5IDYwLCBubyB1cHNjYWxpbmcsIG5vIEVYSUYgZGF0YVxuICAgIC8vIFVzZXMgVGh1bWJvcjogaHR0cHM6Ly90aHVtYm9yLnJlYWR0aGVkb2NzLmlvL2VuL2xhdGVzdC91c2FnZS5odG1sXG4gICAgcmV0dXJuIGBodHRwczovL2ltZy1nZXRwb2NrZXQuY2RuLm1vemlsbGEubmV0LyR7d2lkdGh9eCR7aGVpZ2h0fS9maWx0ZXJzOmZvcm1hdChqcGVnKTpxdWFsaXR5KDYwKTpub191cHNjYWxlKCk6c3RyaXBfZXhpZigpLyR7ZW5jb2RlVVJJQ29tcG9uZW50KFxuICAgICAgdXJsXG4gICAgKX1gO1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5vYnNlcnZlciA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcih0aGlzLm9uU2Vlbi5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLm9ic2VydmVyLm9ic2VydmUoUmVhY3RET00uZmluZERPTU5vZGUodGhpcykpO1xuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgLy8gUmVtb3ZlIG9ic2VydmVyIG9uIHVubW91bnRcbiAgICBpZiAodGhpcy5vYnNlcnZlcikge1xuICAgICAgdGhpcy5vYnNlcnZlci51bm9ic2VydmUoUmVhY3RET00uZmluZERPTU5vZGUodGhpcykpO1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCBjbGFzc05hbWVzID0gYGRzLWltYWdlJHtcbiAgICAgIHRoaXMucHJvcHMuZXh0cmFDbGFzc05hbWVzID8gYCAke3RoaXMucHJvcHMuZXh0cmFDbGFzc05hbWVzfWAgOiBgYFxuICAgIH1gO1xuXG4gICAgbGV0IGltZztcblxuICAgIGlmICh0aGlzLnN0YXRlICYmIHRoaXMuc3RhdGUuaXNTZWVuKSB7XG4gICAgICBpZiAoXG4gICAgICAgIHRoaXMucHJvcHMub3B0aW1pemUgJiZcbiAgICAgICAgdGhpcy5wcm9wcy5yYXdTb3VyY2UgJiZcbiAgICAgICAgIXRoaXMuc3RhdGUub3B0aW1pemVkSW1hZ2VGYWlsZWRcbiAgICAgICkge1xuICAgICAgICBsZXQgc291cmNlO1xuICAgICAgICBsZXQgc291cmNlMng7XG5cbiAgICAgICAgaWYgKHRoaXMuc3RhdGUgJiYgdGhpcy5zdGF0ZS5jb250YWluZXJXaWR0aCkge1xuICAgICAgICAgIGxldCBiYXNlU291cmNlID0gdGhpcy5wcm9wcy5yYXdTb3VyY2U7XG5cbiAgICAgICAgICBzb3VyY2UgPSB0aGlzLnJlZm9ybWF0SW1hZ2VVUkwoXG4gICAgICAgICAgICBiYXNlU291cmNlLFxuICAgICAgICAgICAgdGhpcy5zdGF0ZS5jb250YWluZXJXaWR0aCxcbiAgICAgICAgICAgIHRoaXMuc3RhdGUuY29udGFpbmVySGVpZ2h0XG4gICAgICAgICAgKTtcblxuICAgICAgICAgIHNvdXJjZTJ4ID0gdGhpcy5yZWZvcm1hdEltYWdlVVJMKFxuICAgICAgICAgICAgYmFzZVNvdXJjZSxcbiAgICAgICAgICAgIHRoaXMuc3RhdGUuY29udGFpbmVyV2lkdGggKiAyLFxuICAgICAgICAgICAgdGhpcy5zdGF0ZS5jb250YWluZXJIZWlnaHQgKiAyXG4gICAgICAgICAgKTtcblxuICAgICAgICAgIGltZyA9IChcbiAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgYWx0PVwiXCJcbiAgICAgICAgICAgICAgY3Jvc3NPcmlnaW49XCJhbm9ueW1vdXNcIlxuICAgICAgICAgICAgICBvbkVycm9yPXt0aGlzLm9uT3B0aW1pemVkSW1hZ2VFcnJvcn1cbiAgICAgICAgICAgICAgc3JjPXtzb3VyY2V9XG4gICAgICAgICAgICAgIHNyY1NldD17YCR7c291cmNlMnh9IDJ4YH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICghdGhpcy5zdGF0ZS5ub25PcHRpbWl6ZWRJbWFnZUZhaWxlZCkge1xuICAgICAgICBpbWcgPSAoXG4gICAgICAgICAgPGltZ1xuICAgICAgICAgICAgYWx0PVwiXCJcbiAgICAgICAgICAgIGNyb3NzT3JpZ2luPVwiYW5vbnltb3VzXCJcbiAgICAgICAgICAgIG9uRXJyb3I9e3RoaXMub25Ob25PcHRpbWl6ZWRJbWFnZUVycm9yfVxuICAgICAgICAgICAgc3JjPXt0aGlzLnByb3BzLnNvdXJjZX1cbiAgICAgICAgICAvPlxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUmVtb3ZlIHRoZSBpbWcgZWxlbWVudCBpZiBib3RoIHNvdXJjZXMgZmFpbC4gUmVuZGVyIGEgcGxhY2Vob2xkZXIgaW5zdGVhZC5cbiAgICAgICAgaW1nID0gPGRpdiBjbGFzc05hbWU9XCJicm9rZW4taW1hZ2VcIiAvPjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gPHBpY3R1cmUgY2xhc3NOYW1lPXtjbGFzc05hbWVzfT57aW1nfTwvcGljdHVyZT47XG4gIH1cblxuICBvbk9wdGltaXplZEltYWdlRXJyb3IoKSB7XG4gICAgLy8gVGhpcyB3aWxsIHRyaWdnZXIgYSByZS1yZW5kZXIgYW5kIHRoZSB1bm9wdGltaXplZCA0NTBweCBpbWFnZSB3aWxsIGJlIHVzZWQgYXMgYSBmYWxsYmFja1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgb3B0aW1pemVkSW1hZ2VGYWlsZWQ6IHRydWUsXG4gICAgfSk7XG4gIH1cblxuICBvbk5vbk9wdGltaXplZEltYWdlRXJyb3IoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBub25PcHRpbWl6ZWRJbWFnZUZhaWxlZDogdHJ1ZSxcbiAgICB9KTtcbiAgfVxufVxuXG5EU0ltYWdlLmRlZmF1bHRQcm9wcyA9IHtcbiAgc291cmNlOiBudWxsLCAvLyBUaGUgY3VycmVudCBzb3VyY2Ugc3R5bGUgZnJvbSBQb2NrZXQgQVBJIChhbHdheXMgNDUwcHgpXG4gIHJhd1NvdXJjZTogbnVsbCwgLy8gVW5hZHVsdGVyYXRlZCBpbWFnZSBVUkwgdG8gZmlsdGVyIHRocm91Z2ggVGh1bWJvclxuICBleHRyYUNsYXNzTmFtZXM6IG51bGwsIC8vIEFkZGl0aW9uYWwgY2xhc3NuYW1lcyB0byBhcHBlbmQgdG8gY29tcG9uZW50XG4gIG9wdGltaXplOiB0cnVlLCAvLyBNZWFzdXJlIHBhcmVudCBjb250YWluZXIgdG8gcmVxdWVzdCBleGFjdCBzaXplc1xufTtcbiIsIi8qIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXMgZmlsZSxcbiAqIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uICovXG5cbmltcG9ydCB7IExpbmtNZW51IH0gZnJvbSBcImNvbnRlbnQtc3JjL2NvbXBvbmVudHMvTGlua01lbnUvTGlua01lbnVcIjtcbmltcG9ydCB7IENvbnRleHRNZW51QnV0dG9uIH0gZnJvbSBcImNvbnRlbnQtc3JjL2NvbXBvbmVudHMvQ29udGV4dE1lbnUvQ29udGV4dE1lbnVCdXR0b25cIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuZXhwb3J0IGNsYXNzIERTTGlua01lbnUgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy53aW5kb3dPYmogPSB0aGlzLnByb3BzLndpbmRvd09iaiB8fCB3aW5kb3c7IC8vIEFkZGVkIHRvIHN1cHBvcnQgdW5pdCB0ZXN0c1xuICAgIHRoaXMub25NZW51VXBkYXRlID0gdGhpcy5vbk1lbnVVcGRhdGUuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uTWVudVNob3cgPSB0aGlzLm9uTWVudVNob3cuYmluZCh0aGlzKTtcbiAgICB0aGlzLmNvbnRleHRNZW51QnV0dG9uUmVmID0gUmVhY3QuY3JlYXRlUmVmKCk7XG4gIH1cblxuICBvbk1lbnVVcGRhdGUoc2hvd0NvbnRleHRNZW51KSB7XG4gICAgaWYgKCFzaG93Q29udGV4dE1lbnUpIHtcbiAgICAgIGNvbnN0IGRzTGlua01lbnVIb3N0RGl2ID0gdGhpcy5jb250ZXh0TWVudUJ1dHRvblJlZi5jdXJyZW50LnBhcmVudEVsZW1lbnQ7XG4gICAgICBkc0xpbmtNZW51SG9zdERpdi5wYXJlbnRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmVcIiwgXCJsYXN0LWl0ZW1cIik7XG4gICAgfVxuICB9XG5cbiAgbmV4dEFuaW1hdGlvbkZyYW1lKCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHJlcXVlc3RBbmltYXRpb25GcmFtZShyZXNvbHZlKSk7XG4gIH1cblxuICBhc3luYyBvbk1lbnVTaG93KCkge1xuICAgIGNvbnN0IGRzTGlua01lbnVIb3N0RGl2ID0gdGhpcy5jb250ZXh0TWVudUJ1dHRvblJlZi5jdXJyZW50LnBhcmVudEVsZW1lbnQ7XG4gICAgLy8gV2FpdCBmb3IgbmV4dCBmcmFtZSBiZWZvcmUgY29tcHV0aW5nIHNjcm9sbE1heFggdG8gYWxsb3cgZmx1ZW50IG1lbnUgc3RyaW5ncyB0byBiZSB2aXNpYmxlXG4gICAgYXdhaXQgdGhpcy5uZXh0QW5pbWF0aW9uRnJhbWUoKTtcbiAgICBpZiAodGhpcy53aW5kb3dPYmouc2Nyb2xsTWF4WCA+IDApIHtcbiAgICAgIGRzTGlua01lbnVIb3N0RGl2LnBhcmVudEVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImxhc3QtaXRlbVwiKTtcbiAgICB9XG4gICAgZHNMaW5rTWVudUhvc3REaXYucGFyZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiYWN0aXZlXCIpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgaW5kZXgsIGRpc3BhdGNoIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IFRPUF9TVE9SSUVTX0NPTlRFWFRfTUVOVV9PUFRJT05TID0gW1xuICAgICAgXCJDaGVja0Jvb2ttYXJrT3JBcmNoaXZlXCIsXG4gICAgICBcIkNoZWNrU2F2ZWRUb1BvY2tldFwiLFxuICAgICAgXCJTZXBhcmF0b3JcIixcbiAgICAgIFwiT3BlbkluTmV3V2luZG93XCIsXG4gICAgICBcIk9wZW5JblByaXZhdGVXaW5kb3dcIixcbiAgICAgIFwiU2VwYXJhdG9yXCIsXG4gICAgICBcIkJsb2NrVXJsXCIsXG4gICAgXTtcbiAgICBjb25zdCB0eXBlID0gdGhpcy5wcm9wcy50eXBlIHx8IFwiRElTQ09WRVJZX1NUUkVBTVwiO1xuICAgIGNvbnN0IHRpdGxlID0gdGhpcy5wcm9wcy50aXRsZSB8fCB0aGlzLnByb3BzLnNvdXJjZTtcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2PlxuICAgICAgICA8Q29udGV4dE1lbnVCdXR0b25cbiAgICAgICAgICByZWZGdW5jdGlvbj17dGhpcy5jb250ZXh0TWVudUJ1dHRvblJlZn1cbiAgICAgICAgICB0b29sdGlwPXtcIm5ld3RhYi1tZW51LWNvbnRlbnQtdG9vbHRpcFwifVxuICAgICAgICAgIHRvb2x0aXBBcmdzPXt7IHRpdGxlIH19XG4gICAgICAgICAgb25VcGRhdGU9e3RoaXMub25NZW51VXBkYXRlfVxuICAgICAgICA+XG4gICAgICAgICAgPExpbmtNZW51XG4gICAgICAgICAgICBkaXNwYXRjaD17ZGlzcGF0Y2h9XG4gICAgICAgICAgICBpbmRleD17aW5kZXh9XG4gICAgICAgICAgICBzb3VyY2U9e3R5cGUudG9VcHBlckNhc2UoKX1cbiAgICAgICAgICAgIG9uU2hvdz17dGhpcy5vbk1lbnVTaG93fVxuICAgICAgICAgICAgb3B0aW9ucz17VE9QX1NUT1JJRVNfQ09OVEVYVF9NRU5VX09QVElPTlN9XG4gICAgICAgICAgICBzaG91bGRTZW5kSW1wcmVzc2lvblN0YXRzPXt0cnVlfVxuICAgICAgICAgICAgc2l0ZT17e1xuICAgICAgICAgICAgICByZWZlcnJlcjogXCJodHRwczovL2dldHBvY2tldC5jb20vcmVjb21tZW5kYXRpb25zXCIsXG4gICAgICAgICAgICAgIHRpdGxlOiB0aGlzLnByb3BzLnRpdGxlLFxuICAgICAgICAgICAgICB0eXBlOiB0aGlzLnByb3BzLnR5cGUsXG4gICAgICAgICAgICAgIHVybDogdGhpcy5wcm9wcy51cmwsXG4gICAgICAgICAgICAgIGd1aWQ6IHRoaXMucHJvcHMuaWQsXG4gICAgICAgICAgICAgIHBvY2tldF9pZDogdGhpcy5wcm9wcy5wb2NrZXRfaWQsXG4gICAgICAgICAgICAgIHNoaW06IHRoaXMucHJvcHMuc2hpbSxcbiAgICAgICAgICAgICAgYm9va21hcmtHdWlkOiB0aGlzLnByb3BzLmJvb2ttYXJrR3VpZCxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9Db250ZXh0TWVudUJ1dHRvbj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cbiIsIi8qIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXMgZmlsZSxcbiAqIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uICovXG5cbmltcG9ydCB7IGFjdGlvbkNyZWF0b3JzIGFzIGFjLCBhY3Rpb25UeXBlcyBhcyBhdCB9IGZyb20gXCJjb21tb24vQWN0aW9ucy5qc21cIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuZXhwb3J0IGNsYXNzIFNhZmVBbmNob3IgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5vbkNsaWNrID0gdGhpcy5vbkNsaWNrLmJpbmQodGhpcyk7XG4gIH1cblxuICBvbkNsaWNrKGV2ZW50KSB7XG4gICAgLy8gVXNlIGRpc3BhdGNoIGluc3RlYWQgb2Ygbm9ybWFsIGxpbmsgY2xpY2sgYmVoYXZpb3IgdG8gaW5jbHVkZSByZWZlcnJlclxuICAgIGlmICh0aGlzLnByb3BzLmRpc3BhdGNoKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgY29uc3QgeyBhbHRLZXksIGJ1dHRvbiwgY3RybEtleSwgbWV0YUtleSwgc2hpZnRLZXkgfSA9IGV2ZW50O1xuICAgICAgdGhpcy5wcm9wcy5kaXNwYXRjaChcbiAgICAgICAgYWMuT25seVRvTWFpbih7XG4gICAgICAgICAgdHlwZTogYXQuT1BFTl9MSU5LLFxuICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGV2ZW50OiB7IGFsdEtleSwgYnV0dG9uLCBjdHJsS2V5LCBtZXRhS2V5LCBzaGlmdEtleSB9LFxuICAgICAgICAgICAgcmVmZXJyZXI6IFwiaHR0cHM6Ly9nZXRwb2NrZXQuY29tL3JlY29tbWVuZGF0aW9uc1wiLFxuICAgICAgICAgICAgLy8gVXNlIHRoZSBhbmNob3IncyB1cmwsIHdoaWNoIGNvdWxkIGhhdmUgYmVlbiBjbGVhbmVkIHVwXG4gICAgICAgICAgICB1cmw6IGV2ZW50LmN1cnJlbnRUYXJnZXQuaHJlZixcbiAgICAgICAgICB9LFxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBQcm9wYWdhdGUgZXZlbnQgaWYgdGhlcmUncyBhIGhhbmRsZXJcbiAgICBpZiAodGhpcy5wcm9wcy5vbkxpbmtDbGljaykge1xuICAgICAgdGhpcy5wcm9wcy5vbkxpbmtDbGljayhldmVudCk7XG4gICAgfVxuICB9XG5cbiAgc2FmZVVSSSh1cmwpIHtcbiAgICBsZXQgcHJvdG9jb2wgPSBudWxsO1xuICAgIHRyeSB7XG4gICAgICBwcm90b2NvbCA9IG5ldyBVUkwodXJsKS5wcm90b2NvbDtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gXCJcIjtcbiAgICB9XG5cbiAgICBjb25zdCBpc0FsbG93ZWQgPSBbXCJodHRwOlwiLCBcImh0dHBzOlwiXS5pbmNsdWRlcyhwcm90b2NvbCk7XG4gICAgaWYgKCFpc0FsbG93ZWQpIHtcbiAgICAgIGNvbnNvbGUud2FybihgJHt1cmx9IGlzIG5vdCBhbGxvd2VkIGZvciBhbmNob3IgdGFyZ2V0cy5gKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgICByZXR1cm4gXCJcIjtcbiAgICB9XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IHVybCwgY2xhc3NOYW1lIH0gPSB0aGlzLnByb3BzO1xuICAgIHJldHVybiAoXG4gICAgICA8YSBocmVmPXt0aGlzLnNhZmVVUkkodXJsKX0gY2xhc3NOYW1lPXtjbGFzc05hbWV9IG9uQ2xpY2s9e3RoaXMub25DbGlja30+XG4gICAgICAgIHt0aGlzLnByb3BzLmNoaWxkcmVufVxuICAgICAgPC9hPlxuICAgICk7XG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzO1xuICBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xufSIsImV4cG9ydCBkZWZhdWx0IHtcbiAgZGlzYWJsZWQ6IGZhbHNlXG59OyIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5leHBvcnQgdmFyIHRpbWVvdXRzU2hhcGUgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnNoYXBlKHtcbiAgZW50ZXI6IFByb3BUeXBlcy5udW1iZXIsXG4gIGV4aXQ6IFByb3BUeXBlcy5udW1iZXIsXG4gIGFwcGVhcjogUHJvcFR5cGVzLm51bWJlclxufSkuaXNSZXF1aXJlZF0pIDogbnVsbDtcbmV4cG9ydCB2YXIgY2xhc3NOYW1lc1NoYXBlID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5zaGFwZSh7XG4gIGVudGVyOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBleGl0OiBQcm9wVHlwZXMuc3RyaW5nLFxuICBhY3RpdmU6IFByb3BUeXBlcy5zdHJpbmdcbn0pLCBQcm9wVHlwZXMuc2hhcGUoe1xuICBlbnRlcjogUHJvcFR5cGVzLnN0cmluZyxcbiAgZW50ZXJEb25lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBlbnRlckFjdGl2ZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgZXhpdDogUHJvcFR5cGVzLnN0cmluZyxcbiAgZXhpdERvbmU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGV4aXRBY3RpdmU6IFByb3BUeXBlcy5zdHJpbmdcbn0pXSkgOiBudWxsOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5leHBvcnQgZGVmYXVsdCBSZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgKiBhcyBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgY29uZmlnIGZyb20gJy4vY29uZmlnJztcbmltcG9ydCB7IHRpbWVvdXRzU2hhcGUgfSBmcm9tICcuL3V0aWxzL1Byb3BUeXBlcyc7XG5pbXBvcnQgVHJhbnNpdGlvbkdyb3VwQ29udGV4dCBmcm9tICcuL1RyYW5zaXRpb25Hcm91cENvbnRleHQnO1xuZXhwb3J0IHZhciBVTk1PVU5URUQgPSAndW5tb3VudGVkJztcbmV4cG9ydCB2YXIgRVhJVEVEID0gJ2V4aXRlZCc7XG5leHBvcnQgdmFyIEVOVEVSSU5HID0gJ2VudGVyaW5nJztcbmV4cG9ydCB2YXIgRU5URVJFRCA9ICdlbnRlcmVkJztcbmV4cG9ydCB2YXIgRVhJVElORyA9ICdleGl0aW5nJztcbi8qKlxuICogVGhlIFRyYW5zaXRpb24gY29tcG9uZW50IGxldHMgeW91IGRlc2NyaWJlIGEgdHJhbnNpdGlvbiBmcm9tIG9uZSBjb21wb25lbnRcbiAqIHN0YXRlIHRvIGFub3RoZXIgX292ZXIgdGltZV8gd2l0aCBhIHNpbXBsZSBkZWNsYXJhdGl2ZSBBUEkuIE1vc3QgY29tbW9ubHlcbiAqIGl0J3MgdXNlZCB0byBhbmltYXRlIHRoZSBtb3VudGluZyBhbmQgdW5tb3VudGluZyBvZiBhIGNvbXBvbmVudCwgYnV0IGNhbiBhbHNvXG4gKiBiZSB1c2VkIHRvIGRlc2NyaWJlIGluLXBsYWNlIHRyYW5zaXRpb24gc3RhdGVzIGFzIHdlbGwuXG4gKlxuICogLS0tXG4gKlxuICogKipOb3RlKio6IGBUcmFuc2l0aW9uYCBpcyBhIHBsYXRmb3JtLWFnbm9zdGljIGJhc2UgY29tcG9uZW50LiBJZiB5b3UncmUgdXNpbmdcbiAqIHRyYW5zaXRpb25zIGluIENTUywgeW91J2xsIHByb2JhYmx5IHdhbnQgdG8gdXNlXG4gKiBbYENTU1RyYW5zaXRpb25gXShodHRwczovL3JlYWN0Y29tbXVuaXR5Lm9yZy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2Nzcy10cmFuc2l0aW9uKVxuICogaW5zdGVhZC4gSXQgaW5oZXJpdHMgYWxsIHRoZSBmZWF0dXJlcyBvZiBgVHJhbnNpdGlvbmAsIGJ1dCBjb250YWluc1xuICogYWRkaXRpb25hbCBmZWF0dXJlcyBuZWNlc3NhcnkgdG8gcGxheSBuaWNlIHdpdGggQ1NTIHRyYW5zaXRpb25zIChoZW5jZSB0aGVcbiAqIG5hbWUgb2YgdGhlIGNvbXBvbmVudCkuXG4gKlxuICogLS0tXG4gKlxuICogQnkgZGVmYXVsdCB0aGUgYFRyYW5zaXRpb25gIGNvbXBvbmVudCBkb2VzIG5vdCBhbHRlciB0aGUgYmVoYXZpb3Igb2YgdGhlXG4gKiBjb21wb25lbnQgaXQgcmVuZGVycywgaXQgb25seSB0cmFja3MgXCJlbnRlclwiIGFuZCBcImV4aXRcIiBzdGF0ZXMgZm9yIHRoZVxuICogY29tcG9uZW50cy4gSXQncyB1cCB0byB5b3UgdG8gZ2l2ZSBtZWFuaW5nIGFuZCBlZmZlY3QgdG8gdGhvc2Ugc3RhdGVzLiBGb3JcbiAqIGV4YW1wbGUgd2UgY2FuIGFkZCBzdHlsZXMgdG8gYSBjb21wb25lbnQgd2hlbiBpdCBlbnRlcnMgb3IgZXhpdHM6XG4gKlxuICogYGBganN4XG4gKiBpbXBvcnQgeyBUcmFuc2l0aW9uIH0gZnJvbSAncmVhY3QtdHJhbnNpdGlvbi1ncm91cCc7XG4gKlxuICogY29uc3QgZHVyYXRpb24gPSAzMDA7XG4gKlxuICogY29uc3QgZGVmYXVsdFN0eWxlID0ge1xuICogICB0cmFuc2l0aW9uOiBgb3BhY2l0eSAke2R1cmF0aW9ufW1zIGVhc2UtaW4tb3V0YCxcbiAqICAgb3BhY2l0eTogMCxcbiAqIH1cbiAqXG4gKiBjb25zdCB0cmFuc2l0aW9uU3R5bGVzID0ge1xuICogICBlbnRlcmluZzogeyBvcGFjaXR5OiAxIH0sXG4gKiAgIGVudGVyZWQ6ICB7IG9wYWNpdHk6IDEgfSxcbiAqICAgZXhpdGluZzogIHsgb3BhY2l0eTogMCB9LFxuICogICBleGl0ZWQ6ICB7IG9wYWNpdHk6IDAgfSxcbiAqIH07XG4gKlxuICogY29uc3QgRmFkZSA9ICh7IGluOiBpblByb3AgfSkgPT4gKFxuICogICA8VHJhbnNpdGlvbiBpbj17aW5Qcm9wfSB0aW1lb3V0PXtkdXJhdGlvbn0+XG4gKiAgICAge3N0YXRlID0+IChcbiAqICAgICAgIDxkaXYgc3R5bGU9e3tcbiAqICAgICAgICAgLi4uZGVmYXVsdFN0eWxlLFxuICogICAgICAgICAuLi50cmFuc2l0aW9uU3R5bGVzW3N0YXRlXVxuICogICAgICAgfX0+XG4gKiAgICAgICAgIEknbSBhIGZhZGUgVHJhbnNpdGlvbiFcbiAqICAgICAgIDwvZGl2PlxuICogICAgICl9XG4gKiAgIDwvVHJhbnNpdGlvbj5cbiAqICk7XG4gKiBgYGBcbiAqXG4gKiBUaGVyZSBhcmUgNCBtYWluIHN0YXRlcyBhIFRyYW5zaXRpb24gY2FuIGJlIGluOlxuICogIC0gYCdlbnRlcmluZydgXG4gKiAgLSBgJ2VudGVyZWQnYFxuICogIC0gYCdleGl0aW5nJ2BcbiAqICAtIGAnZXhpdGVkJ2BcbiAqXG4gKiBUcmFuc2l0aW9uIHN0YXRlIGlzIHRvZ2dsZWQgdmlhIHRoZSBgaW5gIHByb3AuIFdoZW4gYHRydWVgIHRoZSBjb21wb25lbnRcbiAqIGJlZ2lucyB0aGUgXCJFbnRlclwiIHN0YWdlLiBEdXJpbmcgdGhpcyBzdGFnZSwgdGhlIGNvbXBvbmVudCB3aWxsIHNoaWZ0IGZyb21cbiAqIGl0cyBjdXJyZW50IHRyYW5zaXRpb24gc3RhdGUsIHRvIGAnZW50ZXJpbmcnYCBmb3IgdGhlIGR1cmF0aW9uIG9mIHRoZVxuICogdHJhbnNpdGlvbiBhbmQgdGhlbiB0byB0aGUgYCdlbnRlcmVkJ2Agc3RhZ2Ugb25jZSBpdCdzIGNvbXBsZXRlLiBMZXQncyB0YWtlXG4gKiB0aGUgZm9sbG93aW5nIGV4YW1wbGUgKHdlJ2xsIHVzZSB0aGVcbiAqIFt1c2VTdGF0ZV0oaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2hvb2tzLXJlZmVyZW5jZS5odG1sI3VzZXN0YXRlKSBob29rKTpcbiAqXG4gKiBgYGBqc3hcbiAqIGZ1bmN0aW9uIEFwcCgpIHtcbiAqICAgY29uc3QgW2luUHJvcCwgc2V0SW5Qcm9wXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAqICAgcmV0dXJuIChcbiAqICAgICA8ZGl2PlxuICogICAgICAgPFRyYW5zaXRpb24gaW49e2luUHJvcH0gdGltZW91dD17NTAwfT5cbiAqICAgICAgICAge3N0YXRlID0+IChcbiAqICAgICAgICAgICAvLyAuLi5cbiAqICAgICAgICAgKX1cbiAqICAgICAgIDwvVHJhbnNpdGlvbj5cbiAqICAgICAgIDxidXR0b24gb25DbGljaz17KCkgPT4gc2V0SW5Qcm9wKHRydWUpfT5cbiAqICAgICAgICAgQ2xpY2sgdG8gRW50ZXJcbiAqICAgICAgIDwvYnV0dG9uPlxuICogICAgIDwvZGl2PlxuICogICApO1xuICogfVxuICogYGBgXG4gKlxuICogV2hlbiB0aGUgYnV0dG9uIGlzIGNsaWNrZWQgdGhlIGNvbXBvbmVudCB3aWxsIHNoaWZ0IHRvIHRoZSBgJ2VudGVyaW5nJ2Agc3RhdGVcbiAqIGFuZCBzdGF5IHRoZXJlIGZvciA1MDBtcyAodGhlIHZhbHVlIG9mIGB0aW1lb3V0YCkgYmVmb3JlIGl0IGZpbmFsbHkgc3dpdGNoZXNcbiAqIHRvIGAnZW50ZXJlZCdgLlxuICpcbiAqIFdoZW4gYGluYCBpcyBgZmFsc2VgIHRoZSBzYW1lIHRoaW5nIGhhcHBlbnMgZXhjZXB0IHRoZSBzdGF0ZSBtb3ZlcyBmcm9tXG4gKiBgJ2V4aXRpbmcnYCB0byBgJ2V4aXRlZCdgLlxuICovXG5cbnZhciBUcmFuc2l0aW9uID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFRyYW5zaXRpb24sIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFRyYW5zaXRpb24ocHJvcHMsIGNvbnRleHQpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkgfHwgdGhpcztcbiAgICB2YXIgcGFyZW50R3JvdXAgPSBjb250ZXh0OyAvLyBJbiB0aGUgY29udGV4dCBvZiBhIFRyYW5zaXRpb25Hcm91cCBhbGwgZW50ZXJzIGFyZSByZWFsbHkgYXBwZWFyc1xuXG4gICAgdmFyIGFwcGVhciA9IHBhcmVudEdyb3VwICYmICFwYXJlbnRHcm91cC5pc01vdW50aW5nID8gcHJvcHMuZW50ZXIgOiBwcm9wcy5hcHBlYXI7XG4gICAgdmFyIGluaXRpYWxTdGF0dXM7XG4gICAgX3RoaXMuYXBwZWFyU3RhdHVzID0gbnVsbDtcblxuICAgIGlmIChwcm9wcy5pbikge1xuICAgICAgaWYgKGFwcGVhcikge1xuICAgICAgICBpbml0aWFsU3RhdHVzID0gRVhJVEVEO1xuICAgICAgICBfdGhpcy5hcHBlYXJTdGF0dXMgPSBFTlRFUklORztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluaXRpYWxTdGF0dXMgPSBFTlRFUkVEO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocHJvcHMudW5tb3VudE9uRXhpdCB8fCBwcm9wcy5tb3VudE9uRW50ZXIpIHtcbiAgICAgICAgaW5pdGlhbFN0YXR1cyA9IFVOTU9VTlRFRDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluaXRpYWxTdGF0dXMgPSBFWElURUQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBzdGF0dXM6IGluaXRpYWxTdGF0dXNcbiAgICB9O1xuICAgIF90aGlzLm5leHRDYWxsYmFjayA9IG51bGw7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgVHJhbnNpdGlvbi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMoX3JlZiwgcHJldlN0YXRlKSB7XG4gICAgdmFyIG5leHRJbiA9IF9yZWYuaW47XG5cbiAgICBpZiAobmV4dEluICYmIHByZXZTdGF0ZS5zdGF0dXMgPT09IFVOTU9VTlRFRCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3RhdHVzOiBFWElURURcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH07IC8vIGdldFNuYXBzaG90QmVmb3JlVXBkYXRlKHByZXZQcm9wcykge1xuICAvLyAgIGxldCBuZXh0U3RhdHVzID0gbnVsbFxuICAvLyAgIGlmIChwcmV2UHJvcHMgIT09IHRoaXMucHJvcHMpIHtcbiAgLy8gICAgIGNvbnN0IHsgc3RhdHVzIH0gPSB0aGlzLnN0YXRlXG4gIC8vICAgICBpZiAodGhpcy5wcm9wcy5pbikge1xuICAvLyAgICAgICBpZiAoc3RhdHVzICE9PSBFTlRFUklORyAmJiBzdGF0dXMgIT09IEVOVEVSRUQpIHtcbiAgLy8gICAgICAgICBuZXh0U3RhdHVzID0gRU5URVJJTkdcbiAgLy8gICAgICAgfVxuICAvLyAgICAgfSBlbHNlIHtcbiAgLy8gICAgICAgaWYgKHN0YXR1cyA9PT0gRU5URVJJTkcgfHwgc3RhdHVzID09PSBFTlRFUkVEKSB7XG4gIC8vICAgICAgICAgbmV4dFN0YXR1cyA9IEVYSVRJTkdcbiAgLy8gICAgICAgfVxuICAvLyAgICAgfVxuICAvLyAgIH1cbiAgLy8gICByZXR1cm4geyBuZXh0U3RhdHVzIH1cbiAgLy8gfVxuXG5cbiAgdmFyIF9wcm90byA9IFRyYW5zaXRpb24ucHJvdG90eXBlO1xuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMudXBkYXRlU3RhdHVzKHRydWUsIHRoaXMuYXBwZWFyU3RhdHVzKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgIHZhciBuZXh0U3RhdHVzID0gbnVsbDtcblxuICAgIGlmIChwcmV2UHJvcHMgIT09IHRoaXMucHJvcHMpIHtcbiAgICAgIHZhciBzdGF0dXMgPSB0aGlzLnN0YXRlLnN0YXR1cztcblxuICAgICAgaWYgKHRoaXMucHJvcHMuaW4pIHtcbiAgICAgICAgaWYgKHN0YXR1cyAhPT0gRU5URVJJTkcgJiYgc3RhdHVzICE9PSBFTlRFUkVEKSB7XG4gICAgICAgICAgbmV4dFN0YXR1cyA9IEVOVEVSSU5HO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoc3RhdHVzID09PSBFTlRFUklORyB8fCBzdGF0dXMgPT09IEVOVEVSRUQpIHtcbiAgICAgICAgICBuZXh0U3RhdHVzID0gRVhJVElORztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMudXBkYXRlU3RhdHVzKGZhbHNlLCBuZXh0U3RhdHVzKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLmNhbmNlbE5leHRDYWxsYmFjaygpO1xuICB9O1xuXG4gIF9wcm90by5nZXRUaW1lb3V0cyA9IGZ1bmN0aW9uIGdldFRpbWVvdXRzKCkge1xuICAgIHZhciB0aW1lb3V0ID0gdGhpcy5wcm9wcy50aW1lb3V0O1xuICAgIHZhciBleGl0LCBlbnRlciwgYXBwZWFyO1xuICAgIGV4aXQgPSBlbnRlciA9IGFwcGVhciA9IHRpbWVvdXQ7XG5cbiAgICBpZiAodGltZW91dCAhPSBudWxsICYmIHR5cGVvZiB0aW1lb3V0ICE9PSAnbnVtYmVyJykge1xuICAgICAgZXhpdCA9IHRpbWVvdXQuZXhpdDtcbiAgICAgIGVudGVyID0gdGltZW91dC5lbnRlcjsgLy8gVE9ETzogcmVtb3ZlIGZhbGxiYWNrIGZvciBuZXh0IG1ham9yXG5cbiAgICAgIGFwcGVhciA9IHRpbWVvdXQuYXBwZWFyICE9PSB1bmRlZmluZWQgPyB0aW1lb3V0LmFwcGVhciA6IGVudGVyO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBleGl0OiBleGl0LFxuICAgICAgZW50ZXI6IGVudGVyLFxuICAgICAgYXBwZWFyOiBhcHBlYXJcbiAgICB9O1xuICB9O1xuXG4gIF9wcm90by51cGRhdGVTdGF0dXMgPSBmdW5jdGlvbiB1cGRhdGVTdGF0dXMobW91bnRpbmcsIG5leHRTdGF0dXMpIHtcbiAgICBpZiAobW91bnRpbmcgPT09IHZvaWQgMCkge1xuICAgICAgbW91bnRpbmcgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAobmV4dFN0YXR1cyAhPT0gbnVsbCkge1xuICAgICAgLy8gbmV4dFN0YXR1cyB3aWxsIGFsd2F5cyBiZSBFTlRFUklORyBvciBFWElUSU5HLlxuICAgICAgdGhpcy5jYW5jZWxOZXh0Q2FsbGJhY2soKTtcbiAgICAgIHZhciBub2RlID0gUmVhY3RET00uZmluZERPTU5vZGUodGhpcyk7XG5cbiAgICAgIGlmIChuZXh0U3RhdHVzID09PSBFTlRFUklORykge1xuICAgICAgICB0aGlzLnBlcmZvcm1FbnRlcihub2RlLCBtb3VudGluZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnBlcmZvcm1FeGl0KG5vZGUpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGhpcy5wcm9wcy51bm1vdW50T25FeGl0ICYmIHRoaXMuc3RhdGUuc3RhdHVzID09PSBFWElURUQpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBzdGF0dXM6IFVOTU9VTlRFRFxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5wZXJmb3JtRW50ZXIgPSBmdW5jdGlvbiBwZXJmb3JtRW50ZXIobm9kZSwgbW91bnRpbmcpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciBlbnRlciA9IHRoaXMucHJvcHMuZW50ZXI7XG4gICAgdmFyIGFwcGVhcmluZyA9IHRoaXMuY29udGV4dCA/IHRoaXMuY29udGV4dC5pc01vdW50aW5nIDogbW91bnRpbmc7XG4gICAgdmFyIHRpbWVvdXRzID0gdGhpcy5nZXRUaW1lb3V0cygpO1xuICAgIHZhciBlbnRlclRpbWVvdXQgPSBhcHBlYXJpbmcgPyB0aW1lb3V0cy5hcHBlYXIgOiB0aW1lb3V0cy5lbnRlcjsgLy8gbm8gZW50ZXIgYW5pbWF0aW9uIHNraXAgcmlnaHQgdG8gRU5URVJFRFxuICAgIC8vIGlmIHdlIGFyZSBtb3VudGluZyBhbmQgcnVubmluZyB0aGlzIGl0IG1lYW5zIGFwcGVhciBfbXVzdF8gYmUgc2V0XG5cbiAgICBpZiAoIW1vdW50aW5nICYmICFlbnRlciB8fCBjb25maWcuZGlzYWJsZWQpIHtcbiAgICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgICAgc3RhdHVzOiBFTlRFUkVEXG4gICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMi5wcm9wcy5vbkVudGVyZWQobm9kZSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnByb3BzLm9uRW50ZXIobm9kZSwgYXBwZWFyaW5nKTtcbiAgICB0aGlzLnNhZmVTZXRTdGF0ZSh7XG4gICAgICBzdGF0dXM6IEVOVEVSSU5HXG4gICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMyLnByb3BzLm9uRW50ZXJpbmcobm9kZSwgYXBwZWFyaW5nKTtcblxuICAgICAgX3RoaXMyLm9uVHJhbnNpdGlvbkVuZChub2RlLCBlbnRlclRpbWVvdXQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMyLnNhZmVTZXRTdGF0ZSh7XG4gICAgICAgICAgc3RhdHVzOiBFTlRFUkVEXG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpczIucHJvcHMub25FbnRlcmVkKG5vZGUsIGFwcGVhcmluZyk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLnBlcmZvcm1FeGl0ID0gZnVuY3Rpb24gcGVyZm9ybUV4aXQobm9kZSkge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgdmFyIGV4aXQgPSB0aGlzLnByb3BzLmV4aXQ7XG4gICAgdmFyIHRpbWVvdXRzID0gdGhpcy5nZXRUaW1lb3V0cygpOyAvLyBubyBleGl0IGFuaW1hdGlvbiBza2lwIHJpZ2h0IHRvIEVYSVRFRFxuXG4gICAgaWYgKCFleGl0IHx8IGNvbmZpZy5kaXNhYmxlZCkge1xuICAgICAgdGhpcy5zYWZlU2V0U3RhdGUoe1xuICAgICAgICBzdGF0dXM6IEVYSVRFRFxuICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczMucHJvcHMub25FeGl0ZWQobm9kZSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnByb3BzLm9uRXhpdChub2RlKTtcbiAgICB0aGlzLnNhZmVTZXRTdGF0ZSh7XG4gICAgICBzdGF0dXM6IEVYSVRJTkdcbiAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczMucHJvcHMub25FeGl0aW5nKG5vZGUpO1xuXG4gICAgICBfdGhpczMub25UcmFuc2l0aW9uRW5kKG5vZGUsIHRpbWVvdXRzLmV4aXQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMzLnNhZmVTZXRTdGF0ZSh7XG4gICAgICAgICAgc3RhdHVzOiBFWElURURcbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzMy5wcm9wcy5vbkV4aXRlZChub2RlKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uY2FuY2VsTmV4dENhbGxiYWNrID0gZnVuY3Rpb24gY2FuY2VsTmV4dENhbGxiYWNrKCkge1xuICAgIGlmICh0aGlzLm5leHRDYWxsYmFjayAhPT0gbnVsbCkge1xuICAgICAgdGhpcy5uZXh0Q2FsbGJhY2suY2FuY2VsKCk7XG4gICAgICB0aGlzLm5leHRDYWxsYmFjayA9IG51bGw7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5zYWZlU2V0U3RhdGUgPSBmdW5jdGlvbiBzYWZlU2V0U3RhdGUobmV4dFN0YXRlLCBjYWxsYmFjaykge1xuICAgIC8vIFRoaXMgc2hvdWxkbid0IGJlIG5lY2Vzc2FyeSwgYnV0IHRoZXJlIGFyZSB3ZWlyZCByYWNlIGNvbmRpdGlvbnMgd2l0aFxuICAgIC8vIHNldFN0YXRlIGNhbGxiYWNrcyBhbmQgdW5tb3VudGluZyBpbiB0ZXN0aW5nLCBzbyBhbHdheXMgbWFrZSBzdXJlIHRoYXRcbiAgICAvLyB3ZSBjYW4gY2FuY2VsIGFueSBwZW5kaW5nIHNldFN0YXRlIGNhbGxiYWNrcyBhZnRlciB3ZSB1bm1vdW50LlxuICAgIGNhbGxiYWNrID0gdGhpcy5zZXROZXh0Q2FsbGJhY2soY2FsbGJhY2spO1xuICAgIHRoaXMuc2V0U3RhdGUobmV4dFN0YXRlLCBjYWxsYmFjayk7XG4gIH07XG5cbiAgX3Byb3RvLnNldE5leHRDYWxsYmFjayA9IGZ1bmN0aW9uIHNldE5leHRDYWxsYmFjayhjYWxsYmFjaykge1xuICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgdmFyIGFjdGl2ZSA9IHRydWU7XG5cbiAgICB0aGlzLm5leHRDYWxsYmFjayA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKGFjdGl2ZSkge1xuICAgICAgICBhY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgX3RoaXM0Lm5leHRDYWxsYmFjayA9IG51bGw7XG4gICAgICAgIGNhbGxiYWNrKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5uZXh0Q2FsbGJhY2suY2FuY2VsID0gZnVuY3Rpb24gKCkge1xuICAgICAgYWN0aXZlID0gZmFsc2U7XG4gICAgfTtcblxuICAgIHJldHVybiB0aGlzLm5leHRDYWxsYmFjaztcbiAgfTtcblxuICBfcHJvdG8ub25UcmFuc2l0aW9uRW5kID0gZnVuY3Rpb24gb25UcmFuc2l0aW9uRW5kKG5vZGUsIHRpbWVvdXQsIGhhbmRsZXIpIHtcbiAgICB0aGlzLnNldE5leHRDYWxsYmFjayhoYW5kbGVyKTtcbiAgICB2YXIgZG9lc05vdEhhdmVUaW1lb3V0T3JMaXN0ZW5lciA9IHRpbWVvdXQgPT0gbnVsbCAmJiAhdGhpcy5wcm9wcy5hZGRFbmRMaXN0ZW5lcjtcblxuICAgIGlmICghbm9kZSB8fCBkb2VzTm90SGF2ZVRpbWVvdXRPckxpc3RlbmVyKSB7XG4gICAgICBzZXRUaW1lb3V0KHRoaXMubmV4dENhbGxiYWNrLCAwKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5wcm9wcy5hZGRFbmRMaXN0ZW5lcikge1xuICAgICAgdGhpcy5wcm9wcy5hZGRFbmRMaXN0ZW5lcihub2RlLCB0aGlzLm5leHRDYWxsYmFjayk7XG4gICAgfVxuXG4gICAgaWYgKHRpbWVvdXQgIT0gbnVsbCkge1xuICAgICAgc2V0VGltZW91dCh0aGlzLm5leHRDYWxsYmFjaywgdGltZW91dCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIHN0YXR1cyA9IHRoaXMuc3RhdGUuc3RhdHVzO1xuXG4gICAgaWYgKHN0YXR1cyA9PT0gVU5NT1VOVEVEKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICBjaGlsZFByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImNoaWxkcmVuXCJdKTsgLy8gZmlsdGVyIHByb3BzIGZvciBUcmFuc3RpdGlvblxuXG5cbiAgICBkZWxldGUgY2hpbGRQcm9wcy5pbjtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5tb3VudE9uRW50ZXI7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMudW5tb3VudE9uRXhpdDtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5hcHBlYXI7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMuZW50ZXI7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMuZXhpdDtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy50aW1lb3V0O1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLmFkZEVuZExpc3RlbmVyO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLm9uRW50ZXI7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMub25FbnRlcmluZztcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5vbkVudGVyZWQ7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMub25FeGl0O1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLm9uRXhpdGluZztcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5vbkV4aXRlZDtcblxuICAgIGlmICh0eXBlb2YgY2hpbGRyZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIC8vIGFsbG93cyBmb3IgbmVzdGVkIFRyYW5zaXRpb25zXG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2l0aW9uR3JvdXBDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICAgIHZhbHVlOiBudWxsXG4gICAgICB9LCBjaGlsZHJlbihzdGF0dXMsIGNoaWxkUHJvcHMpKTtcbiAgICB9XG5cbiAgICB2YXIgY2hpbGQgPSBSZWFjdC5DaGlsZHJlbi5vbmx5KGNoaWxkcmVuKTtcbiAgICByZXR1cm4gKC8vIGFsbG93cyBmb3IgbmVzdGVkIFRyYW5zaXRpb25zXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFRyYW5zaXRpb25Hcm91cENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgICAgdmFsdWU6IG51bGxcbiAgICAgIH0sIFJlYWN0LmNsb25lRWxlbWVudChjaGlsZCwgY2hpbGRQcm9wcykpXG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gVHJhbnNpdGlvbjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuVHJhbnNpdGlvbi5jb250ZXh0VHlwZSA9IFRyYW5zaXRpb25Hcm91cENvbnRleHQ7XG5UcmFuc2l0aW9uLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIEEgYGZ1bmN0aW9uYCBjaGlsZCBjYW4gYmUgdXNlZCBpbnN0ZWFkIG9mIGEgUmVhY3QgZWxlbWVudC4gVGhpcyBmdW5jdGlvbiBpc1xuICAgKiBjYWxsZWQgd2l0aCB0aGUgY3VycmVudCB0cmFuc2l0aW9uIHN0YXR1cyAoYCdlbnRlcmluZydgLCBgJ2VudGVyZWQnYCxcbiAgICogYCdleGl0aW5nJ2AsIGAnZXhpdGVkJ2ApLCB3aGljaCBjYW4gYmUgdXNlZCB0byBhcHBseSBjb250ZXh0XG4gICAqIHNwZWNpZmljIHByb3BzIHRvIGEgY29tcG9uZW50LlxuICAgKlxuICAgKiBgYGBqc3hcbiAgICogPFRyYW5zaXRpb24gaW49e3RoaXMuc3RhdGUuaW59IHRpbWVvdXQ9ezE1MH0+XG4gICAqICAge3N0YXRlID0+IChcbiAgICogICAgIDxNeUNvbXBvbmVudCBjbGFzc05hbWU9e2BmYWRlIGZhZGUtJHtzdGF0ZX1gfSAvPlxuICAgKiAgICl9XG4gICAqIDwvVHJhbnNpdGlvbj5cbiAgICogYGBgXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCwgUHJvcFR5cGVzLmVsZW1lbnQuaXNSZXF1aXJlZF0pLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIFNob3cgdGhlIGNvbXBvbmVudDsgdHJpZ2dlcnMgdGhlIGVudGVyIG9yIGV4aXQgc3RhdGVzXG4gICAqL1xuICBpbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEJ5IGRlZmF1bHQgdGhlIGNoaWxkIGNvbXBvbmVudCBpcyBtb3VudGVkIGltbWVkaWF0ZWx5IGFsb25nIHdpdGhcbiAgICogdGhlIHBhcmVudCBgVHJhbnNpdGlvbmAgY29tcG9uZW50LiBJZiB5b3Ugd2FudCB0byBcImxhenkgbW91bnRcIiB0aGUgY29tcG9uZW50IG9uIHRoZVxuICAgKiBmaXJzdCBgaW49e3RydWV9YCB5b3UgY2FuIHNldCBgbW91bnRPbkVudGVyYC4gQWZ0ZXIgdGhlIGZpcnN0IGVudGVyIHRyYW5zaXRpb24gdGhlIGNvbXBvbmVudCB3aWxsIHN0YXlcbiAgICogbW91bnRlZCwgZXZlbiBvbiBcImV4aXRlZFwiLCB1bmxlc3MgeW91IGFsc28gc3BlY2lmeSBgdW5tb3VudE9uRXhpdGAuXG4gICAqL1xuICBtb3VudE9uRW50ZXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBCeSBkZWZhdWx0IHRoZSBjaGlsZCBjb21wb25lbnQgc3RheXMgbW91bnRlZCBhZnRlciBpdCByZWFjaGVzIHRoZSBgJ2V4aXRlZCdgIHN0YXRlLlxuICAgKiBTZXQgYHVubW91bnRPbkV4aXRgIGlmIHlvdSdkIHByZWZlciB0byB1bm1vdW50IHRoZSBjb21wb25lbnQgYWZ0ZXIgaXQgZmluaXNoZXMgZXhpdGluZy5cbiAgICovXG4gIHVubW91bnRPbkV4aXQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBOb3JtYWxseSBhIGNvbXBvbmVudCBpcyBub3QgdHJhbnNpdGlvbmVkIGlmIGl0IGlzIHNob3duIHdoZW4gdGhlIGA8VHJhbnNpdGlvbj5gIGNvbXBvbmVudCBtb3VudHMuXG4gICAqIElmIHlvdSB3YW50IHRvIHRyYW5zaXRpb24gb24gdGhlIGZpcnN0IG1vdW50IHNldCBgYXBwZWFyYCB0byBgdHJ1ZWAsIGFuZCB0aGVcbiAgICogY29tcG9uZW50IHdpbGwgdHJhbnNpdGlvbiBpbiBhcyBzb29uIGFzIHRoZSBgPFRyYW5zaXRpb24+YCBtb3VudHMuXG4gICAqXG4gICAqID4gTm90ZTogdGhlcmUgYXJlIG5vIHNwZWNpZmljIFwiYXBwZWFyXCIgc3RhdGVzLiBgYXBwZWFyYCBvbmx5IGFkZHMgYW4gYWRkaXRpb25hbCBgZW50ZXJgIHRyYW5zaXRpb24uXG4gICAqL1xuICBhcHBlYXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBFbmFibGUgb3IgZGlzYWJsZSBlbnRlciB0cmFuc2l0aW9ucy5cbiAgICovXG4gIGVudGVyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRW5hYmxlIG9yIGRpc2FibGUgZXhpdCB0cmFuc2l0aW9ucy5cbiAgICovXG4gIGV4aXQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgZHVyYXRpb24gb2YgdGhlIHRyYW5zaXRpb24sIGluIG1pbGxpc2Vjb25kcy5cbiAgICogUmVxdWlyZWQgdW5sZXNzIGBhZGRFbmRMaXN0ZW5lcmAgaXMgcHJvdmlkZWQuXG4gICAqXG4gICAqIFlvdSBtYXkgc3BlY2lmeSBhIHNpbmdsZSB0aW1lb3V0IGZvciBhbGwgdHJhbnNpdGlvbnM6XG4gICAqXG4gICAqIGBgYGpzeFxuICAgKiB0aW1lb3V0PXs1MDB9XG4gICAqIGBgYFxuICAgKlxuICAgKiBvciBpbmRpdmlkdWFsbHk6XG4gICAqXG4gICAqIGBgYGpzeFxuICAgKiB0aW1lb3V0PXt7XG4gICAqICBhcHBlYXI6IDUwMCxcbiAgICogIGVudGVyOiAzMDAsXG4gICAqICBleGl0OiA1MDAsXG4gICAqIH19XG4gICAqIGBgYFxuICAgKlxuICAgKiAtIGBhcHBlYXJgIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSBvZiBgZW50ZXJgXG4gICAqIC0gYGVudGVyYCBkZWZhdWx0cyB0byBgMGBcbiAgICogLSBgZXhpdGAgZGVmYXVsdHMgdG8gYDBgXG4gICAqXG4gICAqIEB0eXBlIHtudW1iZXIgfCB7IGVudGVyPzogbnVtYmVyLCBleGl0PzogbnVtYmVyLCBhcHBlYXI/OiBudW1iZXIgfX1cbiAgICovXG4gIHRpbWVvdXQ6IGZ1bmN0aW9uIHRpbWVvdXQocHJvcHMpIHtcbiAgICB2YXIgcHQgPSB0aW1lb3V0c1NoYXBlO1xuICAgIGlmICghcHJvcHMuYWRkRW5kTGlzdGVuZXIpIHB0ID0gcHQuaXNSZXF1aXJlZDtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBwdC5hcHBseSh2b2lkIDAsIFtwcm9wc10uY29uY2F0KGFyZ3MpKTtcbiAgfSxcblxuICAvKipcbiAgICogQWRkIGEgY3VzdG9tIHRyYW5zaXRpb24gZW5kIHRyaWdnZXIuIENhbGxlZCB3aXRoIHRoZSB0cmFuc2l0aW9uaW5nXG4gICAqIERPTSBub2RlIGFuZCBhIGBkb25lYCBjYWxsYmFjay4gQWxsb3dzIGZvciBtb3JlIGZpbmUgZ3JhaW5lZCB0cmFuc2l0aW9uIGVuZFxuICAgKiBsb2dpYy4gKipOb3RlOioqIFRpbWVvdXRzIGFyZSBzdGlsbCB1c2VkIGFzIGEgZmFsbGJhY2sgaWYgcHJvdmlkZWQuXG4gICAqXG4gICAqIGBgYGpzeFxuICAgKiBhZGRFbmRMaXN0ZW5lcj17KG5vZGUsIGRvbmUpID0+IHtcbiAgICogICAvLyB1c2UgdGhlIGNzcyB0cmFuc2l0aW9uZW5kIGV2ZW50IHRvIG1hcmsgdGhlIGZpbmlzaCBvZiBhIHRyYW5zaXRpb25cbiAgICogICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBkb25lLCBmYWxzZSk7XG4gICAqIH19XG4gICAqIGBgYFxuICAgKi9cbiAgYWRkRW5kTGlzdGVuZXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBiZWZvcmUgdGhlIFwiZW50ZXJpbmdcIiBzdGF0dXMgaXMgYXBwbGllZC4gQW4gZXh0cmEgcGFyYW1ldGVyXG4gICAqIGBpc0FwcGVhcmluZ2AgaXMgc3VwcGxpZWQgdG8gaW5kaWNhdGUgaWYgdGhlIGVudGVyIHN0YWdlIGlzIG9jY3VycmluZyBvbiB0aGUgaW5pdGlhbCBtb3VudFxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCwgaXNBcHBlYXJpbmc6IGJvb2wpIC0+IHZvaWRcbiAgICovXG4gIG9uRW50ZXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgXCJlbnRlcmluZ1wiIHN0YXR1cyBpcyBhcHBsaWVkLiBBbiBleHRyYSBwYXJhbWV0ZXJcbiAgICogYGlzQXBwZWFyaW5nYCBpcyBzdXBwbGllZCB0byBpbmRpY2F0ZSBpZiB0aGUgZW50ZXIgc3RhZ2UgaXMgb2NjdXJyaW5nIG9uIHRoZSBpbml0aWFsIG1vdW50XG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50LCBpc0FwcGVhcmluZzogYm9vbClcbiAgICovXG4gIG9uRW50ZXJpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgXCJlbnRlcmVkXCIgc3RhdHVzIGlzIGFwcGxpZWQuIEFuIGV4dHJhIHBhcmFtZXRlclxuICAgKiBgaXNBcHBlYXJpbmdgIGlzIHN1cHBsaWVkIHRvIGluZGljYXRlIGlmIHRoZSBlbnRlciBzdGFnZSBpcyBvY2N1cnJpbmcgb24gdGhlIGluaXRpYWwgbW91bnRcbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQsIGlzQXBwZWFyaW5nOiBib29sKSAtPiB2b2lkXG4gICAqL1xuICBvbkVudGVyZWQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBiZWZvcmUgdGhlIFwiZXhpdGluZ1wiIHN0YXR1cyBpcyBhcHBsaWVkLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCkgLT4gdm9pZFxuICAgKi9cbiAgb25FeGl0OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIFwiZXhpdGluZ1wiIHN0YXR1cyBpcyBhcHBsaWVkLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCkgLT4gdm9pZFxuICAgKi9cbiAgb25FeGl0aW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIFwiZXhpdGVkXCIgc3RhdHVzIGlzIGFwcGxpZWQuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50KSAtPiB2b2lkXG4gICAqL1xuICBvbkV4aXRlZDogUHJvcFR5cGVzLmZ1bmMgLy8gTmFtZSB0aGUgZnVuY3Rpb24gc28gaXQgaXMgY2xlYXJlciBpbiB0aGUgZG9jdW1lbnRhdGlvblxuXG59IDoge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5UcmFuc2l0aW9uLmRlZmF1bHRQcm9wcyA9IHtcbiAgaW46IGZhbHNlLFxuICBtb3VudE9uRW50ZXI6IGZhbHNlLFxuICB1bm1vdW50T25FeGl0OiBmYWxzZSxcbiAgYXBwZWFyOiBmYWxzZSxcbiAgZW50ZXI6IHRydWUsXG4gIGV4aXQ6IHRydWUsXG4gIG9uRW50ZXI6IG5vb3AsXG4gIG9uRW50ZXJpbmc6IG5vb3AsXG4gIG9uRW50ZXJlZDogbm9vcCxcbiAgb25FeGl0OiBub29wLFxuICBvbkV4aXRpbmc6IG5vb3AsXG4gIG9uRXhpdGVkOiBub29wXG59O1xuVHJhbnNpdGlvbi5VTk1PVU5URUQgPSAwO1xuVHJhbnNpdGlvbi5FWElURUQgPSAxO1xuVHJhbnNpdGlvbi5FTlRFUklORyA9IDI7XG5UcmFuc2l0aW9uLkVOVEVSRUQgPSAzO1xuVHJhbnNpdGlvbi5FWElUSU5HID0gNDtcbmV4cG9ydCBkZWZhdWx0IFRyYW5zaXRpb247IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0ICogYXMgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGFkZE9uZUNsYXNzIGZyb20gJ2RvbS1oZWxwZXJzL2NsYXNzL2FkZENsYXNzJztcbmltcG9ydCByZW1vdmVPbmVDbGFzcyBmcm9tICdkb20taGVscGVycy9jbGFzcy9yZW1vdmVDbGFzcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFRyYW5zaXRpb24gZnJvbSAnLi9UcmFuc2l0aW9uJztcbmltcG9ydCB7IGNsYXNzTmFtZXNTaGFwZSB9IGZyb20gJy4vdXRpbHMvUHJvcFR5cGVzJztcblxudmFyIF9hZGRDbGFzcyA9IGZ1bmN0aW9uIGFkZENsYXNzKG5vZGUsIGNsYXNzZXMpIHtcbiAgcmV0dXJuIG5vZGUgJiYgY2xhc3NlcyAmJiBjbGFzc2VzLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiBhZGRPbmVDbGFzcyhub2RlLCBjKTtcbiAgfSk7XG59O1xuXG52YXIgcmVtb3ZlQ2xhc3MgPSBmdW5jdGlvbiByZW1vdmVDbGFzcyhub2RlLCBjbGFzc2VzKSB7XG4gIHJldHVybiBub2RlICYmIGNsYXNzZXMgJiYgY2xhc3Nlcy5zcGxpdCgnICcpLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gcmVtb3ZlT25lQ2xhc3Mobm9kZSwgYyk7XG4gIH0pO1xufTtcbi8qKlxuICogQSB0cmFuc2l0aW9uIGNvbXBvbmVudCBpbnNwaXJlZCBieSB0aGUgZXhjZWxsZW50XG4gKiBbbmctYW5pbWF0ZV0oaHR0cDovL3d3dy5uZ2FuaW1hdGUub3JnLykgbGlicmFyeSwgeW91IHNob3VsZCB1c2UgaXQgaWYgeW91J3JlXG4gKiB1c2luZyBDU1MgdHJhbnNpdGlvbnMgb3IgYW5pbWF0aW9ucy4gSXQncyBidWlsdCB1cG9uIHRoZVxuICogW2BUcmFuc2l0aW9uYF0oaHR0cHM6Ly9yZWFjdGNvbW11bml0eS5vcmcvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC90cmFuc2l0aW9uKVxuICogY29tcG9uZW50LCBzbyBpdCBpbmhlcml0cyBhbGwgb2YgaXRzIHByb3BzLlxuICpcbiAqIGBDU1NUcmFuc2l0aW9uYCBhcHBsaWVzIGEgcGFpciBvZiBjbGFzcyBuYW1lcyBkdXJpbmcgdGhlIGBhcHBlYXJgLCBgZW50ZXJgLFxuICogYW5kIGBleGl0YCBzdGF0ZXMgb2YgdGhlIHRyYW5zaXRpb24uIFRoZSBmaXJzdCBjbGFzcyBpcyBhcHBsaWVkIGFuZCB0aGVuIGFcbiAqIHNlY29uZCBgKi1hY3RpdmVgIGNsYXNzIGluIG9yZGVyIHRvIGFjdGl2YXRlIHRoZSBDU1MgdHJhbnNpdGlvbi4gQWZ0ZXIgdGhlXG4gKiB0cmFuc2l0aW9uLCBtYXRjaGluZyBgKi1kb25lYCBjbGFzcyBuYW1lcyBhcmUgYXBwbGllZCB0byBwZXJzaXN0IHRoZVxuICogdHJhbnNpdGlvbiBzdGF0ZS5cbiAqXG4gKiBgYGBqc3hcbiAqIGZ1bmN0aW9uIEFwcCgpIHtcbiAqICAgY29uc3QgW2luUHJvcCwgc2V0SW5Qcm9wXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAqICAgcmV0dXJuIChcbiAqICAgICA8ZGl2PlxuICogICAgICAgPENTU1RyYW5zaXRpb24gaW49e2luUHJvcH0gdGltZW91dD17MjAwfSBjbGFzc05hbWVzPVwibXktbm9kZVwiPlxuICogICAgICAgICA8ZGl2PlxuICogICAgICAgICAgIHtcIkknbGwgcmVjZWl2ZSBteS1ub2RlLSogY2xhc3Nlc1wifVxuICogICAgICAgICA8L2Rpdj5cbiAqICAgICAgIDwvQ1NTVHJhbnNpdGlvbj5cbiAqICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIG9uQ2xpY2s9eygpID0+IHNldEluUHJvcCh0cnVlKX0+XG4gKiAgICAgICAgIENsaWNrIHRvIEVudGVyXG4gKiAgICAgICA8L2J1dHRvbj5cbiAqICAgICA8L2Rpdj5cbiAqICAgKTtcbiAqIH1cbiAqIGBgYFxuICpcbiAqIFdoZW4gdGhlIGBpbmAgcHJvcCBpcyBzZXQgdG8gYHRydWVgLCB0aGUgY2hpbGQgY29tcG9uZW50IHdpbGwgZmlyc3QgcmVjZWl2ZVxuICogdGhlIGNsYXNzIGBleGFtcGxlLWVudGVyYCwgdGhlbiB0aGUgYGV4YW1wbGUtZW50ZXItYWN0aXZlYCB3aWxsIGJlIGFkZGVkIGluXG4gKiB0aGUgbmV4dCB0aWNrLiBgQ1NTVHJhbnNpdGlvbmAgW2ZvcmNlcyBhXG4gKiByZWZsb3ddKGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvYmxvYi81MDA3MzAzZTcyOWE3NGJlNjZhMjFjM2UyMjA1ZTQ5MTY4MjE1MjRiL3NyYy9DU1NUcmFuc2l0aW9uLmpzI0wyMDgtTDIxNSlcbiAqIGJldHdlZW4gYmVmb3JlIGFkZGluZyB0aGUgYGV4YW1wbGUtZW50ZXItYWN0aXZlYC4gVGhpcyBpcyBhbiBpbXBvcnRhbnQgdHJpY2tcbiAqIGJlY2F1c2UgaXQgYWxsb3dzIHVzIHRvIHRyYW5zaXRpb24gYmV0d2VlbiBgZXhhbXBsZS1lbnRlcmAgYW5kXG4gKiBgZXhhbXBsZS1lbnRlci1hY3RpdmVgIGV2ZW4gdGhvdWdoIHRoZXkgd2VyZSBhZGRlZCBpbW1lZGlhdGVseSBvbmUgYWZ0ZXJcbiAqIGFub3RoZXIuIE1vc3Qgbm90YWJseSwgdGhpcyBpcyB3aGF0IG1ha2VzIGl0IHBvc3NpYmxlIGZvciB1cyB0byBhbmltYXRlXG4gKiBfYXBwZWFyYW5jZV8uXG4gKlxuICogYGBgY3NzXG4gKiAubXktbm9kZS1lbnRlciB7XG4gKiAgIG9wYWNpdHk6IDA7XG4gKiB9XG4gKiAubXktbm9kZS1lbnRlci1hY3RpdmUge1xuICogICBvcGFjaXR5OiAxO1xuICogICB0cmFuc2l0aW9uOiBvcGFjaXR5IDIwMG1zO1xuICogfVxuICogLm15LW5vZGUtZXhpdCB7XG4gKiAgIG9wYWNpdHk6IDE7XG4gKiB9XG4gKiAubXktbm9kZS1leGl0LWFjdGl2ZSB7XG4gKiAgIG9wYWNpdHk6IDA7XG4gKiAgIHRyYW5zaXRpb246IG9wYWNpdHkgMjAwbXM7XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBgKi1hY3RpdmVgIGNsYXNzZXMgcmVwcmVzZW50IHdoaWNoIHN0eWxlcyB5b3Ugd2FudCB0byBhbmltYXRlICoqdG8qKi5cbiAqL1xuXG5cbnZhciBDU1NUcmFuc2l0aW9uID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKENTU1RyYW5zaXRpb24sIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIENTU1RyYW5zaXRpb24oKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG4gICAgX3RoaXMuYXBwbGllZENsYXNzZXMgPSB7XG4gICAgICBhcHBlYXI6IHt9LFxuICAgICAgZW50ZXI6IHt9LFxuICAgICAgZXhpdDoge31cbiAgICB9O1xuXG4gICAgX3RoaXMub25FbnRlciA9IGZ1bmN0aW9uIChub2RlLCBhcHBlYXJpbmcpIHtcbiAgICAgIF90aGlzLnJlbW92ZUNsYXNzZXMobm9kZSwgJ2V4aXQnKTtcblxuICAgICAgX3RoaXMuYWRkQ2xhc3Mobm9kZSwgYXBwZWFyaW5nID8gJ2FwcGVhcicgOiAnZW50ZXInLCAnYmFzZScpO1xuXG4gICAgICBpZiAoX3RoaXMucHJvcHMub25FbnRlcikge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbkVudGVyKG5vZGUsIGFwcGVhcmluZyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLm9uRW50ZXJpbmcgPSBmdW5jdGlvbiAobm9kZSwgYXBwZWFyaW5nKSB7XG4gICAgICB2YXIgdHlwZSA9IGFwcGVhcmluZyA/ICdhcHBlYXInIDogJ2VudGVyJztcblxuICAgICAgX3RoaXMuYWRkQ2xhc3Mobm9kZSwgdHlwZSwgJ2FjdGl2ZScpO1xuXG4gICAgICBpZiAoX3RoaXMucHJvcHMub25FbnRlcmluZykge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbkVudGVyaW5nKG5vZGUsIGFwcGVhcmluZyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLm9uRW50ZXJlZCA9IGZ1bmN0aW9uIChub2RlLCBhcHBlYXJpbmcpIHtcbiAgICAgIHZhciB0eXBlID0gYXBwZWFyaW5nID8gJ2FwcGVhcicgOiAnZW50ZXInO1xuXG4gICAgICBfdGhpcy5yZW1vdmVDbGFzc2VzKG5vZGUsIHR5cGUpO1xuXG4gICAgICBfdGhpcy5hZGRDbGFzcyhub2RlLCB0eXBlLCAnZG9uZScpO1xuXG4gICAgICBpZiAoX3RoaXMucHJvcHMub25FbnRlcmVkKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uRW50ZXJlZChub2RlLCBhcHBlYXJpbmcpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5vbkV4aXQgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgX3RoaXMucmVtb3ZlQ2xhc3Nlcyhub2RlLCAnYXBwZWFyJyk7XG5cbiAgICAgIF90aGlzLnJlbW92ZUNsYXNzZXMobm9kZSwgJ2VudGVyJyk7XG5cbiAgICAgIF90aGlzLmFkZENsYXNzKG5vZGUsICdleGl0JywgJ2Jhc2UnKTtcblxuICAgICAgaWYgKF90aGlzLnByb3BzLm9uRXhpdCkge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbkV4aXQobm9kZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLm9uRXhpdGluZyA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICBfdGhpcy5hZGRDbGFzcyhub2RlLCAnZXhpdCcsICdhY3RpdmUnKTtcblxuICAgICAgaWYgKF90aGlzLnByb3BzLm9uRXhpdGluZykge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbkV4aXRpbmcobm9kZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLm9uRXhpdGVkID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIF90aGlzLnJlbW92ZUNsYXNzZXMobm9kZSwgJ2V4aXQnKTtcblxuICAgICAgX3RoaXMuYWRkQ2xhc3Mobm9kZSwgJ2V4aXQnLCAnZG9uZScpO1xuXG4gICAgICBpZiAoX3RoaXMucHJvcHMub25FeGl0ZWQpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25FeGl0ZWQobm9kZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLmdldENsYXNzTmFtZXMgPSBmdW5jdGlvbiAodHlwZSkge1xuICAgICAgdmFyIGNsYXNzTmFtZXMgPSBfdGhpcy5wcm9wcy5jbGFzc05hbWVzO1xuICAgICAgdmFyIGlzU3RyaW5nQ2xhc3NOYW1lcyA9IHR5cGVvZiBjbGFzc05hbWVzID09PSAnc3RyaW5nJztcbiAgICAgIHZhciBwcmVmaXggPSBpc1N0cmluZ0NsYXNzTmFtZXMgJiYgY2xhc3NOYW1lcyA/IGNsYXNzTmFtZXMgKyBcIi1cIiA6ICcnO1xuICAgICAgdmFyIGJhc2VDbGFzc05hbWUgPSBpc1N0cmluZ0NsYXNzTmFtZXMgPyBcIlwiICsgcHJlZml4ICsgdHlwZSA6IGNsYXNzTmFtZXNbdHlwZV07XG4gICAgICB2YXIgYWN0aXZlQ2xhc3NOYW1lID0gaXNTdHJpbmdDbGFzc05hbWVzID8gYmFzZUNsYXNzTmFtZSArIFwiLWFjdGl2ZVwiIDogY2xhc3NOYW1lc1t0eXBlICsgXCJBY3RpdmVcIl07XG4gICAgICB2YXIgZG9uZUNsYXNzTmFtZSA9IGlzU3RyaW5nQ2xhc3NOYW1lcyA/IGJhc2VDbGFzc05hbWUgKyBcIi1kb25lXCIgOiBjbGFzc05hbWVzW3R5cGUgKyBcIkRvbmVcIl07XG4gICAgICByZXR1cm4ge1xuICAgICAgICBiYXNlQ2xhc3NOYW1lOiBiYXNlQ2xhc3NOYW1lLFxuICAgICAgICBhY3RpdmVDbGFzc05hbWU6IGFjdGl2ZUNsYXNzTmFtZSxcbiAgICAgICAgZG9uZUNsYXNzTmFtZTogZG9uZUNsYXNzTmFtZVxuICAgICAgfTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IENTU1RyYW5zaXRpb24ucHJvdG90eXBlO1xuXG4gIF9wcm90by5hZGRDbGFzcyA9IGZ1bmN0aW9uIGFkZENsYXNzKG5vZGUsIHR5cGUsIHBoYXNlKSB7XG4gICAgdmFyIGNsYXNzTmFtZSA9IHRoaXMuZ2V0Q2xhc3NOYW1lcyh0eXBlKVtwaGFzZSArIFwiQ2xhc3NOYW1lXCJdO1xuXG4gICAgaWYgKHR5cGUgPT09ICdhcHBlYXInICYmIHBoYXNlID09PSAnZG9uZScpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBcIiBcIiArIHRoaXMuZ2V0Q2xhc3NOYW1lcygnZW50ZXInKS5kb25lQ2xhc3NOYW1lO1xuICAgIH0gLy8gVGhpcyBpcyBmb3IgdG8gZm9yY2UgYSByZXBhaW50LFxuICAgIC8vIHdoaWNoIGlzIG5lY2Vzc2FyeSBpbiBvcmRlciB0byB0cmFuc2l0aW9uIHN0eWxlcyB3aGVuIGFkZGluZyBhIGNsYXNzIG5hbWUuXG5cblxuICAgIGlmIChwaGFzZSA9PT0gJ2FjdGl2ZScpIHtcbiAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC1leHByZXNzaW9ucyAqL1xuICAgICAgbm9kZSAmJiBub2RlLnNjcm9sbFRvcDtcbiAgICB9XG5cbiAgICB0aGlzLmFwcGxpZWRDbGFzc2VzW3R5cGVdW3BoYXNlXSA9IGNsYXNzTmFtZTtcblxuICAgIF9hZGRDbGFzcyhub2RlLCBjbGFzc05hbWUpO1xuICB9O1xuXG4gIF9wcm90by5yZW1vdmVDbGFzc2VzID0gZnVuY3Rpb24gcmVtb3ZlQ2xhc3Nlcyhub2RlLCB0eXBlKSB7XG4gICAgdmFyIF90aGlzJGFwcGxpZWRDbGFzc2VzJCA9IHRoaXMuYXBwbGllZENsYXNzZXNbdHlwZV0sXG4gICAgICAgIGJhc2VDbGFzc05hbWUgPSBfdGhpcyRhcHBsaWVkQ2xhc3NlcyQuYmFzZSxcbiAgICAgICAgYWN0aXZlQ2xhc3NOYW1lID0gX3RoaXMkYXBwbGllZENsYXNzZXMkLmFjdGl2ZSxcbiAgICAgICAgZG9uZUNsYXNzTmFtZSA9IF90aGlzJGFwcGxpZWRDbGFzc2VzJC5kb25lO1xuICAgIHRoaXMuYXBwbGllZENsYXNzZXNbdHlwZV0gPSB7fTtcblxuICAgIGlmIChiYXNlQ2xhc3NOYW1lKSB7XG4gICAgICByZW1vdmVDbGFzcyhub2RlLCBiYXNlQ2xhc3NOYW1lKTtcbiAgICB9XG5cbiAgICBpZiAoYWN0aXZlQ2xhc3NOYW1lKSB7XG4gICAgICByZW1vdmVDbGFzcyhub2RlLCBhY3RpdmVDbGFzc05hbWUpO1xuICAgIH1cblxuICAgIGlmIChkb25lQ2xhc3NOYW1lKSB7XG4gICAgICByZW1vdmVDbGFzcyhub2RlLCBkb25lQ2xhc3NOYW1lKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBfID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lcyxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiY2xhc3NOYW1lc1wiXSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2l0aW9uLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgIG9uRW50ZXI6IHRoaXMub25FbnRlcixcbiAgICAgIG9uRW50ZXJlZDogdGhpcy5vbkVudGVyZWQsXG4gICAgICBvbkVudGVyaW5nOiB0aGlzLm9uRW50ZXJpbmcsXG4gICAgICBvbkV4aXQ6IHRoaXMub25FeGl0LFxuICAgICAgb25FeGl0aW5nOiB0aGlzLm9uRXhpdGluZyxcbiAgICAgIG9uRXhpdGVkOiB0aGlzLm9uRXhpdGVkXG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBDU1NUcmFuc2l0aW9uO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5DU1NUcmFuc2l0aW9uLmRlZmF1bHRQcm9wcyA9IHtcbiAgY2xhc3NOYW1lczogJydcbn07XG5DU1NUcmFuc2l0aW9uLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IF9leHRlbmRzKHt9LCBUcmFuc2l0aW9uLnByb3BUeXBlcywge1xuICAvKipcbiAgICogVGhlIGFuaW1hdGlvbiBjbGFzc05hbWVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudCBhcyBpdCBlbnRlcnMsIGV4aXRzIG9yXG4gICAqIGhhcyBmaW5pc2hlZCB0aGUgdHJhbnNpdGlvbi4gQSBzaW5nbGUgbmFtZSBjYW4gYmUgcHJvdmlkZWQgYW5kIGl0IHdpbGwgYmVcbiAgICogc3VmZml4ZWQgZm9yIGVhY2ggc3RhZ2U6IGUuZy5cbiAgICpcbiAgICogYGNsYXNzTmFtZXM9XCJmYWRlXCJgIGFwcGxpZXMgYGZhZGUtZW50ZXJgLCBgZmFkZS1lbnRlci1hY3RpdmVgLFxuICAgKiBgZmFkZS1lbnRlci1kb25lYCwgYGZhZGUtZXhpdGAsIGBmYWRlLWV4aXQtYWN0aXZlYCwgYGZhZGUtZXhpdC1kb25lYCxcbiAgICogYGZhZGUtYXBwZWFyYCwgYGZhZGUtYXBwZWFyLWFjdGl2ZWAsIGFuZCBgZmFkZS1hcHBlYXItZG9uZWAuXG4gICAqXG4gICAqICoqTm90ZSoqOiBgZmFkZS1hcHBlYXItZG9uZWAgYW5kIGBmYWRlLWVudGVyLWRvbmVgIHdpbGwgX2JvdGhfIGJlIGFwcGxpZWQuXG4gICAqIFRoaXMgYWxsb3dzIHlvdSB0byBkZWZpbmUgZGlmZmVyZW50IGJlaGF2aW9yIGZvciB3aGVuIGFwcGVhcmluZyBpcyBkb25lIGFuZFxuICAgKiB3aGVuIHJlZ3VsYXIgZW50ZXJpbmcgaXMgZG9uZSwgdXNpbmcgc2VsZWN0b3JzIGxpa2VcbiAgICogYC5mYWRlLWVudGVyLWRvbmU6bm90KC5mYWRlLWFwcGVhci1kb25lKWAuIEZvciBleGFtcGxlLCB5b3UgY291bGQgYXBwbHkgYW5cbiAgICogZXBpYyBlbnRyYW5jZSBhbmltYXRpb24gd2hlbiBlbGVtZW50IGZpcnN0IGFwcGVhcnMgaW4gdGhlIERPTSB1c2luZ1xuICAgKiBbQW5pbWF0ZS5jc3NdKGh0dHBzOi8vZGFuZWRlbi5naXRodWIuaW8vYW5pbWF0ZS5jc3MvKS4gT3RoZXJ3aXNlIHlvdSBjYW5cbiAgICogc2ltcGx5IHVzZSBgZmFkZS1lbnRlci1kb25lYCBmb3IgZGVmaW5pbmcgYm90aCBjYXNlcy5cbiAgICpcbiAgICogRWFjaCBpbmRpdmlkdWFsIGNsYXNzTmFtZXMgY2FuIGFsc28gYmUgc3BlY2lmaWVkIGluZGVwZW5kZW50bHkgbGlrZTpcbiAgICpcbiAgICogYGBganNcbiAgICogY2xhc3NOYW1lcz17e1xuICAgKiAgYXBwZWFyOiAnbXktYXBwZWFyJyxcbiAgICogIGFwcGVhckFjdGl2ZTogJ215LWFjdGl2ZS1hcHBlYXInLFxuICAgKiAgYXBwZWFyRG9uZTogJ215LWRvbmUtYXBwZWFyJyxcbiAgICogIGVudGVyOiAnbXktZW50ZXInLFxuICAgKiAgZW50ZXJBY3RpdmU6ICdteS1hY3RpdmUtZW50ZXInLFxuICAgKiAgZW50ZXJEb25lOiAnbXktZG9uZS1lbnRlcicsXG4gICAqICBleGl0OiAnbXktZXhpdCcsXG4gICAqICBleGl0QWN0aXZlOiAnbXktYWN0aXZlLWV4aXQnLFxuICAgKiAgZXhpdERvbmU6ICdteS1kb25lLWV4aXQnLFxuICAgKiB9fVxuICAgKiBgYGBcbiAgICpcbiAgICogSWYgeW91IHdhbnQgdG8gc2V0IHRoZXNlIGNsYXNzZXMgdXNpbmcgQ1NTIE1vZHVsZXM6XG4gICAqXG4gICAqIGBgYGpzXG4gICAqIGltcG9ydCBzdHlsZXMgZnJvbSAnLi9zdHlsZXMuY3NzJztcbiAgICogYGBgXG4gICAqXG4gICAqIHlvdSBtaWdodCB3YW50IHRvIHVzZSBjYW1lbENhc2UgaW4geW91ciBDU1MgZmlsZSwgdGhhdCB3YXkgY291bGQgc2ltcGx5XG4gICAqIHNwcmVhZCB0aGVtIGluc3RlYWQgb2YgbGlzdGluZyB0aGVtIG9uZSBieSBvbmU6XG4gICAqXG4gICAqIGBgYGpzXG4gICAqIGNsYXNzTmFtZXM9e3sgLi4uc3R5bGVzIH19XG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7c3RyaW5nIHwge1xuICAgKiAgYXBwZWFyPzogc3RyaW5nLFxuICAgKiAgYXBwZWFyQWN0aXZlPzogc3RyaW5nLFxuICAgKiAgYXBwZWFyRG9uZT86IHN0cmluZyxcbiAgICogIGVudGVyPzogc3RyaW5nLFxuICAgKiAgZW50ZXJBY3RpdmU/OiBzdHJpbmcsXG4gICAqICBlbnRlckRvbmU/OiBzdHJpbmcsXG4gICAqICBleGl0Pzogc3RyaW5nLFxuICAgKiAgZXhpdEFjdGl2ZT86IHN0cmluZyxcbiAgICogIGV4aXREb25lPzogc3RyaW5nLFxuICAgKiB9fVxuICAgKi9cbiAgY2xhc3NOYW1lczogY2xhc3NOYW1lc1NoYXBlLFxuXG4gIC8qKlxuICAgKiBBIGA8VHJhbnNpdGlvbj5gIGNhbGxiYWNrIGZpcmVkIGltbWVkaWF0ZWx5IGFmdGVyIHRoZSAnZW50ZXInIG9yICdhcHBlYXInIGNsYXNzIGlzXG4gICAqIGFwcGxpZWQuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50LCBpc0FwcGVhcmluZzogYm9vbClcbiAgICovXG4gIG9uRW50ZXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBBIGA8VHJhbnNpdGlvbj5gIGNhbGxiYWNrIGZpcmVkIGltbWVkaWF0ZWx5IGFmdGVyIHRoZSAnZW50ZXItYWN0aXZlJyBvclxuICAgKiAnYXBwZWFyLWFjdGl2ZScgY2xhc3MgaXMgYXBwbGllZC5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQsIGlzQXBwZWFyaW5nOiBib29sKVxuICAgKi9cbiAgb25FbnRlcmluZzogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEEgYDxUcmFuc2l0aW9uPmAgY2FsbGJhY2sgZmlyZWQgaW1tZWRpYXRlbHkgYWZ0ZXIgdGhlICdlbnRlcicgb3JcbiAgICogJ2FwcGVhcicgY2xhc3NlcyBhcmUgKipyZW1vdmVkKiogYW5kIHRoZSBgZG9uZWAgY2xhc3MgaXMgYWRkZWQgdG8gdGhlIERPTSBub2RlLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCwgaXNBcHBlYXJpbmc6IGJvb2wpXG4gICAqL1xuICBvbkVudGVyZWQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBBIGA8VHJhbnNpdGlvbj5gIGNhbGxiYWNrIGZpcmVkIGltbWVkaWF0ZWx5IGFmdGVyIHRoZSAnZXhpdCcgY2xhc3MgaXNcbiAgICogYXBwbGllZC5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQpXG4gICAqL1xuICBvbkV4aXQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBBIGA8VHJhbnNpdGlvbj5gIGNhbGxiYWNrIGZpcmVkIGltbWVkaWF0ZWx5IGFmdGVyIHRoZSAnZXhpdC1hY3RpdmUnIGlzIGFwcGxpZWQuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50KVxuICAgKi9cbiAgb25FeGl0aW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQSBgPFRyYW5zaXRpb24+YCBjYWxsYmFjayBmaXJlZCBpbW1lZGlhdGVseSBhZnRlciB0aGUgJ2V4aXQnIGNsYXNzZXNcbiAgICogYXJlICoqcmVtb3ZlZCoqIGFuZCB0aGUgYGV4aXQtZG9uZWAgY2xhc3MgaXMgYWRkZWQgdG8gdGhlIERPTSBub2RlLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudClcbiAgICovXG4gIG9uRXhpdGVkOiBQcm9wVHlwZXMuZnVuY1xufSkgOiB7fTtcbmV4cG9ydCBkZWZhdWx0IENTU1RyYW5zaXRpb247IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7XG4gIGlmIChzZWxmID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cblxuICByZXR1cm4gc2VsZjtcbn0iLCJpbXBvcnQgeyBDaGlsZHJlbiwgY2xvbmVFbGVtZW50LCBpc1ZhbGlkRWxlbWVudCB9IGZyb20gJ3JlYWN0Jztcbi8qKlxuICogR2l2ZW4gYHRoaXMucHJvcHMuY2hpbGRyZW5gLCByZXR1cm4gYW4gb2JqZWN0IG1hcHBpbmcga2V5IHRvIGNoaWxkLlxuICpcbiAqIEBwYXJhbSB7Kn0gY2hpbGRyZW4gYHRoaXMucHJvcHMuY2hpbGRyZW5gXG4gKiBAcmV0dXJuIHtvYmplY3R9IE1hcHBpbmcgb2Yga2V5IHRvIGNoaWxkXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENoaWxkTWFwcGluZyhjaGlsZHJlbiwgbWFwRm4pIHtcbiAgdmFyIG1hcHBlciA9IGZ1bmN0aW9uIG1hcHBlcihjaGlsZCkge1xuICAgIHJldHVybiBtYXBGbiAmJiBpc1ZhbGlkRWxlbWVudChjaGlsZCkgPyBtYXBGbihjaGlsZCkgOiBjaGlsZDtcbiAgfTtcblxuICB2YXIgcmVzdWx0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgaWYgKGNoaWxkcmVuKSBDaGlsZHJlbi5tYXAoY2hpbGRyZW4sIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuIGM7XG4gIH0pLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgLy8gcnVuIHRoZSBtYXAgZnVuY3Rpb24gaGVyZSBpbnN0ZWFkIHNvIHRoYXQgdGhlIGtleSBpcyB0aGUgY29tcHV0ZWQgb25lXG4gICAgcmVzdWx0W2NoaWxkLmtleV0gPSBtYXBwZXIoY2hpbGQpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbi8qKlxuICogV2hlbiB5b3UncmUgYWRkaW5nIG9yIHJlbW92aW5nIGNoaWxkcmVuIHNvbWUgbWF5IGJlIGFkZGVkIG9yIHJlbW92ZWQgaW4gdGhlXG4gKiBzYW1lIHJlbmRlciBwYXNzLiBXZSB3YW50IHRvIHNob3cgKmJvdGgqIHNpbmNlIHdlIHdhbnQgdG8gc2ltdWx0YW5lb3VzbHlcbiAqIGFuaW1hdGUgZWxlbWVudHMgaW4gYW5kIG91dC4gVGhpcyBmdW5jdGlvbiB0YWtlcyBhIHByZXZpb3VzIHNldCBvZiBrZXlzXG4gKiBhbmQgYSBuZXcgc2V0IG9mIGtleXMgYW5kIG1lcmdlcyB0aGVtIHdpdGggaXRzIGJlc3QgZ3Vlc3Mgb2YgdGhlIGNvcnJlY3RcbiAqIG9yZGVyaW5nLiBJbiB0aGUgZnV0dXJlIHdlIG1heSBleHBvc2Ugc29tZSBvZiB0aGUgdXRpbGl0aWVzIGluXG4gKiBSZWFjdE11bHRpQ2hpbGQgdG8gbWFrZSB0aGlzIGVhc3ksIGJ1dCBmb3Igbm93IFJlYWN0IGl0c2VsZiBkb2VzIG5vdFxuICogZGlyZWN0bHkgaGF2ZSB0aGlzIGNvbmNlcHQgb2YgdGhlIHVuaW9uIG9mIHByZXZDaGlsZHJlbiBhbmQgbmV4dENoaWxkcmVuXG4gKiBzbyB3ZSBpbXBsZW1lbnQgaXQgaGVyZS5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gcHJldiBwcmV2IGNoaWxkcmVuIGFzIHJldHVybmVkIGZyb21cbiAqIGBSZWFjdFRyYW5zaXRpb25DaGlsZE1hcHBpbmcuZ2V0Q2hpbGRNYXBwaW5nKClgLlxuICogQHBhcmFtIHtvYmplY3R9IG5leHQgbmV4dCBjaGlsZHJlbiBhcyByZXR1cm5lZCBmcm9tXG4gKiBgUmVhY3RUcmFuc2l0aW9uQ2hpbGRNYXBwaW5nLmdldENoaWxkTWFwcGluZygpYC5cbiAqIEByZXR1cm4ge29iamVjdH0gYSBrZXkgc2V0IHRoYXQgY29udGFpbnMgYWxsIGtleXMgaW4gYHByZXZgIGFuZCBhbGwga2V5c1xuICogaW4gYG5leHRgIGluIGEgcmVhc29uYWJsZSBvcmRlci5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VDaGlsZE1hcHBpbmdzKHByZXYsIG5leHQpIHtcbiAgcHJldiA9IHByZXYgfHwge307XG4gIG5leHQgPSBuZXh0IHx8IHt9O1xuXG4gIGZ1bmN0aW9uIGdldFZhbHVlRm9yS2V5KGtleSkge1xuICAgIHJldHVybiBrZXkgaW4gbmV4dCA/IG5leHRba2V5XSA6IHByZXZba2V5XTtcbiAgfSAvLyBGb3IgZWFjaCBrZXkgb2YgYG5leHRgLCB0aGUgbGlzdCBvZiBrZXlzIHRvIGluc2VydCBiZWZvcmUgdGhhdCBrZXkgaW5cbiAgLy8gdGhlIGNvbWJpbmVkIGxpc3RcblxuXG4gIHZhciBuZXh0S2V5c1BlbmRpbmcgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2YXIgcGVuZGluZ0tleXMgPSBbXTtcblxuICBmb3IgKHZhciBwcmV2S2V5IGluIHByZXYpIHtcbiAgICBpZiAocHJldktleSBpbiBuZXh0KSB7XG4gICAgICBpZiAocGVuZGluZ0tleXMubGVuZ3RoKSB7XG4gICAgICAgIG5leHRLZXlzUGVuZGluZ1twcmV2S2V5XSA9IHBlbmRpbmdLZXlzO1xuICAgICAgICBwZW5kaW5nS2V5cyA9IFtdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwZW5kaW5nS2V5cy5wdXNoKHByZXZLZXkpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpO1xuICB2YXIgY2hpbGRNYXBwaW5nID0ge307XG5cbiAgZm9yICh2YXIgbmV4dEtleSBpbiBuZXh0KSB7XG4gICAgaWYgKG5leHRLZXlzUGVuZGluZ1tuZXh0S2V5XSkge1xuICAgICAgZm9yIChpID0gMDsgaSA8IG5leHRLZXlzUGVuZGluZ1tuZXh0S2V5XS5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgcGVuZGluZ05leHRLZXkgPSBuZXh0S2V5c1BlbmRpbmdbbmV4dEtleV1baV07XG4gICAgICAgIGNoaWxkTWFwcGluZ1tuZXh0S2V5c1BlbmRpbmdbbmV4dEtleV1baV1dID0gZ2V0VmFsdWVGb3JLZXkocGVuZGluZ05leHRLZXkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNoaWxkTWFwcGluZ1tuZXh0S2V5XSA9IGdldFZhbHVlRm9yS2V5KG5leHRLZXkpO1xuICB9IC8vIEZpbmFsbHksIGFkZCB0aGUga2V5cyB3aGljaCBkaWRuJ3QgYXBwZWFyIGJlZm9yZSBhbnkga2V5IGluIGBuZXh0YFxuXG5cbiAgZm9yIChpID0gMDsgaSA8IHBlbmRpbmdLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgY2hpbGRNYXBwaW5nW3BlbmRpbmdLZXlzW2ldXSA9IGdldFZhbHVlRm9yS2V5KHBlbmRpbmdLZXlzW2ldKTtcbiAgfVxuXG4gIHJldHVybiBjaGlsZE1hcHBpbmc7XG59XG5cbmZ1bmN0aW9uIGdldFByb3AoY2hpbGQsIHByb3AsIHByb3BzKSB7XG4gIHJldHVybiBwcm9wc1twcm9wXSAhPSBudWxsID8gcHJvcHNbcHJvcF0gOiBjaGlsZC5wcm9wc1twcm9wXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEluaXRpYWxDaGlsZE1hcHBpbmcocHJvcHMsIG9uRXhpdGVkKSB7XG4gIHJldHVybiBnZXRDaGlsZE1hcHBpbmcocHJvcHMuY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIHJldHVybiBjbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgIG9uRXhpdGVkOiBvbkV4aXRlZC5iaW5kKG51bGwsIGNoaWxkKSxcbiAgICAgIGluOiB0cnVlLFxuICAgICAgYXBwZWFyOiBnZXRQcm9wKGNoaWxkLCAnYXBwZWFyJywgcHJvcHMpLFxuICAgICAgZW50ZXI6IGdldFByb3AoY2hpbGQsICdlbnRlcicsIHByb3BzKSxcbiAgICAgIGV4aXQ6IGdldFByb3AoY2hpbGQsICdleGl0JywgcHJvcHMpXG4gICAgfSk7XG4gIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldE5leHRDaGlsZE1hcHBpbmcobmV4dFByb3BzLCBwcmV2Q2hpbGRNYXBwaW5nLCBvbkV4aXRlZCkge1xuICB2YXIgbmV4dENoaWxkTWFwcGluZyA9IGdldENoaWxkTWFwcGluZyhuZXh0UHJvcHMuY2hpbGRyZW4pO1xuICB2YXIgY2hpbGRyZW4gPSBtZXJnZUNoaWxkTWFwcGluZ3MocHJldkNoaWxkTWFwcGluZywgbmV4dENoaWxkTWFwcGluZyk7XG4gIE9iamVjdC5rZXlzKGNoaWxkcmVuKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgY2hpbGQgPSBjaGlsZHJlbltrZXldO1xuICAgIGlmICghaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSByZXR1cm47XG4gICAgdmFyIGhhc1ByZXYgPSBrZXkgaW4gcHJldkNoaWxkTWFwcGluZztcbiAgICB2YXIgaGFzTmV4dCA9IGtleSBpbiBuZXh0Q2hpbGRNYXBwaW5nO1xuICAgIHZhciBwcmV2Q2hpbGQgPSBwcmV2Q2hpbGRNYXBwaW5nW2tleV07XG4gICAgdmFyIGlzTGVhdmluZyA9IGlzVmFsaWRFbGVtZW50KHByZXZDaGlsZCkgJiYgIXByZXZDaGlsZC5wcm9wcy5pbjsgLy8gaXRlbSBpcyBuZXcgKGVudGVyaW5nKVxuXG4gICAgaWYgKGhhc05leHQgJiYgKCFoYXNQcmV2IHx8IGlzTGVhdmluZykpIHtcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdlbnRlcmluZycsIGtleSlcbiAgICAgIGNoaWxkcmVuW2tleV0gPSBjbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgICAgb25FeGl0ZWQ6IG9uRXhpdGVkLmJpbmQobnVsbCwgY2hpbGQpLFxuICAgICAgICBpbjogdHJ1ZSxcbiAgICAgICAgZXhpdDogZ2V0UHJvcChjaGlsZCwgJ2V4aXQnLCBuZXh0UHJvcHMpLFxuICAgICAgICBlbnRlcjogZ2V0UHJvcChjaGlsZCwgJ2VudGVyJywgbmV4dFByb3BzKVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICghaGFzTmV4dCAmJiBoYXNQcmV2ICYmICFpc0xlYXZpbmcpIHtcbiAgICAgIC8vIGl0ZW0gaXMgb2xkIChleGl0aW5nKVxuICAgICAgLy8gY29uc29sZS5sb2coJ2xlYXZpbmcnLCBrZXkpXG4gICAgICBjaGlsZHJlbltrZXldID0gY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICAgIGluOiBmYWxzZVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChoYXNOZXh0ICYmIGhhc1ByZXYgJiYgaXNWYWxpZEVsZW1lbnQocHJldkNoaWxkKSkge1xuICAgICAgLy8gaXRlbSBoYXNuJ3QgY2hhbmdlZCB0cmFuc2l0aW9uIHN0YXRlc1xuICAgICAgLy8gY29weSBvdmVyIHRoZSBsYXN0IHRyYW5zaXRpb24gcHJvcHM7XG4gICAgICAvLyBjb25zb2xlLmxvZygndW5jaGFuZ2VkJywga2V5KVxuICAgICAgY2hpbGRyZW5ba2V5XSA9IGNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgICBvbkV4aXRlZDogb25FeGl0ZWQuYmluZChudWxsLCBjaGlsZCksXG4gICAgICAgIGluOiBwcmV2Q2hpbGQucHJvcHMuaW4sXG4gICAgICAgIGV4aXQ6IGdldFByb3AoY2hpbGQsICdleGl0JywgbmV4dFByb3BzKSxcbiAgICAgICAgZW50ZXI6IGdldFByb3AoY2hpbGQsICdlbnRlcicsIG5leHRQcm9wcylcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBjaGlsZHJlbjtcbn0iLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgX2Fzc2VydFRoaXNJbml0aWFsaXplZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBUcmFuc2l0aW9uR3JvdXBDb250ZXh0IGZyb20gJy4vVHJhbnNpdGlvbkdyb3VwQ29udGV4dCc7XG5pbXBvcnQgeyBnZXRDaGlsZE1hcHBpbmcsIGdldEluaXRpYWxDaGlsZE1hcHBpbmcsIGdldE5leHRDaGlsZE1hcHBpbmcgfSBmcm9tICcuL3V0aWxzL0NoaWxkTWFwcGluZyc7XG5cbnZhciB2YWx1ZXMgPSBPYmplY3QudmFsdWVzIHx8IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikubWFwKGZ1bmN0aW9uIChrKSB7XG4gICAgcmV0dXJuIG9ialtrXTtcbiAgfSk7XG59O1xuXG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBjb21wb25lbnQ6ICdkaXYnLFxuICBjaGlsZEZhY3Rvcnk6IGZ1bmN0aW9uIGNoaWxkRmFjdG9yeShjaGlsZCkge1xuICAgIHJldHVybiBjaGlsZDtcbiAgfVxuICAvKipcbiAgICogVGhlIGA8VHJhbnNpdGlvbkdyb3VwPmAgY29tcG9uZW50IG1hbmFnZXMgYSBzZXQgb2YgdHJhbnNpdGlvbiBjb21wb25lbnRzXG4gICAqIChgPFRyYW5zaXRpb24+YCBhbmQgYDxDU1NUcmFuc2l0aW9uPmApIGluIGEgbGlzdC4gTGlrZSB3aXRoIHRoZSB0cmFuc2l0aW9uXG4gICAqIGNvbXBvbmVudHMsIGA8VHJhbnNpdGlvbkdyb3VwPmAgaXMgYSBzdGF0ZSBtYWNoaW5lIGZvciBtYW5hZ2luZyB0aGUgbW91bnRpbmdcbiAgICogYW5kIHVubW91bnRpbmcgb2YgY29tcG9uZW50cyBvdmVyIHRpbWUuXG4gICAqXG4gICAqIENvbnNpZGVyIHRoZSBleGFtcGxlIGJlbG93LiBBcyBpdGVtcyBhcmUgcmVtb3ZlZCBvciBhZGRlZCB0byB0aGUgVG9kb0xpc3QgdGhlXG4gICAqIGBpbmAgcHJvcCBpcyB0b2dnbGVkIGF1dG9tYXRpY2FsbHkgYnkgdGhlIGA8VHJhbnNpdGlvbkdyb3VwPmAuXG4gICAqXG4gICAqIE5vdGUgdGhhdCBgPFRyYW5zaXRpb25Hcm91cD5gICBkb2VzIG5vdCBkZWZpbmUgYW55IGFuaW1hdGlvbiBiZWhhdmlvciFcbiAgICogRXhhY3RseSBfaG93XyBhIGxpc3QgaXRlbSBhbmltYXRlcyBpcyB1cCB0byB0aGUgaW5kaXZpZHVhbCB0cmFuc2l0aW9uXG4gICAqIGNvbXBvbmVudC4gVGhpcyBtZWFucyB5b3UgY2FuIG1peCBhbmQgbWF0Y2ggYW5pbWF0aW9ucyBhY3Jvc3MgZGlmZmVyZW50IGxpc3RcbiAgICogaXRlbXMuXG4gICAqL1xuXG59O1xuXG52YXIgVHJhbnNpdGlvbkdyb3VwID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFRyYW5zaXRpb25Hcm91cCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVHJhbnNpdGlvbkdyb3VwKHByb3BzLCBjb250ZXh0KSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpIHx8IHRoaXM7XG5cbiAgICB2YXIgaGFuZGxlRXhpdGVkID0gX3RoaXMuaGFuZGxlRXhpdGVkLmJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSkpOyAvLyBJbml0aWFsIGNoaWxkcmVuIHNob3VsZCBhbGwgYmUgZW50ZXJpbmcsIGRlcGVuZGVudCBvbiBhcHBlYXJcblxuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBjb250ZXh0VmFsdWU6IHtcbiAgICAgICAgaXNNb3VudGluZzogdHJ1ZVxuICAgICAgfSxcbiAgICAgIGhhbmRsZUV4aXRlZDogaGFuZGxlRXhpdGVkLFxuICAgICAgZmlyc3RSZW5kZXI6IHRydWVcbiAgICB9O1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBUcmFuc2l0aW9uR3JvdXAucHJvdG90eXBlO1xuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMubW91bnRlZCA9IHRydWU7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBjb250ZXh0VmFsdWU6IHtcbiAgICAgICAgaXNNb3VudGluZzogZmFsc2VcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLm1vdW50ZWQgPSBmYWxzZTtcbiAgfTtcblxuICBUcmFuc2l0aW9uR3JvdXAuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID0gZnVuY3Rpb24gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKG5leHRQcm9wcywgX3JlZikge1xuICAgIHZhciBwcmV2Q2hpbGRNYXBwaW5nID0gX3JlZi5jaGlsZHJlbixcbiAgICAgICAgaGFuZGxlRXhpdGVkID0gX3JlZi5oYW5kbGVFeGl0ZWQsXG4gICAgICAgIGZpcnN0UmVuZGVyID0gX3JlZi5maXJzdFJlbmRlcjtcbiAgICByZXR1cm4ge1xuICAgICAgY2hpbGRyZW46IGZpcnN0UmVuZGVyID8gZ2V0SW5pdGlhbENoaWxkTWFwcGluZyhuZXh0UHJvcHMsIGhhbmRsZUV4aXRlZCkgOiBnZXROZXh0Q2hpbGRNYXBwaW5nKG5leHRQcm9wcywgcHJldkNoaWxkTWFwcGluZywgaGFuZGxlRXhpdGVkKSxcbiAgICAgIGZpcnN0UmVuZGVyOiBmYWxzZVxuICAgIH07XG4gIH07XG5cbiAgX3Byb3RvLmhhbmRsZUV4aXRlZCA9IGZ1bmN0aW9uIGhhbmRsZUV4aXRlZChjaGlsZCwgbm9kZSkge1xuICAgIHZhciBjdXJyZW50Q2hpbGRNYXBwaW5nID0gZ2V0Q2hpbGRNYXBwaW5nKHRoaXMucHJvcHMuY2hpbGRyZW4pO1xuICAgIGlmIChjaGlsZC5rZXkgaW4gY3VycmVudENoaWxkTWFwcGluZykgcmV0dXJuO1xuXG4gICAgaWYgKGNoaWxkLnByb3BzLm9uRXhpdGVkKSB7XG4gICAgICBjaGlsZC5wcm9wcy5vbkV4aXRlZChub2RlKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5tb3VudGVkKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgICB2YXIgY2hpbGRyZW4gPSBfZXh0ZW5kcyh7fSwgc3RhdGUuY2hpbGRyZW4pO1xuXG4gICAgICAgIGRlbGV0ZSBjaGlsZHJlbltjaGlsZC5rZXldO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgQ29tcG9uZW50ID0gX3RoaXMkcHJvcHMuY29tcG9uZW50LFxuICAgICAgICBjaGlsZEZhY3RvcnkgPSBfdGhpcyRwcm9wcy5jaGlsZEZhY3RvcnksXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImNvbXBvbmVudFwiLCBcImNoaWxkRmFjdG9yeVwiXSk7XG5cbiAgICB2YXIgY29udGV4dFZhbHVlID0gdGhpcy5zdGF0ZS5jb250ZXh0VmFsdWU7XG4gICAgdmFyIGNoaWxkcmVuID0gdmFsdWVzKHRoaXMuc3RhdGUuY2hpbGRyZW4pLm1hcChjaGlsZEZhY3RvcnkpO1xuICAgIGRlbGV0ZSBwcm9wcy5hcHBlYXI7XG4gICAgZGVsZXRlIHByb3BzLmVudGVyO1xuICAgIGRlbGV0ZSBwcm9wcy5leGl0O1xuXG4gICAgaWYgKENvbXBvbmVudCA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbkdyb3VwQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICB2YWx1ZTogY29udGV4dFZhbHVlXG4gICAgICB9LCBjaGlsZHJlbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbkdyb3VwQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IGNvbnRleHRWYWx1ZVxuICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBwcm9wcywgY2hpbGRyZW4pKTtcbiAgfTtcblxuICByZXR1cm4gVHJhbnNpdGlvbkdyb3VwO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5UcmFuc2l0aW9uR3JvdXAucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogYDxUcmFuc2l0aW9uR3JvdXA+YCByZW5kZXJzIGEgYDxkaXY+YCBieSBkZWZhdWx0LiBZb3UgY2FuIGNoYW5nZSB0aGlzXG4gICAqIGJlaGF2aW9yIGJ5IHByb3ZpZGluZyBhIGBjb21wb25lbnRgIHByb3AuXG4gICAqIElmIHlvdSB1c2UgUmVhY3QgdjE2KyBhbmQgd291bGQgbGlrZSB0byBhdm9pZCBhIHdyYXBwaW5nIGA8ZGl2PmAgZWxlbWVudFxuICAgKiB5b3UgY2FuIHBhc3MgaW4gYGNvbXBvbmVudD17bnVsbH1gLiBUaGlzIGlzIHVzZWZ1bCBpZiB0aGUgd3JhcHBpbmcgZGl2XG4gICAqIGJvcmtzIHlvdXIgY3NzIHN0eWxlcy5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmFueSxcblxuICAvKipcbiAgICogQSBzZXQgb2YgYDxUcmFuc2l0aW9uPmAgY29tcG9uZW50cywgdGhhdCBhcmUgdG9nZ2xlZCBgaW5gIGFuZCBvdXQgYXMgdGhleVxuICAgKiBsZWF2ZS4gdGhlIGA8VHJhbnNpdGlvbkdyb3VwPmAgd2lsbCBpbmplY3Qgc3BlY2lmaWMgdHJhbnNpdGlvbiBwcm9wcywgc29cbiAgICogcmVtZW1iZXIgdG8gc3ByZWFkIHRoZW0gdGhyb3VnaCBpZiB5b3UgYXJlIHdyYXBwaW5nIHRoZSBgPFRyYW5zaXRpb24+YCBhc1xuICAgKiB3aXRoIG91ciBgPEZhZGU+YCBleGFtcGxlLlxuICAgKlxuICAgKiBXaGlsZSB0aGlzIGNvbXBvbmVudCBpcyBtZWFudCBmb3IgbXVsdGlwbGUgYFRyYW5zaXRpb25gIG9yIGBDU1NUcmFuc2l0aW9uYFxuICAgKiBjaGlsZHJlbiwgc29tZXRpbWVzIHlvdSBtYXkgd2FudCB0byBoYXZlIGEgc2luZ2xlIHRyYW5zaXRpb24gY2hpbGQgd2l0aFxuICAgKiBjb250ZW50IHRoYXQgeW91IHdhbnQgdG8gYmUgdHJhbnNpdGlvbmVkIG91dCBhbmQgaW4gd2hlbiB5b3UgY2hhbmdlIGl0XG4gICAqIChlLmcuIHJvdXRlcywgaW1hZ2VzIGV0Yy4pIEluIHRoYXQgY2FzZSB5b3UgY2FuIGNoYW5nZSB0aGUgYGtleWAgcHJvcCBvZlxuICAgKiB0aGUgdHJhbnNpdGlvbiBjaGlsZCBhcyB5b3UgY2hhbmdlIGl0cyBjb250ZW50LCB0aGlzIHdpbGwgY2F1c2VcbiAgICogYFRyYW5zaXRpb25Hcm91cGAgdG8gdHJhbnNpdGlvbiB0aGUgY2hpbGQgb3V0IGFuZCBiYWNrIGluLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBBIGNvbnZlbmllbmNlIHByb3AgdGhhdCBlbmFibGVzIG9yIGRpc2FibGVzIGFwcGVhciBhbmltYXRpb25zXG4gICAqIGZvciBhbGwgY2hpbGRyZW4uIE5vdGUgdGhhdCBzcGVjaWZ5aW5nIHRoaXMgd2lsbCBvdmVycmlkZSBhbnkgZGVmYXVsdHMgc2V0XG4gICAqIG9uIGluZGl2aWR1YWwgY2hpbGRyZW4gVHJhbnNpdGlvbnMuXG4gICAqL1xuICBhcHBlYXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBBIGNvbnZlbmllbmNlIHByb3AgdGhhdCBlbmFibGVzIG9yIGRpc2FibGVzIGVudGVyIGFuaW1hdGlvbnNcbiAgICogZm9yIGFsbCBjaGlsZHJlbi4gTm90ZSB0aGF0IHNwZWNpZnlpbmcgdGhpcyB3aWxsIG92ZXJyaWRlIGFueSBkZWZhdWx0cyBzZXRcbiAgICogb24gaW5kaXZpZHVhbCBjaGlsZHJlbiBUcmFuc2l0aW9ucy5cbiAgICovXG4gIGVudGVyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQSBjb252ZW5pZW5jZSBwcm9wIHRoYXQgZW5hYmxlcyBvciBkaXNhYmxlcyBleGl0IGFuaW1hdGlvbnNcbiAgICogZm9yIGFsbCBjaGlsZHJlbi4gTm90ZSB0aGF0IHNwZWNpZnlpbmcgdGhpcyB3aWxsIG92ZXJyaWRlIGFueSBkZWZhdWx0cyBzZXRcbiAgICogb24gaW5kaXZpZHVhbCBjaGlsZHJlbiBUcmFuc2l0aW9ucy5cbiAgICovXG4gIGV4aXQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBZb3UgbWF5IG5lZWQgdG8gYXBwbHkgcmVhY3RpdmUgdXBkYXRlcyB0byBhIGNoaWxkIGFzIGl0IGlzIGV4aXRpbmcuXG4gICAqIFRoaXMgaXMgZ2VuZXJhbGx5IGRvbmUgYnkgdXNpbmcgYGNsb25lRWxlbWVudGAgaG93ZXZlciBpbiB0aGUgY2FzZSBvZiBhbiBleGl0aW5nXG4gICAqIGNoaWxkIHRoZSBlbGVtZW50IGhhcyBhbHJlYWR5IGJlZW4gcmVtb3ZlZCBhbmQgbm90IGFjY2Vzc2libGUgdG8gdGhlIGNvbnN1bWVyLlxuICAgKlxuICAgKiBJZiB5b3UgZG8gbmVlZCB0byB1cGRhdGUgYSBjaGlsZCBhcyBpdCBsZWF2ZXMgeW91IGNhbiBwcm92aWRlIGEgYGNoaWxkRmFjdG9yeWBcbiAgICogdG8gd3JhcCBldmVyeSBjaGlsZCwgZXZlbiB0aGUgb25lcyB0aGF0IGFyZSBsZWF2aW5nLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihjaGlsZDogUmVhY3RFbGVtZW50KSAtPiBSZWFjdEVsZW1lbnRcbiAgICovXG4gIGNoaWxkRmFjdG9yeTogUHJvcFR5cGVzLmZ1bmNcbn0gOiB7fTtcblRyYW5zaXRpb25Hcm91cC5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5leHBvcnQgZGVmYXVsdCBUcmFuc2l0aW9uR3JvdXA7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgZmluZERPTU5vZGUgfSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IFRyYW5zaXRpb25Hcm91cCBmcm9tICcuL1RyYW5zaXRpb25Hcm91cCc7XG4vKipcbiAqIFRoZSBgPFJlcGxhY2VUcmFuc2l0aW9uPmAgY29tcG9uZW50IGlzIGEgc3BlY2lhbGl6ZWQgYFRyYW5zaXRpb25gIGNvbXBvbmVudFxuICogdGhhdCBhbmltYXRlcyBiZXR3ZWVuIHR3byBjaGlsZHJlbi5cbiAqXG4gKiBgYGBqc3hcbiAqIDxSZXBsYWNlVHJhbnNpdGlvbiBpbj5cbiAqICAgPEZhZGU+PGRpdj5JIGFwcGVhciBmaXJzdDwvZGl2PjwvRmFkZT5cbiAqICAgPEZhZGU+PGRpdj5JIHJlcGxhY2UgdGhlIGFib3ZlPC9kaXY+PC9GYWRlPlxuICogPC9SZXBsYWNlVHJhbnNpdGlvbj5cbiAqIGBgYFxuICovXG5cbnZhciBSZXBsYWNlVHJhbnNpdGlvbiA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShSZXBsYWNlVHJhbnNpdGlvbiwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUmVwbGFjZVRyYW5zaXRpb24oKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIF9hcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgX2FyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChfYXJncykpIHx8IHRoaXM7XG5cbiAgICBfdGhpcy5oYW5kbGVFbnRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgICBhcmdzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfdGhpcy5oYW5kbGVMaWZlY3ljbGUoJ29uRW50ZXInLCAwLCBhcmdzKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlRW50ZXJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBmb3IgKHZhciBfbGVuMyA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjMpLCBfa2V5MyA9IDA7IF9rZXkzIDwgX2xlbjM7IF9rZXkzKyspIHtcbiAgICAgICAgYXJnc1tfa2V5M10gPSBhcmd1bWVudHNbX2tleTNdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3RoaXMuaGFuZGxlTGlmZWN5Y2xlKCdvbkVudGVyaW5nJywgMCwgYXJncyk7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUVudGVyZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBmb3IgKHZhciBfbGVuNCA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjQpLCBfa2V5NCA9IDA7IF9rZXk0IDwgX2xlbjQ7IF9rZXk0KyspIHtcbiAgICAgICAgYXJnc1tfa2V5NF0gPSBhcmd1bWVudHNbX2tleTRdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3RoaXMuaGFuZGxlTGlmZWN5Y2xlKCdvbkVudGVyZWQnLCAwLCBhcmdzKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlRXhpdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAodmFyIF9sZW41ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuNSksIF9rZXk1ID0gMDsgX2tleTUgPCBfbGVuNTsgX2tleTUrKykge1xuICAgICAgICBhcmdzW19rZXk1XSA9IGFyZ3VtZW50c1tfa2V5NV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfdGhpcy5oYW5kbGVMaWZlY3ljbGUoJ29uRXhpdCcsIDEsIGFyZ3MpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVFeGl0aW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgZm9yICh2YXIgX2xlbjYgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW42KSwgX2tleTYgPSAwOyBfa2V5NiA8IF9sZW42OyBfa2V5NisrKSB7XG4gICAgICAgIGFyZ3NbX2tleTZdID0gYXJndW1lbnRzW19rZXk2XTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF90aGlzLmhhbmRsZUxpZmVjeWNsZSgnb25FeGl0aW5nJywgMSwgYXJncyk7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUV4aXRlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAodmFyIF9sZW43ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuNyksIF9rZXk3ID0gMDsgX2tleTcgPCBfbGVuNzsgX2tleTcrKykge1xuICAgICAgICBhcmdzW19rZXk3XSA9IGFyZ3VtZW50c1tfa2V5N107XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfdGhpcy5oYW5kbGVMaWZlY3ljbGUoJ29uRXhpdGVkJywgMSwgYXJncyk7XG4gICAgfTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBSZXBsYWNlVHJhbnNpdGlvbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmhhbmRsZUxpZmVjeWNsZSA9IGZ1bmN0aW9uIGhhbmRsZUxpZmVjeWNsZShoYW5kbGVyLCBpZHgsIG9yaWdpbmFsQXJncykge1xuICAgIHZhciBfY2hpbGQkcHJvcHM7XG5cbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICAgIHZhciBjaGlsZCA9IFJlYWN0LkNoaWxkcmVuLnRvQXJyYXkoY2hpbGRyZW4pW2lkeF07XG4gICAgaWYgKGNoaWxkLnByb3BzW2hhbmRsZXJdKSAoX2NoaWxkJHByb3BzID0gY2hpbGQucHJvcHMpW2hhbmRsZXJdLmFwcGx5KF9jaGlsZCRwcm9wcywgb3JpZ2luYWxBcmdzKTtcbiAgICBpZiAodGhpcy5wcm9wc1toYW5kbGVyXSkgdGhpcy5wcm9wc1toYW5kbGVyXShmaW5kRE9NTm9kZSh0aGlzKSk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICBpblByb3AgPSBfdGhpcyRwcm9wcy5pbixcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJpblwiXSk7XG5cbiAgICB2YXIgX1JlYWN0JENoaWxkcmVuJHRvQXJyID0gUmVhY3QuQ2hpbGRyZW4udG9BcnJheShjaGlsZHJlbiksXG4gICAgICAgIGZpcnN0ID0gX1JlYWN0JENoaWxkcmVuJHRvQXJyWzBdLFxuICAgICAgICBzZWNvbmQgPSBfUmVhY3QkQ2hpbGRyZW4kdG9BcnJbMV07XG5cbiAgICBkZWxldGUgcHJvcHMub25FbnRlcjtcbiAgICBkZWxldGUgcHJvcHMub25FbnRlcmluZztcbiAgICBkZWxldGUgcHJvcHMub25FbnRlcmVkO1xuICAgIGRlbGV0ZSBwcm9wcy5vbkV4aXQ7XG4gICAgZGVsZXRlIHByb3BzLm9uRXhpdGluZztcbiAgICBkZWxldGUgcHJvcHMub25FeGl0ZWQ7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbkdyb3VwLCBwcm9wcywgaW5Qcm9wID8gUmVhY3QuY2xvbmVFbGVtZW50KGZpcnN0LCB7XG4gICAgICBrZXk6ICdmaXJzdCcsXG4gICAgICBvbkVudGVyOiB0aGlzLmhhbmRsZUVudGVyLFxuICAgICAgb25FbnRlcmluZzogdGhpcy5oYW5kbGVFbnRlcmluZyxcbiAgICAgIG9uRW50ZXJlZDogdGhpcy5oYW5kbGVFbnRlcmVkXG4gICAgfSkgOiBSZWFjdC5jbG9uZUVsZW1lbnQoc2Vjb25kLCB7XG4gICAgICBrZXk6ICdzZWNvbmQnLFxuICAgICAgb25FbnRlcjogdGhpcy5oYW5kbGVFeGl0LFxuICAgICAgb25FbnRlcmluZzogdGhpcy5oYW5kbGVFeGl0aW5nLFxuICAgICAgb25FbnRlcmVkOiB0aGlzLmhhbmRsZUV4aXRlZFxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gUmVwbGFjZVRyYW5zaXRpb247XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblJlcGxhY2VUcmFuc2l0aW9uLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgaW46IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gIGNoaWxkcmVuOiBmdW5jdGlvbiBjaGlsZHJlbihwcm9wcywgcHJvcE5hbWUpIHtcbiAgICBpZiAoUmVhY3QuQ2hpbGRyZW4uY291bnQocHJvcHNbcHJvcE5hbWVdKSAhPT0gMikgcmV0dXJuIG5ldyBFcnJvcihcIlxcXCJcIiArIHByb3BOYW1lICsgXCJcXFwiIG11c3QgYmUgZXhhY3RseSB0d28gdHJhbnNpdGlvbiBjb21wb25lbnRzLlwiKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufSA6IHt9O1xuZXhwb3J0IGRlZmF1bHQgUmVwbGFjZVRyYW5zaXRpb247IiwiaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5cbnZhciBfbGVhdmVSZW5kZXJzLCBfZW50ZXJSZW5kZXJzO1xuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IEVOVEVSRUQsIEVOVEVSSU5HLCBFWElUSU5HIH0gZnJvbSAnLi9UcmFuc2l0aW9uJztcbmltcG9ydCBUcmFuc2l0aW9uR3JvdXBDb250ZXh0IGZyb20gJy4vVHJhbnNpdGlvbkdyb3VwQ29udGV4dCc7XG5cbmZ1bmN0aW9uIGFyZUNoaWxkcmVuRGlmZmVyZW50KG9sZENoaWxkcmVuLCBuZXdDaGlsZHJlbikge1xuICBpZiAob2xkQ2hpbGRyZW4gPT09IG5ld0NoaWxkcmVuKSByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKFJlYWN0LmlzVmFsaWRFbGVtZW50KG9sZENoaWxkcmVuKSAmJiBSZWFjdC5pc1ZhbGlkRWxlbWVudChuZXdDaGlsZHJlbikgJiYgb2xkQ2hpbGRyZW4ua2V5ICE9IG51bGwgJiYgb2xkQ2hpbGRyZW4ua2V5ID09PSBuZXdDaGlsZHJlbi5rZXkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cbi8qKlxuICogRW51bSBvZiBtb2RlcyBmb3IgU3dpdGNoVHJhbnNpdGlvbiBjb21wb25lbnRcbiAqIEBlbnVtIHsgc3RyaW5nIH1cbiAqL1xuXG5cbmV4cG9ydCB2YXIgbW9kZXMgPSB7XG4gIG91dDogJ291dC1pbicsXG4gIGluOiAnaW4tb3V0J1xufTtcblxudmFyIGNhbGxIb29rID0gZnVuY3Rpb24gY2FsbEhvb2soZWxlbWVudCwgbmFtZSwgY2IpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX2VsZW1lbnQkcHJvcHM7XG5cbiAgICBlbGVtZW50LnByb3BzW25hbWVdICYmIChfZWxlbWVudCRwcm9wcyA9IGVsZW1lbnQucHJvcHMpW25hbWVdLmFwcGx5KF9lbGVtZW50JHByb3BzLCBhcmd1bWVudHMpO1xuICAgIGNiKCk7XG4gIH07XG59O1xuXG52YXIgbGVhdmVSZW5kZXJzID0gKF9sZWF2ZVJlbmRlcnMgPSB7fSwgX2xlYXZlUmVuZGVyc1ttb2Rlcy5vdXRdID0gZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIGN1cnJlbnQgPSBfcmVmLmN1cnJlbnQsXG4gICAgICBjaGFuZ2VTdGF0ZSA9IF9yZWYuY2hhbmdlU3RhdGU7XG4gIHJldHVybiBSZWFjdC5jbG9uZUVsZW1lbnQoY3VycmVudCwge1xuICAgIGluOiBmYWxzZSxcbiAgICBvbkV4aXRlZDogY2FsbEhvb2soY3VycmVudCwgJ29uRXhpdGVkJywgZnVuY3Rpb24gKCkge1xuICAgICAgY2hhbmdlU3RhdGUoRU5URVJJTkcsIG51bGwpO1xuICAgIH0pXG4gIH0pO1xufSwgX2xlYXZlUmVuZGVyc1ttb2Rlcy5pbl0gPSBmdW5jdGlvbiAoX3JlZjIpIHtcbiAgdmFyIGN1cnJlbnQgPSBfcmVmMi5jdXJyZW50LFxuICAgICAgY2hhbmdlU3RhdGUgPSBfcmVmMi5jaGFuZ2VTdGF0ZSxcbiAgICAgIGNoaWxkcmVuID0gX3JlZjIuY2hpbGRyZW47XG4gIHJldHVybiBbY3VycmVudCwgUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkcmVuLCB7XG4gICAgaW46IHRydWUsXG4gICAgb25FbnRlcmVkOiBjYWxsSG9vayhjaGlsZHJlbiwgJ29uRW50ZXJlZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNoYW5nZVN0YXRlKEVOVEVSSU5HKTtcbiAgICB9KVxuICB9KV07XG59LCBfbGVhdmVSZW5kZXJzKTtcbnZhciBlbnRlclJlbmRlcnMgPSAoX2VudGVyUmVuZGVycyA9IHt9LCBfZW50ZXJSZW5kZXJzW21vZGVzLm91dF0gPSBmdW5jdGlvbiAoX3JlZjMpIHtcbiAgdmFyIGNoaWxkcmVuID0gX3JlZjMuY2hpbGRyZW4sXG4gICAgICBjaGFuZ2VTdGF0ZSA9IF9yZWYzLmNoYW5nZVN0YXRlO1xuICByZXR1cm4gUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkcmVuLCB7XG4gICAgaW46IHRydWUsXG4gICAgb25FbnRlcmVkOiBjYWxsSG9vayhjaGlsZHJlbiwgJ29uRW50ZXJlZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNoYW5nZVN0YXRlKEVOVEVSRUQsIFJlYWN0LmNsb25lRWxlbWVudChjaGlsZHJlbiwge1xuICAgICAgICBpbjogdHJ1ZVxuICAgICAgfSkpO1xuICAgIH0pXG4gIH0pO1xufSwgX2VudGVyUmVuZGVyc1ttb2Rlcy5pbl0gPSBmdW5jdGlvbiAoX3JlZjQpIHtcbiAgdmFyIGN1cnJlbnQgPSBfcmVmNC5jdXJyZW50LFxuICAgICAgY2hpbGRyZW4gPSBfcmVmNC5jaGlsZHJlbixcbiAgICAgIGNoYW5nZVN0YXRlID0gX3JlZjQuY2hhbmdlU3RhdGU7XG4gIHJldHVybiBbUmVhY3QuY2xvbmVFbGVtZW50KGN1cnJlbnQsIHtcbiAgICBpbjogZmFsc2UsXG4gICAgb25FeGl0ZWQ6IGNhbGxIb29rKGN1cnJlbnQsICdvbkV4aXRlZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNoYW5nZVN0YXRlKEVOVEVSRUQsIFJlYWN0LmNsb25lRWxlbWVudChjaGlsZHJlbiwge1xuICAgICAgICBpbjogdHJ1ZVxuICAgICAgfSkpO1xuICAgIH0pXG4gIH0pLCBSZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGRyZW4sIHtcbiAgICBpbjogdHJ1ZVxuICB9KV07XG59LCBfZW50ZXJSZW5kZXJzKTtcbi8qKlxuICogQSB0cmFuc2l0aW9uIGNvbXBvbmVudCBpbnNwaXJlZCBieSB0aGUgW3Z1ZSB0cmFuc2l0aW9uIG1vZGVzXShodHRwczovL3Z1ZWpzLm9yZy92Mi9ndWlkZS90cmFuc2l0aW9ucy5odG1sI1RyYW5zaXRpb24tTW9kZXMpLlxuICogWW91IGNhbiB1c2UgaXQgd2hlbiB5b3Ugd2FudCB0byBjb250cm9sIHRoZSByZW5kZXIgYmV0d2VlbiBzdGF0ZSB0cmFuc2l0aW9ucy5cbiAqIEJhc2VkIG9uIHRoZSBzZWxlY3RlZCBtb2RlIGFuZCB0aGUgY2hpbGQncyBrZXkgd2hpY2ggaXMgdGhlIGBUcmFuc2l0aW9uYCBvciBgQ1NTVHJhbnNpdGlvbmAgY29tcG9uZW50LCB0aGUgYFN3aXRjaFRyYW5zaXRpb25gIG1ha2VzIGEgY29uc2lzdGVudCB0cmFuc2l0aW9uIGJldHdlZW4gdGhlbS5cbiAqXG4gKiBJZiB0aGUgYG91dC1pbmAgbW9kZSBpcyBzZWxlY3RlZCwgdGhlIGBTd2l0Y2hUcmFuc2l0aW9uYCB3YWl0cyB1bnRpbCB0aGUgb2xkIGNoaWxkIGxlYXZlcyBhbmQgdGhlbiBpbnNlcnRzIGEgbmV3IGNoaWxkLlxuICogSWYgdGhlIGBpbi1vdXRgIG1vZGUgaXMgc2VsZWN0ZWQsIHRoZSBgU3dpdGNoVHJhbnNpdGlvbmAgaW5zZXJ0cyBhIG5ldyBjaGlsZCBmaXJzdCwgd2FpdHMgZm9yIHRoZSBuZXcgY2hpbGQgdG8gZW50ZXIgYW5kIHRoZW4gcmVtb3ZlcyB0aGUgb2xkIGNoaWxkXG4gKlxuICogYGBganN4XG4gKlxuICogZnVuY3Rpb24gQXBwKCkge1xuICogIGNvbnN0IFtzdGF0ZSwgc2V0U3RhdGVdID0gdXNlU3RhdGUoZmFsc2UpO1xuICogIHJldHVybiAoXG4gKiAgICA8U3dpdGNoVHJhbnNpdGlvbj5cbiAqICAgICAgPEZhZGVUcmFuc2l0aW9uIGtleT17c3RhdGUgPyBcIkdvb2RieWUsIHdvcmxkIVwiIDogXCJIZWxsbywgd29ybGQhXCJ9XG4gKiAgICAgICAgYWRkRW5kTGlzdGVuZXI9eyhub2RlLCBkb25lKSA9PiBub2RlLmFkZEV2ZW50TGlzdGVuZXIoXCJ0cmFuc2l0aW9uZW5kXCIsIGRvbmUsIGZhbHNlKX1cbiAqICAgICAgICBjbGFzc05hbWVzPSdmYWRlJyA+XG4gKiAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXsoKSA9PiBzZXRTdGF0ZShzdGF0ZSA9PiAhc3RhdGUpfT5cbiAqICAgICAgICAgIHtzdGF0ZSA/IFwiR29vZGJ5ZSwgd29ybGQhXCIgOiBcIkhlbGxvLCB3b3JsZCFcIn1cbiAqICAgICAgICA8L2J1dHRvbj5cbiAqICAgICAgPC9GYWRlVHJhbnNpdGlvbj5cbiAqICAgIDwvU3dpdGNoVHJhbnNpdGlvbj5cbiAqICApXG4gKiB9XG4gKiBgYGBcbiAqL1xuXG52YXIgU3dpdGNoVHJhbnNpdGlvbiA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShTd2l0Y2hUcmFuc2l0aW9uLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTd2l0Y2hUcmFuc2l0aW9uKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgc3RhdHVzOiBFTlRFUkVELFxuICAgICAgY3VycmVudDogbnVsbFxuICAgIH07XG4gICAgX3RoaXMuYXBwZWFyZWQgPSBmYWxzZTtcblxuICAgIF90aGlzLmNoYW5nZVN0YXRlID0gZnVuY3Rpb24gKHN0YXR1cywgY3VycmVudCkge1xuICAgICAgaWYgKGN1cnJlbnQgPT09IHZvaWQgMCkge1xuICAgICAgICBjdXJyZW50ID0gX3RoaXMuc3RhdGUuY3VycmVudDtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBzdGF0dXM6IHN0YXR1cyxcbiAgICAgICAgY3VycmVudDogY3VycmVudFxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTd2l0Y2hUcmFuc2l0aW9uLnByb3RvdHlwZTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLmFwcGVhcmVkID0gdHJ1ZTtcbiAgfTtcblxuICBTd2l0Y2hUcmFuc2l0aW9uLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9IGZ1bmN0aW9uIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhwcm9wcywgc3RhdGUpIHtcbiAgICBpZiAocHJvcHMuY2hpbGRyZW4gPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY3VycmVudDogbnVsbFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUuc3RhdHVzID09PSBFTlRFUklORyAmJiBwcm9wcy5tb2RlID09PSBtb2Rlcy5pbikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3RhdHVzOiBFTlRFUklOR1xuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUuY3VycmVudCAmJiBhcmVDaGlsZHJlbkRpZmZlcmVudChzdGF0ZS5jdXJyZW50LCBwcm9wcy5jaGlsZHJlbikpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN0YXR1czogRVhJVElOR1xuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgY3VycmVudDogUmVhY3QuY2xvbmVFbGVtZW50KHByb3BzLmNoaWxkcmVuLCB7XG4gICAgICAgIGluOiB0cnVlXG4gICAgICB9KVxuICAgIH07XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICBtb2RlID0gX3RoaXMkcHJvcHMubW9kZSxcbiAgICAgICAgX3RoaXMkc3RhdGUgPSB0aGlzLnN0YXRlLFxuICAgICAgICBzdGF0dXMgPSBfdGhpcyRzdGF0ZS5zdGF0dXMsXG4gICAgICAgIGN1cnJlbnQgPSBfdGhpcyRzdGF0ZS5jdXJyZW50O1xuICAgIHZhciBkYXRhID0ge1xuICAgICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgICAgY3VycmVudDogY3VycmVudCxcbiAgICAgIGNoYW5nZVN0YXRlOiB0aGlzLmNoYW5nZVN0YXRlLFxuICAgICAgc3RhdHVzOiBzdGF0dXNcbiAgICB9O1xuICAgIHZhciBjb21wb25lbnQ7XG5cbiAgICBzd2l0Y2ggKHN0YXR1cykge1xuICAgICAgY2FzZSBFTlRFUklORzpcbiAgICAgICAgY29tcG9uZW50ID0gZW50ZXJSZW5kZXJzW21vZGVdKGRhdGEpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBFWElUSU5HOlxuICAgICAgICBjb21wb25lbnQgPSBsZWF2ZVJlbmRlcnNbbW9kZV0oZGF0YSk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIEVOVEVSRUQ6XG4gICAgICAgIGNvbXBvbmVudCA9IGN1cnJlbnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbkdyb3VwQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IHtcbiAgICAgICAgaXNNb3VudGluZzogIXRoaXMuYXBwZWFyZWRcbiAgICAgIH1cbiAgICB9LCBjb21wb25lbnQpO1xuICB9O1xuXG4gIHJldHVybiBTd2l0Y2hUcmFuc2l0aW9uO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Td2l0Y2hUcmFuc2l0aW9uLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIFRyYW5zaXRpb24gbW9kZXMuXG4gICAqIGBvdXQtaW5gOiBDdXJyZW50IGVsZW1lbnQgdHJhbnNpdGlvbnMgb3V0IGZpcnN0LCB0aGVuIHdoZW4gY29tcGxldGUsIHRoZSBuZXcgZWxlbWVudCB0cmFuc2l0aW9ucyBpbi5cbiAgICogYGluLW91dDogTmV3IGVsZW1lbnQgdHJhbnNpdGlvbnMgaW4gZmlyc3QsIHRoZW4gd2hlbiBjb21wbGV0ZSwgdGhlIGN1cnJlbnQgZWxlbWVudCB0cmFuc2l0aW9ucyBvdXQuYFxuICAgKlxuICAgKiBAdHlwZSB7J291dC1pbid8J2luLW91dCd9XG4gICAqL1xuICBtb2RlOiBQcm9wVHlwZXMub25lT2YoW21vZGVzLmluLCBtb2Rlcy5vdXRdKSxcblxuICAvKipcbiAgICogQW55IGBUcmFuc2l0aW9uYCBvciBgQ1NTVHJhbnNpdGlvbmAgY29tcG9uZW50XG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmVsZW1lbnQuaXNSZXF1aXJlZF0pXG59IDoge307XG5Td2l0Y2hUcmFuc2l0aW9uLmRlZmF1bHRQcm9wcyA9IHtcbiAgbW9kZTogbW9kZXMub3V0XG59O1xuZXhwb3J0IGRlZmF1bHQgU3dpdGNoVHJhbnNpdGlvbjsiLCJleHBvcnQgeyBkZWZhdWx0IGFzIENTU1RyYW5zaXRpb24gfSBmcm9tICcuL0NTU1RyYW5zaXRpb24nO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBSZXBsYWNlVHJhbnNpdGlvbiB9IGZyb20gJy4vUmVwbGFjZVRyYW5zaXRpb24nO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBTd2l0Y2hUcmFuc2l0aW9uIH0gZnJvbSAnLi9Td2l0Y2hUcmFuc2l0aW9uJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgVHJhbnNpdGlvbkdyb3VwIH0gZnJvbSAnLi9UcmFuc2l0aW9uR3JvdXAnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBUcmFuc2l0aW9uIH0gZnJvbSAnLi9UcmFuc2l0aW9uJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgY29uZmlnIH0gZnJvbSAnLi9jb25maWcnOyIsIi8qIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXMgZmlsZSxcbiAqIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uICovXG5cbmltcG9ydCB7IGFjdGlvbkNyZWF0b3JzIGFzIGFjIH0gZnJvbSBcImNvbW1vbi9BY3Rpb25zLmpzbVwiO1xuaW1wb3J0IHsgRFNJbWFnZSB9IGZyb20gXCIuLi9EU0ltYWdlL0RTSW1hZ2UuanN4XCI7XG5pbXBvcnQgeyBEU0xpbmtNZW51IH0gZnJvbSBcIi4uL0RTTGlua01lbnUvRFNMaW5rTWVudVwiO1xuaW1wb3J0IHsgSW1wcmVzc2lvblN0YXRzIH0gZnJvbSBcIi4uLy4uL0Rpc2NvdmVyeVN0cmVhbUltcHJlc3Npb25TdGF0cy9JbXByZXNzaW9uU3RhdHNcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IFNhZmVBbmNob3IgfSBmcm9tIFwiLi4vU2FmZUFuY2hvci9TYWZlQW5jaG9yXCI7XG5pbXBvcnQgeyBUcmFuc2l0aW9uR3JvdXAsIENTU1RyYW5zaXRpb24gfSBmcm9tIFwicmVhY3QtdHJhbnNpdGlvbi1ncm91cFwiO1xuXG5leHBvcnQgY2xhc3MgRFNDYXJkIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuXG4gICAgdGhpcy5vbkxpbmtDbGljayA9IHRoaXMub25MaW5rQ2xpY2suYmluZCh0aGlzKTtcbiAgfVxuXG4gIG9uTGlua0NsaWNrKGV2ZW50KSB7XG4gICAgaWYgKHRoaXMucHJvcHMuZGlzcGF0Y2gpIHtcbiAgICAgIHRoaXMucHJvcHMuZGlzcGF0Y2goXG4gICAgICAgIGFjLlVzZXJFdmVudCh7XG4gICAgICAgICAgZXZlbnQ6IFwiQ0xJQ0tcIixcbiAgICAgICAgICBzb3VyY2U6IHRoaXMucHJvcHMudHlwZS50b1VwcGVyQ2FzZSgpLFxuICAgICAgICAgIGFjdGlvbl9wb3NpdGlvbjogdGhpcy5wcm9wcy5wb3MsXG4gICAgICAgIH0pXG4gICAgICApO1xuXG4gICAgICB0aGlzLnByb3BzLmRpc3BhdGNoKFxuICAgICAgICBhYy5JbXByZXNzaW9uU3RhdHMoe1xuICAgICAgICAgIHNvdXJjZTogdGhpcy5wcm9wcy50eXBlLnRvVXBwZXJDYXNlKCksXG4gICAgICAgICAgY2xpY2s6IDAsXG4gICAgICAgICAgdGlsZXM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgaWQ6IHRoaXMucHJvcHMuaWQsXG4gICAgICAgICAgICAgIHBvczogdGhpcy5wcm9wcy5wb3MsXG4gICAgICAgICAgICAgIC4uLih0aGlzLnByb3BzLnNoaW0gJiYgdGhpcy5wcm9wcy5zaGltLmNsaWNrXG4gICAgICAgICAgICAgICAgPyB7IHNoaW06IHRoaXMucHJvcHMuc2hpbS5jbGljayB9XG4gICAgICAgICAgICAgICAgOiB7fSksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9e2Bkcy1jYXJkJHt0aGlzLnByb3BzLnBsYWNlaG9sZGVyID8gXCIgcGxhY2Vob2xkZXJcIiA6IFwiXCJ9YH0+XG4gICAgICAgIDxTYWZlQW5jaG9yXG4gICAgICAgICAgY2xhc3NOYW1lPVwiZHMtY2FyZC1saW5rXCJcbiAgICAgICAgICBkaXNwYXRjaD17dGhpcy5wcm9wcy5kaXNwYXRjaH1cbiAgICAgICAgICBvbkxpbmtDbGljaz17IXRoaXMucHJvcHMucGxhY2Vob2xkZXIgPyB0aGlzLm9uTGlua0NsaWNrIDogdW5kZWZpbmVkfVxuICAgICAgICAgIHVybD17dGhpcy5wcm9wcy51cmx9XG4gICAgICAgID5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImltZy13cmFwcGVyXCI+XG4gICAgICAgICAgICA8RFNJbWFnZVxuICAgICAgICAgICAgICBleHRyYUNsYXNzTmFtZXM9XCJpbWdcIlxuICAgICAgICAgICAgICBzb3VyY2U9e3RoaXMucHJvcHMuaW1hZ2Vfc3JjfVxuICAgICAgICAgICAgICByYXdTb3VyY2U9e3RoaXMucHJvcHMucmF3X2ltYWdlX3NyY31cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtZXRhXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImluZm8td3JhcFwiPlxuICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJzb3VyY2UgY2xhbXBcIj57dGhpcy5wcm9wcy5zb3VyY2V9PC9wPlxuICAgICAgICAgICAgICA8aGVhZGVyIGNsYXNzTmFtZT1cInRpdGxlIGNsYW1wXCI+e3RoaXMucHJvcHMudGl0bGV9PC9oZWFkZXI+XG4gICAgICAgICAgICAgIHt0aGlzLnByb3BzLmV4Y2VycHQgJiYgKFxuICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cImV4Y2VycHQgY2xhbXBcIj57dGhpcy5wcm9wcy5leGNlcnB0fTwvcD5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAge3RoaXMucHJvcHMuY29udGV4dCAmJiAoXG4gICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cImNvbnRleHRcIj57dGhpcy5wcm9wcy5jb250ZXh0fTwvcD5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPEltcHJlc3Npb25TdGF0c1xuICAgICAgICAgICAgY2FtcGFpZ25JZD17dGhpcy5wcm9wcy5jYW1wYWlnbklkfVxuICAgICAgICAgICAgcm93cz17W1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaWQ6IHRoaXMucHJvcHMuaWQsXG4gICAgICAgICAgICAgICAgcG9zOiB0aGlzLnByb3BzLnBvcyxcbiAgICAgICAgICAgICAgICAuLi4odGhpcy5wcm9wcy5zaGltICYmIHRoaXMucHJvcHMuc2hpbS5pbXByZXNzaW9uXG4gICAgICAgICAgICAgICAgICA/IHsgc2hpbTogdGhpcy5wcm9wcy5zaGltLmltcHJlc3Npb24gfVxuICAgICAgICAgICAgICAgICAgOiB7fSksXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdfVxuICAgICAgICAgICAgZGlzcGF0Y2g9e3RoaXMucHJvcHMuZGlzcGF0Y2h9XG4gICAgICAgICAgICBzb3VyY2U9e3RoaXMucHJvcHMudHlwZX1cbiAgICAgICAgICAvPlxuICAgICAgICA8L1NhZmVBbmNob3I+XG4gICAgICAgIHshdGhpcy5wcm9wcy5wbGFjZWhvbGRlciAmJiAoXG4gICAgICAgICAgPERTTGlua01lbnVcbiAgICAgICAgICAgIGlkPXt0aGlzLnByb3BzLmlkfVxuICAgICAgICAgICAgaW5kZXg9e3RoaXMucHJvcHMucG9zfVxuICAgICAgICAgICAgZGlzcGF0Y2g9e3RoaXMucHJvcHMuZGlzcGF0Y2h9XG4gICAgICAgICAgICB1cmw9e3RoaXMucHJvcHMudXJsfVxuICAgICAgICAgICAgdGl0bGU9e3RoaXMucHJvcHMudGl0bGV9XG4gICAgICAgICAgICBzb3VyY2U9e3RoaXMucHJvcHMuc291cmNlfVxuICAgICAgICAgICAgdHlwZT17dGhpcy5wcm9wcy50eXBlfVxuICAgICAgICAgICAgcG9ja2V0X2lkPXt0aGlzLnByb3BzLnBvY2tldF9pZH1cbiAgICAgICAgICAgIHNoaW09e3RoaXMucHJvcHMuc2hpbX1cbiAgICAgICAgICAgIGJvb2ttYXJrR3VpZD17dGhpcy5wcm9wcy5ib29rbWFya0d1aWR9XG4gICAgICAgICAgLz5cbiAgICAgICAgKX1cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cbmV4cG9ydCBjb25zdCBQbGFjZWhvbGRlckRTQ2FyZCA9IHByb3BzID0+IDxEU0NhcmQgcGxhY2Vob2xkZXI9e3RydWV9IC8+O1xuIiwiLyogVGhpcyBTb3VyY2UgQ29kZSBGb3JtIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBNb3ppbGxhIFB1YmxpY1xuICogTGljZW5zZSwgdi4gMi4wLiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBmaWxlLFxuICogWW91IGNhbiBvYnRhaW4gb25lIGF0IGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy4gKi9cblxuaW1wb3J0IHsgYWN0aW9uQ3JlYXRvcnMgYXMgYWMsIGFjdGlvblR5cGVzIGFzIGF0IH0gZnJvbSBcImNvbW1vbi9BY3Rpb25zLmpzbVwiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuXG5leHBvcnQgY2xhc3MgRFNFbXB0eVN0YXRlIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMub25SZXNldCA9IHRoaXMub25SZXNldC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuc3RhdGUgPSB7fTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIGlmICh0aGlzLnRpbWVvdXQpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXQpO1xuICAgIH1cbiAgfVxuXG4gIG9uUmVzZXQoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMuZGlzcGF0Y2ggJiYgdGhpcy5wcm9wcy5mZWVkKSB7XG4gICAgICBjb25zdCB7IGZlZWQgfSA9IHRoaXMucHJvcHM7XG4gICAgICBjb25zdCB7IHVybCB9ID0gZmVlZDtcbiAgICAgIHRoaXMucHJvcHMuZGlzcGF0Y2goe1xuICAgICAgICB0eXBlOiBhdC5ESVNDT1ZFUllfU1RSRUFNX0ZFRURfVVBEQVRFLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgZmVlZDoge1xuICAgICAgICAgICAgLi4uZmVlZCxcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgLi4uZmVlZC5kYXRhLFxuICAgICAgICAgICAgICBzdGF0dXM6IFwid2FpdGluZ1wiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHVybCxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLnNldFN0YXRlKHsgd2FpdGluZzogdHJ1ZSB9KTtcbiAgICAgIHRoaXMudGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLnRpbWVvdXQgPSBudWxsO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICB3YWl0aW5nOiBmYWxzZSxcbiAgICAgICAgfSk7XG4gICAgICB9LCAzMDApO1xuXG4gICAgICB0aGlzLnByb3BzLmRpc3BhdGNoKFxuICAgICAgICBhYy5Pbmx5VG9NYWluKHsgdHlwZTogYXQuRElTQ09WRVJZX1NUUkVBTV9SRVRSWV9GRUVELCBkYXRhOiB7IGZlZWQgfSB9KVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICByZW5kZXJCdXR0b24oKSB7XG4gICAgaWYgKHRoaXMucHJvcHMuc3RhdHVzID09PSBcIndhaXRpbmdcIiB8fCB0aGlzLnN0YXRlLndhaXRpbmcpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxidXR0b25cbiAgICAgICAgICBjbGFzc05hbWU9XCJ0cnktYWdhaW4tYnV0dG9uIHdhaXRpbmdcIlxuICAgICAgICAgIGRhdGEtbDEwbi1pZD1cIm5ld3RhYi1kaXNjb3ZlcnktZW1wdHktc2VjdGlvbi10b3BzdG9yaWVzLWxvYWRpbmdcIlxuICAgICAgICAvPlxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGJ1dHRvblxuICAgICAgICBjbGFzc05hbWU9XCJ0cnktYWdhaW4tYnV0dG9uXCJcbiAgICAgICAgb25DbGljaz17dGhpcy5vblJlc2V0fVxuICAgICAgICBkYXRhLWwxMG4taWQ9XCJuZXd0YWItZGlzY292ZXJ5LWVtcHR5LXNlY3Rpb24tdG9wc3Rvcmllcy10cnktYWdhaW4tYnV0dG9uXCJcbiAgICAgIC8+XG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlclN0YXRlKCkge1xuICAgIGlmICh0aGlzLnByb3BzLnN0YXR1cyA9PT0gXCJ3YWl0aW5nXCIgfHwgdGhpcy5wcm9wcy5zdGF0dXMgPT09IFwiZmFpbGVkXCIpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgICAgICA8aDIgZGF0YS1sMTBuLWlkPVwibmV3dGFiLWRpc2NvdmVyeS1lbXB0eS1zZWN0aW9uLXRvcHN0b3JpZXMtdGltZWQtb3V0XCIgLz5cbiAgICAgICAgICB7dGhpcy5yZW5kZXJCdXR0b24oKX1cbiAgICAgICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgICAgPGgyIGRhdGEtbDEwbi1pZD1cIm5ld3RhYi1kaXNjb3ZlcnktZW1wdHktc2VjdGlvbi10b3BzdG9yaWVzLWhlYWRlclwiIC8+XG4gICAgICAgIDxwIGRhdGEtbDEwbi1pZD1cIm5ld3RhYi1kaXNjb3ZlcnktZW1wdHktc2VjdGlvbi10b3BzdG9yaWVzLWNvbnRlbnRcIiAvPlxuICAgICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgICApO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInNlY3Rpb24tZW1wdHktc3RhdGVcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJlbXB0eS1zdGF0ZS1tZXNzYWdlXCI+e3RoaXMucmVuZGVyU3RhdGUoKX08L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cbiIsIi8qIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXMgZmlsZSxcbiAqIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uICovXG5cbmltcG9ydCB7IERTQ2FyZCwgUGxhY2Vob2xkZXJEU0NhcmQgfSBmcm9tIFwiLi4vRFNDYXJkL0RTQ2FyZC5qc3hcIjtcbmltcG9ydCB7IERTRW1wdHlTdGF0ZSB9IGZyb20gXCIuLi9EU0VtcHR5U3RhdGUvRFNFbXB0eVN0YXRlLmpzeFwiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuXG5leHBvcnQgY2xhc3MgQ2FyZEdyaWQgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgcmVuZGVyQ2FyZHMoKSB7XG4gICAgY29uc3QgcmVjcyA9IHRoaXMucHJvcHMuZGF0YS5yZWNvbW1lbmRhdGlvbnMuc2xpY2UoMCwgdGhpcy5wcm9wcy5pdGVtcyk7XG4gICAgY29uc3QgY2FyZHMgPSBbXTtcblxuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLnByb3BzLml0ZW1zOyBpbmRleCsrKSB7XG4gICAgICBjb25zdCByZWMgPSByZWNzW2luZGV4XTtcbiAgICAgIGNhcmRzLnB1c2goXG4gICAgICAgICFyZWMgfHwgcmVjLnBsYWNlaG9sZGVyID8gKFxuICAgICAgICAgIDxQbGFjZWhvbGRlckRTQ2FyZCBrZXk9e2Bkc2NhcmQtJHtpbmRleH1gfSAvPlxuICAgICAgICApIDogKFxuICAgICAgICAgIDxEU0NhcmRcbiAgICAgICAgICAgIGtleT17YGRzY2FyZC0ke3JlYy5pZH1gfVxuICAgICAgICAgICAgcG9zPXtyZWMucG9zfVxuICAgICAgICAgICAgY2FtcGFpZ25JZD17cmVjLmNhbXBhaWduX2lkfVxuICAgICAgICAgICAgaW1hZ2Vfc3JjPXtyZWMuaW1hZ2Vfc3JjfVxuICAgICAgICAgICAgcmF3X2ltYWdlX3NyYz17cmVjLnJhd19pbWFnZV9zcmN9XG4gICAgICAgICAgICB0aXRsZT17cmVjLnRpdGxlfVxuICAgICAgICAgICAgZXhjZXJwdD17cmVjLmV4Y2VycHR9XG4gICAgICAgICAgICB1cmw9e3JlYy51cmx9XG4gICAgICAgICAgICBpZD17cmVjLmlkfVxuICAgICAgICAgICAgc2hpbT17cmVjLnNoaW19XG4gICAgICAgICAgICB0eXBlPXt0aGlzLnByb3BzLnR5cGV9XG4gICAgICAgICAgICBjb250ZXh0PXtyZWMuY29udGV4dH1cbiAgICAgICAgICAgIGRpc3BhdGNoPXt0aGlzLnByb3BzLmRpc3BhdGNofVxuICAgICAgICAgICAgc291cmNlPXtyZWMuZG9tYWlufVxuICAgICAgICAgICAgcG9ja2V0X2lkPXtyZWMucG9ja2V0X2lkfVxuICAgICAgICAgICAgYm9va21hcmtHdWlkPXtyZWMuYm9va21hcmtHdWlkfVxuICAgICAgICAgIC8+XG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuXG4gICAgbGV0IGRpdmlzaWJpbGl0eSA9IGBgO1xuXG4gICAgaWYgKHRoaXMucHJvcHMuaXRlbXMgJSA0ID09PSAwKSB7XG4gICAgICBkaXZpc2liaWxpdHkgPSBgZGl2aXNpYmxlLWJ5LTRgO1xuICAgIH0gZWxzZSBpZiAodGhpcy5wcm9wcy5pdGVtcyAlIDMgPT09IDApIHtcbiAgICAgIGRpdmlzaWJpbGl0eSA9IGBkaXZpc2libGUtYnktM2A7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXZcbiAgICAgICAgY2xhc3NOYW1lPXtgZHMtY2FyZC1ncmlkIGRzLWNhcmQtZ3JpZC0ke1xuICAgICAgICAgIHRoaXMucHJvcHMuYm9yZGVyXG4gICAgICAgIH0gZHMtY2FyZC1ncmlkLSR7ZGl2aXNpYmlsaXR5fWB9XG4gICAgICA+XG4gICAgICAgIHtjYXJkc31cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBkYXRhIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgLy8gSGFuZGxlIGEgcmVuZGVyIGJlZm9yZSBmZWVkIGhhcyBiZWVuIGZldGNoZWQgYnkgZGlzcGxheWluZyBub3RoaW5nXG4gICAgaWYgKCFkYXRhKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgdGhlIGNhc2Ugd2hlcmUgYSB1c2VyIGhhcyBkaXNtaXNzZWQgYWxsIHJlY29tbWVuZGF0aW9uc1xuICAgIGNvbnN0IGlzRW1wdHkgPSBkYXRhLnJlY29tbWVuZGF0aW9ucy5sZW5ndGggPT09IDA7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkcy1oZWFkZXJcIj57dGhpcy5wcm9wcy50aXRsZX08L2Rpdj5cbiAgICAgICAge2lzRW1wdHkgPyAoXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkcy1jYXJkLWdyaWQgZW1wdHlcIj5cbiAgICAgICAgICAgIDxEU0VtcHR5U3RhdGVcbiAgICAgICAgICAgICAgc3RhdHVzPXtkYXRhLnN0YXR1c31cbiAgICAgICAgICAgICAgZGlzcGF0Y2g9e3RoaXMucHJvcHMuZGlzcGF0Y2h9XG4gICAgICAgICAgICAgIGZlZWQ9e3RoaXMucHJvcHMuZmVlZH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICkgOiAoXG4gICAgICAgICAgdGhpcy5yZW5kZXJDYXJkcygpXG4gICAgICAgICl9XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbkNhcmRHcmlkLmRlZmF1bHRQcm9wcyA9IHtcbiAgYm9yZGVyOiBgYm9yZGVyYCxcbiAgaXRlbXM6IDQsIC8vIE51bWJlciBvZiBzdG9yaWVzIHRvIGRpc3BsYXlcbn07XG4iLCIvKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIGZpbGUsXG4gKiBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLiAqL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBTYWZlQW5jaG9yIH0gZnJvbSBcIi4uL1NhZmVBbmNob3IvU2FmZUFuY2hvclwiO1xuXG5leHBvcnQgY2xhc3MgRFNNZXNzYWdlIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJkcy1tZXNzYWdlXCI+XG4gICAgICAgIDxoZWFkZXIgY2xhc3NOYW1lPVwidGl0bGVcIj5cbiAgICAgICAgICB7dGhpcy5wcm9wcy5pY29uICYmIChcbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZ2x5cGhcIlxuICAgICAgICAgICAgICBzdHlsZT17eyBiYWNrZ3JvdW5kSW1hZ2U6IGB1cmwoJHt0aGlzLnByb3BzLmljb259KWAgfX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKX1cbiAgICAgICAgICB7dGhpcy5wcm9wcy50aXRsZSAmJiAoXG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJ0aXRsZS10ZXh0XCI+e3RoaXMucHJvcHMudGl0bGV9PC9zcGFuPlxuICAgICAgICAgICl9XG4gICAgICAgICAge3RoaXMucHJvcHMubGlua190ZXh0ICYmIHRoaXMucHJvcHMubGlua191cmwgJiYgKFxuICAgICAgICAgICAgPFNhZmVBbmNob3IgY2xhc3NOYW1lPVwibGlua1wiIHVybD17dGhpcy5wcm9wcy5saW5rX3VybH0+XG4gICAgICAgICAgICAgIHt0aGlzLnByb3BzLmxpbmtfdGV4dH1cbiAgICAgICAgICAgIDwvU2FmZUFuY2hvcj5cbiAgICAgICAgICApfVxuICAgICAgICA8L2hlYWRlcj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cbiIsIi8qIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXMgZmlsZSxcbiAqIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uICovXG5cbmltcG9ydCB7IGFjdGlvbkNyZWF0b3JzIGFzIGFjIH0gZnJvbSBcImNvbW1vbi9BY3Rpb25zLmpzbVwiO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuaW1wb3J0IHsgRFNFbXB0eVN0YXRlIH0gZnJvbSBcIi4uL0RTRW1wdHlTdGF0ZS9EU0VtcHR5U3RhdGUuanN4XCI7XG5pbXBvcnQgeyBEU0ltYWdlIH0gZnJvbSBcIi4uL0RTSW1hZ2UvRFNJbWFnZS5qc3hcIjtcbmltcG9ydCB7IERTTGlua01lbnUgfSBmcm9tIFwiLi4vRFNMaW5rTWVudS9EU0xpbmtNZW51XCI7XG5pbXBvcnQgeyBJbXByZXNzaW9uU3RhdHMgfSBmcm9tIFwiLi4vLi4vRGlzY292ZXJ5U3RyZWFtSW1wcmVzc2lvblN0YXRzL0ltcHJlc3Npb25TdGF0c1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgU2FmZUFuY2hvciB9IGZyb20gXCIuLi9TYWZlQW5jaG9yL1NhZmVBbmNob3JcIjtcblxuLyoqXG4gKiBAbm90ZSBleHBvcnRlZCBmb3IgdGVzdGluZyBvbmx5XG4gKi9cbmV4cG9ydCBjbGFzcyBMaXN0SXRlbSBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICAvLyBUT0RPIHBlcmZvcm1hbmNlOiBnZXQgZmVlZHMgdG8gc2VuZCBhcHByb3ByaWF0ZWx5IHNpemVkIGltYWdlcyByYXRoZXJcbiAgLy8gdGhhbiB3YWl0aW5nIGxvbmdlciBhbmQgc2NhbGluZyBkb3duIG9uIGNsaWVudD9cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5vbkxpbmtDbGljayA9IHRoaXMub25MaW5rQ2xpY2suYmluZCh0aGlzKTtcbiAgfVxuXG4gIG9uTGlua0NsaWNrKGV2ZW50KSB7XG4gICAgaWYgKHRoaXMucHJvcHMuZGlzcGF0Y2gpIHtcbiAgICAgIHRoaXMucHJvcHMuZGlzcGF0Y2goXG4gICAgICAgIGFjLlVzZXJFdmVudCh7XG4gICAgICAgICAgZXZlbnQ6IFwiQ0xJQ0tcIixcbiAgICAgICAgICBzb3VyY2U6IHRoaXMucHJvcHMudHlwZS50b1VwcGVyQ2FzZSgpLFxuICAgICAgICAgIGFjdGlvbl9wb3NpdGlvbjogdGhpcy5wcm9wcy5wb3MsXG4gICAgICAgIH0pXG4gICAgICApO1xuXG4gICAgICB0aGlzLnByb3BzLmRpc3BhdGNoKFxuICAgICAgICBhYy5JbXByZXNzaW9uU3RhdHMoe1xuICAgICAgICAgIHNvdXJjZTogdGhpcy5wcm9wcy50eXBlLnRvVXBwZXJDYXNlKCksXG4gICAgICAgICAgY2xpY2s6IDAsXG4gICAgICAgICAgdGlsZXM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgaWQ6IHRoaXMucHJvcHMuaWQsXG4gICAgICAgICAgICAgIHBvczogdGhpcy5wcm9wcy5wb3MsXG4gICAgICAgICAgICAgIC4uLih0aGlzLnByb3BzLnNoaW0gJiYgdGhpcy5wcm9wcy5zaGltLmNsaWNrXG4gICAgICAgICAgICAgICAgPyB7IHNoaW06IHRoaXMucHJvcHMuc2hpbS5jbGljayB9XG4gICAgICAgICAgICAgICAgOiB7fSksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGxpXG4gICAgICAgIGNsYXNzTmFtZT17YGRzLWxpc3QtaXRlbSR7XG4gICAgICAgICAgdGhpcy5wcm9wcy5wbGFjZWhvbGRlciA/IFwiIHBsYWNlaG9sZGVyXCIgOiBcIlwiXG4gICAgICAgIH1gfVxuICAgICAgPlxuICAgICAgICA8U2FmZUFuY2hvclxuICAgICAgICAgIGNsYXNzTmFtZT1cImRzLWxpc3QtaXRlbS1saW5rXCJcbiAgICAgICAgICBkaXNwYXRjaD17dGhpcy5wcm9wcy5kaXNwYXRjaH1cbiAgICAgICAgICBvbkxpbmtDbGljaz17IXRoaXMucHJvcHMucGxhY2Vob2xkZXIgPyB0aGlzLm9uTGlua0NsaWNrIDogdW5kZWZpbmVkfVxuICAgICAgICAgIHVybD17dGhpcy5wcm9wcy51cmx9XG4gICAgICAgID5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRzLWxpc3QtaXRlbS10ZXh0XCI+XG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRzLWxpc3QtaXRlbS10aXRsZSBjbGFtcFwiPnt0aGlzLnByb3BzLnRpdGxlfTwvZGl2PlxuICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5leGNlcnB0ICYmIChcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRzLWxpc3QtaXRlbS1leGNlcnB0IGNsYW1wXCI+XG4gICAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5leGNlcnB0fVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8cD5cbiAgICAgICAgICAgICAge3RoaXMucHJvcHMuY29udGV4dCAmJiAoXG4gICAgICAgICAgICAgICAgPHNwYW4+XG4gICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJkcy1saXN0LWl0ZW0tY29udGV4dCBjbGFtcFwiPlxuICAgICAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5jb250ZXh0fVxuICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJkcy1saXN0LWl0ZW0taW5mbyBjbGFtcFwiPlxuICAgICAgICAgICAgICAgIHt0aGlzLnByb3BzLmRvbWFpbn1cbiAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgPC9wPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxEU0ltYWdlXG4gICAgICAgICAgICBleHRyYUNsYXNzTmFtZXM9XCJkcy1saXN0LWltYWdlXCJcbiAgICAgICAgICAgIHNvdXJjZT17dGhpcy5wcm9wcy5pbWFnZV9zcmN9XG4gICAgICAgICAgICByYXdTb3VyY2U9e3RoaXMucHJvcHMucmF3X2ltYWdlX3NyY31cbiAgICAgICAgICAvPlxuICAgICAgICAgIDxJbXByZXNzaW9uU3RhdHNcbiAgICAgICAgICAgIGNhbXBhaWduSWQ9e3RoaXMucHJvcHMuY2FtcGFpZ25JZH1cbiAgICAgICAgICAgIHJvd3M9e1tcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlkOiB0aGlzLnByb3BzLmlkLFxuICAgICAgICAgICAgICAgIHBvczogdGhpcy5wcm9wcy5wb3MsXG4gICAgICAgICAgICAgICAgLi4uKHRoaXMucHJvcHMuc2hpbSAmJiB0aGlzLnByb3BzLnNoaW0uaW1wcmVzc2lvblxuICAgICAgICAgICAgICAgICAgPyB7IHNoaW06IHRoaXMucHJvcHMuc2hpbS5pbXByZXNzaW9uIH1cbiAgICAgICAgICAgICAgICAgIDoge30pLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXX1cbiAgICAgICAgICAgIGRpc3BhdGNoPXt0aGlzLnByb3BzLmRpc3BhdGNofVxuICAgICAgICAgICAgc291cmNlPXt0aGlzLnByb3BzLnR5cGV9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9TYWZlQW5jaG9yPlxuICAgICAgICB7IXRoaXMucHJvcHMucGxhY2Vob2xkZXIgJiYgKFxuICAgICAgICAgIDxEU0xpbmtNZW51XG4gICAgICAgICAgICBpZD17dGhpcy5wcm9wcy5pZH1cbiAgICAgICAgICAgIGluZGV4PXt0aGlzLnByb3BzLnBvc31cbiAgICAgICAgICAgIGRpc3BhdGNoPXt0aGlzLnByb3BzLmRpc3BhdGNofVxuICAgICAgICAgICAgdXJsPXt0aGlzLnByb3BzLnVybH1cbiAgICAgICAgICAgIHRpdGxlPXt0aGlzLnByb3BzLnRpdGxlfVxuICAgICAgICAgICAgc291cmNlPXt0aGlzLnByb3BzLnNvdXJjZX1cbiAgICAgICAgICAgIHR5cGU9e3RoaXMucHJvcHMudHlwZX1cbiAgICAgICAgICAgIHBvY2tldF9pZD17dGhpcy5wcm9wcy5wb2NrZXRfaWR9XG4gICAgICAgICAgICBzaGltPXt0aGlzLnByb3BzLnNoaW19XG4gICAgICAgICAgICBib29rbWFya0d1aWQ9e3RoaXMucHJvcHMuYm9va21hcmtHdWlkfVxuICAgICAgICAgIC8+XG4gICAgICAgICl9XG4gICAgICA8L2xpPlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IFBsYWNlaG9sZGVyTGlzdEl0ZW0gPSBwcm9wcyA9PiA8TGlzdEl0ZW0gcGxhY2Vob2xkZXI9e3RydWV9IC8+O1xuXG4vKipcbiAqIEBub3RlIGV4cG9ydGVkIGZvciB0ZXN0aW5nIG9ubHlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIF9MaXN0KHByb3BzKSB7XG4gIGNvbnN0IHJlbmRlckxpc3QgPSAoKSA9PiB7XG4gICAgY29uc3QgcmVjcyA9IHByb3BzLmRhdGEucmVjb21tZW5kYXRpb25zLnNsaWNlKFxuICAgICAgcHJvcHMucmVjU3RhcnRpbmdQb2ludCxcbiAgICAgIHByb3BzLnJlY1N0YXJ0aW5nUG9pbnQgKyBwcm9wcy5pdGVtc1xuICAgICk7XG4gICAgY29uc3QgcmVjTWFya3VwID0gW107XG5cbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgcHJvcHMuaXRlbXM7IGluZGV4KyspIHtcbiAgICAgIGNvbnN0IHJlYyA9IHJlY3NbaW5kZXhdO1xuICAgICAgcmVjTWFya3VwLnB1c2goXG4gICAgICAgICFyZWMgfHwgcmVjLnBsYWNlaG9sZGVyID8gKFxuICAgICAgICAgIDxQbGFjZWhvbGRlckxpc3RJdGVtIGtleT17YGRzLWxpc3QtaXRlbS0ke2luZGV4fWB9IC8+XG4gICAgICAgICkgOiAoXG4gICAgICAgICAgPExpc3RJdGVtXG4gICAgICAgICAgICBrZXk9e2Bkcy1saXN0LWl0ZW0tJHtyZWMuaWR9YH1cbiAgICAgICAgICAgIGRpc3BhdGNoPXtwcm9wcy5kaXNwYXRjaH1cbiAgICAgICAgICAgIGNhbXBhaWduSWQ9e3JlYy5jYW1wYWlnbl9pZH1cbiAgICAgICAgICAgIGRvbWFpbj17cmVjLmRvbWFpbn1cbiAgICAgICAgICAgIGV4Y2VycHQ9e3JlYy5leGNlcnB0fVxuICAgICAgICAgICAgaWQ9e3JlYy5pZH1cbiAgICAgICAgICAgIHNoaW09e3JlYy5zaGltfVxuICAgICAgICAgICAgaW1hZ2Vfc3JjPXtyZWMuaW1hZ2Vfc3JjfVxuICAgICAgICAgICAgcmF3X2ltYWdlX3NyYz17cmVjLnJhd19pbWFnZV9zcmN9XG4gICAgICAgICAgICBwb3M9e3JlYy5wb3N9XG4gICAgICAgICAgICB0aXRsZT17cmVjLnRpdGxlfVxuICAgICAgICAgICAgY29udGV4dD17cmVjLmNvbnRleHR9XG4gICAgICAgICAgICB0eXBlPXtwcm9wcy50eXBlfVxuICAgICAgICAgICAgdXJsPXtyZWMudXJsfVxuICAgICAgICAgICAgcG9ja2V0X2lkPXtyZWMucG9ja2V0X2lkfVxuICAgICAgICAgICAgYm9va21hcmtHdWlkPXtyZWMuYm9va21hcmtHdWlkfVxuICAgICAgICAgIC8+XG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuXG4gICAgY29uc3QgbGlzdFN0eWxlcyA9IFtcbiAgICAgIFwiZHMtbGlzdFwiLFxuICAgICAgcHJvcHMuZnVsbFdpZHRoID8gXCJkcy1saXN0LWZ1bGwtd2lkdGhcIiA6IFwiXCIsXG4gICAgICBwcm9wcy5oYXNCb3JkZXJzID8gXCJkcy1saXN0LWJvcmRlcnNcIiA6IFwiXCIsXG4gICAgICBwcm9wcy5oYXNJbWFnZXMgPyBcImRzLWxpc3QtaW1hZ2VzXCIgOiBcIlwiLFxuICAgICAgcHJvcHMuaGFzTnVtYmVycyA/IFwiZHMtbGlzdC1udW1iZXJzXCIgOiBcIlwiLFxuICAgIF07XG5cbiAgICByZXR1cm4gPHVsIGNsYXNzTmFtZT17bGlzdFN0eWxlcy5qb2luKFwiIFwiKX0+e3JlY01hcmt1cH08L3VsPjtcbiAgfTtcblxuICBjb25zdCB7IGRhdGEgfSA9IHByb3BzO1xuICBpZiAoIWRhdGEgfHwgIWRhdGEucmVjb21tZW5kYXRpb25zKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvLyBIYW5kbGUgdGhlIGNhc2Ugd2hlcmUgYSB1c2VyIGhhcyBkaXNtaXNzZWQgYWxsIHJlY29tbWVuZGF0aW9uc1xuICBjb25zdCBpc0VtcHR5ID0gZGF0YS5yZWNvbW1lbmRhdGlvbnMubGVuZ3RoID09PSAwO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdj5cbiAgICAgIHtwcm9wcy5oZWFkZXIgJiYgcHJvcHMuaGVhZGVyLnRpdGxlID8gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRzLWhlYWRlclwiPntwcm9wcy5oZWFkZXIudGl0bGV9PC9kaXY+XG4gICAgICApIDogbnVsbH1cbiAgICAgIHtpc0VtcHR5ID8gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRzLWxpc3QgZW1wdHlcIj5cbiAgICAgICAgICA8RFNFbXB0eVN0YXRlXG4gICAgICAgICAgICBzdGF0dXM9e2RhdGEuc3RhdHVzfVxuICAgICAgICAgICAgZGlzcGF0Y2g9e3Byb3BzLmRpc3BhdGNofVxuICAgICAgICAgICAgZmVlZD17cHJvcHMuZmVlZH1cbiAgICAgICAgICAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICkgOiAoXG4gICAgICAgIHJlbmRlckxpc3QoKVxuICAgICAgKX1cbiAgICA8L2Rpdj5cbiAgKTtcbn1cblxuX0xpc3QuZGVmYXVsdFByb3BzID0ge1xuICByZWNTdGFydGluZ1BvaW50OiAwLCAvLyBJbmRleCBvZiByZWNvbW1lbmRhdGlvbnMgdG8gc3RhcnQgZGlzcGxheWluZyBmcm9tXG4gIGZ1bGxXaWR0aDogZmFsc2UsIC8vIERpc3BsYXkgaXRlbXMgdGFraW5nIHVwIHRoZSB3aG9sZSBjb2x1bW5cbiAgaGFzQm9yZGVyczogZmFsc2UsIC8vIERpc3BsYXkgbGluZXMgc2VwYXJhdGluZyBlYWNoIGl0ZW1cbiAgaGFzSW1hZ2VzOiBmYWxzZSwgLy8gRGlzcGxheSBpbWFnZXMgZm9yIGVhY2ggaXRlbVxuICBoYXNOdW1iZXJzOiBmYWxzZSwgLy8gRGlzcGxheSBudW1iZXJzIGZvciBlYWNoIGl0ZW1cbiAgaXRlbXM6IDYsIC8vIE51bWJlciBvZiBzdG9yaWVzIHRvIGRpc3BsYXkuICBUT0RPOiBnZXQgZnJvbSBlbmRwb2ludFxufTtcblxuZXhwb3J0IGNvbnN0IExpc3QgPSBjb25uZWN0KHN0YXRlID0+ICh7XG4gIERpc2NvdmVyeVN0cmVhbTogc3RhdGUuRGlzY292ZXJ5U3RyZWFtLFxufSkpKF9MaXN0KTtcbiIsIi8qIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXMgZmlsZSxcbiAqIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uICovXG5cbmltcG9ydCB7IERTQ2FyZCwgUGxhY2Vob2xkZXJEU0NhcmQgfSBmcm9tIFwiLi4vRFNDYXJkL0RTQ2FyZC5qc3hcIjtcbmltcG9ydCB7IGFjdGlvbkNyZWF0b3JzIGFzIGFjIH0gZnJvbSBcImNvbW1vbi9BY3Rpb25zLmpzbVwiO1xuaW1wb3J0IHsgRFNFbXB0eVN0YXRlIH0gZnJvbSBcIi4uL0RTRW1wdHlTdGF0ZS9EU0VtcHR5U3RhdGUuanN4XCI7XG5pbXBvcnQgeyBEU0ltYWdlIH0gZnJvbSBcIi4uL0RTSW1hZ2UvRFNJbWFnZS5qc3hcIjtcbmltcG9ydCB7IERTTGlua01lbnUgfSBmcm9tIFwiLi4vRFNMaW5rTWVudS9EU0xpbmtNZW51XCI7XG5pbXBvcnQgeyBJbXByZXNzaW9uU3RhdHMgfSBmcm9tIFwiLi4vLi4vRGlzY292ZXJ5U3RyZWFtSW1wcmVzc2lvblN0YXRzL0ltcHJlc3Npb25TdGF0c1wiO1xuaW1wb3J0IHsgTGlzdCB9IGZyb20gXCIuLi9MaXN0L0xpc3QuanN4XCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBTYWZlQW5jaG9yIH0gZnJvbSBcIi4uL1NhZmVBbmNob3IvU2FmZUFuY2hvclwiO1xuXG5leHBvcnQgY2xhc3MgSGVybyBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLm9uTGlua0NsaWNrID0gdGhpcy5vbkxpbmtDbGljay5iaW5kKHRoaXMpO1xuICB9XG5cbiAgb25MaW5rQ2xpY2soZXZlbnQpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5kaXNwYXRjaCkge1xuICAgICAgdGhpcy5wcm9wcy5kaXNwYXRjaChcbiAgICAgICAgYWMuVXNlckV2ZW50KHtcbiAgICAgICAgICBldmVudDogXCJDTElDS1wiLFxuICAgICAgICAgIHNvdXJjZTogdGhpcy5wcm9wcy50eXBlLnRvVXBwZXJDYXNlKCksXG4gICAgICAgICAgYWN0aW9uX3Bvc2l0aW9uOiB0aGlzLmhlcm9SZWMucG9zLFxuICAgICAgICB9KVxuICAgICAgKTtcblxuICAgICAgdGhpcy5wcm9wcy5kaXNwYXRjaChcbiAgICAgICAgYWMuSW1wcmVzc2lvblN0YXRzKHtcbiAgICAgICAgICBzb3VyY2U6IHRoaXMucHJvcHMudHlwZS50b1VwcGVyQ2FzZSgpLFxuICAgICAgICAgIGNsaWNrOiAwLFxuICAgICAgICAgIHRpbGVzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGlkOiB0aGlzLmhlcm9SZWMuaWQsXG4gICAgICAgICAgICAgIHBvczogdGhpcy5oZXJvUmVjLnBvcyxcbiAgICAgICAgICAgICAgLi4uKHRoaXMuaGVyb1JlYy5zaGltICYmIHRoaXMuaGVyb1JlYy5zaGltLmNsaWNrXG4gICAgICAgICAgICAgICAgPyB7IHNoaW06IHRoaXMuaGVyb1JlYy5zaGltLmNsaWNrIH1cbiAgICAgICAgICAgICAgICA6IHt9KSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVySGVybygpIHtcbiAgICBsZXQgW2hlcm9SZWMsIC4uLm90aGVyUmVjc10gPSB0aGlzLnByb3BzLmRhdGEucmVjb21tZW5kYXRpb25zLnNsaWNlKFxuICAgICAgMCxcbiAgICAgIHRoaXMucHJvcHMuaXRlbXNcbiAgICApO1xuICAgIHRoaXMuaGVyb1JlYyA9IGhlcm9SZWM7XG5cbiAgICBjb25zdCBjYXJkcyA9IFtdO1xuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLnByb3BzLml0ZW1zIC0gMTsgaW5kZXgrKykge1xuICAgICAgY29uc3QgcmVjID0gb3RoZXJSZWNzW2luZGV4XTtcbiAgICAgIGNhcmRzLnB1c2goXG4gICAgICAgICFyZWMgfHwgcmVjLnBsYWNlaG9sZGVyID8gKFxuICAgICAgICAgIDxQbGFjZWhvbGRlckRTQ2FyZCBrZXk9e2Bkc2NhcmQtJHtpbmRleH1gfSAvPlxuICAgICAgICApIDogKFxuICAgICAgICAgIDxEU0NhcmRcbiAgICAgICAgICAgIGNhbXBhaWduSWQ9e3JlYy5jYW1wYWlnbl9pZH1cbiAgICAgICAgICAgIGtleT17YGRzY2FyZC0ke3JlYy5pZH1gfVxuICAgICAgICAgICAgaW1hZ2Vfc3JjPXtyZWMuaW1hZ2Vfc3JjfVxuICAgICAgICAgICAgcmF3X2ltYWdlX3NyYz17cmVjLnJhd19pbWFnZV9zcmN9XG4gICAgICAgICAgICB0aXRsZT17cmVjLnRpdGxlfVxuICAgICAgICAgICAgdXJsPXtyZWMudXJsfVxuICAgICAgICAgICAgaWQ9e3JlYy5pZH1cbiAgICAgICAgICAgIHNoaW09e3JlYy5zaGltfVxuICAgICAgICAgICAgcG9zPXtyZWMucG9zfVxuICAgICAgICAgICAgdHlwZT17dGhpcy5wcm9wcy50eXBlfVxuICAgICAgICAgICAgZGlzcGF0Y2g9e3RoaXMucHJvcHMuZGlzcGF0Y2h9XG4gICAgICAgICAgICBjb250ZXh0PXtyZWMuY29udGV4dH1cbiAgICAgICAgICAgIHNvdXJjZT17cmVjLmRvbWFpbn1cbiAgICAgICAgICAgIHBvY2tldF9pZD17cmVjLnBvY2tldF9pZH1cbiAgICAgICAgICAgIGJvb2ttYXJrR3VpZD17cmVjLmJvb2ttYXJrR3VpZH1cbiAgICAgICAgICAvPlxuICAgICAgICApXG4gICAgICApO1xuICAgIH1cblxuICAgIGxldCBoZXJvQ2FyZCA9IG51bGw7XG5cbiAgICBpZiAoIWhlcm9SZWMgfHwgaGVyb1JlYy5wbGFjZWhvbGRlcikge1xuICAgICAgaGVyb0NhcmQgPSA8UGxhY2Vob2xkZXJEU0NhcmQgLz47XG4gICAgfSBlbHNlIHtcbiAgICAgIGhlcm9DYXJkID0gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRzLWhlcm8taXRlbVwiIGtleT17YGRzY2FyZC0ke2hlcm9SZWMuaWR9YH0+XG4gICAgICAgICAgPFNhZmVBbmNob3JcbiAgICAgICAgICAgIGNsYXNzTmFtZT1cIndyYXBwZXJcIlxuICAgICAgICAgICAgZGlzcGF0Y2g9e3RoaXMucHJvcHMuZGlzcGF0Y2h9XG4gICAgICAgICAgICBvbkxpbmtDbGljaz17dGhpcy5vbkxpbmtDbGlja31cbiAgICAgICAgICAgIHVybD17aGVyb1JlYy51cmx9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbWctd3JhcHBlclwiPlxuICAgICAgICAgICAgICA8RFNJbWFnZVxuICAgICAgICAgICAgICAgIGV4dHJhQ2xhc3NOYW1lcz1cImltZ1wiXG4gICAgICAgICAgICAgICAgc291cmNlPXtoZXJvUmVjLmltYWdlX3NyY31cbiAgICAgICAgICAgICAgICByYXdTb3VyY2U9e2hlcm9SZWMucmF3X2ltYWdlX3NyY31cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtZXRhXCI+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaGVhZGVyLWFuZC1leGNlcnB0XCI+XG4gICAgICAgICAgICAgICAge2hlcm9SZWMuY29udGV4dCA/IChcbiAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cImNvbnRleHRcIj57aGVyb1JlYy5jb250ZXh0fTwvcD5cbiAgICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwic291cmNlIGNsYW1wXCI+e2hlcm9SZWMuZG9tYWlufTwvcD5cbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgIDxoZWFkZXIgY2xhc3NOYW1lPVwiY2xhbXBcIj57aGVyb1JlYy50aXRsZX08L2hlYWRlcj5cbiAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJleGNlcnB0IGNsYW1wXCI+e2hlcm9SZWMuZXhjZXJwdH08L3A+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8SW1wcmVzc2lvblN0YXRzXG4gICAgICAgICAgICAgIGNhbXBhaWduSWQ9e2hlcm9SZWMuY2FtcGFpZ25faWR9XG4gICAgICAgICAgICAgIHJvd3M9e1tcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBpZDogaGVyb1JlYy5pZCxcbiAgICAgICAgICAgICAgICAgIHBvczogaGVyb1JlYy5wb3MsXG4gICAgICAgICAgICAgICAgICAuLi4oaGVyb1JlYy5zaGltICYmIGhlcm9SZWMuc2hpbS5pbXByZXNzaW9uXG4gICAgICAgICAgICAgICAgICAgID8geyBzaGltOiBoZXJvUmVjLnNoaW0uaW1wcmVzc2lvbiB9XG4gICAgICAgICAgICAgICAgICAgIDoge30pLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIF19XG4gICAgICAgICAgICAgIGRpc3BhdGNoPXt0aGlzLnByb3BzLmRpc3BhdGNofVxuICAgICAgICAgICAgICBzb3VyY2U9e3RoaXMucHJvcHMudHlwZX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9TYWZlQW5jaG9yPlxuICAgICAgICAgIDxEU0xpbmtNZW51XG4gICAgICAgICAgICBpZD17aGVyb1JlYy5pZH1cbiAgICAgICAgICAgIGluZGV4PXtoZXJvUmVjLnBvc31cbiAgICAgICAgICAgIGRpc3BhdGNoPXt0aGlzLnByb3BzLmRpc3BhdGNofVxuICAgICAgICAgICAgdXJsPXtoZXJvUmVjLnVybH1cbiAgICAgICAgICAgIHRpdGxlPXtoZXJvUmVjLnRpdGxlfVxuICAgICAgICAgICAgc291cmNlPXtoZXJvUmVjLmRvbWFpbn1cbiAgICAgICAgICAgIHR5cGU9e3RoaXMucHJvcHMudHlwZX1cbiAgICAgICAgICAgIHBvY2tldF9pZD17aGVyb1JlYy5wb2NrZXRfaWR9XG4gICAgICAgICAgICBzaGltPXtoZXJvUmVjLnNoaW19XG4gICAgICAgICAgICBib29rbWFya0d1aWQ9e2hlcm9SZWMuYm9va21hcmtHdWlkfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKTtcbiAgICB9XG5cbiAgICBsZXQgbGlzdCA9IChcbiAgICAgIDxMaXN0XG4gICAgICAgIHJlY1N0YXJ0aW5nUG9pbnQ9ezF9XG4gICAgICAgIGRhdGE9e3RoaXMucHJvcHMuZGF0YX1cbiAgICAgICAgZmVlZD17dGhpcy5wcm9wcy5mZWVkfVxuICAgICAgICBoYXNJbWFnZXM9e3RydWV9XG4gICAgICAgIGhhc0JvcmRlcnM9e3RoaXMucHJvcHMuYm9yZGVyID09PSBgYm9yZGVyYH1cbiAgICAgICAgaXRlbXM9e3RoaXMucHJvcHMuaXRlbXMgLSAxfVxuICAgICAgICB0eXBlPXtgSGVyb2B9XG4gICAgICAvPlxuICAgICk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9e2Bkcy1oZXJvIGRzLWhlcm8tJHt0aGlzLnByb3BzLmJvcmRlcn1gfT5cbiAgICAgICAge2hlcm9DYXJkfVxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17YCR7dGhpcy5wcm9wcy5zdWJDb21wb25lbnRUeXBlfWB9PlxuICAgICAgICAgIHt0aGlzLnByb3BzLnN1YkNvbXBvbmVudFR5cGUgPT09IGBjYXJkc2AgPyBjYXJkcyA6IGxpc3R9XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGRhdGEgfSA9IHRoaXMucHJvcHM7XG5cbiAgICAvLyBIYW5kbGUgYSByZW5kZXIgYmVmb3JlIGZlZWQgaGFzIGJlZW4gZmV0Y2hlZCBieSBkaXNwbGF5aW5nIG5vdGhpbmdcbiAgICBpZiAoIWRhdGEgfHwgIWRhdGEucmVjb21tZW5kYXRpb25zKSB7XG4gICAgICByZXR1cm4gPGRpdiAvPjtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgdGhlIGNhc2Ugd2hlcmUgYSB1c2VyIGhhcyBkaXNtaXNzZWQgYWxsIHJlY29tbWVuZGF0aW9uc1xuICAgIGNvbnN0IGlzRW1wdHkgPSBkYXRhLnJlY29tbWVuZGF0aW9ucy5sZW5ndGggPT09IDA7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkcy1oZWFkZXJcIj57dGhpcy5wcm9wcy50aXRsZX08L2Rpdj5cbiAgICAgICAge2lzRW1wdHkgPyAoXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkcy1oZXJvIGVtcHR5XCI+XG4gICAgICAgICAgICA8RFNFbXB0eVN0YXRlXG4gICAgICAgICAgICAgIHN0YXR1cz17ZGF0YS5zdGF0dXN9XG4gICAgICAgICAgICAgIGRpc3BhdGNoPXt0aGlzLnByb3BzLmRpc3BhdGNofVxuICAgICAgICAgICAgICBmZWVkPXt0aGlzLnByb3BzLmZlZWR9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApIDogKFxuICAgICAgICAgIHRoaXMucmVuZGVySGVybygpXG4gICAgICAgICl9XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbkhlcm8uZGVmYXVsdFByb3BzID0ge1xuICBkYXRhOiB7fSxcbiAgYm9yZGVyOiBgYm9yZGVyYCxcbiAgaXRlbXM6IDEsIC8vIE51bWJlciBvZiBzdG9yaWVzIHRvIGRpc3BsYXlcbn07XG4iLCIvKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIGZpbGUsXG4gKiBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLiAqL1xuXG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBTZWN0aW9uSW50bCB9IGZyb20gXCJjb250ZW50LXNyYy9jb21wb25lbnRzL1NlY3Rpb25zL1NlY3Rpb25zXCI7XG5cbmV4cG9ydCBjbGFzcyBfSGlnaGxpZ2h0cyBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICByZW5kZXIoKSB7XG4gICAgY29uc3Qgc2VjdGlvbiA9IHRoaXMucHJvcHMuU2VjdGlvbnMuZmluZChzID0+IHMuaWQgPT09IFwiaGlnaGxpZ2h0c1wiKTtcbiAgICBpZiAoIXNlY3Rpb24gfHwgIXNlY3Rpb24uZW5hYmxlZCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZHMtaGlnaGxpZ2h0cyBzZWN0aW9ucy1saXN0XCI+XG4gICAgICAgIDxTZWN0aW9uSW50bCB7Li4uc2VjdGlvbn0gaXNGaXhlZD17dHJ1ZX0gLz5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IEhpZ2hsaWdodHMgPSBjb25uZWN0KHN0YXRlID0+ICh7IFNlY3Rpb25zOiBzdGF0ZS5TZWN0aW9ucyB9KSkoXG4gIF9IaWdobGlnaHRzXG4pO1xuIiwiLyogVGhpcyBTb3VyY2UgQ29kZSBGb3JtIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBNb3ppbGxhIFB1YmxpY1xuICogTGljZW5zZSwgdi4gMi4wLiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBmaWxlLFxuICogWW91IGNhbiBvYnRhaW4gb25lIGF0IGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy4gKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuXG5leHBvcnQgY2xhc3MgSG9yaXpvbnRhbFJ1bGUgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiA8aHIgY2xhc3NOYW1lPVwiZHMtaHJcIiAvPjtcbiAgfVxufVxuIiwiLyogVGhpcyBTb3VyY2UgQ29kZSBGb3JtIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBNb3ppbGxhIFB1YmxpY1xuICogTGljZW5zZSwgdi4gMi4wLiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBmaWxlLFxuICogWW91IGNhbiBvYnRhaW4gb25lIGF0IGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy4gKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgU2FmZUFuY2hvciB9IGZyb20gXCIuLi9TYWZlQW5jaG9yL1NhZmVBbmNob3JcIjtcblxuZXhwb3J0IGNsYXNzIFRvcGljIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IHVybCwgbmFtZSB9ID0gdGhpcy5wcm9wcztcbiAgICByZXR1cm4gKFxuICAgICAgPGxpPlxuICAgICAgICA8U2FmZUFuY2hvciBrZXk9e25hbWV9IHVybD17dXJsfT5cbiAgICAgICAgICB7bmFtZX1cbiAgICAgICAgPC9TYWZlQW5jaG9yPlxuICAgICAgPC9saT5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBOYXZpZ2F0aW9uIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGxpbmtzIH0gPSB0aGlzLnByb3BzIHx8IFtdO1xuICAgIGNvbnN0IHsgYWxpZ25tZW50IH0gPSB0aGlzLnByb3BzIHx8IFwiY2VudGVyZWRcIjtcbiAgICBjb25zdCBoZWFkZXIgPSB0aGlzLnByb3BzLmhlYWRlciB8fCB7fTtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9e2Bkcy1uYXZpZ2F0aW9uIGRzLW5hdmlnYXRpb24tJHthbGlnbm1lbnR9YH0+XG4gICAgICAgIHtoZWFkZXIudGl0bGUgPyA8ZGl2IGNsYXNzTmFtZT1cImRzLWhlYWRlclwiPntoZWFkZXIudGl0bGV9PC9kaXY+IDogbnVsbH1cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICA8dWw+XG4gICAgICAgICAgICB7bGlua3MgJiZcbiAgICAgICAgICAgICAgbGlua3MubWFwKHQgPT4gPFRvcGljIGtleT17dC5uYW1lfSB1cmw9e3QudXJsfSBuYW1lPXt0Lm5hbWV9IC8+KX1cbiAgICAgICAgICA8L3VsPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cbiIsIi8qIFRoaXMgU291cmNlIENvZGUgRm9ybSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBvZiB0aGUgTW96aWxsYSBQdWJsaWNcbiAqIExpY2Vuc2UsIHYuIDIuMC4gSWYgYSBjb3B5IG9mIHRoZSBNUEwgd2FzIG5vdCBkaXN0cmlidXRlZCB3aXRoIHRoaXMgZmlsZSxcbiAqIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uICovXG5cbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuZXhwb3J0IGNsYXNzIFNlY3Rpb25UaXRsZSBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgaGVhZGVyOiB7IHRpdGxlLCBzdWJ0aXRsZSB9LFxuICAgIH0gPSB0aGlzLnByb3BzO1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImRzLXNlY3Rpb24tdGl0bGVcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0aXRsZVwiPnt0aXRsZX08L2Rpdj5cbiAgICAgICAge3N1YnRpdGxlID8gPGRpdiBjbGFzc05hbWU9XCJzdWJ0aXRsZVwiPntzdWJ0aXRsZX08L2Rpdj4gOiBudWxsfVxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuIiwiLyogVGhpcyBTb3VyY2UgQ29kZSBGb3JtIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBNb3ppbGxhIFB1YmxpY1xuICogTGljZW5zZSwgdi4gMi4wLiBJZiBhIGNvcHkgb2YgdGhlIE1QTCB3YXMgbm90IGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBmaWxlLFxuICogWW91IGNhbiBvYnRhaW4gb25lIGF0IGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wLy4gKi9cblxuZXhwb3J0IGNvbnN0IHNlbGVjdExheW91dFJlbmRlciA9IChzdGF0ZSwgcHJlZnMsIHJpY2tSb2xsQ2FjaGUpID0+IHtcbiAgY29uc3QgeyBsYXlvdXQsIGZlZWRzLCBzcG9jcyB9ID0gc3RhdGU7XG4gIGxldCBzcG9jSW5kZXggPSAwO1xuICBsZXQgYnVmZmVyUm9sbENhY2hlID0gW107XG4gIC8vIFJlY29yZHMgdGhlIGNob3NlbiBhbmQgdW5jaG9zZW4gc3BvY3MgYnkgdGhlIHByb2JhYmlsaXR5IHNlbGVjdGlvbi5cbiAgbGV0IGNob3NlblNwb2NzID0gbmV3IFNldCgpO1xuICBsZXQgdW5jaG9zZW5TcG9jcyA9IG5ldyBTZXQoKTtcblxuICBmdW5jdGlvbiByb2xsRm9yU3BvY3MoZGF0YSwgc3BvY3NDb25maWcpIHtcbiAgICBjb25zdCByZWNvbW1lbmRhdGlvbnMgPSBbLi4uZGF0YS5yZWNvbW1lbmRhdGlvbnNdO1xuICAgIGZvciAobGV0IHBvc2l0aW9uIG9mIHNwb2NzQ29uZmlnLnBvc2l0aW9ucykge1xuICAgICAgY29uc3Qgc3BvYyA9IHNwb2NzLmRhdGEuc3BvY3Nbc3BvY0luZGV4XTtcbiAgICAgIGlmICghc3BvYykge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgLy8gQ2FjaGUgcmFuZG9tIG51bWJlciBmb3IgYSBwb3NpdGlvblxuICAgICAgbGV0IHJpY2tSb2xsO1xuICAgICAgaWYgKCFyaWNrUm9sbENhY2hlLmxlbmd0aCkge1xuICAgICAgICByaWNrUm9sbCA9IE1hdGgucmFuZG9tKCk7XG4gICAgICAgIGJ1ZmZlclJvbGxDYWNoZS5wdXNoKHJpY2tSb2xsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJpY2tSb2xsID0gcmlja1JvbGxDYWNoZS5zaGlmdCgpO1xuICAgICAgICBidWZmZXJSb2xsQ2FjaGUucHVzaChyaWNrUm9sbCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChyaWNrUm9sbCA8PSBzcG9jc0NvbmZpZy5wcm9iYWJpbGl0eSkge1xuICAgICAgICBzcG9jSW5kZXgrKztcbiAgICAgICAgaWYgKCFzcG9jcy5ibG9ja2VkLmluY2x1ZGVzKHNwb2MudXJsKSkge1xuICAgICAgICAgIHJlY29tbWVuZGF0aW9ucy5zcGxpY2UocG9zaXRpb24uaW5kZXgsIDAsIHNwb2MpO1xuICAgICAgICAgIGNob3NlblNwb2NzLmFkZChzcG9jKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdW5jaG9zZW5TcG9jcy5hZGQoc3BvYyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLmRhdGEsXG4gICAgICByZWNvbW1lbmRhdGlvbnMsXG4gICAgfTtcbiAgfVxuXG4gIGNvbnN0IHBvc2l0aW9ucyA9IHt9O1xuICBjb25zdCBEU19DT01QT05FTlRTID0gW1xuICAgIFwiTWVzc2FnZVwiLFxuICAgIFwiU2VjdGlvblRpdGxlXCIsXG4gICAgXCJOYXZpZ2F0aW9uXCIsXG4gICAgXCJDYXJkR3JpZFwiLFxuICAgIFwiSGVyb1wiLFxuICAgIFwiSG9yaXpvbnRhbFJ1bGVcIixcbiAgICBcIkxpc3RcIixcbiAgXTtcblxuICBjb25zdCBmaWx0ZXJBcnJheSA9IFtdO1xuXG4gIGlmICghcHJlZnNbXCJmZWVkcy50b3BzaXRlc1wiXSkge1xuICAgIGZpbHRlckFycmF5LnB1c2goXCJUb3BTaXRlc1wiKTtcbiAgfVxuXG4gIGlmICghcHJlZnNbXCJmZWVkcy5zZWN0aW9uLnRvcHN0b3JpZXNcIl0pIHtcbiAgICBmaWx0ZXJBcnJheS5wdXNoKC4uLkRTX0NPTVBPTkVOVFMpO1xuICB9XG5cbiAgY29uc3QgcGxhY2Vob2xkZXJDb21wb25lbnQgPSBjb21wb25lbnQgPT4ge1xuICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICByZWNvbW1lbmRhdGlvbnM6IFtdLFxuICAgIH07XG5cbiAgICBsZXQgaXRlbXMgPSAwO1xuICAgIGlmIChjb21wb25lbnQucHJvcGVydGllcyAmJiBjb21wb25lbnQucHJvcGVydGllcy5pdGVtcykge1xuICAgICAgaXRlbXMgPSBjb21wb25lbnQucHJvcGVydGllcy5pdGVtcztcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVtczsgaSsrKSB7XG4gICAgICBkYXRhLnJlY29tbWVuZGF0aW9ucy5wdXNoKHsgcGxhY2Vob2xkZXI6IHRydWUgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgLi4uY29tcG9uZW50LCBkYXRhIH07XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlQ29tcG9uZW50ID0gY29tcG9uZW50ID0+IHtcbiAgICBwb3NpdGlvbnNbY29tcG9uZW50LnR5cGVdID0gcG9zaXRpb25zW2NvbXBvbmVudC50eXBlXSB8fCAwO1xuXG4gICAgY29uc3QgZmVlZCA9IGZlZWRzLmRhdGFbY29tcG9uZW50LmZlZWQudXJsXTtcbiAgICBsZXQgZGF0YSA9IHtcbiAgICAgIHJlY29tbWVuZGF0aW9uczogW10sXG4gICAgfTtcbiAgICBpZiAoZmVlZCAmJiBmZWVkLmRhdGEpIHtcbiAgICAgIGRhdGEgPSB7XG4gICAgICAgIC4uLmZlZWQuZGF0YSxcbiAgICAgICAgcmVjb21tZW5kYXRpb25zOiBbLi4uKGZlZWQuZGF0YS5yZWNvbW1lbmRhdGlvbnMgfHwgW10pXSxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKGNvbXBvbmVudCAmJiBjb21wb25lbnQucHJvcGVydGllcyAmJiBjb21wb25lbnQucHJvcGVydGllcy5vZmZzZXQpIHtcbiAgICAgIGRhdGEgPSB7XG4gICAgICAgIC4uLmRhdGEsXG4gICAgICAgIHJlY29tbWVuZGF0aW9uczogZGF0YS5yZWNvbW1lbmRhdGlvbnMuc2xpY2UoXG4gICAgICAgICAgY29tcG9uZW50LnByb3BlcnRpZXMub2Zmc2V0XG4gICAgICAgICksXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIEVuc3VyZSB3ZSBoYXZlIHJlY3MgYXZhaWxhYmxlIGZvciB0aGlzIGZlZWQuXG4gICAgY29uc3QgaGFzUmVjcyA9IGRhdGEgJiYgZGF0YS5yZWNvbW1lbmRhdGlvbnM7XG5cbiAgICAvLyBEbyB3ZSBldmVyIGV4cGVjdCB0byBwb3NzaWJseSBoYXZlIGEgc3BvYy5cbiAgICBpZiAoXG4gICAgICBoYXNSZWNzICYmXG4gICAgICBjb21wb25lbnQuc3BvY3MgJiZcbiAgICAgIGNvbXBvbmVudC5zcG9jcy5wb3NpdGlvbnMgJiZcbiAgICAgIGNvbXBvbmVudC5zcG9jcy5wb3NpdGlvbnMubGVuZ3RoXG4gICAgKSB7XG4gICAgICAvLyBXZSBleHBlY3QgYSBzcG9jLCBzcG9jcyBhcmUgbG9hZGVkLCBhbmQgdGhlIHNlcnZlciByZXR1cm5lZCBzcG9jcy5cbiAgICAgIGlmIChzcG9jcy5sb2FkZWQgJiYgc3BvY3MuZGF0YS5zcG9jcyAmJiBzcG9jcy5kYXRhLnNwb2NzLmxlbmd0aCkge1xuICAgICAgICBkYXRhID0gcm9sbEZvclNwb2NzKGRhdGEsIGNvbXBvbmVudC5zcG9jcyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IGl0ZW1zID0gMDtcbiAgICBpZiAoY29tcG9uZW50LnByb3BlcnRpZXMgJiYgY29tcG9uZW50LnByb3BlcnRpZXMuaXRlbXMpIHtcbiAgICAgIGl0ZW1zID0gTWF0aC5taW4oY29tcG9uZW50LnByb3BlcnRpZXMuaXRlbXMsIGRhdGEucmVjb21tZW5kYXRpb25zLmxlbmd0aCk7XG4gICAgfVxuXG4gICAgLy8gbG9vcCB0aHJvdWdoIGEgY29tcG9uZW50IGl0ZW1zXG4gICAgLy8gU3RvcmUgdGhlIGl0ZW1zIHBvc2l0aW9uIHNlcXVlbnRpYWxseSBmb3IgbXVsdGlwbGUgY29tcG9uZW50cyBvZiB0aGUgc2FtZSB0eXBlLlxuICAgIC8vIEV4YW1wbGU6IEEgc2Vjb25kIGNhcmQgZ3JpZCBzdGFydHMgcG9zIG9mZnNldCBmcm9tIHRoZSBsYXN0IGNhcmQgZ3JpZC5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGl0ZW1zOyBpKyspIHtcbiAgICAgIGRhdGEucmVjb21tZW5kYXRpb25zW2ldID0ge1xuICAgICAgICAuLi5kYXRhLnJlY29tbWVuZGF0aW9uc1tpXSxcbiAgICAgICAgcG9zOiBwb3NpdGlvbnNbY29tcG9uZW50LnR5cGVdKyssXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB7IC4uLmNvbXBvbmVudCwgZGF0YSB9O1xuICB9O1xuXG4gIGNvbnN0IHJlbmRlckxheW91dCA9ICgpID0+IHtcbiAgICBjb25zdCByZW5kZXJlZExheW91dEFycmF5ID0gW107XG4gICAgZm9yIChjb25zdCByb3cgb2YgbGF5b3V0LmZpbHRlcihcbiAgICAgIHIgPT4gci5jb21wb25lbnRzLmZpbHRlcihjID0+ICFmaWx0ZXJBcnJheS5pbmNsdWRlcyhjLnR5cGUpKS5sZW5ndGhcbiAgICApKSB7XG4gICAgICBsZXQgY29tcG9uZW50cyA9IFtdO1xuICAgICAgcmVuZGVyZWRMYXlvdXRBcnJheS5wdXNoKHtcbiAgICAgICAgLi4ucm93LFxuICAgICAgICBjb21wb25lbnRzLFxuICAgICAgfSk7XG4gICAgICBmb3IgKGNvbnN0IGNvbXBvbmVudCBvZiByb3cuY29tcG9uZW50cy5maWx0ZXIoXG4gICAgICAgIGMgPT4gIWZpbHRlckFycmF5LmluY2x1ZGVzKGMudHlwZSlcbiAgICAgICkpIHtcbiAgICAgICAgaWYgKGNvbXBvbmVudC5mZWVkKSB7XG4gICAgICAgICAgY29uc3Qgc3BvY3NDb25maWcgPSBjb21wb25lbnQuc3BvY3M7XG4gICAgICAgICAgLy8gQXJlIHdlIHN0aWxsIHdhaXRpbmcgb24gYSBmZWVkL3Nwb2NzLCByZW5kZXIgd2hhdCB3ZSBoYXZlLFxuICAgICAgICAgIC8vIGFkZCBhIHBsYWNlaG9sZGVyIGZvciB0aGlzIGNvbXBvbmVudCwgYW5kIGJhaWwgb3V0IGVhcmx5LlxuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICFmZWVkcy5kYXRhW2NvbXBvbmVudC5mZWVkLnVybF0gfHxcbiAgICAgICAgICAgIChzcG9jc0NvbmZpZyAmJlxuICAgICAgICAgICAgICBzcG9jc0NvbmZpZy5wb3NpdGlvbnMgJiZcbiAgICAgICAgICAgICAgc3BvY3NDb25maWcucG9zaXRpb25zLmxlbmd0aCAmJlxuICAgICAgICAgICAgICAhc3BvY3MubG9hZGVkKVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgY29tcG9uZW50cy5wdXNoKHBsYWNlaG9sZGVyQ29tcG9uZW50KGNvbXBvbmVudCkpO1xuICAgICAgICAgICAgcmV0dXJuIHJlbmRlcmVkTGF5b3V0QXJyYXk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbXBvbmVudHMucHVzaChoYW5kbGVDb21wb25lbnQoY29tcG9uZW50KSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29tcG9uZW50cy5wdXNoKGNvbXBvbmVudCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlbmRlcmVkTGF5b3V0QXJyYXk7XG4gIH07XG5cbiAgY29uc3QgbGF5b3V0UmVuZGVyID0gcmVuZGVyTGF5b3V0KGxheW91dCk7XG5cbiAgLy8gSWYgZW1wdHksIGZpbGwgcmlja1JvbGxDYWNoZSB3aXRoIHJhbmRvbSBwcm9iYWJpbGl0eSB2YWx1ZXMgZnJvbSBidWZmZXJSb2xsQ2FjaGVcbiAgaWYgKCFyaWNrUm9sbENhY2hlLmxlbmd0aCkge1xuICAgIHJpY2tSb2xsQ2FjaGUucHVzaCguLi5idWZmZXJSb2xsQ2FjaGUpO1xuICB9XG5cbiAgLy8gR2VuZXJhdGUgdGhlIHBheWxvYWQgZm9yIHRoZSBTUE9DUyBGaWxsIHBpbmcuIE5vdGUgdGhhdCBhIFNQT0MgY291bGQgYmUgcmVqZWN0ZWRcbiAgLy8gYnkgdGhlIGBwcm9iYWJpbGl0eV9zZWxlY3Rpb25gIGZpcnN0LCB0aGVuIGdldHMgY2hvc2VuIGZvciB0aGUgbmV4dCBwb3NpdGlvbi4gRm9yXG4gIC8vIGFsbCBvdGhlciBTUE9DUyB0aGF0IG5ldmVyIHdlbnQgdGhyb3VnaCB0aGUgcHJvYmFiaWxpc3RpYyBzZWxlY3Rpb24sIGl0cyByZWFzb24gd2lsbFxuICAvLyBiZSBcIm91dF9vZl9wb3NpdGlvblwiLlxuICBsZXQgc3BvY3NGaWxsID0gW107XG4gIGlmIChzcG9jcy5sb2FkZWQgJiYgZmVlZHMubG9hZGVkICYmIHNwb2NzLmRhdGEuc3BvY3MpIHtcbiAgICBjb25zdCBjaG9zZW5TcG9jc0ZpbGwgPSBbLi4uY2hvc2VuU3BvY3NdLm1hcChzcG9jID0+ICh7XG4gICAgICBpZDogc3BvYy5pZCxcbiAgICAgIHJlYXNvbjogXCJuL2FcIixcbiAgICAgIGRpc3BsYXllZDogMSxcbiAgICAgIGZ1bGxfcmVjYWxjOiAwLFxuICAgIH0pKTtcbiAgICBjb25zdCB1bmNob3NlblNwb2NzRmlsbCA9IFsuLi51bmNob3NlblNwb2NzXVxuICAgICAgLmZpbHRlcihzcG9jID0+ICFjaG9zZW5TcG9jcy5oYXMoc3BvYykpXG4gICAgICAubWFwKHNwb2MgPT4gKHtcbiAgICAgICAgaWQ6IHNwb2MuaWQsXG4gICAgICAgIHJlYXNvbjogXCJwcm9iYWJpbGl0eV9zZWxlY3Rpb25cIixcbiAgICAgICAgZGlzcGxheWVkOiAwLFxuICAgICAgICBmdWxsX3JlY2FsYzogMCxcbiAgICAgIH0pKTtcbiAgICBjb25zdCBvdXRPZlBvc2l0aW9uU3BvY3NGaWxsID0gc3BvY3MuZGF0YS5zcG9jc1xuICAgICAgLnNsaWNlKHNwb2NJbmRleClcbiAgICAgIC5maWx0ZXIoc3BvYyA9PiAhdW5jaG9zZW5TcG9jcy5oYXMoc3BvYykpXG4gICAgICAubWFwKHNwb2MgPT4gKHtcbiAgICAgICAgaWQ6IHNwb2MuaWQsXG4gICAgICAgIHJlYXNvbjogXCJvdXRfb2ZfcG9zaXRpb25cIixcbiAgICAgICAgZGlzcGxheWVkOiAwLFxuICAgICAgICBmdWxsX3JlY2FsYzogMCxcbiAgICAgIH0pKTtcblxuICAgIHNwb2NzRmlsbCA9IFtcbiAgICAgIC4uLmNob3NlblNwb2NzRmlsbCxcbiAgICAgIC4uLnVuY2hvc2VuU3BvY3NGaWxsLFxuICAgICAgLi4ub3V0T2ZQb3NpdGlvblNwb2NzRmlsbCxcbiAgICBdO1xuICB9XG5cbiAgcmV0dXJuIHsgc3BvY3NGaWxsLCBsYXlvdXRSZW5kZXIgfTtcbn07XG4iLCIvKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIGZpbGUsXG4gKiBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLiAqL1xuXG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XG5pbXBvcnQgeyBUb3BTaXRlcyBhcyBPbGRUb3BTaXRlcyB9IGZyb20gXCJjb250ZW50LXNyYy9jb21wb25lbnRzL1RvcFNpdGVzL1RvcFNpdGVzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbmV4cG9ydCBjbGFzcyBfVG9wU2l0ZXMgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IGhlYWRlciA9IHRoaXMucHJvcHMuaGVhZGVyIHx8IHt9O1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImRzLXRvcC1zaXRlc1wiPlxuICAgICAgICA8T2xkVG9wU2l0ZXMgaXNGaXhlZD17dHJ1ZX0gdGl0bGU9e2hlYWRlci50aXRsZX0gLz5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IFRvcFNpdGVzID0gY29ubmVjdChzdGF0ZSA9PiAoeyBUb3BTaXRlczogc3RhdGUuVG9wU2l0ZXMgfSkpKFxuICBfVG9wU2l0ZXNcbik7XG4iLCIvKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIGZpbGUsXG4gKiBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLiAqL1xuXG5pbXBvcnQgeyBhY3Rpb25DcmVhdG9ycyBhcyBhYyB9IGZyb20gXCJjb21tb24vQWN0aW9ucy5qc21cIjtcbmltcG9ydCB7IENhcmRHcmlkIH0gZnJvbSBcImNvbnRlbnQtc3JjL2NvbXBvbmVudHMvRGlzY292ZXJ5U3RyZWFtQ29tcG9uZW50cy9DYXJkR3JpZC9DYXJkR3JpZFwiO1xuaW1wb3J0IHsgQ29sbGFwc2libGVTZWN0aW9uIH0gZnJvbSBcImNvbnRlbnQtc3JjL2NvbXBvbmVudHMvQ29sbGFwc2libGVTZWN0aW9uL0NvbGxhcHNpYmxlU2VjdGlvblwiO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuaW1wb3J0IHsgRFNNZXNzYWdlIH0gZnJvbSBcImNvbnRlbnQtc3JjL2NvbXBvbmVudHMvRGlzY292ZXJ5U3RyZWFtQ29tcG9uZW50cy9EU01lc3NhZ2UvRFNNZXNzYWdlXCI7XG5pbXBvcnQgeyBIZXJvIH0gZnJvbSBcImNvbnRlbnQtc3JjL2NvbXBvbmVudHMvRGlzY292ZXJ5U3RyZWFtQ29tcG9uZW50cy9IZXJvL0hlcm9cIjtcbmltcG9ydCB7IEhpZ2hsaWdodHMgfSBmcm9tIFwiY29udGVudC1zcmMvY29tcG9uZW50cy9EaXNjb3ZlcnlTdHJlYW1Db21wb25lbnRzL0hpZ2hsaWdodHMvSGlnaGxpZ2h0c1wiO1xuaW1wb3J0IHsgSG9yaXpvbnRhbFJ1bGUgfSBmcm9tIFwiY29udGVudC1zcmMvY29tcG9uZW50cy9EaXNjb3ZlcnlTdHJlYW1Db21wb25lbnRzL0hvcml6b250YWxSdWxlL0hvcml6b250YWxSdWxlXCI7XG5pbXBvcnQgeyBMaXN0IH0gZnJvbSBcImNvbnRlbnQtc3JjL2NvbXBvbmVudHMvRGlzY292ZXJ5U3RyZWFtQ29tcG9uZW50cy9MaXN0L0xpc3RcIjtcbmltcG9ydCB7IE5hdmlnYXRpb24gfSBmcm9tIFwiY29udGVudC1zcmMvY29tcG9uZW50cy9EaXNjb3ZlcnlTdHJlYW1Db21wb25lbnRzL05hdmlnYXRpb24vTmF2aWdhdGlvblwiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgU2VjdGlvblRpdGxlIH0gZnJvbSBcImNvbnRlbnQtc3JjL2NvbXBvbmVudHMvRGlzY292ZXJ5U3RyZWFtQ29tcG9uZW50cy9TZWN0aW9uVGl0bGUvU2VjdGlvblRpdGxlXCI7XG5pbXBvcnQgeyBzZWxlY3RMYXlvdXRSZW5kZXIgfSBmcm9tIFwiY29udGVudC1zcmMvbGliL3NlbGVjdExheW91dFJlbmRlclwiO1xuaW1wb3J0IHsgVG9wU2l0ZXMgfSBmcm9tIFwiY29udGVudC1zcmMvY29tcG9uZW50cy9EaXNjb3ZlcnlTdHJlYW1Db21wb25lbnRzL1RvcFNpdGVzL1RvcFNpdGVzXCI7XG5cbmNvbnN0IEFMTE9XRURfQ1NTX1VSTF9QUkVGSVhFUyA9IFtcbiAgXCJjaHJvbWU6Ly9cIixcbiAgXCJyZXNvdXJjZTovL1wiLFxuICBcImh0dHBzOi8vaW1nLWdldHBvY2tldC5jZG4ubW96aWxsYS5uZXQvXCIsXG5dO1xuY29uc3QgRFVNTVlfQ1NTX1NFTEVDVE9SID0gXCJEVU1NWSNDU1MuU0VMRUNUT1JcIjtcbmxldCByaWNrUm9sbENhY2hlID0gW107IC8vIENhY2hlIG9mIHJhbmRvbSBwcm9iYWJpbGl0eSB2YWx1ZXMgZm9yIGEgc3BvYyBwb3NpdGlvblxuXG4vKipcbiAqIFZhbGlkYXRlIGEgQ1NTIGRlY2xhcmF0aW9uLiBUaGUgdmFsdWVzIGFyZSBhc3N1bWVkIHRvIGJlIG5vcm1hbGl6ZWQgYnkgQ1NTT00uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0FsbG93ZWRDU1MocHJvcGVydHksIHZhbHVlKSB7XG4gIC8vIEJ1ZyAxNDU0ODIzOiBJTlRFUk5BTCBwcm9wZXJ0aWVzLCBlLmcuLCAtbW96LWNvbnRleHQtcHJvcGVydGllcywgYXJlXG4gIC8vIGV4cG9zZWQgYnV0IHRoZWlyIHZhbHVlcyBhcmVuJ3QgcmVzdWx0aW5nIGluIGdldHRpbmcgbm90aGluZy4gRm9ydHVuYXRlbHksXG4gIC8vIHdlIGRvbid0IGNhcmUgYWJvdXQgdmFsaWRhdGluZyB0aGUgdmFsdWVzIG9mIHRoZSBjdXJyZW50IHNldCBvZiBwcm9wZXJ0aWVzLlxuICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLy8gTWFrZSBzdXJlIGFsbCB1cmxzIGFyZSBvZiB0aGUgYWxsb3dlZCBwcm90b2NvbHMvcHJlZml4ZXNcbiAgY29uc3QgdXJscyA9IHZhbHVlLm1hdGNoKC91cmxcXChcIlteXCJdK1wiXFwpL2cpO1xuICByZXR1cm4gKFxuICAgICF1cmxzIHx8XG4gICAgdXJscy5ldmVyeSh1cmwgPT5cbiAgICAgIEFMTE9XRURfQ1NTX1VSTF9QUkVGSVhFUy5zb21lKHByZWZpeCA9PiB1cmwuc2xpY2UoNSkuc3RhcnRzV2l0aChwcmVmaXgpKVxuICAgIClcbiAgKTtcbn1cblxuZXhwb3J0IGNsYXNzIF9EaXNjb3ZlcnlTdHJlYW1CYXNlIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMub25TdHlsZU1vdW50ID0gdGhpcy5vblN0eWxlTW91bnQuYmluZCh0aGlzKTtcbiAgfVxuXG4gIG9uU3R5bGVNb3VudChzdHlsZSkge1xuICAgIC8vIFVubW91bnRpbmcgc3R5bGUgZ2V0cyByaWQgb2Ygb2xkIHN0eWxlcywgc28gbm90aGluZyBlbHNlIHRvIGRvXG4gICAgaWYgKCFzdHlsZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHsgc2hlZXQgfSA9IHN0eWxlO1xuICAgIGNvbnN0IHN0eWxlcyA9IEpTT04ucGFyc2Uoc3R5bGUuZGF0YXNldC5zdHlsZXMpO1xuICAgIHN0eWxlcy5mb3JFYWNoKChyb3csIHJvd0luZGV4KSA9PiB7XG4gICAgICByb3cuZm9yRWFjaCgoY29tcG9uZW50LCBjb21wb25lbnRJbmRleCkgPT4ge1xuICAgICAgICAvLyBOb3RoaW5nIHRvIGRvIHdpdGhvdXQgb3B0aW9uYWwgc3R5bGVzIG92ZXJyaWRlc1xuICAgICAgICBpZiAoIWNvbXBvbmVudCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIE9iamVjdC5lbnRyaWVzKGNvbXBvbmVudCkuZm9yRWFjaCgoW3NlbGVjdG9ycywgZGVjbGFyYXRpb25zXSkgPT4ge1xuICAgICAgICAgIC8vIFN0YXJ0IHdpdGggYSBkdW1teSBydWxlIHRvIHZhbGlkYXRlIGRlY2xhcmF0aW9ucyBhbmQgc2VsZWN0b3JzXG4gICAgICAgICAgc2hlZXQuaW5zZXJ0UnVsZShgJHtEVU1NWV9DU1NfU0VMRUNUT1J9IHt9YCk7XG4gICAgICAgICAgY29uc3QgW3J1bGVdID0gc2hlZXQuY3NzUnVsZXM7XG5cbiAgICAgICAgICAvLyBWYWxpZGF0ZSBkZWNsYXJhdGlvbnMgYW5kIHJlbW92ZSBhbnkgb2ZmZW5kZXJzLiBDU1NPTSBzaWxlbnRseVxuICAgICAgICAgIC8vIGRpc2NhcmRzIGludmFsaWQgZW50cmllcywgc28gaGVyZSB3ZSBhcHBseSBleHRyYSByZXN0cmljdGlvbnMuXG4gICAgICAgICAgcnVsZS5zdHlsZSA9IGRlY2xhcmF0aW9ucztcbiAgICAgICAgICBbLi4ucnVsZS5zdHlsZV0uZm9yRWFjaChwcm9wZXJ0eSA9PiB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHJ1bGUuc3R5bGVbcHJvcGVydHldO1xuICAgICAgICAgICAgaWYgKCFpc0FsbG93ZWRDU1MocHJvcGVydHksIHZhbHVlKSkge1xuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGBCYWQgQ1NTIGRlY2xhcmF0aW9uICR7cHJvcGVydHl9OiAke3ZhbHVlfWApOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgICAgICAgcnVsZS5zdHlsZS5yZW1vdmVQcm9wZXJ0eShwcm9wZXJ0eSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICAvLyBTZXQgdGhlIGFjdHVhbCBkZXNpcmVkIHNlbGVjdG9ycyBzY29wZWQgdG8gdGhlIGNvbXBvbmVudFxuICAgICAgICAgIGNvbnN0IHByZWZpeCA9IGAuZHMtbGF5b3V0ID4gLmRzLWNvbHVtbjpudGgtY2hpbGQoJHtyb3dJbmRleCArXG4gICAgICAgICAgICAxfSkgLmRzLWNvbHVtbi1ncmlkID4gOm50aC1jaGlsZCgke2NvbXBvbmVudEluZGV4ICsgMX0pYDtcbiAgICAgICAgICAvLyBOQjogU3BsaXR0aW5nIG9uIFwiLFwiIGRvZXNuJ3Qgd29yayB3aXRoIHN0cmluZ3Mgd2l0aCBjb21tYXMsIGJ1dFxuICAgICAgICAgIC8vIHdlJ3JlIG9rYXkgd2l0aCBub3Qgc3VwcG9ydGluZyB0aG9zZSBzZWxlY3RvcnNcbiAgICAgICAgICBydWxlLnNlbGVjdG9yVGV4dCA9IHNlbGVjdG9yc1xuICAgICAgICAgICAgLnNwbGl0KFwiLFwiKVxuICAgICAgICAgICAgLm1hcChcbiAgICAgICAgICAgICAgc2VsZWN0b3IgPT5cbiAgICAgICAgICAgICAgICBwcmVmaXggK1xuICAgICAgICAgICAgICAgIC8vIEFzc3VtZSA6cHNldWRvLWNsYXNzZXMgYXJlIGZvciBjb21wb25lbnQgaW5zdGVhZCBvZiBkZXNjZW5kYW50XG4gICAgICAgICAgICAgICAgKHNlbGVjdG9yWzBdID09PSBcIjpcIiA/IFwiXCIgOiBcIiBcIikgK1xuICAgICAgICAgICAgICAgIHNlbGVjdG9yXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAuam9pbihcIixcIik7XG5cbiAgICAgICAgICAvLyBDU1NPTSBzaWxlbnRseSBpZ25vcmVzIGJhZCBzZWxlY3RvcnMsIHNvIHdlJ2xsIGJlIG5vaXN5IGluc3RlYWRcbiAgICAgICAgICBpZiAocnVsZS5zZWxlY3RvclRleHQgPT09IERVTU1ZX0NTU19TRUxFQ1RPUikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgQmFkIENTUyBzZWxlY3RvciAke3NlbGVjdG9yc31gKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgcmVuZGVyQ29tcG9uZW50KGNvbXBvbmVudCwgZW1iZWRXaWR0aCkge1xuICAgIHN3aXRjaCAoY29tcG9uZW50LnR5cGUpIHtcbiAgICAgIGNhc2UgXCJIaWdobGlnaHRzXCI6XG4gICAgICAgIHJldHVybiA8SGlnaGxpZ2h0cyAvPjtcbiAgICAgIGNhc2UgXCJUb3BTaXRlc1wiOlxuICAgICAgICByZXR1cm4gPFRvcFNpdGVzIGhlYWRlcj17Y29tcG9uZW50LmhlYWRlcn0gLz47XG4gICAgICBjYXNlIFwiTWVzc2FnZVwiOlxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIDxEU01lc3NhZ2VcbiAgICAgICAgICAgIHRpdGxlPXtjb21wb25lbnQuaGVhZGVyICYmIGNvbXBvbmVudC5oZWFkZXIudGl0bGV9XG4gICAgICAgICAgICBzdWJ0aXRsZT17Y29tcG9uZW50LmhlYWRlciAmJiBjb21wb25lbnQuaGVhZGVyLnN1YnRpdGxlfVxuICAgICAgICAgICAgbGlua190ZXh0PXtjb21wb25lbnQuaGVhZGVyICYmIGNvbXBvbmVudC5oZWFkZXIubGlua190ZXh0fVxuICAgICAgICAgICAgbGlua191cmw9e2NvbXBvbmVudC5oZWFkZXIgJiYgY29tcG9uZW50LmhlYWRlci5saW5rX3VybH1cbiAgICAgICAgICAgIGljb249e2NvbXBvbmVudC5oZWFkZXIgJiYgY29tcG9uZW50LmhlYWRlci5pY29ufVxuICAgICAgICAgIC8+XG4gICAgICAgICk7XG4gICAgICBjYXNlIFwiU2VjdGlvblRpdGxlXCI6XG4gICAgICAgIHJldHVybiA8U2VjdGlvblRpdGxlIGhlYWRlcj17Y29tcG9uZW50LmhlYWRlcn0gLz47XG4gICAgICBjYXNlIFwiTmF2aWdhdGlvblwiOlxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIDxOYXZpZ2F0aW9uXG4gICAgICAgICAgICBsaW5rcz17Y29tcG9uZW50LnByb3BlcnRpZXMubGlua3N9XG4gICAgICAgICAgICBhbGlnbm1lbnQ9e2NvbXBvbmVudC5wcm9wZXJ0aWVzLmFsaWdubWVudH1cbiAgICAgICAgICAgIGhlYWRlcj17Y29tcG9uZW50LmhlYWRlcn1cbiAgICAgICAgICAvPlxuICAgICAgICApO1xuICAgICAgY2FzZSBcIkNhcmRHcmlkXCI6XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgPENhcmRHcmlkXG4gICAgICAgICAgICB0aXRsZT17Y29tcG9uZW50LmhlYWRlciAmJiBjb21wb25lbnQuaGVhZGVyLnRpdGxlfVxuICAgICAgICAgICAgZGF0YT17Y29tcG9uZW50LmRhdGF9XG4gICAgICAgICAgICBmZWVkPXtjb21wb25lbnQuZmVlZH1cbiAgICAgICAgICAgIGJvcmRlcj17Y29tcG9uZW50LnByb3BlcnRpZXMuYm9yZGVyfVxuICAgICAgICAgICAgdHlwZT17Y29tcG9uZW50LnR5cGV9XG4gICAgICAgICAgICBkaXNwYXRjaD17dGhpcy5wcm9wcy5kaXNwYXRjaH1cbiAgICAgICAgICAgIGl0ZW1zPXtjb21wb25lbnQucHJvcGVydGllcy5pdGVtc31cbiAgICAgICAgICAvPlxuICAgICAgICApO1xuICAgICAgY2FzZSBcIkhlcm9cIjpcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8SGVyb1xuICAgICAgICAgICAgc3ViQ29tcG9uZW50VHlwZT17ZW1iZWRXaWR0aCA+PSA5ID8gYGNhcmRzYCA6IGBsaXN0YH1cbiAgICAgICAgICAgIGZlZWQ9e2NvbXBvbmVudC5mZWVkfVxuICAgICAgICAgICAgdGl0bGU9e2NvbXBvbmVudC5oZWFkZXIgJiYgY29tcG9uZW50LmhlYWRlci50aXRsZX1cbiAgICAgICAgICAgIGRhdGE9e2NvbXBvbmVudC5kYXRhfVxuICAgICAgICAgICAgYm9yZGVyPXtjb21wb25lbnQucHJvcGVydGllcy5ib3JkZXJ9XG4gICAgICAgICAgICB0eXBlPXtjb21wb25lbnQudHlwZX1cbiAgICAgICAgICAgIGRpc3BhdGNoPXt0aGlzLnByb3BzLmRpc3BhdGNofVxuICAgICAgICAgICAgaXRlbXM9e2NvbXBvbmVudC5wcm9wZXJ0aWVzLml0ZW1zfVxuICAgICAgICAgIC8+XG4gICAgICAgICk7XG4gICAgICBjYXNlIFwiSG9yaXpvbnRhbFJ1bGVcIjpcbiAgICAgICAgcmV0dXJuIDxIb3Jpem9udGFsUnVsZSAvPjtcbiAgICAgIGNhc2UgXCJMaXN0XCI6XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgPExpc3RcbiAgICAgICAgICAgIGRhdGE9e2NvbXBvbmVudC5kYXRhfVxuICAgICAgICAgICAgZmVlZD17Y29tcG9uZW50LmZlZWR9XG4gICAgICAgICAgICBmdWxsV2lkdGg9e2NvbXBvbmVudC5wcm9wZXJ0aWVzLmZ1bGxfd2lkdGh9XG4gICAgICAgICAgICBoYXNCb3JkZXJzPXtjb21wb25lbnQucHJvcGVydGllcy5ib3JkZXIgPT09IFwiYm9yZGVyXCJ9XG4gICAgICAgICAgICBoYXNJbWFnZXM9e2NvbXBvbmVudC5wcm9wZXJ0aWVzLmhhc19pbWFnZXN9XG4gICAgICAgICAgICBoYXNOdW1iZXJzPXtjb21wb25lbnQucHJvcGVydGllcy5oYXNfbnVtYmVyc31cbiAgICAgICAgICAgIGl0ZW1zPXtjb21wb25lbnQucHJvcGVydGllcy5pdGVtc31cbiAgICAgICAgICAgIHR5cGU9e2NvbXBvbmVudC50eXBlfVxuICAgICAgICAgICAgaGVhZGVyPXtjb21wb25lbnQuaGVhZGVyfVxuICAgICAgICAgIC8+XG4gICAgICAgICk7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gPGRpdj57Y29tcG9uZW50LnR5cGV9PC9kaXY+O1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlclN0eWxlcyhzdHlsZXMpIHtcbiAgICAvLyBVc2UganNvbiBzdHJpbmcgYXMgYm90aCB0aGUga2V5IGFuZCBzdHlsZXMgdG8gcmVuZGVyIHNvIFJlYWN0IGtub3dzIHdoZW5cbiAgICAvLyB0byB1bm1vdW50IGFuZCBtb3VudCBhIG5ldyBpbnN0YW5jZSBmb3IgbmV3IHN0eWxlcy5cbiAgICBjb25zdCBqc29uID0gSlNPTi5zdHJpbmdpZnkoc3R5bGVzKTtcbiAgICByZXR1cm4gPHN0eWxlIGtleT17anNvbn0gZGF0YS1zdHlsZXM9e2pzb259IHJlZj17dGhpcy5vblN0eWxlTW91bnR9IC8+O1xuICB9XG5cbiAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhvbGRQcm9wcykge1xuICAgIGlmICh0aGlzLnByb3BzLkRpc2NvdmVyeVN0cmVhbS5sYXlvdXQgIT09IG9sZFByb3BzLkRpc2NvdmVyeVN0cmVhbS5sYXlvdXQpIHtcbiAgICAgIHJpY2tSb2xsQ2FjaGUgPSBbXTtcbiAgICB9XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgLy8gU2VsZWN0IGxheW91dCByZW5kZXIgZGF0YSBieSBhZGRpbmcgc3BvY3MgYW5kIHBvc2l0aW9uIHRvIHJlY29tbWVuZGF0aW9uc1xuICAgIGNvbnN0IHsgbGF5b3V0UmVuZGVyLCBzcG9jc0ZpbGwgfSA9IHNlbGVjdExheW91dFJlbmRlcihcbiAgICAgIHRoaXMucHJvcHMuRGlzY292ZXJ5U3RyZWFtLFxuICAgICAgdGhpcy5wcm9wcy5QcmVmcy52YWx1ZXMsXG4gICAgICByaWNrUm9sbENhY2hlXG4gICAgKTtcbiAgICBjb25zdCB7IGNvbmZpZywgc3BvY3MsIGZlZWRzIH0gPSB0aGlzLnByb3BzLkRpc2NvdmVyeVN0cmVhbTtcblxuICAgIC8vIFNlbmQgU1BPQ1MgRmlsbCBpZiBhbnkuIE5vdGUgdGhhdCBpdCBzaG91bGQgbm90IHNlbmQgaXQgYWdhaW4gaWYgdGhlIHNhbWVcbiAgICAvLyBwYWdlIGdldHMgcmUtcmVuZGVyZWQgYnkgc3RhdGUgY2hhbmdlcy5cbiAgICBpZiAoXG4gICAgICBzcG9jcy5sb2FkZWQgJiZcbiAgICAgIGZlZWRzLmxvYWRlZCAmJlxuICAgICAgc3BvY3NGaWxsLmxlbmd0aCAmJlxuICAgICAgIXRoaXMuX3Nwb2NzRmlsbFNlbnRcbiAgICApIHtcbiAgICAgIHRoaXMucHJvcHMuZGlzcGF0Y2goXG4gICAgICAgIGFjLkRpc2NvdmVyeVN0cmVhbVNwb2NzRmlsbCh7IHNwb2NfZmlsbHM6IHNwb2NzRmlsbCB9KVxuICAgICAgKTtcbiAgICAgIHRoaXMuX3Nwb2NzRmlsbFNlbnQgPSB0cnVlO1xuICAgIH1cblxuICAgIC8vIEFsbG93IHJlbmRlcmluZyB3aXRob3V0IGV4dHJhY3Rpbmcgc3BlY2lhbCBjb21wb25lbnRzXG4gICAgaWYgKCFjb25maWcuY29sbGFwc2libGUpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlckxheW91dChsYXlvdXRSZW5kZXIpO1xuICAgIH1cblxuICAgIC8vIEZpbmQgdGhlIGZpcnN0IGNvbXBvbmVudCBvZiBhIHR5cGUgYW5kIHJlbW92ZSBpdCBmcm9tIGxheW91dFxuICAgIGNvbnN0IGV4dHJhY3RDb21wb25lbnQgPSB0eXBlID0+IHtcbiAgICAgIGZvciAoY29uc3QgW3Jvd0luZGV4LCByb3ddIG9mIE9iamVjdC5lbnRyaWVzKGxheW91dFJlbmRlcikpIHtcbiAgICAgICAgZm9yIChjb25zdCBbaW5kZXgsIGNvbXBvbmVudF0gb2YgT2JqZWN0LmVudHJpZXMocm93LmNvbXBvbmVudHMpKSB7XG4gICAgICAgICAgaWYgKGNvbXBvbmVudC50eXBlID09PSB0eXBlKSB7XG4gICAgICAgICAgICAvLyBSZW1vdmUgdGhlIHJvdyBpZiBpdCB3YXMgdGhlIG9ubHkgY29tcG9uZW50IG9yIHRoZSBzaW5nbGUgaXRlbVxuICAgICAgICAgICAgaWYgKHJvdy5jb21wb25lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICBsYXlvdXRSZW5kZXIuc3BsaWNlKHJvd0luZGV4LCAxKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJvdy5jb21wb25lbnRzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY29tcG9uZW50O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcblxuICAgIC8vIEdldCBcInRvcHN0b3JpZXNcIiBTZWN0aW9uIHN0YXRlIGZvciBkZWZhdWx0IHZhbHVlc1xuICAgIGNvbnN0IHRvcFN0b3JpZXMgPSB0aGlzLnByb3BzLlNlY3Rpb25zLmZpbmQocyA9PiBzLmlkID09PSBcInRvcHN0b3JpZXNcIik7XG5cbiAgICBpZiAoIXRvcFN0b3JpZXMpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIC8vIEV4dHJhY3QgVG9wU2l0ZXMgdG8gcmVuZGVyIGJlZm9yZSB0aGUgcmVzdCBhbmQgTWVzc2FnZSB0byB1c2UgZm9yIGhlYWRlclxuICAgIGNvbnN0IHRvcFNpdGVzID0gZXh0cmFjdENvbXBvbmVudChcIlRvcFNpdGVzXCIpO1xuICAgIGNvbnN0IG1lc3NhZ2UgPSBleHRyYWN0Q29tcG9uZW50KFwiTWVzc2FnZVwiKSB8fCB7XG4gICAgICBoZWFkZXI6IHtcbiAgICAgICAgbGlua190ZXh0OiB0b3BTdG9yaWVzLmxlYXJuTW9yZS5saW5rLm1lc3NhZ2UsXG4gICAgICAgIGxpbmtfdXJsOiB0b3BTdG9yaWVzLmxlYXJuTW9yZS5saW5rLmhyZWYsXG4gICAgICAgIHRpdGxlOiB0b3BTdG9yaWVzLnRpdGxlLFxuICAgICAgfSxcbiAgICB9O1xuXG4gICAgLy8gUmVuZGVyIGEgRFMtc3R5bGUgVG9wU2l0ZXMgdGhlbiB0aGUgcmVzdCBpZiBhbnkgaW4gYSBjb2xsYXBzaWJsZSBzZWN0aW9uXG4gICAgcmV0dXJuIChcbiAgICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgICAge3RvcFNpdGVzICYmXG4gICAgICAgICAgdGhpcy5yZW5kZXJMYXlvdXQoW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICB3aWR0aDogMTIsXG4gICAgICAgICAgICAgIGNvbXBvbmVudHM6IFt0b3BTaXRlc10sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0pfVxuICAgICAgICB7bGF5b3V0UmVuZGVyLmxlbmd0aCA+IDAgJiYgKFxuICAgICAgICAgIDxDb2xsYXBzaWJsZVNlY3Rpb25cbiAgICAgICAgICAgIGNsYXNzTmFtZT1cImRzLWxheW91dFwiXG4gICAgICAgICAgICBjb2xsYXBzZWQ9e3RvcFN0b3JpZXMucHJlZi5jb2xsYXBzZWR9XG4gICAgICAgICAgICBkaXNwYXRjaD17dGhpcy5wcm9wcy5kaXNwYXRjaH1cbiAgICAgICAgICAgIGljb249e3RvcFN0b3JpZXMuaWNvbn1cbiAgICAgICAgICAgIGlkPXt0b3BTdG9yaWVzLmlkfVxuICAgICAgICAgICAgaXNGaXhlZD17dHJ1ZX1cbiAgICAgICAgICAgIGxlYXJuTW9yZT17e1xuICAgICAgICAgICAgICBsaW5rOiB7XG4gICAgICAgICAgICAgICAgaHJlZjogbWVzc2FnZS5oZWFkZXIubGlua191cmwsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogbWVzc2FnZS5oZWFkZXIubGlua190ZXh0LFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIHByaXZhY3lOb3RpY2VVUkw9e3RvcFN0b3JpZXMucHJpdmFjeU5vdGljZVVSTH1cbiAgICAgICAgICAgIHNob3dQcmVmTmFtZT17dG9wU3Rvcmllcy5wcmVmLmZlZWR9XG4gICAgICAgICAgICB0aXRsZT17bWVzc2FnZS5oZWFkZXIudGl0bGV9XG4gICAgICAgICAgPlxuICAgICAgICAgICAge3RoaXMucmVuZGVyTGF5b3V0KGxheW91dFJlbmRlcil9XG4gICAgICAgICAgPC9Db2xsYXBzaWJsZVNlY3Rpb24+XG4gICAgICAgICl9XG4gICAgICAgIHt0aGlzLnJlbmRlckxheW91dChbXG4gICAgICAgICAge1xuICAgICAgICAgICAgd2lkdGg6IDEyLFxuICAgICAgICAgICAgY29tcG9uZW50czogW3sgdHlwZTogXCJIaWdobGlnaHRzXCIgfV0sXG4gICAgICAgICAgfSxcbiAgICAgICAgXSl9XG4gICAgICA8L1JlYWN0LkZyYWdtZW50PlxuICAgICk7XG4gIH1cblxuICByZW5kZXJMYXlvdXQobGF5b3V0UmVuZGVyKSB7XG4gICAgY29uc3Qgc3R5bGVzID0gW107XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZGlzY292ZXJ5LXN0cmVhbSBkcy1sYXlvdXRcIj5cbiAgICAgICAge2xheW91dFJlbmRlci5tYXAoKHJvdywgcm93SW5kZXgpID0+IChcbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBrZXk9e2Byb3ctJHtyb3dJbmRleH1gfVxuICAgICAgICAgICAgY2xhc3NOYW1lPXtgZHMtY29sdW1uIGRzLWNvbHVtbi0ke3Jvdy53aWR0aH1gfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZHMtY29sdW1uLWdyaWRcIj5cbiAgICAgICAgICAgICAge3Jvdy5jb21wb25lbnRzLm1hcCgoY29tcG9uZW50LCBjb21wb25lbnRJbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghY29tcG9uZW50KSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc3R5bGVzW3Jvd0luZGV4XSA9IFtcbiAgICAgICAgICAgICAgICAgIC4uLihzdHlsZXNbcm93SW5kZXhdIHx8IFtdKSxcbiAgICAgICAgICAgICAgICAgIGNvbXBvbmVudC5zdHlsZXMsXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgPGRpdiBrZXk9e2Bjb21wb25lbnQtJHtjb21wb25lbnRJbmRleH1gfT5cbiAgICAgICAgICAgICAgICAgICAge3RoaXMucmVuZGVyQ29tcG9uZW50KGNvbXBvbmVudCwgcm93LndpZHRoKX1cbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICkpfVxuICAgICAgICB7dGhpcy5yZW5kZXJTdHlsZXMoc3R5bGVzKX1cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IERpc2NvdmVyeVN0cmVhbUJhc2UgPSBjb25uZWN0KHN0YXRlID0+ICh7XG4gIERpc2NvdmVyeVN0cmVhbTogc3RhdGUuRGlzY292ZXJ5U3RyZWFtLFxuICBQcmVmczogc3RhdGUuUHJlZnMsXG4gIFNlY3Rpb25zOiBzdGF0ZS5TZWN0aW9ucyxcbn0pKShfRGlzY292ZXJ5U3RyZWFtQmFzZSk7XG4iXSwic291cmNlUm9vdCI6IiJ9